<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "http://apache.org/forrest/dtd/document-v12.dtd">
<document> 
  <header> 
    <title>Developer Guidelines</title> 
  </header> 
  <body>
    <p>
      This document is targeted at developers, that are persons
      who want to contribute to the Community Z Tools project.
    </p>

    <section>
      <title>General remarks</title>
      <p>
        Make yourself familiar with the project by following the
        announcements and discussions on
        <link href="site:czt.devel">czt-devel</link>.
      </p>
      <p>
        When you want to contribute code, it is best to start from the sources
        from CVS.  See the
        <link href="site:cztcvsinfo">
          documentation about CVS on sourceforge
        </link>
        for more information about how to access the CZT repository.
        If you are not yet a member of the CZT project,
        you may contribute patches via the
        <link href="site:development">
          czt page on sourceforge.
        </link>
        If you are already a member, you should have write
        access to (parts of) the CVS repository.
      </p>
      <p>
        Some notes about using CVS:
      </p>
      <ul>
        <li>
          Make yourself familiar with CVS, for instance by reading
          <link href="site:cvs-book">The CVS Book</link>
        </li>
        <li>
          Before commiting changes, make sure that your working
          directory is in sync with the main CVS repository by
          calling <code>cvs update</code>
        </li>
        <li>
          Check-in often to help other developers keep their code in
          sync with your code, but make sure that the software is
          compiling and running properly
        </li>
      </ul>
    </section>

    <section>
      <title>The CZT project</title>
      <p>
        The CZT project consists of several subprojects, each living
        in its own subdirectory.
        <code>ZML</code> is the most important
        one, containing the Schema files that define the XML markup
        for Z and its extensions.  It also contains some
        example specifications in XML, TeX, and Unicode in
        <code>&lt;CZT_HOME&gt;/zml/examples/{z,oz,tcoz}/</code>.
        If you are developing with java, you probably need to use the
        <code>corejava</code> library.  It provides AST interfaces
        and classes for standard Z and its extensions as well as the
        possibility to read and write XML, which is defined by the Schema
        files in the previously mentioned subproject
        <code>ZML</code>.
      </p>
    </section>

    <section>
      <title>Creating and maintaining a CZT subproject</title>
      <p>
        Each subproject of CZT is located in its own subdirectory.
        The file and directory structure within this directory
        should be as follows:
      </p>
      <ul>
        <li>
          <code>README.txt</code>
          --- the README file containing information about
          the subproject (prerequisites, how to build it, how to run
          it, etc.)
        </li>
        <li>
          <code>build.xml</code>
          --- the ant build file (see <link href="#ant">below</link>
          how the ant build file should look like)
        </li>
        <li>
          <code>build</code>
          --- a temporary build directory; it may contain subdirectories
          like src (which contains source code generated from template files)
          classes (which contains the compiled java class files), etc.
        </li>
        <li>
          <code>doc</code>
          --- the directory where the documentation lives
        </li>
        <li>
          <code>examples</code>
          --- the directory where examples live; this is supposed to be
          used by users and should contain example code, etc.
          Example files used for testing should go into
          <code>tests</code>.
        </li>
        <li>
          <code>src</code>
          --- the directory where the source code (usually java) live
        </li>
        <li>
          <code>lib</code>
          --- the directory where application-specific library files live
        </li>
        <li>
          <code>tests</code>
          --- the directory where the tests live
        </li>
        <li>
          <code>templates</code>
          --- the directory where templates, i.e. files from which source
          code is generated, live
        </li>
      </ul>
    </section>

    <section>
      <title>Java style guidelines</title>
      <p>
        In order to make it easier for other developers to read your
        Java source code, please follow the
        <link href="site:javastyle">Java Programming Style Guidelines</link>
        from Geotechnical Software Services.
        You can use the following
        <link href=".emacs">emacs</link>
        settings to ensure that your editor uses the correct indentation.
      </p>
      <p>
        Use
        <link href="site:checkstyle">checkstyle</link>
        to check whether your code follows those guidelines
        (there is a checkstyle settings file in
        <code>&lt;CZT_HOME&gt;/devtools/checkstyle.xml</code>).
        Have a look at the
        <link href="build.xml.example">example build file</link>
        to see how you can provide a checkstyle ant target.
      </p>
    </section>

    <section id="ant">
      <title>Ant build files</title>
      <p>
        Within the CZT project,
        <link href="site:ant">
          Ant
        </link>
        is used as build tool.  Ant build files are usually called
        <code>build.xml</code> and should provide the following targets:
      </p>
      <ul>
        <li>
          all
          --- build the jar file(s) and the documentation
        </li>
        <li>
          api
          --- build the API documentation
        </li>
        <li>
          checkstyle
          --- checks the source code whether it follows the coding conventions
        </li>
        <li>
          clean
          --- clean up
        </li>
        <li>
          compile
          --- compile the sources
        </li>
        <li>
          doc
          --- build all the documentation
        </li>
        <li>
          install
          --- build the jar files and copy it into the
          &lt;CZT_HOME&gt;/lib directory
        </li>
        <li>
          run
          --- run the application
        </li>
        <li>
          test
          --- compile and run the tests
        </li>
      </ul>
      <p>
        Properties that may be set by the user
        should be set in
        <code>czt.properties</code>,
        which is located in &lt;CZT_HOME&gt;, the root of the CZT
        directory tree.  Each javac task should use the debug properties
        provided in this file, i.e. should be called with
        debug="${debug}" debuglevel="${debuglevel}" optimize="${optimize}".
      </p>
      <p>
        To get started, you can use an
        <link href="build.xml.example">example build file</link>
        for the imaginary CZT subproject Foo.
      </p>
    </section>
  </body>
</document>
