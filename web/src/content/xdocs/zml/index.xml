<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "http://apache.org/forrest/dtd/document-v12.dtd">
<document> 
  <header> 
    <title>ZML: An XML markup for the Z specification language</title> 
  </header> 
  <body>
    <p>
      This page describes a XML markup for the Z, based on the
      ISO Z Standard (2002).  See Ian Toyn's 
      <link
      href="http://www-users.cs.york.ac.uk/~ian/cadiz/standard.html">list
      of differences</link>
      between standard Z and Spivey Z for an overview of most of the changes.
    </p>
    <p>
      The goal of providing an XML markup for Z specifications is to
      make it easier for tools to exchange <em>annotated specifications</em>.
      For example, a specification might be parsed and typechecked by
      one tool, then passed to another tool (in XML format) which expands
      schema calculus and puts predicates into disjunctive normal form,
      then passed to another tool (in XML format) which generates test
      cases from each disjunct.  The XML format is simply a textual
      representation of the annotated syntax tree of the Z specification.
    </p>
    <p>
      Some advantages of using XML to exchange Z specifications between tools:
    </p>
    <ul>
      <li> all programming languages provide libraries for loading and saving
      XML files, so multiple-language toolsets are easier.</li>
      <li> annotations can be attached to any node of this ZML format,
      so it is easy to include type information for every variable
      and every expression.</li>
      <li> each tool does not need to parse and typecheck Z -- this can
      be done by one tool, and the results used by many other tools.</li>
      <li> there are many analysis and transformation tools for XML,
      such as the XSLT language which makes it easy to transform
      XML files into other formats.</li>
    </ul>
    <p>
      A disadvantage is that XML files are large (at least 20 times larger than
      the Z specification source), which makes transfer between tools a
      reasonably costly operation.  For this reason, CZT also offers libraries
      of Java classes and utilities which can directly manipulate the Z AST
      in memory.  This allows tighter integration of tools, but is limited
      to tools written in Java that use our Z AST classes.  So in practice,
      we expect that existing tools and non-Java tools will use the ZML format
      to transfer specifications between tools, while new Z tools written in 
      Java using CZT will be able to directly pass AST objects from one tool
      to another, as well as being able to read and write them as ZML.
    </p>
    <p>
      The ZML format is specified by an XML schema file (Z.xsd).  This
      specifies the allowable 'syntax' of each ZML construct.
      See the
      <link href="http://www.tucs.fi/zb2003">ZB2003</link>
      proceedings for a paper describing this markup.
    </p>
    <p>
      To allow for evolution of the ZML format, each Z specification 
      file (spec.xml) should specify which version of the ZML format it is
      using, by including a
      <code>version="Major.Minor"</code>
      attribute in the
      <code>&lt;Spec&gt;</code>
      tag.  The default is the oldest version:
      <code>version="1.0"</code>.
    </p>
    <p>
      The following table shows the public versions of Z.xsd that have been 
      released plus the official location of that schema (this can be
      used in the
      <code>schemalocation</code>
      attribute of .xml files).  It also relates that
      public version number to the internal revision number of Z.xsd 
      within the CZT CVS repository, and gives a summary of the significant
      changes from the previous version.  An exhaustive list of all changes
      to Z.xsd (most of which do not affect the XML format) can be found in
      the CZT
      <link href="http://sourceforge.net/cvs/?group_id=86250">CVS
      repository</link>. 
    </p>
    <table>
      <tr>
        <th>Version</th>
        <th>Location</th>
        <th>CVS Rev#</th>
        <th>Changes/Comments</th>
      </tr>
      <tr>
        <td>1.1</td>
        <td><link href="Z_1_1.xsd">Z_1_1.xsd</link></td>
        <td>1.39</td>
        <td>Changed namespace and schemaLocation to czt.sourceforge.net
        <br/>
        Added version/author/date/source-location attributes to &lt;Spec&gt;
        <br/>
        Changed operator templates slightly, so that they now contain a 
        (alternating) sequence of &lt;Word&gt; and &lt;Operand&gt; tags,
        where &lt;Operand&gt; may add the attribute <code>List="true"</code>
        to indicate an sequence of operands.
        <br/>
        Renamed FreeType to Freetype to conform to the Z standard.
        <br/>
        Added a tag around rename pairs, for consistency with other pairs and
        triples.  Also swapped the order of NewName and OldName within these
        pairs, to reflect the functional nature (domain -&gt; range) of the
        renaming.
        <br/>
        Removed ##other from Section and Paragraph because it causes ambiguity
        when extending the schema.  This makes the schema more strict, because
        standard XML validators will now REQUIRE Z extensions to have a schema.
        </td>
      </tr>
      <tr>
        <td>1.0</td>
        <td><link href="Z_1_0.xsd">Z_1_0.xsd</link></td>
        <td>1.16</td>
        <td>This version was described in the ZB2003 paper and used by
        several projects at the National University of Singapore.
        <br/>
        If &lt;Spec&gt; has no version attribute, this version is used.
        </td>
      </tr>
    </table>
    <p/>
  </body>
</document>
