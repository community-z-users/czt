/**
 * Parses a Z specification.
 * Depending on the file ending, different parsers are used.
 *
 * @param filename a string containing the name of the file to be parsed.
 * @return an AST representation of the parsed file.
 * @author Petra Malik
 */
parse(filename)
{
  file = pathToFile(filename);
  if (file.exists()) {
    name = file.getName();
    System.err.println("Parse file " + filename);
    if (name.endsWith(".xml") || name.endsWith(".zml")) {
      reader = new net.sourceforge.czt.z.jaxb.JaxbXmlReader();
      return reader.read(file);
    }
    else if (name.endsWith(".tex") || name.endsWith(".zed")) {
      return net.sourceforge.czt.parser.z.ParseUtils.parseLatexFile(filename);
    }
    else if (name.endsWith(".utf8")) {
      return net.sourceforge.czt.parser.z.ParseUtils.parseUtf8File(filename);
    }
    else if (name.endsWith(".utf16")) {
      return net.sourceforge.czt.parser.z.ParseUtils.parseUtf16File(filename);
    }
    else {
      System.err.println("Unknown file suffix.");
    }
  }
  else {
    System.err.println("File " + filename + " not found.");
  }
}

parse(filename, optable)
{
  file = pathToFile(filename);
  if (file.exists()) {
    name = file.getName();
    System.err.println("Parse file " + filename);
    if (name.endsWith(".xml") || name.endsWith(".zml")) {
      reader = new net.sourceforge.czt.z.jaxb.JaxbXmlReader();
      return reader.read(file);
    }
    else if (name.endsWith(".tex") || name.endsWith(".zed")) {
      return net.sourceforge.czt.parser.z.ParseUtils.parseLatexFile(filename, optable);
    }
    else if (name.endsWith(".utf8")) {
      return net.sourceforge.czt.parser.z.ParseUtils.parseUtf8File(filename, optable);
    }
    else if (name.endsWith(".utf16")) {
      return net.sourceforge.czt.parser.z.ParseUtils.parseUtf16File(filename, optable);
    }
    else {
      System.err.println("Unknown file suffix.");
    }
  }
  else {
    System.err.println("File " + filename + " not found.");
  }
}
