package net.sourceforge.czt.zml2html.xml;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;

import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;


/**
 * Cached Parser Factory Singleton class for JAXP compliant DOM parses.
 *
 * The PooledParsedFactory maintains a Map of <code>ParserPool</code>
 * objects, indexed by their pool id. Each ParserPool owns a
 * DocumentBuilderFactory, and a pool of Parsers generated
 * by that factory.
 *
 * PooledParserFactory is a proxy that retrieves available
 * parser instances from an identified pool.
 * 
 */
public class PooledParserFactory
{
    /* Parser Pools indexed by their pool ID */
    private Map pools;

    /* Remember which pools checked out parsers belong to */
    private Map poolReference = new HashMap();

    /* Singleton instance */
    private static PooledParserFactory singleton = null;

    /**
     * Singleton Constructor
     */
    private PooledParserFactory()
    {
	pools = new HashMap();
	addPool(createPool(getDefaultFactory(), "default"));
    }

    /**
     * Expose the singleton instance to clients.
     */
    public static PooledParserFactory getSingleton()
    {
	if (singleton == null)
	    singleton = new PooledParserFactory();
	return singleton;
    }

    /**
     * Obtain the default parse factory.
     *
     * The factory returned by this mehtod is the default 
     * DocumentBuilderFactory as per JAXP.
     *
     * @returns The default JAXP DocumentBuilderFactory on this system.
     */
    private DocumentBuilderFactory getDefaultFactory()
    {
	DocumentBuilderFactory factory  = DocumentBuilderFactory.newInstance();
	factory.setNamespaceAware(true);   
	return factory;
    }

    /**
     * Must be called to free resources for further use!
     */
    public void release(DocumentBuilder poolObject)
    {
	ParserPool parserPool = (ParserPool)poolReference.get(poolObject);
	poolReference.remove(poolObject);
	parserPool.release(poolObject);	
    }

    /**
     * Adds <code>parserPool</code> to the list of of pools, indexed
     * by its pool id.
     *
     * @param parserPool the pool to be added.
     *
     * @returns the <code>parserPool</code> just created.
     *
     */
    private ParserPool addPool(ParserPool parserPool)
    {
	this.pools.put(parserPool.getId(), parserPool);
	return parserPool;
    }

    public ParserPool addPool(DocumentBuilderFactory factory, String poolId)
    {
	ParserPool parserPool = createPool(factory, poolId);
	return addPool(parserPool);
    }


    /**
     * Creates a new Parser pool for parsers generated by the
     * DocumentBuilderFactory <code>factory</code>.
     *
     * <b>Note:</b> This method does not add the pool
     * to the <code>PooledParserFactory</code>
     *
     * @param factory <code>DocumentBuilderFactory</code> to base the pool on.
     *
     * @returns the new pool
     */
    public ParserPool createPool(DocumentBuilderFactory factory, String id)
    {
	ParserPool parserPool = new ParserPool(factory, id);
	return parserPool;
    }


    /**
     * Returns a parser instance from the default factory
     */ 
    public DocumentBuilder getParser()
    {
	return getParser("default");
    }

    /**
     * Gets a parsers from the pool for the supplied factory.
     *
     * If a pool for parsers created by <code>factory</code> does not exist,
     * it is a created, added to thelist of pools and a new parser instace
     * from the factory is returned.
     */
    public DocumentBuilder getParser(DocumentBuilderFactory factory)
    {
	ParserPool parserPool = null;
	try {	    
	    parserPool = getPoolByFactory(factory);
	} catch (ResourceUnavailableException rue) {
	    parserPool = addPool(createPool(factory, factory.toString()));
	}
	return cachePoolReference(parserPool.getParserInstance(), parserPool);
    }

    /**
     * 
     */
    public boolean hasPool(String poolId)
    {
	return pools.containsKey(poolId);
    }

    /**
     * Returns a Parser created by the factory identified by <code>id</code>.
     *
     * @returns A Parser created by the factory identified by ID
     *
     * @throws ResourceUnavailableException if there is no factory matching <code>id</code>
     */
    public DocumentBuilder getParser(String id)
	throws ResourceUnavailableException
    {
	ParserPool pool = (ParserPool)pools.get(id);
	if (pool == null)
	    throw new ResourceUnavailableException("No parser pool with id '"+id+"'");
	DocumentBuilder parser = pool.getParserInstance();
	return cachePoolReference(parser, pool);       
    }

    /**
     * Caches a DocumentBuilder object's pool reference so
     * that is can be easily released from its pool
     * once this class's release(Object) method is called.
     *
     * @param parser the DocumentBuilder for which to save a pool reference
     * @param pool the pool with which <code>parser</code> is associated
     *
     * @return the DocumentBuilder that was passed in
     *
     */
    public DocumentBuilder cachePoolReference(DocumentBuilder parser, ParserPool pool)
    {
	poolReference.put(parser, pool);
	return parser;
    }

    /**
     * Returns the ParserPool matching the supplied factory.
     *
     * @returns ParserPool corresponding to the supplied <code>factory</code>
     *
     * @throws ResourceUnavailableException if there is no pool based on the
     * passed <code>factory</code>.
     */
    private ParserPool getPoolByFactory(DocumentBuilderFactory factory)
	throws ResourceUnavailableException
    {
	ParserPool returnPool = null;
	Iterator i = pools.keySet().iterator();
	while (i.hasNext()) {
	    ParserPool curParserPool = (ParserPool)i.next();
	    if (curParserPool.getFactory() == factory) {  // pool for this factory already exists
		return curParserPool;
	    }
	}
	throw new ResourceUnavailableException("There is no pool based on factory '"+factory+"'.");	
    }
    
}








