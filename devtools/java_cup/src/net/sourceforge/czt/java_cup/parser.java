
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Mar 18 09:59:40 GMT 2005
//----------------------------------------------------

package net.sourceforge.czt.java_cup;

import net.sourceforge.czt.java_cup.runtime.*;
import java.util.Hashtable;

/** CUP v0.10k generated parser.
  * @version Fri Mar 18 09:59:40 GMT 2005
  */
public class parser extends net.sourceforge.czt.java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(net.sourceforge.czt.java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\061\002\000\002\003" +
    "\012\000\002\003\007\000\002\062\002\000\002\004\006" +
    "\000\002\004\003\000\002\005\004\000\002\005\003\000" +
    "\002\063\002\000\002\020\006\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\007" +
    "\002\000\002\007\004\000\002\006\006\000\002\013\006" +
    "\000\002\022\006\000\002\023\006\000\002\014\004\000" +
    "\002\014\003\000\002\024\005\000\002\024\004\000\002" +
    "\024\005\000\002\024\004\000\002\064\002\000\002\024" +
    "\006\000\002\065\002\000\002\024\006\000\002\066\002" +
    "\000\002\044\005\000\002\067\002\000\002\045\005\000" +
    "\002\026\005\000\002\026\003\000\002\027\005\000\002" +
    "\027\003\000\002\040\003\000\002\040\003\000\002\043" +
    "\004\000\002\043\003\000\002\070\002\000\002\041\007" +
    "\000\002\071\002\000\002\041\007\000\002\072\002\000" +
    "\002\041\007\000\002\042\005\000\002\042\003\000\002" +
    "\056\003\000\002\057\003\000\002\073\002\000\002\015" +
    "\007\000\002\015\003\000\002\016\004\000\002\016\003" +
    "\000\002\074\002\000\002\075\002\000\002\030\010\000" +
    "\002\076\002\000\002\030\005\000\002\035\005\000\002" +
    "\035\003\000\002\036\005\000\002\036\003\000\002\031" +
    "\004\000\002\031\003\000\002\032\004\000\002\032\003" +
    "\000\002\055\004\000\002\055\003\000\002\017\005\000" +
    "\002\017\003\000\002\021\005\000\002\021\003\000\002" +
    "\025\003\000\002\025\005\000\002\025\006\000\002\050" +
    "\005\000\002\050\003\000\002\051\003\000\002\051\002" +
    "\000\002\046\003\000\002\047\003\000\002\033\003\000" +
    "\002\034\003\000\002\052\003\000\002\052\003\000\002" +
    "\053\003\000\002\053\003\000\002\054\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\012\004\000\002\012\003\000\002\011\002\000" +
    "\002\011\003\000\002\037\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\026\003\005\004\000\005\000\007\000\010" +
    "\000\011\000\012\000\013\000\014\000\040\000\001\002" +
    "\000\004\002\263\001\002\000\010\011\057\012\052\040" +
    "\056\001\002\000\024\004\011\005\uff8f\007\uff8f\010\uff8f" +
    "\011\uff8f\012\uff8f\013\uff8f\014\uff8f\040\uff8f\001\002\000" +
    "\022\005\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f" +
    "\014\uff8f\040\uff8f\001\002\000\022\005\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\040\ufffb\001\002" +
    "\000\044\003\031\006\015\007\032\010\026\011\023\012" +
    "\016\013\012\014\034\015\017\016\033\026\014\027\024" +
    "\030\022\031\013\035\030\040\025\041\020\001\002\000" +
    "\066\003\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c" +
    "\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\022" +
    "\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c" +
    "\033\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042" +
    "\uff9c\001\002\000\066\003\uff95\006\uff95\007\uff95\010\uff95" +
    "\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017" +
    "\uff95\020\uff95\022\uff95\025\uff95\026\uff95\027\uff95\030\uff95" +
    "\031\uff95\032\uff95\033\uff95\035\uff95\036\uff95\037\uff95\040" +
    "\uff95\041\uff95\042\uff95\001\002\000\066\003\uff98\006\uff98" +
    "\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015" +
    "\uff98\016\uff98\017\uff98\020\uff98\022\uff98\025\uff98\026\uff98" +
    "\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98\035\uff98\036" +
    "\uff98\037\uff98\040\uff98\041\uff98\042\uff98\001\002\000\066" +
    "\003\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013" +
    "\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\022\uffa2" +
    "\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2" +
    "\001\002\000\066\003\uff9e\006\uff9e\007\uff9e\010\uff9e\011" +
    "\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e" +
    "\020\uff9e\022\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031" +
    "\uff9e\032\uff9e\033\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\042\uff9e\001\002\000\066\003\uff9a\006\uff9a\007" +
    "\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a" +
    "\016\uff9a\017\uff9a\020\uff9a\022\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\001\002\000\066\003" +
    "\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\022\uffa4\025" +
    "\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4" +
    "\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\001" +
    "\002\000\006\017\ufffd\022\036\001\002\000\066\003\uff96" +
    "\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014" +
    "\uff96\015\uff96\016\uff96\017\uff96\020\uff96\022\uff96\025\uff96" +
    "\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\035" +
    "\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\001\002" +
    "\000\066\003\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012" +
    "\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f" +
    "\022\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032" +
    "\uff9f\033\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f" +
    "\042\uff9f\001\002\000\066\003\uff97\006\uff97\007\uff97\010" +
    "\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97" +
    "\017\uff97\020\uff97\022\uff97\025\uff97\026\uff97\027\uff97\030" +
    "\uff97\031\uff97\032\uff97\033\uff97\035\uff97\036\uff97\037\uff97" +
    "\040\uff97\041\uff97\042\uff97\001\002\000\066\003\uff9d\006" +
    "\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d" +
    "\015\uff9d\016\uff9d\017\uff9d\020\uff9d\022\uff9d\025\uff9d\026" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\001\002\000" +
    "\066\003\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0" +
    "\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\022" +
    "\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0" +
    "\033\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\001\002\000\060\003\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\022\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\033\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\001" +
    "\002\000\066\003\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3" +
    "\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020" +
    "\uffa3\022\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3" +
    "\032\uffa3\033\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041" +
    "\uffa3\042\uffa3\001\002\000\066\003\uff94\006\uff94\007\uff94" +
    "\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016" +
    "\uff94\017\uff94\020\uff94\022\uff94\025\uff94\026\uff94\027\uff94" +
    "\030\uff94\031\uff94\032\uff94\033\uff94\035\uff94\036\uff94\037" +
    "\uff94\040\uff94\041\uff94\042\uff94\001\002\000\066\003\uffa1" +
    "\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014" +
    "\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\022\uffa1\025\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\035" +
    "\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\001\002" +
    "\000\066\003\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012" +
    "\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99" +
    "\022\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032" +
    "\uff99\033\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99" +
    "\042\uff99\001\002\000\066\003\uff9b\006\uff9b\007\uff9b\010" +
    "\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b" +
    "\017\uff9b\020\uff9b\022\uff9b\025\uff9b\026\uff9b\027\uff9b\030" +
    "\uff9b\031\uff9b\032\uff9b\033\uff9b\035\uff9b\036\uff9b\037\uff9b" +
    "\040\uff9b\041\uff9b\042\uff9b\001\002\000\004\017\040\001" +
    "\002\000\044\003\031\006\015\007\032\010\026\011\023" +
    "\012\016\013\012\014\034\015\017\016\033\026\014\027" +
    "\024\030\022\031\013\035\030\040\025\041\020\001\002" +
    "\000\060\003\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\022\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\033\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\001\002\000\022" +
    "\005\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\040\ufffc\001\002\000\022\005\044\007\ufff2\010\ufff2" +
    "\011\ufff2\012\ufff2\013\ufff2\014\ufff2\040\ufff2\001\002\000" +
    "\022\005\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\040\ufff9\001\002\000\022\005\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\040\ufffa\001\002" +
    "\000\044\003\031\006\015\007\032\010\026\011\023\012" +
    "\016\013\012\014\034\015\017\016\033\026\014\027\024" +
    "\030\022\031\013\035\030\040\025\041\020\001\002\000" +
    "\020\007\046\010\047\011\057\012\052\013\062\014\063" +
    "\040\056\001\002\000\004\006\246\001\002\000\004\006" +
    "\243\001\002\000\020\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\040\ufff1\001\002\000\020\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\040\ufff5\001\002" +
    "\000\004\011\242\001\002\000\044\003\230\006\015\007" +
    "\032\010\026\011\023\012\016\013\012\014\034\015\017" +
    "\016\033\026\014\027\024\030\022\031\013\035\030\040" +
    "\025\041\224\001\002\000\020\003\uffeb\011\uffeb\012\uffeb" +
    "\016\uffeb\026\uffeb\040\uffeb\041\uffeb\001\002\000\020\007" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\040\ufff3" +
    "\001\002\000\044\003\uff92\006\uff92\007\uff92\010\uff92\011" +
    "\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92\026\uff92" +
    "\027\uff92\030\uff92\031\uff92\035\uff92\040\uff92\041\uff92\001" +
    "\002\000\044\003\200\006\015\007\032\010\026\011\023" +
    "\012\016\013\012\014\034\015\017\016\033\026\014\027" +
    "\024\030\022\031\013\035\030\040\025\041\174\001\002" +
    "\000\020\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\040\ufff6\001\002\000\020\003\uff8f\011\057\012\052" +
    "\016\uff8f\026\076\040\056\041\uff8f\001\002\000\004\015" +
    "\071\001\002\000\004\015\065\001\002\000\020\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\040\ufff4\001" +
    "\002\000\004\042\066\001\002\000\022\007\uff91\010\uff91" +
    "\011\uff91\012\uff91\013\uff91\014\uff91\017\070\040\uff91\001" +
    "\002\000\020\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\040\uffed\001\002\000\020\007\uff90\010\uff90\011" +
    "\uff90\012\uff90\013\uff90\014\uff90\040\uff90\001\002\000\004" +
    "\042\072\001\002\000\022\007\uff91\010\uff91\011\uff91\012" +
    "\uff91\013\uff91\014\uff91\017\070\040\uff91\001\002\000\020" +
    "\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\040" +
    "\uffee\001\002\000\010\003\uff8f\016\130\041\uff8f\001\002" +
    "\000\012\003\uffd7\016\uffd7\026\uffd7\041\uffd7\001\002\000" +
    "\010\027\103\030\104\031\105\001\002\000\020\003\uffec" +
    "\011\uffec\012\uffec\016\uffec\026\uffec\040\uffec\041\uffec\001" +
    "\002\000\010\003\uffd9\016\uffd9\041\uffd9\001\002\000\012" +
    "\003\uffda\016\uffda\026\076\041\uffda\001\002\000\012\003" +
    "\uffd8\016\uffd8\026\uffd8\041\uffd8\001\002\000\006\003\uffd6" +
    "\041\uffd6\001\002\000\006\003\uffd4\041\uffd4\001\002\000" +
    "\006\003\uffd2\041\uffd2\001\002\000\006\003\110\041\107" +
    "\001\002\000\022\003\uffa7\017\uffa7\020\uffa7\023\uffa7\025" +
    "\uffa7\032\uffa7\041\uffa7\042\uffa7\001\002\000\022\003\uffa6" +
    "\017\uffa6\020\uffa6\023\uffa6\025\uffa6\032\uffa6\041\uffa6\042" +
    "\uffa6\001\002\000\010\017\uffcd\020\uffcd\025\uffcd\001\002" +
    "\000\006\017\uffce\020\uffce\001\002\000\006\017\uffcf\020" +
    "\uffcf\001\002\000\006\017\116\020\115\001\002\000\006" +
    "\003\110\041\107\001\002\000\012\003\uffd1\016\uffd1\026" +
    "\uffd1\041\uffd1\001\002\000\006\017\uffd0\020\uffd0\001\002" +
    "\000\006\003\110\041\107\001\002\000\006\017\122\020" +
    "\115\001\002\000\012\003\uffd3\016\uffd3\026\uffd3\041\uffd3" +
    "\001\002\000\006\003\110\041\107\001\002\000\006\017" +
    "\125\020\115\001\002\000\012\003\uffd5\016\uffd5\026\uffd5" +
    "\041\uffd5\001\002\000\006\003\137\041\132\001\002\000" +
    "\006\003\uffca\041\uffca\001\002\000\004\015\131\001\002" +
    "\000\006\003\133\041\132\001\002\000\006\017\uffa9\024" +
    "\uffa9\001\002\000\004\017\uffa8\001\002\000\004\017\uffcc" +
    "\001\002\000\004\017\136\001\002\000\006\003\uffcb\041" +
    "\uffcb\001\002\000\006\017\uffc4\024\uffa8\001\002\000\004" +
    "\024\uffc7\001\002\000\010\002\uffff\003\137\041\132\001" +
    "\002\000\010\002\uffc8\003\uffc8\041\uffc8\001\002\000\010" +
    "\002\uffc9\003\uffc9\041\uffc9\001\002\000\004\024\145\001" +
    "\002\000\016\003\uffc6\017\uffc6\025\uffc6\032\uffc6\041\uffc6" +
    "\042\uffc6\001\002\000\016\003\uff8f\017\uff8f\025\uff8f\032" +
    "\uff8f\041\uff8f\042\uff8f\001\002\000\006\017\166\025\165" +
    "\001\002\000\016\003\uffbd\017\uffbd\025\uffbd\032\uffbd\041" +
    "\uffbd\042\uffbd\001\002\000\006\017\uffc1\025\uffc1\001\002" +
    "\000\016\003\110\017\uffbf\025\uffbf\032\155\041\107\042" +
    "\153\001\002\000\016\003\uffbb\017\uffbb\025\uffbb\032\uffbb" +
    "\041\uffbb\042\uffbb\001\002\000\020\003\uff8f\017\uff8f\023" +
    "\160\025\uff8f\032\uff8f\041\uff8f\042\uff8f\001\002\000\006" +
    "\003\110\041\107\001\002\000\016\003\uffbe\017\uffbe\025" +
    "\uffbe\032\uffbe\041\uffbe\042\uffbe\001\002\000\006\017\uffc0" +
    "\025\uffc0\001\002\000\044\003\031\006\015\007\032\010" +
    "\026\011\023\012\016\013\012\014\034\015\017\016\033" +
    "\026\014\027\024\030\022\031\013\035\030\040\025\041" +
    "\020\001\002\000\016\003\uffb9\017\uffb9\025\uffb9\032\uffb9" +
    "\041\uffb9\042\uffb9\001\002\000\016\003\uffbc\017\uffbc\025" +
    "\uffbc\032\uffbc\041\uffbc\042\uffbc\001\002\000\016\003\uffba" +
    "\017\uffba\025\uffba\032\uffba\041\uffba\042\uffba\001\002\000" +
    "\016\003\uffa5\017\uffa5\025\uffa5\032\uffa5\041\uffa5\042\uffa5" +
    "\001\002\000\016\003\uff8f\017\uff8f\025\uff8f\032\uff8f\041" +
    "\uff8f\042\uff8f\001\002\000\010\002\uffc5\003\uffc5\041\uffc5" +
    "\001\002\000\006\017\uffc2\025\uffc2\001\002\000\004\017" +
    "\171\001\002\000\010\002\uffc3\003\uffc3\041\uffc3\001\002" +
    "\000\006\017\uffdd\020\uffdd\001\002\000\020\003\uffe9\011" +
    "\uffe9\012\uffe9\016\uffe9\026\uffe9\040\uffe9\041\uffe9\001\002" +
    "\000\016\017\uffab\020\uffab\022\uffa4\033\uffa4\036\uffa4\041" +
    "\uffa4\001\002\000\056\003\uffb4\006\uffb4\007\uffb4\010\uffb4" +
    "\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\020" +
    "\uffb4\022\036\026\uffb4\027\uffb4\030\uffb4\031\uffb4\033\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\001\002\000" +
    "\006\017\uffe2\020\220\001\002\000\010\033\205\036\204" +
    "\041\203\001\002\000\014\017\uffe6\022\uff94\033\uff94\036" +
    "\uff94\041\uff94\001\002\000\004\017\202\001\002\000\020" +
    "\003\uffe5\011\uffe5\012\uffe5\016\uffe5\026\uffe5\040\uffe5\041" +
    "\uffe5\001\002\000\006\017\uffab\020\uffab\001\002\000\044" +
    "\003\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013" +
    "\uffad\014\uffad\015\uffad\016\uffad\026\uffad\027\uffad\030\uffad" +
    "\031\uffad\035\uffad\040\uffad\041\uffad\001\002\000\004\034" +
    "\217\001\002\000\044\003\031\006\015\007\032\010\026" +
    "\011\023\012\016\013\012\014\034\015\017\016\033\026" +
    "\014\027\024\030\022\031\013\035\030\040\025\041\020" +
    "\001\002\000\020\003\uffea\011\uffea\012\uffea\016\uffea\026" +
    "\uffea\040\uffea\041\uffea\001\002\000\050\003\uffae\006\uffae" +
    "\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015" +
    "\uffae\016\uffae\020\213\026\uffae\027\uffae\030\uffae\031\uffae" +
    "\035\uffae\037\214\040\uffae\041\uffae\001\002\000\054\003" +
    "\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\015\uffb0\016\uffb0\020\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\033\205\035\uffb0\036\204\037\uffb0\040\uffb0" +
    "\041\uffb0\001\002\000\044\003\031\006\015\007\032\010" +
    "\026\011\023\012\016\013\012\014\034\015\017\016\033" +
    "\026\014\027\024\030\022\031\013\035\030\040\025\041" +
    "\020\001\002\000\044\003\uffaf\006\uffaf\007\uffaf\010\uffaf" +
    "\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\035\uffaf\040\uffaf\041\uffaf" +
    "\001\002\000\054\003\uffac\006\uffac\007\uffac\010\uffac\011" +
    "\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\020\uffac" +
    "\026\uffac\027\uffac\030\uffac\031\uffac\033\uffac\035\uffac\036" +
    "\uffac\037\uffac\040\uffac\041\uffac\001\002\000\054\003\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014" +
    "\uffb2\015\uffb2\016\uffb2\020\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\033\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041" +
    "\uffb2\001\002\000\054\003\uffb1\006\uffb1\007\uffb1\010\uffb1" +
    "\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\020" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\033\205\035\uffb1" +
    "\036\204\037\uffb1\040\uffb1\041\uffb1\001\002\000\054\003" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\020\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\033\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\041\uffb3\001\002\000\004\041\203\001\002\000\004\017" +
    "\222\001\002\000\020\003\uffe1\011\uffe1\012\uffe1\016\uffe1" +
    "\026\uffe1\040\uffe1\041\uffe1\001\002\000\006\017\uffde\020" +
    "\uffde\001\002\000\016\017\uffaa\020\uffaa\022\uffa4\033\uffa4" +
    "\036\uffa4\041\uffa4\001\002\000\006\017\uffdb\020\uffdb\001" +
    "\002\000\006\017\uffe0\020\236\001\002\000\010\033\205" +
    "\036\204\041\235\001\002\000\014\017\uffe4\022\uff94\033" +
    "\uff94\036\uff94\041\uff94\001\002\000\020\003\uffe7\011\uffe7" +
    "\012\uffe7\016\uffe7\026\uffe7\040\uffe7\041\uffe7\001\002\000" +
    "\004\017\233\001\002\000\020\003\uffe3\011\uffe3\012\uffe3" +
    "\016\uffe3\026\uffe3\040\uffe3\041\uffe3\001\002\000\020\003" +
    "\uffe8\011\uffe8\012\uffe8\016\uffe8\026\uffe8\040\uffe8\041\uffe8" +
    "\001\002\000\006\017\uffaa\020\uffaa\001\002\000\004\041" +
    "\235\001\002\000\004\017\240\001\002\000\020\003\uffdf" +
    "\011\uffdf\012\uffdf\016\uffdf\026\uffdf\040\uffdf\041\uffdf\001" +
    "\002\000\006\017\uffdc\020\uffdc\001\002\000\044\003\uff93" +
    "\006\uff93\007\uff93\010\uff93\011\uff93\012\uff93\013\uff93\014" +
    "\uff93\015\uff93\016\uff93\026\uff93\027\uff93\030\uff93\031\uff93" +
    "\035\uff93\040\uff93\041\uff93\001\002\000\004\042\244\001" +
    "\002\000\022\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91" +
    "\014\uff91\017\070\040\uff91\001\002\000\020\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\040\uffef\001\002" +
    "\000\004\042\247\001\002\000\022\007\uff91\010\uff91\011" +
    "\uff91\012\uff91\013\uff91\014\uff91\017\070\040\uff91\001\002" +
    "\000\020\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\040\ufff0\001\002\000\004\017\ufff8\001\002\000\006" +
    "\017\uffb5\022\253\001\002\000\046\003\031\006\015\007" +
    "\032\010\026\011\023\012\016\013\012\014\034\015\017" +
    "\016\033\021\254\026\014\027\024\030\022\031\013\035" +
    "\030\040\025\041\020\001\002\000\004\017\uffb6\001\002" +
    "\000\004\017\256\001\002\000\022\005\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\040\ufff7\001\002" +
    "\000\020\003\uff8f\011\057\012\052\016\uff8f\026\076\040" +
    "\056\041\uff8f\001\002\000\010\003\uff8f\016\130\041\uff8f" +
    "\001\002\000\006\003\137\041\132\001\002\000\010\002" +
    "\ufffe\003\137\041\132\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\006\003\003\061\005\001\001\000\002\001" +
    "\001\000\010\012\052\014\256\024\053\001\001\000\006" +
    "\004\006\037\007\001\001\000\006\005\040\037\041\001" +
    "\001\000\002\001\001\000\006\017\020\060\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\044\020\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\251\021" +
    "\250\060\026\001\001\000\022\006\057\010\047\012\052" +
    "\013\050\014\060\022\063\023\054\024\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\174\025\226\027" +
    "\225\034\224\045\230\060\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\174\025" +
    "\176\026\175\033\171\044\172\060\026\001\001\000\002" +
    "\001\001\000\016\012\052\024\076\037\077\040\073\041" +
    "\074\043\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\072\001\001\000\002\001\001\000\006\015" +
    "\125\037\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\101\001" +
    "\001\000\002\001\001\000\004\070\122\001\001\000\004" +
    "\071\117\001\001\000\004\072\105\001\001\000\012\042" +
    "\113\053\110\056\112\057\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\053\110\056\116" +
    "\057\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\042\120\053\110\056\112\057\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\042\123\053\110\056" +
    "\112\057\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\140\030\141\052\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\073\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\076\167\001\001" +
    "\000\004\074\143\001\001\000\006\030\142\052\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\075\145\001\001\000\012\031\151\035\146\036" +
    "\150\037\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\155\053\153\001\001\000" +
    "\002\001\001\000\006\037\160\055\161\001\001\000\006" +
    "\053\110\057\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\054\162\060\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\031\151\036\166\037\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\066\220\001\001\000\012\026\175\033" +
    "\171\044\206\046\205\001\001\000\004\064\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\174\025\210" +
    "\050\207\060\026\001\001\000\002\001\001\000\006\047" +
    "\214\051\211\001\001\000\004\046\205\001\001\000\010" +
    "\017\174\025\215\060\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\205\001\001" +
    "\000\002\001\001\000\004\033\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\236\001\001\000\012\027" +
    "\225\034\224\045\233\046\205\001\001\000\004\065\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\247\001\001\000\002\001\001\000\004\063\254\001\001" +
    "\000\002\001\001\000\004\060\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\012\052" +
    "\024\076\037\077\040\257\041\074\043\100\001\001\000" +
    "\006\015\260\037\126\001\001\000\010\016\261\030\141" +
    "\052\137\001\001\000\006\030\142\052\137\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public net.sourceforge.czt.java_cup.runtime.Symbol do_action(
    int                        act_num,
    net.sourceforge.czt.java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 lexer.init(); 
    }

  /** Scan to get the next Symbol. */
  public net.sourceforge.czt.java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }



  /* override error routines */

  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      lexer.emit_error(message);
      System.err.println("Can't recover from previous error(s), giving up.");
      System.exit(1);
    }

    public void report_error(String message, Object info)
    {
      lexer.emit_error(message);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  /** helper routine to clone a new production part adding a given label */
  protected production_part add_lab(production_part part, String lab)
    throws internal_error
    {
      /* if there is no label, or this is an action, just return the original */
      if (lab == null || part.is_action()) return part;

      /* otherwise build a new one with the given label attached */
      return new symbol_part(((symbol_part)part).the_symbol(),lab);
    }

  /** max size of right hand side we will support */
  protected final int MAX_RHS = 200;

  /** array for accumulating right hand side parts */
  protected production_part[] rhs_parts = new production_part[MAX_RHS];

  /** where we are currently in building a right hand side */
  protected int rhs_pos = 0;

  /** start a new right hand side */
  protected void new_rhs() {rhs_pos = 0; }

  /** add a new right hand side part */
  protected void add_rhs_part(production_part part) throws java.lang.Exception
    {
      if (rhs_pos >= MAX_RHS)
	throw new Exception("Internal Error: Productions limited to " + 
			     MAX_RHS + " symbols and actions"); 

      rhs_parts[rhs_pos] = part;
      rhs_pos++;
    }

  /** string to build up multiple part names */
  protected String multipart_name = new String();

  /** append a new name segment to the accumulated multipart name */
  protected void append_multipart(String name)
    {
      String dot = "";

      /* if we aren't just starting out, put on a dot */
      if (multipart_name.length() != 0 && multipart_name.indexOf("<") < 0) {
        dot = ".";
      }

      multipart_name = multipart_name.concat(dot + name);
    }

  /** table of declared symbols -- contains production parts indexed by name */
  protected Hashtable symbols = new Hashtable();

  /** table of just non terminals -- contains non_terminals indexed by name */
  protected Hashtable non_terms = new Hashtable();

  /** declared start non_terminal */
  protected non_terminal start_nt = null;

  /** left hand side non terminal of the current production */
  protected non_terminal lhs_nt;

  /** Current precedence number */
  int _cur_prec = 0;

  /** Current precedence side */
  int _cur_side = assoc.no_prec;

  /** update the precedences we are declaring */
  protected void update_precedence(int p) {
    _cur_side = p;
    _cur_prec++;
  }
  /** add relevant data to terminals */ 
  protected void add_precedence(String term) {
    if (term == null) {
      System.err.println("Unable to add precedence to nonexistent terminal");
    } else {
      symbol_part sp = (symbol_part)symbols.get(term);
      if (sp == null) {
	System.err.println("Could find terminal " + term + " while declaring precedence");
      } else {
	net.sourceforge.czt.java_cup.symbol sym = sp.the_symbol();
	if (sym instanceof terminal) 
	  ((terminal)sym).set_precedence(_cur_side, _cur_prec);
	else System.err.println("Precedence declaration: Can't find terminal " + term);
      }
    }
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final net.sourceforge.czt.java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    net.sourceforge.czt.java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      net.sourceforge.czt.java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // empty ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(29/*empty*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // opt_semi ::= SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(7/*opt_semi*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // opt_semi ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(7/*opt_semi*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // non_terminal ::= NONTERMINAL 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(8/*non_terminal*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // non_terminal ::= NON TERMINAL 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(8/*non_terminal*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // robust_id ::= error 
            {
              String RESULT = null;
		
		lexer.emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(46/*robust_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // robust_id ::= NONASSOC 
            {
              String RESULT = null;
		 RESULT = "nonassoc"; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(46/*robust_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // robust_id ::= RIGHT 
            {
              String RESULT = null;
		 RESULT = "right"; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(46/*robust_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // robust_id ::= LEFT 
            {
              String RESULT = null;
		 RESULT = "left"; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(46/*robust_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // robust_id ::= PRECEDENCE 
            {
              String RESULT = null;
		 RESULT = "precedence"; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(46/*robust_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // robust_id ::= START 
            {
              String RESULT = null;
		 RESULT = "start"; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(46/*robust_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // robust_id ::= WITH 
            {
              String RESULT = null;
		 RESULT = "with"; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(46/*robust_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // robust_id ::= SCAN 
            {
              String RESULT = null;
		 RESULT = "scan"; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(46/*robust_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // robust_id ::= INIT 
            {
              String RESULT = null;
		 RESULT = "init"; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(46/*robust_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // robust_id ::= NONTERMINAL 
            {
              String RESULT = null;
		 RESULT = "nonterminal"; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(46/*robust_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // robust_id ::= NON 
            {
              String RESULT = null;
		 RESULT = "non"; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(46/*robust_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // robust_id ::= TERMINAL 
            {
              String RESULT = null;
		 RESULT = "terminal"; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(46/*robust_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // robust_id ::= PARSER 
            {
              String RESULT = null;
		 RESULT = "parser"; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(46/*robust_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // robust_id ::= ACTION 
            {
              String RESULT = null;
		 RESULT = "action"; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(46/*robust_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // robust_id ::= CODE 
            {
              String RESULT = null;
		 RESULT = "code"; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(46/*robust_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // robust_id ::= QMARK 
            {
              String RESULT = null;
		 RESULT = "?"; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(46/*robust_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // robust_id ::= ID 
            {
              String RESULT = null;
		int the_idleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int the_idright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String the_id = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = the_id; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(46/*robust_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // label_id ::= robust_id 
            {
              String RESULT = null;
		int the_idleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int the_idright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String the_id = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = the_id; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(42/*label_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // symbol_id ::= error 
            {
              String RESULT = null;
		
		lexer.emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(41/*symbol_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // symbol_id ::= ID 
            {
              String RESULT = null;
		int the_idleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int the_idright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String the_id = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = the_id; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(41/*symbol_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // nt_id ::= error 
            {
              String RESULT = null;
		
		lexer.emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(40/*nt_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // nt_id ::= ID 
            {
              String RESULT = null;
		int the_idleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int the_idright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String the_id = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = the_id; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(40/*nt_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // new_non_term_id ::= ID 
            {
              Object RESULT = null;
		int non_term_idleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int non_term_idright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String non_term_id = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
	  /* see if this non terminal has been declared before */
	  if (symbols.get(non_term_id) != null)
	    {
	      /* issue a message */
	      lexer.emit_error( "net.sourceforge.czt.java_cup.runtime.Symbol \"" + non_term_id + 
			                      "\" has already been declared");
	    }
	  else
	    {
	      if (multipart_name.equals("")) {
		append_multipart("Object");
	      }
	      /* build the non terminal object */
              non_terminal this_nt = 
		new non_terminal(non_term_id, multipart_name);

	      /* put it in the non_terms table */
	      non_terms.put(non_term_id, this_nt);

	      /* build a production_part and put it in the symbols table */ 
	      symbols.put(non_term_id, new symbol_part(this_nt));
	    }
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(26/*new_non_term_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // new_term_id ::= ID 
            {
              Object RESULT = null;
		int term_idleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int term_idright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String term_id = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
	  /* see if this terminal has been declared before */
	  if (symbols.get(term_id) != null)
	    {
	      /* issue a message */
	      lexer.emit_error("net.sourceforge.czt.java_cup.runtime.Symbol \"" + term_id + 
			   "\" has already been declared");
	    }
	  else
	    {
	      /* if no type declared, declare one */
	      if (multipart_name.equals("")) {
		append_multipart("Object");
	      }
	      /* build a production_part and put it in the table */ 
	      symbols.put(term_id, 
	        new symbol_part(new terminal(term_id, multipart_name)));
	    }
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(25/*new_term_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // rgeneric ::= RGENERIC 
            {
              Object RESULT = null;
		 multipart_name = multipart_name.concat(">"); 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(37/*rgeneric*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lgeneric ::= LGENERIC 
            {
              Object RESULT = null;
		 multipart_name = multipart_name.concat("<"); 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(36/*lgeneric*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comma ::= 
            {
              Object RESULT = null;
		 multipart_name = multipart_name.concat(" "); 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(39/*comma*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comma ::= COMMA 
            {
              Object RESULT = null;
		 multipart_name = multipart_name.concat(","); 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(39/*comma*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // type_id_list ::= type_id 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(38/*type_id_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // type_id_list ::= type_id_list comma type_id 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(38/*type_id_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // type_id ::= type_id lgeneric type_id_list rgeneric 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(19/*type_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // type_id ::= type_id LBRACK RBRACK 
            {
              Object RESULT = null;
		 multipart_name = multipart_name.concat("[]"); 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(19/*type_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // type_id ::= multipart_id 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(19/*type_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // import_id ::= multipart_id 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(15/*import_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // import_id ::= multipart_id DOT STAR 
            {
              Object RESULT = null;
		 append_multipart("*"); 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(15/*import_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // multipart_id ::= robust_id 
            {
              Object RESULT = null;
		int an_idleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int an_idright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String an_id = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 append_multipart(an_id); 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(13/*multipart_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // multipart_id ::= multipart_id DOT robust_id 
            {
              Object RESULT = null;
		int another_idleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int another_idright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String another_id = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 append_multipart(another_id); 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(13/*multipart_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // opt_label ::= empty 
            {
              String RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(43/*opt_label*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // opt_label ::= COLON label_id 
            {
              String RESULT = null;
		int labidleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int labidright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String labid = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = labid; 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(43/*opt_label*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // prod_part ::= CODE_STRING 
            {
              Object RESULT = null;
		int code_strleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int code_strright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String code_str = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
	  /* add a new production part */
	  add_rhs_part(new action_part(code_str));
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(24/*prod_part*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // prod_part ::= symbol_id opt_label 
            {
              Object RESULT = null;
		int symidleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int symidright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String symid = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int labidleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int labidright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String labid = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
	  /* try to look up the id */
	  production_part symb = (production_part)symbols.get(symid);

	  /* if that fails, symbol is undeclared */
	  if (symb == null)
	    {
	      if (lexer.error_count == 0)
	        lexer.emit_error("net.sourceforge.czt.java_cup.runtime.Symbol \"" + symid + 
			       "\" has not been declared");
	    }
	  else
	    {
	      /* add a labeled production part */
	      add_rhs_part(add_lab(symb, labid));
	    }
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(24/*prod_part*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // prod_part_list ::= empty 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(23/*prod_part_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // prod_part_list ::= prod_part_list prod_part 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(23/*prod_part_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // rhs ::= prod_part_list 
            {
              Object RESULT = null;
		 
	  if (lhs_nt != null) 
	    {
	      /* build the production */
	      production p = new production(lhs_nt, rhs_parts, rhs_pos);

	      /* if we have no start non-terminal declared and this is 
		 the first production, make its lhs nt the start_nt 
		 and build a special start production for it. */
              if (start_nt == null)
		{
		  start_nt = lhs_nt;

	          /* build a special start production */
	          new_rhs();
	          add_rhs_part(add_lab(new symbol_part(start_nt),"start_val"));
	          add_rhs_part(new symbol_part(terminal.EOF));
		  add_rhs_part(new action_part("RESULT = start_val;"));
	          emit.start_production = 
		     new production(non_terminal.START_nt, rhs_parts, rhs_pos);

	          new_rhs();
		}
	    }
	  
	  /* reset the rhs accumulation in any case */
	  new_rhs();
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(28/*rhs*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // rhs ::= prod_part_list PERCENT_PREC term_id 
            {
              Object RESULT = null;
		int term_nameleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int term_nameright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String term_name = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	  net.sourceforge.czt.java_cup.symbol sym = null;
	  if (lhs_nt != null) 
	    {
	      /* Find the precedence symbol */
	      if (term_name == null) {
		System.err.println("No terminal for contextual precedence");
		sym = null;
	      } else {
		sym = ((symbol_part)symbols.get(term_name)).the_symbol();
	      }
	      /* build the production */
	      production p;
	      if ((sym!=null) && (sym instanceof terminal)) {
		p = new production(lhs_nt, rhs_parts, rhs_pos,
				   ((terminal)sym).precedence_num(),
				   ((terminal)sym).precedence_side());
		((symbol_part)symbols.get(term_name)).the_symbol().note_use();
	      } else {
		System.err.println("Invalid terminal " + term_name + 
				   " for contextual precedence assignment");
		p = new production(lhs_nt, rhs_parts, rhs_pos);
	      }

	      /* if we have no start non-terminal declared and this is 
		 the first production, make its lhs nt the start_nt 
		 and build a special start production for it. */
              if (start_nt == null)
		{
		  start_nt = lhs_nt;

	          /* build a special start production */
	          new_rhs();
	          add_rhs_part(add_lab(new symbol_part(start_nt),"start_val"));
	          add_rhs_part(new symbol_part(terminal.EOF));
		  add_rhs_part(new action_part("RESULT = start_val;"));
		  if ((sym!=null) && (sym instanceof terminal)) {
		    emit.start_production = 
		      new production(non_terminal.START_nt, rhs_parts, 
				     rhs_pos, ((terminal)sym).precedence_num(),
				     ((terminal)sym).precedence_side());
		  } else {
		    emit.start_production = 
		      new production(non_terminal.START_nt, rhs_parts, rhs_pos);
		  }
	          new_rhs();
		}
	    }

	  /* reset the rhs accumulation in any case */
	  new_rhs();
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(28/*rhs*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // rhs_list ::= rhs 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(27/*rhs_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rhs_list ::= rhs_list BAR rhs 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(27/*rhs_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // production ::= error NT$13 SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$13
              if ( ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(22/*production*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$13 ::= 
            {
              Object RESULT = null;
 lexer.emit_error("Syntax Error"); 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(60/*NT$13*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // production ::= nt_id NT$11 COLON_COLON_EQUALS NT$12 rhs_list SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$11
              if ( ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$12
              if ( ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lhs_idleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lhs_idright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String lhs_id = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(22/*production*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$12 ::= 
            {
              Object RESULT = null;
		int lhs_idleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs_idright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lhs_id = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(59/*NT$12*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$11 ::= 
            {
              Object RESULT = null;
		int lhs_idleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lhs_idright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String lhs_id = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

	  /* lookup the lhs nt */
	  lhs_nt = (non_terminal)non_terms.get(lhs_id);

          /* if it wasn't declared, emit a message */
	  if (lhs_nt == null)
	    {
	      if (lexer.error_count == 0)
	        lexer.emit_error("LHS non terminal \"" + lhs_id + 
			       "\" has not been declared");
	    }

	  /* reset the rhs accumulation */
	  new_rhs();
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(58/*NT$11*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // production_list ::= production 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(12/*production_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // production_list ::= production_list production 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(12/*production_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // start_spec ::= empty 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(11/*start_spec*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // start_spec ::= START WITH nt_id NT$10 SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$10
              if ( ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int start_nameleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int start_nameright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String start_name = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(11/*start_spec*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$10 ::= 
            {
              Object RESULT = null;
		int start_nameleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int start_nameright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String start_name = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 
	  /* verify that the name has been declared as a non terminal */
	  non_terminal nt = (non_terminal)non_terms.get(start_name);
	  if (nt == null)
	    {
	      lexer.emit_error( "Start non terminal \"" + start_name + 
	  		         "\" has not been declared");
	    }
          else
	    {
	      /* remember the non-terminal for later */
	      start_nt = nt;

	      /* build a special start production */
	      new_rhs();
	      add_rhs_part(add_lab(new symbol_part(start_nt), "start_val"));
	      add_rhs_part(new symbol_part(terminal.EOF));
	      add_rhs_part(new action_part("RESULT = start_val;"));
	      emit.start_production = 
		     new production(non_terminal.START_nt, rhs_parts, rhs_pos);
	      new_rhs();
	    }
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(57/*NT$10*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term_id ::= symbol_id 
            {
              String RESULT = null;
		int symleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int symright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String sym = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	  /* check that the symbol_id is a terminal */
	  if (symbols.get(sym) == null)
	    {
	      /* issue a message */
	      lexer.emit_error("Terminal \"" + sym + 
			   "\" has not been declared");
	    }
          RESULT = sym;
         
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(45/*term_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // terminal_id ::= term_id 
            {
              String RESULT = null;
		int symleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int symright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String sym = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			
	  add_precedence(sym);
	  RESULT = sym;
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(44/*terminal_id*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // terminal_list ::= terminal_id 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(32/*terminal_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // terminal_list ::= terminal_list COMMA terminal_id 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(32/*terminal_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // preced ::= PRECEDENCE NONASSOC NT$9 terminal_list SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$9
              if ( ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(31/*preced*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$9 ::= 
            {
              Object RESULT = null;

	  update_precedence(assoc.nonassoc);
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(56/*NT$9*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // preced ::= PRECEDENCE RIGHT NT$8 terminal_list SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$8
              if ( ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(31/*preced*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$8 ::= 
            {
              Object RESULT = null;

	  update_precedence(assoc.right);
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(55/*NT$8*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // preced ::= PRECEDENCE LEFT NT$7 terminal_list SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$7
              if ( ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(31/*preced*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$7 ::= 
            {
              Object RESULT = null;

	  update_precedence(assoc.left);
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(54/*NT$7*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // precedence_l ::= preced 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(33/*precedence_l*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // precedence_l ::= precedence_l preced 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(33/*precedence_l*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // precedence_list ::= empty 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(30/*precedence_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // precedence_list ::= precedence_l 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(30/*precedence_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // non_term_name_list ::= new_non_term_id 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(21/*non_term_name_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // non_term_name_list ::= non_term_name_list COMMA new_non_term_id 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(21/*non_term_name_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // term_name_list ::= new_term_id 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(20/*term_name_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // term_name_list ::= term_name_list COMMA new_term_id 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(20/*term_name_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declares_non_term ::= non_term_name_list NT$6 SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(35/*declares_non_term*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$6 ::= 
            {
              Object RESULT = null;
 
	  /* reset the accumulated multipart name */
	  multipart_name = new String();
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(53/*NT$6*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declares_term ::= term_name_list NT$5 SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$5
              if ( ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(34/*declares_term*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$5 ::= 
            {
              Object RESULT = null;
 
	  /* reset the accumulated multipart name */
	  multipart_name = new String();
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(52/*NT$5*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // symbol ::= non_terminal error NT$4 SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(18/*symbol*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$4 ::= 
            {
              Object RESULT = null;

	  /* reset the accumulated multipart name */
	  multipart_name = new String();
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(51/*NT$4*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // symbol ::= TERMINAL error NT$3 SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(18/*symbol*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              Object RESULT = null;

	  /* reset the accumulated multipart name */
	  multipart_name = new String();
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(50/*NT$3*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // symbol ::= non_terminal declares_non_term 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(18/*symbol*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // symbol ::= non_terminal type_id declares_non_term 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(18/*symbol*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // symbol ::= TERMINAL declares_term 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(18/*symbol*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // symbol ::= TERMINAL type_id declares_term 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(18/*symbol*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // symbol_list ::= symbol 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(10/*symbol_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // symbol_list ::= symbol_list symbol 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(10/*symbol_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // scan_code ::= SCAN WITH CODE_STRING opt_semi 
            {
              Object RESULT = null;
		int user_codeleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int user_coderight = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String user_code = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	  if (emit.scan_code!=null)
	    lexer.emit_error("Redundant scan code (skipping)");
	  else /* save the user code */
	    emit.scan_code = user_code;
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(17/*scan_code*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // init_code ::= INIT WITH CODE_STRING opt_semi 
            {
              Object RESULT = null;
		int user_codeleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int user_coderight = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String user_code = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	  if (emit.init_code!=null)
	    lexer.emit_error("Redundant init code (skipping)");
	  else /* save the user code */
	    emit.init_code = user_code;
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(16/*init_code*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parser_code_part ::= PARSER CODE CODE_STRING opt_semi 
            {
              Object RESULT = null;
		int user_codeleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int user_coderight = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String user_code = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	  if (emit.parser_code!=null)
	    lexer.emit_error("Redundant parser code (skipping)");
	  else /* save the user included code string */
	    emit.parser_code = user_code;
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(9/*parser_code_part*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // action_code_part ::= ACTION CODE CODE_STRING opt_semi 
            {
              Object RESULT = null;
		int user_codeleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int user_coderight = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String user_code = (String)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	  if (emit.action_code!=null)
	    lexer.emit_error("Redundant action code (skipping)");
	  else /* save the user included code string */
	    emit.action_code = user_code;
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(4/*action_code_part*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // code_parts ::= code_parts code_part 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(5/*code_parts*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // code_parts ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(5/*code_parts*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // code_part ::= scan_code 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(6/*code_part*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // code_part ::= init_code 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(6/*code_part*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // code_part ::= parser_code_part 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(6/*code_part*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // code_part ::= action_code_part 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(6/*code_part*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // import_spec ::= IMPORT import_id NT$2 SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(14/*import_spec*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Object RESULT = null;
 
	  /* save this import on the imports list */
	  emit.import_list.push(multipart_name);

	  /* reset the accumulated multipart name */
	  multipart_name = new String();
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(49/*NT$2*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_list ::= empty 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(3/*import_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // import_list ::= import_list import_spec 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(3/*import_list*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // package_spec ::= empty 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(2/*package_spec*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // package_spec ::= PACKAGE multipart_id NT$1 SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(2/*package_spec*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT = null;

	  /* save the package name */
	  emit.package_name = multipart_name;

	  /* reset the accumulated multipart name */
	  multipart_name = new String();
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(48/*NT$1*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // spec ::= error symbol_list precedence_list start_spec production_list 
            {
              Object RESULT = null;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(1/*spec*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // spec ::= NT$0 package_spec import_list code_parts symbol_list precedence_list start_spec production_list 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(1/*spec*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT = null;

          /* declare "error" as a terminal */
          symbols.put("error", new symbol_part(terminal.error));

          /* declare start non terminal */
          non_terms.put("$START", non_terminal.START_nt);
	
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(47/*NT$0*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= spec EOF 
            {
              Object RESULT = null;
		int start_valleft = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((net.sourceforge.czt.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new net.sourceforge.czt.java_cup.runtime.Symbol(0/*$START*/, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((net.sourceforge.czt.java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

