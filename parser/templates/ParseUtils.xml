<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (C) 2003, 2004 Petra Malik, Tim Miller
     This file is part of the czt project.
     
     The czt project contains free software;
     you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     
     The czt project is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with czt; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     -->

<utils xmlns:add="http://czt.sourceforge.net/templates/additional">
package <package/>;

import java.io.*;
import java.net.URL;
import java.util.logging.Logger;

import net.sourceforge.czt.base.ast.Term;
import net.sourceforge.czt.parser.util.ParentNotFoundException;
import net.sourceforge.czt.session.SectionManager;
import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.util.CztLogger;
import net.sourceforge.czt.util.ParseException;

/**
 * Utilities for parsing <add:oz>Object</add:oz> Z specifications.
 *
 * @author Petra Malik, Tim Miller
 */
public final class <class/>
{
  /**
   * Do not generate instances of this class.
   */
  private <class/>()
  {
  }

  /**
   * Parses the given file using the given operator table.
   * This method tries to figure out which parser to use by inspecting
   * the file ending.  It uses a latex parser for files ending with
   * ".tex" or ".TEX".  It uses an unicode parser for ".utf8" or ".UTF8"
   * file endings and reads them using encoding "UTF-8".
   * A unicode parser is used for ".utf16" or ".UTF16"
   * file endings and is read using encoding "UTF-16".  Returns
   * <code>null</code> if the file ending could not be identified.
   *
   * @param filename the name of the file to be parsed
   * @return the root of the parsed AST.
   * @throws FileNotFoundException if the given filename cannot be found.
   * @throws ParentNotFoundException if the given file contains a Z section
   *         whos parent cannot be found.
   * @throws ParseException if the given file cannot be parsed.
   */
  public static Term parse(String filename,
                           SectionManager manager)
    throws ParseException, FileNotFoundException, ParentNotFoundException
  {
    if (filename.endsWith(".tex") || filename.endsWith(".TEX")) {
      return parseLatexFile(filename, manager);
    }
    else if (filename.endsWith(".utf8") || filename.endsWith(".UTF8")) {
      return parseUtf8File(filename, manager);
    }
    else if (filename.endsWith(".utf16") || filename.endsWith(".UTF16")) {
      return parseUtf16File(filename, manager);
    }
    Logger logger = CztLogger.getLogger(<class/>.class);
    logger.warning("Cannot determine the file type of " + filename);
    return null;
  }
  public static Term parse(URL url,
                           SectionManager manager)
    throws ParseException, IOException, ParentNotFoundException
  {
    String name = url.toString();
    if (name.endsWith(".tex") || name.endsWith(".TEX")) {
      return parseLatexURL(url, manager);
    }
    else if (name.endsWith(".utf8") || name.endsWith(".UTF8")) {
      return parseUtf8URL(url, manager);
    }
    else if (name.endsWith(".utf16") || name.endsWith(".UTF16")) {
      return parseUtf16URL(url, manager);
    }
    Logger logger = CztLogger.getLogger(<class/>.class);
    logger.warning("Cannot determine the file type of " + name);
    return null;
  }

  /**
   * Parses an UTF-8 encoded file using the unicode parser.
   *
   * @throws FileNotFoundException if the given filename cannot be found.
   * @throws ParentNotFoundException if the given file contains a Z section
   *         whos parent cannot be found.
   * @throws ParseException if the given file cannot be parsed.
   */
  public static Term parseUtf8File(String filename, SectionManager manager)
    throws ParseException, FileNotFoundException, ParentNotFoundException
  {
    final String encoding = "UTF-8";
    try {
      Logger logger = CztLogger.getLogger(<class/>.class);
      logger.fine("Parse utf8 file " + filename);
      Reader in =
        new InputStreamReader(new FileInputStream(filename), encoding);
      UnicodeParser parser = new UnicodeParser(in, filename, manager);
      return parser.parse();
    }
    catch(UnsupportedEncodingException e) {
      final String message = "This should not happen: "
        + "Encoding " + encoding + " not supported.";
      throw new CztException(message, e);
    }
  }
  public static Term parseUtf8URL(URL url, SectionManager manager)
    throws ParseException, IOException, ParentNotFoundException
  {
    final String encoding = "UTF-8";
    try {
      Logger logger = CztLogger.getLogger(<class/>.class);
      logger.fine("Parse utf8 file " + url.toString());
      Reader in =
        new InputStreamReader(url.openStream(), encoding);
      UnicodeParser parser = new UnicodeParser(in, url.toString(), manager);
      return parser.parse();
    }
    catch(UnsupportedEncodingException e) {
      final String message = "This should not happen: "
        + "Encoding " + encoding + " not supported.";
      throw new CztException(message, e);
    }
  }
  public static Term parseUnicodeString(String input, SectionManager manager)
    throws ParseException, IOException, ParentNotFoundException
  {
    Reader in = new StringReader(input);
    UnicodeParser parser = new UnicodeParser(in, "Standard input", manager);
    return parser.parse();
  }

  /**
   * Parses an UTF-16 encoded file using the unicode parser.
   *
   * @throws FileNotFoundException if the given filename cannot be found.
   * @throws ParentNotFoundException if the given file contains a Z section
   *         whos parent cannot be found.
   * @throws ParseException if the given file cannot be parsed.
   */
  public static Term parseUtf16File(String filename, SectionManager manager)
    throws ParseException, FileNotFoundException, ParentNotFoundException
  {
    final String encoding = "UTF-16";
    try {
      Logger logger = CztLogger.getLogger(<class/>.class);
      logger.fine("Parse utf16 file " + filename);
      Reader in =
        new InputStreamReader(new FileInputStream(filename), encoding);
      UnicodeParser parser = new UnicodeParser(in, filename, manager);
      return parser.parse();
    }
    catch(UnsupportedEncodingException e) {
      final String message = "This should not happen: "
        + "Encoding " + encoding + " not supported.";
      throw new CztException(message, e);
    }
  }
  public static Term parseUtf16URL(URL url, SectionManager manager)
    throws ParseException, IOException, ParentNotFoundException
  {
    final String encoding = "UTF-16";
    try {
      Logger logger = CztLogger.getLogger(<class/>.class);
      logger.fine("Parse utf16 file " + url.toString());
      Reader in =
        new InputStreamReader(url.openStream(), encoding);
      UnicodeParser parser = new UnicodeParser(in, url.toString(), manager);
      return parser.parse();
    }
    catch(UnsupportedEncodingException e) {
      final String message = "This should not happen: "
        + "Encoding " + encoding + " not supported.";
      throw new CztException(message, e);
    }
  }

  /**
   * Parses a file using the latex parser.
   *
   * @throws FileNotFoundException if the given filename cannot be found.
   * @throws ParentNotFoundException if the given file contains a Z section
   *         whos parent cannot be found.
   * @throws ParseException if the given file cannot be parsed.
   */
  public static Term parseLatexFile(String filename,
                                    SectionManager manager)
    throws ParseException, FileNotFoundException, ParentNotFoundException
  {
    Logger logger = CztLogger.getLogger(<class/>.class);
    logger.fine("Parse LaTex file " + filename);
    Reader in = new InputStreamReader(new FileInputStream(filename));
    LatexParser parser = new LatexParser(in, filename, manager);
    return parser.parse();
  }
  public static Term parseLatexURL(URL url,
                                   SectionManager manager)
    throws ParseException, IOException, ParentNotFoundException
  {
    Logger logger = CztLogger.getLogger(<class/>.class);
    logger.fine("Parse LaTex file " + url.toString());
    Reader in = new InputStreamReader(url.openStream());
    LatexParser parser = new LatexParser(in, url.toString(), manager);
    return parser.parse();
  }
  public static Term parseLatexString(String input,
                                      SectionManager manager)
    throws ParseException, FileNotFoundException, ParentNotFoundException
  {
    Reader in = new StringReader(input);
    LatexParser parser = new LatexParser(in, "Standard input", manager);
    return parser.parse();
  }
}
</utils>
