<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (C) 2003, 2004 Petra Malik, Tim Miller
     This file is part of the czt project.
     
     The czt project contains free software;
     you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     
     The czt project is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with czt; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     -->

<utils xmlns:add="http://czt.sourceforge.net/templates/additional">
package <package/>;

import java.io.*;
import java.util.logging.Logger;

import java_cup.runtime.Scanner;
import java_cup.runtime.Symbol;

import net.sourceforge.czt.base.ast.Term;
import net.sourceforge.czt.base.util.AstValidator;
import net.sourceforge.czt.base.util.XmlWriter;
import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.util.CztLogger;
import net.sourceforge.czt.util.ParseException;
<add:z>
import net.sourceforge.czt.z.jaxb.JaxbValidator;
import net.sourceforge.czt.z.jaxb.JaxbXmlWriter;
</add:z>
<add:oz>
import net.sourceforge.czt.oz.jaxb.JaxbValidator;
import net.sourceforge.czt.oz.jaxb.JaxbXmlWriter;
</add:oz>

/**
 * Utilities for parsing Object Z specifications.
 *
 * @author Petra Malik, Tim Miller
 */
public final class <class/>
{
  /**
   * Do not generate instances of this class.
   */
  private <class/>()
  {
  }

  public static Term parse(String filename, OperatorTable table)
    throws ParseException, FileNotFoundException
  {
    if (filename.endsWith(".tex") || filename.endsWith(".TEX")) {
      return ParseUtils.parseLatexFile(filename, table);
    }
    else if (filename.endsWith(".utf8") || filename.endsWith(".UTF8")) {
      return ParseUtils.parseUtf8File(filename, table);
    }
    else if (filename.endsWith(".utf16") || filename.endsWith(".UTF16")) {
      return ParseUtils.parseUtf16File(filename, table);
    }
    Logger logger = CztLogger.getLogger(<class/>.class);
    logger.warning("Cannot determine the file type of " + filename);
    return null;
  }

  public static Term parseUtf8File(String filename, OperatorTable table)
    throws ParseException, FileNotFoundException
  {
    try {
      Logger logger = CztLogger.getLogger(<class/>.class);
      logger.fine("Parse utf8 file " + filename);
      Reader in =
        new InputStreamReader(new FileInputStream(filename), "UTF-8");
      UnicodeParser parser = new UnicodeParser(in, table, filename);
      return parser.parse();
    }
    catch(UnsupportedEncodingException e) {
      throw new CztException("This should not happen!", e);
    }
  }

  public static Term parseUtf8File(String filename)
    throws ParseException, FileNotFoundException
  {
    return parseUtf8File(filename, new OperatorTable());
  }

  public static Term parseUtf16File(String filename, OperatorTable table)
    throws ParseException, FileNotFoundException
  {
    try {
      Logger logger = CztLogger.getLogger(<class/>.class);
      logger.fine("Parse utf16 file " + filename);
      Reader in =
        new InputStreamReader(new FileInputStream(filename), "UTF-16");
      UnicodeParser parser = new UnicodeParser(in, table, filename);
      return parser.parse();
    }
    catch(UnsupportedEncodingException e) {
      throw new CztException("This should not happen!", e);
    }
  }

  public static Term parseUtf16File(String filename)
    throws ParseException, FileNotFoundException
  {
    return parseUtf16File(filename, new OperatorTable());
  }

  public static Term parseLatexFile(String filename)
    throws ParseException, FileNotFoundException
  {
    return parseLatexFile(filename, new OperatorTable());
  }

  public static Term parseLatexFile(String filename, OperatorTable table)
    throws ParseException, FileNotFoundException
  {
    Logger logger = CztLogger.getLogger(<class/>.class);
    logger.fine("Parse LaTex file " + filename);
    Reader in = new InputStreamReader(new FileInputStream(filename));
    LatexParser parser = new LatexParser(in, table, filename);
    return parser.parse();
  }
}
</utils>
