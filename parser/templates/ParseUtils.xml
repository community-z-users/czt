<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (C) 2003, 2004, 2005, 2006 Petra Malik
     Copyright (C) 2003, 2004, 2005 Tim Miller
     This file is part of the czt project.
     
     The czt project contains free software;
     you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     
     The czt project is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with czt; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     -->

<utils xmlns:add="http://czt.sourceforge.net/templates/additional">
package <package/>;

import java.io.*;
import java.net.URL;
import java.util.Properties;
import java.util.logging.Logger;
import java.util.Iterator;

import net.sourceforge.czt.base.ast.Term;
import net.sourceforge.czt.parser.util.ParseException;
import net.sourceforge.czt.session.*;
import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.util.CztLogger;
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.util.ZString;

/**
 * Utilities for parsing <add:oz>Object</add:oz>
 *  <add:tcoz>TCO</add:tcoz>Z specifications.
 *
 * @author Petra Malik, Tim Miller
 */
public class <class/>
  implements Command
{
  public static Term parse(Source source,
                           SectionInfo sectInfo,
                           Properties properties)
    throws ParseException, IOException
  {
    if (source.getMarkup() == Markup.LATEX) {
      LatexParser parser =
        new LatexParser(source.getReader(),
                        source.toString(),
                        sectInfo,
                        properties);
      return parser.parse();
    }
    else if (source.getMarkup() == Markup.UNICODE) {
      UnicodeParser parser =
        new UnicodeParser(source.getReader(), source.toString(),
                           sectInfo, properties);
      return parser.parse();
    }
    else {
      throw new UnsupportedOperationException();
    }
  }

  public static Term parse(Source source, SectionInfo sectInfo)
    throws ParseException, IOException
  {
    return parse(source, sectInfo, new Properties());
  }

  /**
   * Parses the given file using the given operator table.
   * This method tries to figure out which parser to use by inspecting
   * the file ending.  It uses a latex parser for files ending with
   * ".tex" or ".TEX".  It uses an unicode parser for ".utf8" or ".UTF8"
   * file endings and reads them using encoding "UTF-8".
   * A unicode parser is used for ".utf16" or ".UTF16"
   * file endings and is read using encoding "UTF-16".  Returns
   * <code>null</code> if the file ending could not be identified.
   *
   * @param filename the name of the file to be parsed
   * @return the root of the parsed AST.
   * @throws FileNotFoundException if the given filename cannot be found.
   * @throws ParseException if the given file cannot be parsed.
   */
  public static Term parse(String filename,
                           SectionInfo sectInfo)
    throws ParseException, FileNotFoundException
  {
    if (filename.endsWith(".tex") || filename.endsWith(".TEX")) {
      return parseLatexFile(filename, sectInfo);
    }
    else if (filename.endsWith(".utf8") || filename.endsWith(".UTF8")) {
      return parseUtf8File(filename, sectInfo);
    }
    else if (filename.endsWith(".utf16") || filename.endsWith(".UTF16")) {
      return parseUtf16File(filename, sectInfo);
    }
    Logger logger = CztLogger.getLogger(<class/>.class);
    logger.warning("Cannot determine the file type of " + filename);
    return null;
  }
  public static Term parse(URL url,
                           SectionInfo sectInfo)
    throws ParseException, IOException
  {
    String name = url.toString();
    if (name.endsWith(".tex") || name.endsWith(".TEX")) {
      return parseLatexURL(url, sectInfo);
    }
    else if (name.endsWith(".utf8") || name.endsWith(".UTF8")) {
      return parseUtf8URL(url, sectInfo);
    }
    else if (name.endsWith(".utf16") || name.endsWith(".UTF16")) {
      return parseUtf16URL(url, sectInfo);
    }
    Logger logger = CztLogger.getLogger(<class/>.class);
    logger.warning("Cannot determine the file type of " + name);
    return null;
  }

  /**
   * Parses an UTF-8 encoded file using the unicode parser.
   *
   * @throws FileNotFoundException if the given filename cannot be found.
   * @throws ParseException if the given file cannot be parsed.
   * @deprecated     Replaced by {@link #parse(Source, SectionInfo)}
   */
  public static Term parseUtf8File(String filename, SectionInfo sectInfo)
    throws ParseException, FileNotFoundException
  {
    final String encoding = "UTF-8";
    try {
      Logger logger = CztLogger.getLogger(<class/>.class);
      logger.fine("Parse utf8 file " + filename);
      Reader in =
        new InputStreamReader(new FileInputStream(filename), encoding);
      UnicodeParser parser = new UnicodeParser(in, filename, sectInfo, new Properties());
      return parser.parse();
    }
    catch(UnsupportedEncodingException e) {
      final String message = "This should not happen: "
        + "Encoding " + encoding + " not supported.";
      throw new CztException(message, e);
    }
  }

  /**
   * @deprecated     Replaced by {@link #parse(Source, SectionInfo)}
   */
  public static Term parseUtf8URL(URL url, SectionInfo sectInfo)
    throws ParseException, IOException
  {
    final String encoding = "UTF-8";
    try {
      Logger logger = CztLogger.getLogger(<class/>.class);
      logger.fine("Parse utf8 file " + url.toString());
      Reader in =
        new InputStreamReader(url.openStream(), encoding);
      UnicodeParser parser = new UnicodeParser(in, url.toString(), sectInfo, new Properties());
      return parser.parse();
    }
    catch(UnsupportedEncodingException e) {
      final String message = "This should not happen: "
        + "Encoding " + encoding + " not supported.";
      throw new CztException(message, e);
    }
  }

  /**
   * @deprecated     Replaced by {@link #parse(Source, SectionInfo)}
   */
  public static Term parseUnicodeString(String input, SectionInfo sectInfo)
    throws ParseException, IOException
  {
    Reader in = new StringReader(input);
    UnicodeParser parser = new UnicodeParser(in, "Standard input", sectInfo, new Properties());
    return parser.parse();
  }

  /**
   * Parses an UTF-16 encoded file using the unicode parser.
   *
   * @throws FileNotFoundException if the given filename cannot be found.
   * @throws ParseException if the given file cannot be parsed.
   * @deprecated     Replaced by {@link #parse(Source, SectionInfo)}
   */
  public static Term parseUtf16File(String filename, SectionInfo sectInfo)
    throws ParseException, FileNotFoundException
  {
    final String encoding = "UTF-16";
    try {
      Logger logger = CztLogger.getLogger(<class/>.class);
      logger.fine("Parse utf16 file " + filename);
      Reader in =
        new InputStreamReader(new FileInputStream(filename), encoding);
      UnicodeParser parser = new UnicodeParser(in, filename, sectInfo, new Properties());
      return parser.parse();
    }
    catch(UnsupportedEncodingException e) {
      final String message = "This should not happen: "
        + "Encoding " + encoding + " not supported.";
      throw new CztException(message, e);
    }
  }

  /**
   * @deprecated     Replaced by {@link #parse(Source, SectionInfo)}
   */
  public static Term parseUtf16URL(URL url, SectionInfo sectInfo)
    throws ParseException, IOException
  {
    final String encoding = "UTF-16";
    try {
      Logger logger = CztLogger.getLogger(<class/>.class);
      logger.fine("Parse utf16 file " + url.toString());
      Reader in =
        new InputStreamReader(url.openStream(), encoding);
      UnicodeParser parser = new UnicodeParser(in, url.toString(), sectInfo, new Properties());
      return parser.parse();
    }
    catch(UnsupportedEncodingException e) {
      final String message = "This should not happen: "
        + "Encoding " + encoding + " not supported.";
      throw new CztException(message, e);
    }
  }

  /**
   * Parses a file using the latex parser.
   *
   * @throws FileNotFoundException if the given filename cannot be found.
   * @throws ParseException if the given file cannot be parsed.
   * @deprecated     Replaced by {@link #parse(Source, SectionInfo)}
   */
  public static Term parseLatexFile(String filename,
                                    SectionInfo sectInfo)
    throws ParseException, FileNotFoundException
  {
    Logger logger = CztLogger.getLogger(<class/>.class);
    logger.fine("Parse LaTex file " + filename);
    Reader in = new InputStreamReader(new FileInputStream(filename));
    LatexParser parser = new LatexParser(in,
                                         filename,
                                         sectInfo,
                                         new Properties());
    return parser.parse();
  }

  /**
   * @deprecated     Replaced by {@link #parse(Source, SectionInfo)}
   */
  public static Term parseLatexURL(URL url,
                                   SectionInfo sectInfo)
    throws ParseException, IOException
  {
    Logger logger = CztLogger.getLogger(<class/>.class);
    logger.fine("Parse LaTex file " + url.toString());
    Reader in = new InputStreamReader(url.openStream());
    LatexParser parser = new LatexParser(in,
                                         url.toString(),
                                         sectInfo,
                                         new Properties());
    return parser.parse();
  }

  /**
   * @deprecated     Replaced by {@link #parse(Source, SectionInfo)}
   */
  public static Term parseLatexString(String input,
                                      SectionInfo sectInfo)
    throws ParseException
  {
    Reader in = new StringReader(input);
    LatexParser parser = new LatexParser(in,
                                         "Standard input",
                                         sectInfo,
                                         new Properties());
    return parser.parse();
  }

  /** Parse a Source string/file as a Z Predicate.
   *  @param src The String or File etc. to be parsed.
   *  @param section The Z section name (in Unicode)
   *                 to parse within (null=standard_toolkit).
   *  @param sectman A section manager to use.  Must be non-null.
   *
   * @throws IOException if there are errors reading file/url inputs
   * @throws CommandException if the predicate cannot be parsed.
   */
  public static Pred parsePred(Source src, String section,
			       /*@non_null@*/SectionManager sectman) 
    throws IOException, CommandException
  {
    AxPara axPara = null;
    // TODO: Add backslash in front of underscores
    String parent = section;
    String name = "CZT_parsePred_tmp1433589372849";
    StringBuffer buf = new StringBuffer();
    if (src.getMarkup() == Markup.LATEX) {
      if (parent == null)
        parent = "standard\\_toolkit";
      buf.append("\\begin{zsection}\\SECTION ");
      buf.append(name);
      buf.append(" \\parents ");
      buf.append(parent);
      buf.append("\\end{zsection} ");
      buf.append("\\begin{axdef} \\where\n");
      Reader reader = src.getReader();
      int ch = reader.read();
      while (ch != -1) {
        buf.appendCodePoint(ch);
        ch = reader.read();
      }
      buf.append("\n\\end{axdef}\n");
    }
    else {
      if (parent == null)
        parent = "standard_toolkit";
      buf.append(ZString.ZED);
      buf.append(" section ");
      buf.append(name);
      buf.append(" parents ");
      buf.append(parent);
      buf.append(ZString.END);
      buf.append(ZString.AX);
      buf.append(ZString.BAR);
      buf.append(ZString.NL);
      Reader reader = src.getReader();
      int ch = reader.read();
      while (ch != -1) {
        buf.appendCodePoint(ch);
        ch = reader.read();
      }
      buf.append(ZString.NL);
      buf.append(ZString.END);
    }
    // we create a temporary sectman so that this temp section does not
    //  clutter up the original section manager.
    SectionManager tmpsectman = (SectionManager) sectman.clone();
    Source input = new StringSource(buf.toString());
    input.setMarkup(src.getMarkup());
    input.setEncoding(src.getEncoding());
    tmpsectman.put(new Key(name, Source.class), input);
    Spec spec = (Spec) tmpsectman.get(new Key(name, Spec.class));
    ZSect sect = (ZSect) spec.getSect().get(0);
    // find first AxPara
    for (Iterator i = sect.getPara().iterator(); i.hasNext(); ) {
      Object p = i.next();
      if (p instanceof AxPara) {
        axPara = (AxPara)p;
        break;
      }
    }
    assert axPara != null;
    return axPara.getZSchText().getPred();
  }

  /** Parse a Source string/file as a Z Expression.
   *  @param src The String or File etc. to be parsed.
   *  @param section The Z section to parse within (null=standard_toolkit).
   *  @param sectman A section manager to use.  Must be non-null.
   *
   * @throws IOException if there are errors reading file/url inputs
   * @throws CommandException if the expression cannot be parsed.
   */
  public static Expr parseExpr(Source src, String section,
			       /*@non_null@*/SectionManager sectman) 
    throws IOException, CommandException
  {
    AxPara axPara = null;
    String parent = section;
    String name = "CZT_parseExpr_tmp1433589372849";
    StringBuffer buf = new StringBuffer();
    if (src.getMarkup() == Markup.LATEX) {
      if (parent == null)
        parent = "standard\\_toolkit";
      buf.append("\\begin{zsection}\\SECTION ");
      buf.append(name);
      buf.append(" \\parents ");
      buf.append(parent);
      buf.append("\\end{zsection} ");
      buf.append("\\begin{axdef} result == \n");
      Reader reader = src.getReader();
      int ch = reader.read();
      while (ch != -1) {
        buf.appendCodePoint(ch);
        ch = reader.read();
      }
      buf.append("\n\\end{axdef}\n");
    }
    else {
      String message = "Unicode inputs not implemented yet";
      throw new UnsupportedOperationException(message);
    }
    // we create a temporary sectman so that this temp section does not
    //  clutter up the original section manager.
    SectionManager tmpsectman = (SectionManager)sectman.clone();
    Source input = new StringSource(buf.toString());
    input.setMarkup(src.getMarkup());
    input.setEncoding(src.getEncoding());
    tmpsectman.put(new Key(name, Source.class), input);
    Spec spec = (Spec) tmpsectman.get(new Key(name, Spec.class));
    ZSect sect = (ZSect) spec.getSect().get(0);
    // find first AxPara
    for (Iterator i = sect.getPara().iterator(); i.hasNext(); ) {
      Object p = i.next();
      if (p instanceof AxPara) {
        axPara = (AxPara)p;
        break;
      }
    }
    ConstDecl cdecl = (ConstDecl) axPara.getZSchText().getZDeclList().get(0);
    return cdecl.getExpr();
  }

  /**
   * Determine the markup of a file.
   */
  public static Markup getMarkup(String filename)
  {
    Markup result = null;
    if (filename.endsWith(".tex") || filename.endsWith(".TEX")) {
      result = Markup.LATEX;
    }
    else if (filename.endsWith(".utf8") || filename.endsWith(".UTF8") ||
             filename.endsWith(".utf16") || filename.endsWith(".UTF16")) {
      result = Markup.UNICODE;
    }
    return result;
  }

  /**
   * Get a <code>Command</code> object for use 
   * in <code>SectionManager</code>
   *
   * @return A command for parsing specifications.
   */
  public static Command getCommand()
  {
    return new ParseUtils();
  }

  public boolean compute(String name, SectionManager manager)
    throws CommandException
  {
    try {
      Source source = (Source) manager.get(new Key(name, Source.class));
      if (source != null) {
        Term term = ParseUtils.parse(source, manager, manager.getProperties());
        if (term instanceof Spec) {
          manager.put(new Key(name, Spec.class), (Spec) term);
        }
      }
    }
    catch (ParseException exception) {
      throw new CommandException(exception);
    }
    catch (IOException exception) {
      throw new CommandException(exception);
    }
    return true;
  }
}
</utils>
