<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (C) 2004, 2005 Petra Malik
     This file is part of the CZT project: http://czt.sourceforge.net

     The CZT project contains free software; you can redistribute it and/or
     modify it under the terms of the GNU General Public License as published
     by the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     The CZT project is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License along
     with CZT; if not, write to the Free Software Foundation, Inc.,
     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->

<scanner xmlns:add="http://czt.sourceforge.net/templates/additional">
package <package/>;

import java.io.*;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import net.sourceforge.czt.java_cup.runtime.Scanner;
import net.sourceforge.czt.java_cup.runtime.Symbol;

import net.sourceforge.czt.parser.util.LatexMarkupParser;
import net.sourceforge.czt.session.*;

/**
 * &lt;p&gt;
 *   The high-level latex to unicode converter for <add:oz>Object </add:oz>Z.
 * &lt;/p&gt;
 * &lt;p&gt;
 *   This class is responsible for translating
 *   <add:oz>Object </add:oz>Z
 *   specifications written in the latex mark-up language into unicode.
 *   It provides tokens (instances of class {@link Symbol}) whos values
 *   are unicode strings and which contain line and column number
 *   information of the original latex file or stream.  This makes it
 *   possible to use this class as a standalone translater and, via
 *   {@link net.sourceforge.czt.parser.util.CztReader},
 *   as the input to the unicode scanner and therefore
 *   for the <add:oz>Object </add:oz>Z parser.
 * &lt;/p&gt;
 */
public class <class/>
  implements Scanner
{
  private LatexMarkupParser scanner_;
  private SectionInfo sectInfo_;
  private Latex2Unicode l2u_;

  public <class/>(URL url, SectionInfo sectInfo, Properties properties)
    throws IOException
  {
    l2u_ = new Latex2Unicode(url, properties);
    l2u_.setSource(url.toString());
    scanner_ = new LatexMarkupParser(l2u_, sectInfo);
    scanner_.setSource(url.toString());
  }

  public <class/>(Source source, SectionInfo sectInfo, Properties properties)
    throws IOException
  {
    l2u_ = new Latex2Unicode(source.getReader(), properties);
    l2u_.setSource(source.toString());
    scanner_ = new LatexMarkupParser(l2u_, sectInfo);
    scanner_.setSource(source.toString());
  }

  public <class/>(Reader in, SectionInfo sectInfo, Properties properties)
  {
    l2u_ = new Latex2Unicode(in, properties);
    scanner_ = new LatexMarkupParser(l2u_, sectInfo);
  }

  public <class/>(InputStream in, SectionInfo sectInfo, Properties properties)
  {
    this(new InputStreamReader(in), sectInfo, properties);
  }

  public void setSource(String source)
  {
    l2u_.setSource(source);
    scanner_.setSource(source);
  }

  public Symbol next_token()
    throws Exception
  {
    return scanner_.next_token();
  }

  public static void convert(URL url,
                             String outfilename,
                             Properties properties)
    throws Exception
  {
    InputStream input = url.openStream();
    Writer writer = 
      new OutputStreamWriter(new FileOutputStream(outfilename), "UTF-8");
    convert(input, url.toString(), writer, properties);
    writer.close();
  }

  public static void convert(InputStream input,
                             String source,
                             Writer writer,
                             Properties properties)
    throws Exception
  {
    <class/> scanner = new <class/>(input, new SectionManager(), properties);
    scanner.setSource(source);
    Symbol s = null;
    while ( (s = scanner.next_token()).sym != Sym.EOF) {
      if (s.value != null) writer.write((String) s.value);
    }
  }

  public static void main(String[] args)
  {
    String usage = "Usage: java <package/>.<class/>"
      + " [ -in &lt;inputfile&gt;] [ -out &lt;outputfile&gt;]";
    try {
      String source = null;
      InputStream input = System.in;
      Writer writer = new PrintWriter(System.out);
      String encoding = "UTF-8";
      for (int i = 0; i &lt; args.length; i++) {
        if ("-in".equals(args[i])) {
          if (i &lt; args.length) {
            source = args[++i];
            input = new FileInputStream(source);
          } else {
            System.err.println(usage);
            return;
          }
        }
        else if ("-encoding".equals(args[i])) {
          if (i &lt; args.length) {
            encoding = args[++i];
          } else {
            System.err.println(usage);
            return;
          }
        }
        else if ("-out".equals(args[i])) {
          if (i &lt; args.length) {
            FileOutputStream stream = new FileOutputStream(args[++i]);
            writer =
              new OutputStreamWriter(stream, encoding);
          }
          else {
            System.err.println(usage);
            return;
          }
        }
        else {
          System.err.println(usage);
          return;
        }
      }
      convert(input, source, writer, new Properties());
      writer.close();
    }
    catch (Exception e) {
      e.printStackTrace();
    }
  }
}
</scanner>
