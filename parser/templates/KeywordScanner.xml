<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (C) 2004, 2005 Petra Malik, Tim Miller
     This file is part of the czt project.
     
     The czt project contains free software;
     you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     
     The czt project is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with czt; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     -->

<scanner xmlns:add="http://czt.sourceforge.net/templates/additional">
package <package/>;

import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;

import net.sourceforge.czt.java_cup.runtime.*;

import net.sourceforge.czt.parser.util.DebugUtils;
import net.sourceforge.czt.parser.util.Decorword;
import net.sourceforge.czt.parser.util.ParsePropertiesKeys;
import net.sourceforge.czt.parser.z.Keyword;
import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.util.CztLogger;

import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.util.ZString;
<add:zpatt>
import net.sourceforge.czt.zpatt.util.ZPattString;
</add:zpatt>
<add:oz>
import net.sourceforge.czt.oz.util.OzString;
</add:oz>

<add:tcoz>
import net.sourceforge.czt.tcoz.util.TcozString;
</add:tcoz>

<add:circus>
import net.sourceforge.czt.circus.util.CircusString;
</add:circus>

/**
 * &lt;p&gt;This is a keyword lexer (part of context-sensitive lexis) for
<add:z> * Z</add:z>
<add:oz> * Object Z</add:oz>
<add:circus> * Circus </add:circus><add:tcoz> and TCOZ</add:tcoz>
 * specifications in unicode format.&lt;/p&gt;
 *
 * &lt;p&gt;According to the ISO Standard for Z, the lexis for Z specifications
 * consists of two phases: the context-free lexis and the context-sensitive
 * lexis.  This class is an implementation of sections 7.4.2 and 7.4.3
 * of the ISO Z standard, which describes the context-sensitive lexis.
 * &lt;/p&gt;
 * 
 * &lt;p&gt;This class transforms a stream of tokens into another stream of
 * tokens.  The input is usually provided by the {@link ContextFreeScanner}.
 * Each DECORWORD token whos spelling is exactly that of a keyword is mapped
 * to the corresponding keyword token.  All other tokens are left unchanged.
 * &lt;/p&gt;
 */
public class KeywordScanner
  implements Scanner
{
  private SeparateDelimiter scanner_;
  private static Map &lt;String, Integer&gt; keywords_ = createKeywordMap();
  private Stack&lt;Symbol&gt; tokens_ = new Stack&lt;Symbol&gt;();
  
  private static final Map symbolMap_ = DebugUtils.getFieldMap(Sym.class);

public static long time = 0;

  public KeywordScanner(ContextFreeScanner scanner, Properties properties)
  {
    createKeywordMap();
    scanner_ = new SeparateDelimiter(scanner, properties);
  }

  private static Map &lt;String, Integer&gt; createKeywordMap()
  {
    Map &lt;String, Integer&gt; result = new HashMap&lt;String, Integer&gt;();
    SymMap symMap = SymMap.getInstance();
    for (Keyword keyword : Keyword.values()) {
      final Integer symbol = symMap.get(keyword.toString());
      if (symbol == null) {
        final String message = "Cannot map keyword " + keyword +
          " to a parser token.";
        throw new RuntimeException(message);
      }
      addKeyword(result, keyword.spelling(), symbol);
    }

<add:zpatt>
    addKeyword(result, ZString.VDASH, Sym.VDASH);
    addKeyword(result, ZPattString.PROVISO, Sym.PROVISO);
</add:zpatt>
<add:oz>
    addKeyword(result, ZString.DELTA, Sym.DELTA);
    addKeyword(result, OzString.GCH, Sym.GCH);
    addKeyword(result, OzString.PARALLEL, Sym.PARALLEL);
    addKeyword(result, OzString.ASSOPARALLEL, Sym.ASSOPARALLEL);
    addKeyword(result, OzString.DGCH, Sym.DGCH);
    addKeyword(result, OzString.DCNJ, Sym.DCNJ);
    addKeyword(result, OzString.CLASSUNION, Sym.CLASSUNION);
    addKeyword(result, OzString.SDEF, Sym.SDEF);
    addKeyword(result, OzString.POLY, Sym.POLY);
    addKeyword(result, OzString.CONTAINMENT, Sym.CONTAINMENT);
    addKeyword(result, OzString.INITWORD, Sym.INITWORD);
</add:oz>
<add:tcoz>
    addKeyword(result, TcozString.ATTIME, Sym.ATTIME);
    addKeyword(result, TcozString.NEXTPRO, Sym.NEXTPRO);
    addKeyword(result, TcozString.INTCHOICE, Sym.INTCHOICE);
    addKeyword(result, TcozString.DIC, Sym.DIC);
    addKeyword(result, TcozString.INTERLEAVE, Sym.INTERLEAVE);
    addKeyword(result, TcozString.DIL, Sym.DIL);
    addKeyword(result, "waituntil", Sym.WAITUNTIL);
    addKeyword(result, "deadline", Sym.DEADLINE);
    addKeyword(result, "wait", Sym.WAIT);
    addKeyword(result, TcozString.INTERRUPT, Sym.INTERRUPT);
    addKeyword(result, TcozString.TIMEOUT, Sym.TIMEOUT);
    addKeyword(result, TcozString.TIMEEND, Sym.TIMEEND);
    addKeyword(result, TcozString.DPARA, Sym.DPARA);
    addKeyword(result, TcozString.NETTOPLEFT, Sym.NETTOPLEFT);
    addKeyword(result, TcozString.NETTOPRIGHT, Sym.NETTOPRIGHT);
    addKeyword(result, "chan", Sym.CHAN);
    addKeyword(result, "sensor", Sym.SENSOR);
    addKeyword(result, "actuator", Sym.ACTUATOR);
</add:tcoz>  
<add:circus>
    /* Circus symbolic keychars*/
    addKeyword(result, CircusString.PREFIXCOLON, Sym.PREFIXCOLON);
    addKeyword(result, CircusString.CIRCDEF, Sym.CIRCDEF);  
    addKeyword(result, CircusString.CIRCINDEX, Sym.CIRCINDEX);
    addKeyword(result, CircusString.CIRCMU, Sym.CIRCMU);
    addKeyword(result, CircusString.CIRCTHEN, Sym.CIRCTHEN);
    addKeyword(result, CircusString.CIRCELSE, Sym.CIRCELSE);
    addKeyword(result, CircusString.PREFIXTHEN, Sym.PREFIXTHEN);
    /**
     * Note: We are reusing ANDALSO instead. See Parser.xml terminal section for an explanation.
     * addKeyword(result, CircusString.CIRCGUARD, Sym.CIRCGUARD); 
     */
    addKeyword(result, CircusString.CIRCSEQ, Sym.CIRCSEQ);
    /**
     * Note: We are reusing ZCOMP instead. See Parser.xml terminal section for an explanation.
     * addKeyword(result, CircusString.REPSEQ, Sym.REPSEQ);
     */    
    addKeyword(result, CircusString.INTERLEAVE, Sym.INTERLEAVE);
    addKeyword(result, CircusString.REPINTERLEAVE, Sym.REPINTERLEAVE);   
    addKeyword(result, CircusString.REPPARALLEL, Sym.REPPARALLEL);   
    addKeyword(result, CircusString.CIRCHIDING, Sym.CIRCHIDING);
    addKeyword(result, CircusString.EXTCHOICE, Sym.EXTCHOICE);
    addKeyword(result, CircusString.REPEXTCHOICE, Sym.REPEXTCHOICE);   
    addKeyword(result, CircusString.INTCHOICE, Sym.INTCHOICE);
    addKeyword(result, CircusString.REPINTCHOICE, Sym.REPINTCHOICE);   
    //addKeyword(result, CircusString.CIRCPARBAR, Sym.CIRCPARBAR);   
    
    /* Circus language keywords*/
    /**
     * Note: We are reusing ZString.IF instead. See Parser.xml terminal section for an explanation.
     * addKeyword(result, CircusString.CIRCIF, Sym.CIRCIF);
     */    
    addKeyword(result, CircusString.CIRCFI, Sym.CIRCFI);
    addKeyword(result, CircusString.CIRCDO, Sym.CIRCDO);
    addKeyword(result, CircusString.CIRCOD, Sym.CIRCOD);
    addKeyword(result, CircusString.CIRCVAR, Sym.CIRCVAR);
    addKeyword(result, CircusString.CIRCVAL, Sym.CIRCVAL);
    addKeyword(result, CircusString.CIRCRES, Sym.CIRCRES);
    addKeyword(result, CircusString.CIRCVRES, Sym.CIRCVRES);    
    addKeyword(result, CircusString.CIRCSKIP, Sym.CIRCSKIP);
    addKeyword(result, CircusString.CIRCSTOP, Sym.CIRCSTOP);
    addKeyword(result, CircusString.CIRCCHAOS, Sym.CIRCCHAOS);
    
    /**
     * Note: Removed from Keyword scanner and added directly into the low-level
     *       Latex2Unicode scanner instead? TODO:TESTING. I think it needs to 
     *       be kept here anyway.
     */     
      addKeyword(result, CircusString.CIRCCHAN, Sym.CIRCCHAN);
      addKeyword(result, CircusString.CIRCCHANFROM, Sym.CIRCCHANFROM);
      addKeyword(result, CircusString.CIRCCHANSET, Sym.CIRCCHANSET);
      addKeyword(result, CircusString.CIRCNAMESET, Sym.CIRCNAMESET);
      addKeyword(result, CircusString.CIRCPROC, Sym.CIRCPROC);
      addKeyword(result, CircusString.CIRCBEGIN, Sym.CIRCBEGIN);
      addKeyword(result, CircusString.CIRCEND, Sym.CIRCEND);
      addKeyword(result, CircusString.CIRCSTATE, Sym.CIRCSTATE);
     /**/
</add:circus>
    return result;
  }
  
  /**
   * &lt;p&gt;
   * Maps the given keyword string with a specific &lt;code&gt;Symbol&lt;/code&gt;
   * by including it into the &lt;code&gt;keyword_&lt;/code&gt; map. 
   * &lt;/p&gt;
   * &lt;p&gt;
   * If a previous mapping to same keyword already exists, a warning message is given.
   * It is useful while debugging the parsers/scanners to ensure that the Unicode
   * symbols used are indeed unique.
   * &lt;/p&gt;
   */
  private static void addKeyword(Map &lt;String, Integer&gt; map,
                                 String keyword,
                                 int symbol) {
    Integer old = map.put(keyword, new Integer(symbol));        
    if (old != null) {
      String logMessage = "Invalid keyword mapping [" + keyword + " -> " + 
        symbolMap_.get(symbol) + ")]. The keyword " + keyword + 
        " has already been mapped to token " + symbolMap_.get(old) + ".";
      CztLogger.getLogger(KeywordScanner.class).severe(logMessage);
    }
  }

  private Symbol toToken(Stroke stroke, int left, int right)
  {
    if (stroke instanceof InStroke) {
      return new Symbol(Sym.INSTROKE, left, right);
    }
    else if (stroke instanceof OutStroke) {
      return new Symbol(Sym.OUTSTROKE, left, right);
    }
    else if (stroke instanceof NextStroke) {
      return new Symbol(Sym.NEXTSTROKE, left, right);
    }
    else if (stroke instanceof NumStroke) {
      NumStroke numStroke = (NumStroke) stroke;
      return new Symbol(Sym.NUMSTROKE, left, right, numStroke.getDigit());
    }
    else {
      throw new CztException("Unexpected stroke");
    }
  }

  public Symbol next_token()
    throws IOException
  {
    if (! tokens_.empty()) return tokens_.pop();
    Symbol symbol = scanner_.next_token();
    String logMessage =
      "Received token (" + symbol.sym + ", " + symbol.value + ")";
    CztLogger.getLogger(KeywordScanner.class).finer(logMessage);
    if (symbol.sym == Sym.DECORWORD) {
      Decorword decorword = (Decorword) symbol.value;
      if ("".equals(decorword.getWord())) {
        Stroke[] strokes = decorword.getStrokes();
        assert strokes.length > 0;
        for (int i = strokes.length - 1; i > 0; i--) {
          tokens_.push(toToken(strokes[i], symbol.left, symbol.right));
        }
        return toToken(strokes[0], symbol.left, symbol.right);
      }
      String value = decorword.getName();
      Integer token = (Integer) keywords_.get(value);
      if (token != null) {
        logMessage =
          "Returning " + token.intValue() + " instead.";
        CztLogger.getLogger(KeywordScanner.class).finer(logMessage);
        return new Symbol(token.intValue(), symbol.left, symbol.right);
      }
    }
    return symbol;
  }
}

class SeparateDelimiter
  implements Scanner, ParsePropertiesKeys
{
  private Properties properties_;
  private ContextFreeScanner scanner_;
  private Stack&lt;Symbol&gt; tokens_ = new Stack&lt;Symbol&gt;();

  public SeparateDelimiter(ContextFreeScanner scanner, Properties properties)
  {
    scanner_ = scanner;
    properties_ = properties;
  }

  private boolean getBooleanProperty(String propertyKey)
  {
    if (properties_ == null) {
      return false;
    }
    return "true".equals(properties_.getProperty(propertyKey));
  }

  private boolean needsSeparation(char c)
  {
    return c == ',' || c == ';' || c == '.';
  }

  // TODO compute line and column number correctly (not possible?)
  public Symbol next_token()
    throws IOException
  {
    if (! tokens_.empty()) return tokens_.pop();
    Symbol symbol = scanner_.next_token();
    int left = symbol.left;
    int right = symbol.right;
    if (symbol.sym == Sym.DECORWORD &amp;&amp;
        getBooleanProperty(PROP_EXTRACT_COMMA_OR_SEMI_FROM_DECORWORDS)) {
      String value = ((Decorword) symbol.value).getName();
      char[] charArray = value.toCharArray();
      int length = charArray.length;
      int suffix = length - 1;
      while(needsSeparation(charArray[suffix])) {
        if (suffix &lt;= 0) {
          return symbol;
        }
        suffix--;
      }
      assert suffix >= 0;
      if (suffix &lt; length - 1) {
        String string = new String(charArray, suffix + 1, length - suffix - 1);
        Decorword dw = new Decorword(string);
        tokens_.push(new Symbol(Sym.DECORWORD, left, right, dw));
      }
      int prefix = 0;
      while(needsSeparation(charArray[prefix])) {
        prefix++;
      }
      assert prefix &lt;= suffix;
      String string = new String(charArray, prefix, suffix - prefix + 1);
      Symbol newSymbol =
        new Symbol(Sym.DECORWORD, left, right, new Decorword(string));
      if (prefix == 0) {
        return newSymbol;
      }
      tokens_.push(newSymbol);
      string = new String(charArray, 0, prefix);
      return new Symbol(Sym.DECORWORD, left, right, new Decorword(string));
    }
    return symbol;
  }
}
</scanner>
