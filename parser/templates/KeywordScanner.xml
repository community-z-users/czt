<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (C) 2004, 2005 Petra Malik, Tim Miller
     This file is part of the czt project.
     
     The czt project contains free software;
     you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     
     The czt project is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with czt; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     -->

<scanner xmlns:add="http://czt.sourceforge.net/templates/additional">
package <package/>;

import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;

import net.sourceforge.czt.java_cup.runtime.*;

import net.sourceforge.czt.parser.util.Decorword;
import net.sourceforge.czt.parser.util.ParsePropertiesKeys;
import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.util.CztLogger;

import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.util.ZString;
<add:zpatt>
import net.sourceforge.czt.zpatt.util.ZPattString;
</add:zpatt>
<add:oz>
import net.sourceforge.czt.oz.util.OzString;
</add:oz>

<add:tcoz>
import net.sourceforge.czt.tcoz.util.TcozString;
</add:tcoz>

<add:circus>
//import net.sourceforge.czt.circus.util.CircusString;
</add:circus>

/**
 * &lt;p&gt;This is a keyword lexer (part of context-sensitive lexis) for
<add:z> * Z</add:z>
<add:oz> * Object Z</add:oz><add:tcoz> and TCOZ</add:tcoz>
 * specifications in unicode format.&lt;/p&gt;
 *
 * &lt;p&gt;According to the ISO Standard for Z, the lexis for Z specifications
 * consists of two phases: the context-free lexis and the context-sensitive
 * lexis.  This class is an implementation of sections 7.4.2 and 7.4.3
 * of the ISO Z standard, which describes the context-sensitive lexis.
 * &lt;/p&gt;
 * 
 * &lt;p&gt;This class transforms a stream of tokens into another stream of
 * tokens.  The input is usually provided by the {@link ContextFreeScanner}.
 * Each DECORWORD token whos spelling is exactly that of a keyword is mapped
 * to the corresponding keyword token.  All other tokens are left unchanged.
 * &lt;/p&gt;
 */
public class KeywordScanner
  implements Scanner
{
  private SeparateDelimiter scanner_;
  private Map keywords_ = createKeywordMap();
  private Stack&lt;Symbol&gt; tokens_ = new Stack&lt;Symbol&gt;();

  public KeywordScanner(ContextFreeScanner scanner, Properties properties)
  {
    scanner_ = new SeparateDelimiter(scanner, properties);
  }

  private Map createKeywordMap()
  {
    Map result = new HashMap();
    // Z Standard 7.4.2 (Alphabetic Keywords)
    result.put(ZString.ELSE, new Integer(Sym.ELSE));
    result.put(ZString.FALSE, new Integer(Sym.FALSE));
    result.put(ZString.FUNCTION, new Integer(Sym.FUNCTION));
    result.put(ZString.GENERIC, new Integer(Sym.GENERIC));
    result.put(ZString.IF, new Integer(Sym.IF));
    result.put(ZString.LEFTASSOC, new Integer(Sym.LEFTASSOC));
    result.put(ZString.LET, new Integer(Sym.LET));
    result.put(ZString.POWER, new Integer(Sym.POWER));
    result.put(ZString.PARENTS, new Integer(Sym.PARENTS));
    result.put(ZString.PRE, new Integer(Sym.ZPRE));
    result.put(ZString.RELATION, new Integer(Sym.RELATION));
    result.put(ZString.RIGHTASSOC, new Integer(Sym.RIGHTASSOC));
    result.put(ZString.SECTION, new Integer(Sym.SECTION));
    result.put(ZString.THEN, new Integer(Sym.THEN));
    result.put(ZString.TRUE, new Integer(Sym.TRUE));

    // Z Standard 7.4.3 (Symbolic Keywords)
    result.put(ZString.COLON, new Integer(Sym.COLON));
    result.put(ZString.DEFEQUAL, new Integer(Sym.DEFEQUAL));
    result.put(ZString.COMMA, new Integer(Sym.COMMA));
    result.put(ZString.DEFFREE, new Integer(Sym.DEFFREE));
    result.put(ZString.BAR, new Integer(Sym.BAR));
    result.put(ZString.ANDALSO, new Integer(Sym.ANDALSO));
    result.put(ZString.ZHIDE, new Integer(Sym.ZHIDE));
    result.put(ZString.SLASH, new Integer(Sym.SLASH));
    result.put(ZString.DOT, new Integer(Sym.DOT));
    result.put(ZString.SEMICOLON, new Integer(Sym.SEMICOLON));
    result.put(ZString.ARG, new Integer(Sym.ARG));
    result.put(ZString.LISTARG, new Integer(Sym.LISTARG));
    result.put(ZString.EQUALS, new Integer(Sym.EQUALS));
    result.put(ZString.CONJECTURE, new Integer(Sym.CONJECTURE));
    result.put(ZString.ALL, new Integer(Sym.ALL));
    result.put(ZString.SPOT, new Integer(Sym.SPOT));
    result.put(ZString.EXI, new Integer(Sym.EXI));
    result.put(ZString.EXIONE, new Integer(Sym.EXIONE));
    result.put(ZString.IFF, new Integer(Sym.IFF));
    result.put(ZString.IMP, new Integer(Sym.IMP));
    result.put(ZString.OR, new Integer(Sym.OR));
    result.put(ZString.AND, new Integer(Sym.AND));
    result.put(ZString.NOT, new Integer(Sym.NOT));
    result.put(ZString.MEM, new Integer(Sym.MEM));
    result.put(ZString.ZPROJ, new Integer(Sym.ZPROJ));
    result.put(ZString.CROSS, new Integer(Sym.CROSS));
    result.put(ZString.LAMBDA, new Integer(Sym.LAMBDA));
    result.put(ZString.MU, new Integer(Sym.MU));
    result.put(ZString.THETA, new Integer(Sym.THETA));
    result.put(ZString.ZCOMP, new Integer(Sym.ZCOMP));
    result.put(ZString.ZPIPE, new Integer(Sym.ZPIPE));
<add:zpatt>
    result.put(ZString.VDASH, new Integer(Sym.VDASH));
    result.put(ZPattString.PROVISO, new Integer(Sym.PROVISO));
</add:zpatt>
<add:oz>
    result.put(ZString.DELTA, new Integer(Sym.DELTA));
    result.put(OzString.GCH, new Integer(Sym.GCH));
    result.put(OzString.PARALLEL, new Integer(Sym.PARALLEL));
    result.put(OzString.ASSOPARALLEL, new Integer(Sym.ASSOPARALLEL));
    result.put(OzString.DGCH, new Integer(Sym.DGCH));
    result.put(OzString.DCNJ, new Integer(Sym.DCNJ));
    result.put(OzString.CLASSUNION, new Integer(Sym.CLASSUNION));
    result.put(OzString.SDEF, new Integer(Sym.SDEF));
    result.put(OzString.POLY, new Integer(Sym.POLY));
    result.put(OzString.CONTAINMENT, new Integer(Sym.CONTAINMENT));
    result.put(OzString.INITWORD, new Integer(Sym.INITWORD));
</add:oz>
<add:tcoz>
   result.put(TcozString.ATTIME, new Integer(Sym.ATTIME));
   result.put(TcozString.NEXTPRO, new Integer(Sym.NEXTPRO));
   result.put(TcozString.INTCHOICE, new Integer(Sym.INTCHOICE));
   result.put(TcozString.DIC, new Integer(Sym.DIC));
   result.put(TcozString.INTERLEAVE, new Integer(Sym.INTERLEAVE));
   result.put(TcozString.DIL, new Integer(Sym.DIL));
   result.put("waituntil", new Integer(Sym.WAITUNTIL));
   result.put("deadline", new Integer(Sym.DEADLINE));
   result.put("wait", new Integer(Sym.WAIT));
   result.put(TcozString.INTERRUPT, new Integer(Sym.INTERRUPT));
   result.put(TcozString.TIMEOUT, new Integer(Sym.TIMEOUT));
   result.put(TcozString.TIMEEND, new Integer(Sym.TIMEEND));
   result.put(TcozString.DPARA, new Integer(Sym.DPARA));
   result.put(TcozString.NETTOPLEFT, new Integer(Sym.NETTOPLEFT));
   result.put(TcozString.NETTOPRIGHT, new Integer(Sym.NETTOPRIGHT));
   result.put("chan", new Integer(Sym.CHAN));
   result.put("sensor", new Integer(Sym.SENSOR));
   result.put("actuator", new Integer(Sym.ACTUATOR));
</add:tcoz>  
<add:circus>
//   result.put(CircusString.CIRCCHAN, new Integer(Sym.CIRCCHAN));
</add:circus>
    return result;
  }

  private Symbol toToken(Stroke stroke, int left, int right)
  {
    if (stroke instanceof InStroke) {
      return new Symbol(Sym.INSTROKE, left, right);
    }
    else if (stroke instanceof OutStroke) {
      return new Symbol(Sym.OUTSTROKE, left, right);
    }
    else if (stroke instanceof NextStroke) {
      return new Symbol(Sym.NEXTSTROKE, left, right);
    }
    else if (stroke instanceof NumStroke) {
      NumStroke numStroke = (NumStroke) stroke;
      return new Symbol(Sym.NUMSTROKE, left, right, numStroke.getNumber());
    }
    else {
      throw new CztException("Unexpected stroke");
    }
  }

  public Symbol next_token()
    throws IOException
  {
    if (! tokens_.empty()) return tokens_.pop();
    Symbol symbol = scanner_.next_token();
    String logMessage =
      "Received token (" + symbol.sym + ", " + symbol.value + ")";
    CztLogger.getLogger(KeywordScanner.class).finer(logMessage);
    if (symbol.sym == Sym.DECORWORD) {
      Decorword decorword = (Decorword) symbol.value;
      if ("".equals(decorword.getWord())) {
        Stroke[] strokes = decorword.getStrokes();
        assert strokes.length > 0;
        for (int i = strokes.length - 1; i > 0; i--) {
          tokens_.push(toToken(strokes[i], symbol.left, symbol.right));
        }
        return toToken(strokes[0], symbol.left, symbol.right);
      }
      String value = decorword.getName();
      Integer token = (Integer) keywords_.get(value);
      if (token != null) {
        logMessage =
          "Returning " + token.intValue() + " instead.";
        CztLogger.getLogger(KeywordScanner.class).finer(logMessage);
        return new Symbol(token.intValue(), symbol.left, symbol.right);
      }
    }
    return symbol;
  }
}

class SeparateDelimiter
  implements Scanner, ParsePropertiesKeys
{
  private Properties properties_;
  private ContextFreeScanner scanner_;
  private Stack&lt;Symbol&gt; tokens_ = new Stack&lt;Symbol&gt;();

  public SeparateDelimiter(ContextFreeScanner scanner, Properties properties)
  {
    scanner_ = scanner;
    properties_ = properties;
  }

  private boolean getBooleanProperty(String propertyKey)
  {
    if (properties_ == null) {
      return false;
    }
    return "true".equals(properties_.getProperty(propertyKey));
  }

  private boolean needsSeparation(char c)
  {
    return c == ',' || c == ';' || c == '.';
  }

  // TODO compute line and column number correctly (not possible?)
  public Symbol next_token()
    throws IOException
  {
    if (! tokens_.empty()) return tokens_.pop();
    Symbol symbol = scanner_.next_token();
    int left = symbol.left;
    int right = symbol.right;
    if (symbol.sym == Sym.DECORWORD &amp;&amp;
        getBooleanProperty(PROP_EXTRACT_COMMA_OR_SEMI_FROM_DECORWORDS)) {
      String value = ((Decorword) symbol.value).getName();
      char[] charArray = value.toCharArray();
      int length = charArray.length;
      int suffix = length - 1;
      while(needsSeparation(charArray[suffix])) {
        if (suffix &lt;= 0) {
          return symbol;
        }
        suffix--;
      }
      assert suffix >= 0;
      if (suffix &lt; length - 1) {
        String string = new String(charArray, suffix + 1, length - suffix - 1);
        Decorword dw = new Decorword(string);
        tokens_.push(new Symbol(Sym.DECORWORD, left, right, dw));
      }
      int prefix = 0;
      while(needsSeparation(charArray[prefix])) {
        prefix++;
      }
      assert prefix &lt;= suffix;
      String string = new String(charArray, prefix, suffix - prefix + 1);
      Symbol newSymbol =
        new Symbol(Sym.DECORWORD, left, right, new Decorword(string));
      if (prefix == 0) {
        return newSymbol;
      }
      tokens_.push(newSymbol);
      string = new String(charArray, 0, prefix);
      return new Symbol(Sym.DECORWORD, left, right, new Decorword(string));
    }
    return symbol;
  }
}
</scanner>
