<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (C) 2003, 2004 Petra Malik
     This file is part of the czt project.
     
     The czt project contains free software;
     you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     
     The czt project is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with czt; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     -->

<scanner xmlns:add="http://czt.sourceforge.net/templates/additional">
package <package/>;

import java.io.*;
import java.util.Properties;
import net.sourceforge.czt.java_cup.runtime.*;
      
import net.sourceforge.czt.parser.util.CztReader;
import net.sourceforge.czt.parser.util.DebugUtils;
import net.sourceforge.czt.parser.util.ScanException;

/**
 * &lt;p&gt;A scanner for lexing
<add:z> * Z specifications</add:z>
<add:oz> * Object Z specifications</add:oz>
<add:circus>* Circus specification</add:circus>
<add:tcoz> * TCOZ specifications</add:tcoz>
 * in unicode format.&lt;/p&gt;
 *
 * This is a convenience class that assembles the
 * {@link ContextFreeScanner}, {@link KeywordScanner}, and
 * {@link SmartScanner}; providing an implementation of chapters
 * 7.2 till 7.4.4 of the ISO Standard for Z.&lt;/p&gt;
 *
 * &lt;p&gt;Note that the token stream provided by this scanner does not yet
 * have operator names resolved to operator tokens and still contains soft
 * newlines.  This is handled by the {@link OperatorScanner}, which is created
 * by the parser.&lt;/p&gt;
 *
 * @author Petra Malik
 * @see net.sourceforge.czt.parser.z
 */
public class UnicodeScanner
  implements Scanner
{
  ContextFreeScanner contextFreeScanner_;
  KeywordScanner keywordScanner_;
  SmartScanner smartScanner_;

  public <class/>(Reader in, Properties properties)
  {
    contextFreeScanner_ = new ContextFreeScanner(in);
    keywordScanner_ = new KeywordScanner(contextFreeScanner_, properties);
    smartScanner_ = new SmartScanner(keywordScanner_);
  }

  public <class/>(CztReader in, Properties properties)
  {
    contextFreeScanner_ = new ContextFreeScanner(in);
    keywordScanner_ = new KeywordScanner(contextFreeScanner_, properties);
    smartScanner_ = new SmartScanner(keywordScanner_);
  }

  /**
   * Lexes a given file.
   */
  public static void main(String argv[]) {    
    try {
      InputStream stream = new FileInputStream(argv[0]);
      InputStreamReader reader = new InputStreamReader(stream, "UTF-8");

      <class/> scanner = new <class/>(reader, new Properties());
      DebugUtils.scan(scanner, Sym.class);
    }
    catch (Exception e) {
      e.printStackTrace();
    }
  }

  public Symbol next_token()
    throws Exception
  {
    return smartScanner_.next_token();
  }

  public void reset(Reader in)
  {
    try {
      contextFreeScanner_.yyreset(in);
    } catch (Throwable e) {}
  }
}
</scanner>
