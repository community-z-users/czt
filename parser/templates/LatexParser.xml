<?xml version="1.0" encoding="utf-8"?>
<parser xmlns:add="http://czt.sourceforge.net/templates/additional">
/*
  Copyright (C) 2004, 2005, 2006 Petra Malik
  This file is part of the CZT project.

  The CZT project contains free software;
  you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  The CZT project is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with CZT; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
package <package/>;

import java.io.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Logger;

import net.sourceforge.czt.java_cup.runtime.Scanner;
import net.sourceforge.czt.java_cup.runtime.Symbol;

import net.sourceforge.czt.base.ast.Term;
import net.sourceforge.czt.base.util.AstValidator;
import net.sourceforge.czt.base.util.XmlWriter;
import net.sourceforge.czt.parser.util.LatexMarkupFunction;
import net.sourceforge.czt.parser.util.OpTable;
import net.sourceforge.czt.parser.util.ParseException;
import net.sourceforge.czt.session.*;
import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.util.CztLogger;
<add:circus>
import net.sourceforge.czt.circus.jaxb.JaxbValidator;
import net.sourceforge.czt.circus.jaxb.JaxbXmlWriter;
</add:circus>
<add:oz>
import net.sourceforge.czt.oz.jaxb.JaxbValidator;
import net.sourceforge.czt.oz.jaxb.JaxbXmlWriter;
</add:oz>
<add:tcoz>
import net.sourceforge.czt.tcoz.jaxb.JaxbValidator;
import net.sourceforge.czt.tcoz.jaxb.JaxbXmlWriter;
</add:tcoz>
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.impl.ZFactoryImpl;
<add:z>
import net.sourceforge.czt.z.jaxb.JaxbValidator;
import net.sourceforge.czt.z.jaxb.JaxbXmlWriter;
</add:z>
<add:zpatt>
import net.sourceforge.czt.zpatt.jaxb.JaxbValidator;
import net.sourceforge.czt.zpatt.jaxb.JaxbXmlWriter;
</add:zpatt>

/**
 * A parser for LaTeX mark-up.  This is a convenience class that
 * composes the {@link LatexScanner} and the {@link Parser}.
 *
 * @see net.sourceforge.czt.parser.z
 */
public class <class/>
{
  ZFactory factory_ = new ZFactoryImpl();
  LatexScanner scanner_;
  Parser parser_;

  public <class/>(Source source,
                  SectionInfo sectInfo,
                  Properties properties)
    throws IOException
  {
    final String filename = source.toString();
    scanner_ = new LatexScanner(source, sectInfo, properties);
    parser_ = new Parser(scanner_, source, sectInfo);
  }

  /**
   * Converts latex to zml.
   */
  public static void main(String[] args)
  {
    String usage = "Usage: <package/>.<class/>"
      + " [ -in &lt;inputfile&gt;] [ -out &lt;outputfile&gt;]";
    try {
      String filename = null;
      Logger logger = CztLogger.getLogger(<class/>.class);
      Reader in = new InputStreamReader(System.in);
      OutputStream out = System.out;
      for (int i = 0; i &lt; args.length; i++) {
        if ("-in".equals(args[i])) {
          if (i &lt; args.length) {
            filename = args[++i];
            in = new InputStreamReader(new FileInputStream(filename));
          } else {
            System.err.println(usage);
            return;
          }
        } else if ("-out".equals(args[i])) {
          if (i &lt; args.length) {
            out = new FileOutputStream(args[++i]);
          } else {
            System.err.println(usage);
            return;
          }
        } else {
          System.err.println(usage);
          return;
        }
      }
      final Source source = new FileSource(filename);
      source.setMarkup(Markup.LATEX);
      <class/> parser =
        new <class/>(source, new SectionManager(), new Properties());
      Term term = parser.parse();
      if (term != null) {
        AstValidator validator = new JaxbValidator();
        if (! validator.validate(term)) {
          String message = "AST is not valid.";
          logger.warning(message);
        }
        XmlWriter xmlWriter = new JaxbXmlWriter();
        xmlWriter.write(term, out);
      }
      else {
        System.err.println("Parse error");
      }
      out.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public Term parse()
    throws ParseException
  {
    try {
      final Symbol parseTree = parser_.parse();
      final Term term = (Term) parseTree.value;
      return term;
    }
    catch (ParseException e) {
      throw e;
    }
    catch (RuntimeException e) {
      throw e;
    }
    catch (Exception e) {
      e.printStackTrace();
      throw new CztException("This should never happen", e);
    }
  }
}
</parser>
