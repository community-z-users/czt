<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (C) 2004 Petra Malik
     This file is part of the CZT project.

     The CZT project contains free software;
     you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     The CZT project is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with CZT; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->

<parser xmlns:add="http://czt.sourceforge.net/templates/additional">
package <package/>;

import java.io.*;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

import java_cup.runtime.Scanner;
import java_cup.runtime.Symbol;

import net.sourceforge.czt.base.ast.Term;
import net.sourceforge.czt.base.util.AstValidator;
import net.sourceforge.czt.base.util.XmlWriter;
import net.sourceforge.czt.parser.util.LatexMarkupFunction;
import net.sourceforge.czt.parser.util.OpTable;
import net.sourceforge.czt.parser.util.ParentNotFoundException;
import net.sourceforge.czt.session.SectionInfo;
import net.sourceforge.czt.session.SectionManager;
import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.util.CztLogger;
import net.sourceforge.czt.util.ParseException;
<add:oz>
import net.sourceforge.czt.oz.jaxb.JaxbValidator;
import net.sourceforge.czt.oz.jaxb.JaxbXmlWriter;
</add:oz>
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.impl.ZFactoryImpl;
<add:z>
import net.sourceforge.czt.z.jaxb.JaxbValidator;
import net.sourceforge.czt.z.jaxb.JaxbXmlWriter;
</add:z>

/**
 * A latex parser for <add:oz>Object </add:oz> Z specifications.
 * It parses <add:oz>Object </add:oz> Z specifications
 * written in the LaTeX marku-up language as defined by the
 * international Z standard.
 */
public class <class/>
{
  ZFactory factory_ = new ZFactoryImpl();
  LatexScanner scanner_;
  Parser parser_;

  public <class/>(Reader in, SectionInfo sectInfo)
  {
    scanner_ = new LatexScanner(in, sectInfo);
    Scanner scanner = new SmartScanner(scanner_);
    parser_ = new Parser(scanner, sectInfo);
  }

  public <class/>(Reader in,
                  String filename,
                  SectionInfo sectInfo)
  {
    scanner_ = new LatexScanner(in, sectInfo);
    scanner_.setSource(filename);
    Scanner scanner = new SmartScanner(scanner_);
    parser_ = new Parser(scanner, filename, sectInfo);
  }

  /**
   * Converts latex to zml.
   */
  public static void main(String[] args)
  {
    String usage = "Usage: <package/>.<class/>"
      + " [ -in &lt;inputfile&gt;] [ -out &lt;outputfile&gt;]";
    try {
      String filename = null;
      Logger logger = CztLogger.getLogger(<class/>.class);
      Reader in = new InputStreamReader(System.in);
      OutputStream out = System.out;
      for (int i = 0; i &lt; args.length; i++) {
        if ("-in".equals(args[i])) {
          if (i &lt; args.length) {
            filename = args[++i];
            in = new InputStreamReader(new FileInputStream(filename));
          } else {
            System.err.println(usage);
            return;
          }
        } else if ("-out".equals(args[i])) {
          if (i &lt; args.length) {
            out = new FileOutputStream(args[++i]);
          } else {
            System.err.println(usage);
            return;
          }
        } else {
          System.err.println(usage);
          return;
        }
      }
      <class/> parser =
        new <class/>(in, filename, new SectionManager());
      Term term = parser.parse();
      AstValidator validator = new JaxbValidator();
      if (! validator.validate(term)) {
        String message = "AST is not valid.";
        logger.warning(message);
      }
      XmlWriter xmlWriter = new JaxbXmlWriter();
      xmlWriter.write(term, out);
      out.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public Term parse()
    throws ParseException, ParentNotFoundException
  {
    try {
      final Symbol parseTree = parser_.parse();
      final Term term = (Term) parseTree.value;
      final Map markupFunctions = getMarkupFunctions();
      if (getMarkupFunctions() != null &amp;&amp; ! getMarkupFunctions().isEmpty()) {
        if (term instanceof Spec) {
          final Spec spec = (Spec) term;
          final List sects = spec.getSect();
          for (Iterator iter = sects.iterator(); iter.hasNext(); ) {
            final Sect sect = (Sect) iter.next();
            if (sect instanceof ZSect) {
              final ZSect zsect = (ZSect) sect;
              final String name = zsect.getName();
              final LatexMarkupFunction f =
                (LatexMarkupFunction) markupFunctions.get(name);
              final LatexMarkupPara markupPara = f.toAst(factory_);
              if (markupPara != null) {
                List paras = zsect.getPara();
                paras.add(0, markupPara);
              }
            }
          }
        }
      }
      return term;
    }
    catch (ParseException e) {
      throw e;
    }
    catch (ParentNotFoundException e) {
      throw e;
    }
    catch (Exception e) {
      e.printStackTrace();
      throw new CztException("This should never happen", e);
    }
  }

  /**
   * Returns the latex mark-up functions.
   */
  public Map getMarkupFunctions()
  {
    return scanner_.getMarkupFunctions();
  }

  /**
   * Returns the operator table.
   */
  public Map getOperatorTables()
  {
    return parser_.getOperatorTables();
  }

}
</parser>
