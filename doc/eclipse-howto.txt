Instructions on how to use Eclipse on a CZT project.

Author: Mark Utting, March 2006

I used Eclipse 3.1.2 from www.eclipse.org


1. Checkout the SVN sources
===========================
You must use a separate SVN utility (such as TortoiseSVN under
Windows, or the command line svn client under Linux or Cygwin)
to check out the CZT sources from the Sourceforge repository.
This is because the built-in CVS client of Eclipse cannot handle
top-level files that are shared between all projects, like our
czt.properties and build.xml files.

Here is an example command-line checkout command for anyone:
('trunk' checks out the latest version of all CZT projects,
including top-level files)

 svn checkout https://svn.sourceforge.net/svnroot/czt/trunk

If you make changes to the CZT sources and want to check in
your changes to the CZT repository, you need to be registered
as a CZT developer.  Please email one of the CZT admins to
enquire about this.


2. Build CZT
============
See ../README.txt for instructions how to build CZT using 'ant'
from the command line.  You need to do this before creating Eclipse
projects, because the 'ant' build process generates most of the CZT
Java source files.


3. Set up an Eclipse workspace and customize Eclipse Preferences
================================================================
Create an Eclipse workspace somewhere.
(I use the 'trunk' directory as the workspace, so that all
the CZT projects are in the workspace, but you can also create
a workspace that is separate from the CZT hierarchy if you want).
	
In the Eclipse "Window|Preferences" dialogue, in the 
"Java/Code Style/Formatter" tab, import the CZT 
code style: <CZT_HOME>/devtools/eclipse-code-format-style.xml.

Change the Eclipse Java Compiler compliance level to 5.0.
(Windows|Preferences, then the Java|Compiler tab).

To allow your project ant build files to use JUnit, go into the
"Window|Preferences|Ant|Runtime|ClassPath" tab, and add
<ECLIPSEHOME>/plugins/org.junit_3.8.1/junit.jar to the "Ant Home
Entries" list.


4. Set up some Eclipse projects
===============================
For each CZT project that you are interested in, create an Eclipse
Java project.  The top-level README.txt file shows the main
dependencies between projects, so you should start with the 'util'
project and work your way up the dependency tree.

Use the following steps to create each project:

1. Use the "File|New|Project" command, select "Java Project", then choose
   a name for the project (usually the same as the name of the CZT
   subdirectory, such as corejava or zlive).

   (If your CZT folders are outside your Eclipse workspace, you will
   have to enable the "Create project from existing source" option 
   and browse to the appropriate CZT project folder at this stage.)

2. Press Next.  Eclipse will search for source
   code folders, and will usually choose <PROJECT>/src and
   <PROJECT>/tests/src, but some CZT projects follow the Maven style of
   subdirectories, which uses mostly <PROJECT>/src/main/java and
   <PROJECT>/src/test/java).  There are quite a few things to set
   here before you press "Finish":

2a. Sometimes the list of source folders suggested by Eclipse
    needs to be modified.  For example:

    corejava project: you should remove the corejava/examples
        folders from the source folders.

    devtools project: you should put only
        devtools/cup_tum/build/src into the source folders.

2c. Set up the dependencies on other CZT projects.
    Click on the Projects tab and Add the CZT projects that this
    project depends upon (see the top-level README.txt).
    
2c. Some projects will require additional *.jar files.

    NOTE: if you are adding several related *.jar files to a 
      project, it is nice to use the "Add Variable" option and 
      define a variable for the folder that contains those *.jar 
      files, then use "Extend..."  to add the actual *.jar files.
      
    For example, I add the following jars to these projects:
    
    jaxb:      JWSDP_HOME/jaxb/lib/*.jar
               JWSDP_HOME/jwsdp-shared/lib/*.jar

    corejava:  JUNIT_HOME/junit.jar

    devtools:  JUNIT_HOME/junit.jar
               ECLIPSE_HOME/plugins/org.apache.ant-1.6.5/lib/ant.jar
    
    jedit:     JEDIT_HOME/jars/jedit.jar
               JEDIT_HOME/jars/Console.jar
               JEDIT_HOME/jars/ErrorList.jar
               JEDIT_HOME/jars/SideKick.jar

2d. Go into the "Order and Export" tab and export everything 
    (except the Java JRE jars).

2e. In every project, it is a good idea to change Eclipse's Default 
   output folder to be a fresh folder that is not already in use
   by CZT (I use '<PROJECT>/eclipse_build').




Final Notes:
============
For getting updates and sending commits to the CZT SVN repository,
you can either use a separate SVN client or you can use the 'Subclipse'
Eclipse plugin from http://subclipse.tigris.org.  After you have
installed that plugin, you can use SVN commands by right-clicking
on a project or .java file and using the commands in the "Team" menu.




