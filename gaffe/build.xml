<?xml version="1.0" encoding="UTF-8"?>

<!--
GAfFE - A (G)raphical (A)nimator (F)ront(E)nd for Z - Part of the CZT Project.
Copyright 2003 Nicholas Daley

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-->

<project name="GAfFE" default="all" basedir=".">
  <description>GAfFE - A (G)raphical (A)nimator (F)ront(E)nd for Z.</description>
  <property name="sourcePath" location="src"/>
  <property name="resourcesPath" location="resources"/>
  <property name="classDestPath" location="classes"/>
  <property name="jarDestPath" location="lib"/>
  <property name="apiDocPath" location="doc/api"/>

  <target name="-getbsfjar" unless="bsf.jar.path">
    <input message="What is the path of the BSF jar file?" addproperty="bsf.jar.path"/>
  </target>
  <target name="-getrhinojar" unless="rhino.jar.path">
    <input message="What is the path of the Rhino jar file?" addproperty="rhino.jar.path"/>
  </target>

  <target name="-splash" unless="java.awt.headless"><splash showduration="0"/></target>
  <target name="-init" depends="-splash">
    <!-- Check if an appropriate version of Java is being used -->
    <condition property="java.is.too.old">
      <or>
        <equals arg1="${ant.java.version}" arg2="1.1"/>
        <equals arg1="${ant.java.version}" arg2="1.2"/>
        <equals arg1="${ant.java.version}" arg2="1.3"/>
      </or>
    </condition>
    <fail message="Needs at least Java v1.4 or above." if="java.is.too.old"/>

    <property environment="environment"/>
    <!-- Try getting the bsf.home and rhino.home properties from the environment -->
    <property name="bsf.home"   value="${environment.BSFHOME}"/>
    <property name="rhino.home" value="${environment.RHINOHOME}"/>

    <!-- If we have valid *.home properties set the *.jar.path properties from these -->
    <property name="bsf.jar.path"   value="${bsf.home}/lib/bsf.jar"/>
    <property name="rhino.jar.path" value="${rhino.home}/js.jar"/>

    <!-- Try getting them from the user -->
    <antcall target="-getbsfjar"/>
    <antcall target="-getrhinojar"/>

    <!-- Check if we have the jar files we want -->
    <available property="bsf.jar.available" classpath="${bsf.jar.path}" 
               classname="com.ibm.bsf.BSFManager"/>
    <available property="rhino.jar.available" classpath="${rhino.jar.path}" 
               classname="org.mozilla.javascript.Context"/>

    <!-- If we don't have the correct jar files for BSF and Rhino, complain and bail out -->
    <fail message="Could not find a correct jar file for BSF." unless="bsf.jar.available"/>
    <fail message="Could not find a correct jar file for Rhino." unless="rhino.jar.available"/>

    <!-- Now that we have the needed properties, setup the class path we will use -->
    <path id="gaffe.class.path">
      <pathelement path="${classDestPath}"/>
      <pathelement path="${bsf.jar.path}"/>
      <pathelement path="${rhino.jar.path}"/>
    </path>
  </target>


  <target name="clean" depends="-splash" description="Do a standard clean.">   
    <delete dir="${classDestPath}"/>
  </target>

  <target name="squeaky" depends="-splash,clean" description="Do a thorough clean.">   
    <delete dir="${apiDocPath}"/>
    <delete file="${jarDestPath}/gaffe.jar"/>
    <!-- Do not delete jarDestPath, because other packages may use it. -->
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
      <fileset dir="." includes="**/.xvpics" defaultexcludes="no"/>
    </delete>
  </target>

  <target name="doc" depends="-init" description="Build the API documentation.">   
    <mkdir dir="${apiDocPath}"/>
    <javadoc packagenames="czt.*" sourcepath="${sourcePath}" destdir="${apiDocPath}"
             classpathref="gaffe.class.path" 
             access="private" use="yes" version="yes" author="yes"/>
  </target>

  <target name="classes" depends="-init" description="Build the classes.">   
    <mkdir dir="${classDestPath}"/>
    <depend srcdir="${sourcePath}" destdir="${classDestPath}" classpathref="gaffe.class.path"/>    
    <javac srcdir="${sourcePath}" destdir="${classDestPath}" classpathref="gaffe.class.path"/>    
  </target>

  <target name="jar" depends="-init,classes" description="Build the jar file.">   
    <mkdir dir="${jarDestPath}"/>
    <jar destfile="${jarDestPath}/gaffe.jar" basedir="${classDestPath}" update="no">
      <manifest>
        <attribute name="Sealed" value="true"/>
	<attribute name="Main-Class" value="czt.animation.gui.Gaffe"/>
      </manifest>
    </jar>
    <jar destfile="${jarDestPath}/gaffe.jar" basedir="${resourcesPath}" update="yes"/>
    <jar destfile="${jarDestPath}/gaffe.jar" update="yes">
      <metainf dir="." includes="LICENSE"/>
    </jar>
    <jar destfile="${jarDestPath}/gaffe.jar" index="yes" update="yes"/>
  </target>

  <target name="all" depends="-init,classes,jar,doc" description="Build everything."/>
</project>



