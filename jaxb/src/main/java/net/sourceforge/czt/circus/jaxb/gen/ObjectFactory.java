//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.06.26 at 02:10:37 PM NZST 
//


package net.sourceforge.czt.circus.jaxb.gen;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the net.sourceforge.czt.circus.jaxb.gen package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
public class ObjectFactory
    extends net.sourceforge.czt.circus.jaxb.gen.impl.runtime.DefaultJAXBContextImpl
{

    private static java.util.HashMap defaultImplementations = new java.util.HashMap(235, 0.75F);
    private static java.util.HashMap rootTagMap = new java.util.HashMap();
    public final static net.sourceforge.czt.circus.jaxb.gen.impl.runtime.GrammarInfo grammarInfo = new net.sourceforge.czt.circus.jaxb.gen.impl.runtime.GrammarInfoImpl(rootTagMap, defaultImplementations, (net.sourceforge.czt.circus.jaxb.gen.ObjectFactory.class));
    public final static java.lang.Class version = (net.sourceforge.czt.circus.jaxb.gen.impl.JAXBVersion.class);

    static {
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ProcessParaElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ProcessParaElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.CallActionElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.CallActionElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.BasicAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.BasicActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.GuardedAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.GuardedActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.AssignmentCommandElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.AssignmentCommandElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.CircusAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.CircusActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.CallAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.CallActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParallelActionIteElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParallelActionIteElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.InterleaveAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.InterleaveActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParProcessIte.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParProcessIteImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.Action2Element.class), "net.sourceforge.czt.circus.jaxb.gen.impl.Action2ElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcessIdx.class), "net.sourceforge.czt.circus.jaxb.gen.impl.AlphabetisedParallelProcessIdxImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ChannelSetPara.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ChannelSetParaImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.VarDeclCommandElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.VarDeclCommandElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.VarDeclCommand.class), "net.sourceforge.czt.circus.jaxb.gen.impl.VarDeclCommandImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.NameSetParaElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.NameSetParaElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ChaosAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ChaosActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ProcessDElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ProcessDElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.CircusStateAnnElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.CircusStateAnnElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.BasicActionElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.BasicActionElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.SeqActionIte.class), "net.sourceforge.czt.circus.jaxb.gen.impl.SeqActionIteImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.SpecStmtCommandElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.SpecStmtCommandElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.NameSetPara.class), "net.sourceforge.czt.circus.jaxb.gen.impl.NameSetParaImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParallelActionIte.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParallelActionIteImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ChannelDeclElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ChannelDeclElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ProcessIte.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ProcessIteImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.SeqProcessIte.class), "net.sourceforge.czt.circus.jaxb.gen.impl.SeqProcessIteImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.InterleaveActionIte.class), "net.sourceforge.czt.circus.jaxb.gen.impl.InterleaveActionIteImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcessIdx.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ExtChoiceProcessIdxImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ChannelSetParaElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ChannelSetParaElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.CircusFieldListElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.SchExprAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.SchExprActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.HideActionElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.HideActionElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcessIte.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ExtChoiceProcessIteImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.NameSet.class), "net.sourceforge.czt.circus.jaxb.gen.impl.NameSetImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParamProcess.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParamProcessImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.IfGuardedCommand.class), "net.sourceforge.czt.circus.jaxb.gen.impl.IfGuardedCommandImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.CircusFieldList.class), "net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelActionIte.class), "net.sourceforge.czt.circus.jaxb.gen.impl.AlphabetisedParallelActionIteImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.FieldElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.FieldElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.HideProcess.class), "net.sourceforge.czt.circus.jaxb.gen.impl.HideProcessImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParallelProcess.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParallelProcessImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ChannelDecl.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ChannelDeclImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.InputField.class), "net.sourceforge.czt.circus.jaxb.gen.impl.InputFieldImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.CircusConjPara.class), "net.sourceforge.czt.circus.jaxb.gen.impl.CircusConjParaImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcess.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ExtChoiceProcessImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.BasicProcessElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.SeqAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.SeqActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ProcessSignatureElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ProcessSignatureElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.OnTheFlyDefAnnElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.OnTheFlyDefAnnElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ActionTypeElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ActionTypeElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ActionType.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ActionTypeImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.CircusConjParaElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.CircusConjParaElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParProcessIteElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParProcessIteElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.LetActionElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.LetActionElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ExtChoiceAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ExtChoiceActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ChannelSet.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ChannelSetImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ProcessSignature.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ProcessSignatureImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.CircusProcess.class), "net.sourceforge.czt.circus.jaxb.gen.impl.CircusProcessImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.CommunicationElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.CommunicationElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParallelProcessIdxElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParallelProcessIdxElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.AssignmentPairsElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.AssignmentPairsElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.Action2 .class), "net.sourceforge.czt.circus.jaxb.gen.impl.Action2Impl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ChannelPara.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ChannelParaImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.BasicChannelSetExpr.class), "net.sourceforge.czt.circus.jaxb.gen.impl.BasicChannelSetExprImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.IntChoiceAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.IntChoiceActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParallelProcessElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParallelProcessElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ActionParaElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ActionParaElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.Field.class), "net.sourceforge.czt.circus.jaxb.gen.impl.FieldImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcess.class), "net.sourceforge.czt.circus.jaxb.gen.impl.IntChoiceProcessImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcessIdx.class), "net.sourceforge.czt.circus.jaxb.gen.impl.IntChoiceProcessIdxImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ProcessIteElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ProcessIteElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParActionIte.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParActionIteImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcessIte.class), "net.sourceforge.czt.circus.jaxb.gen.impl.AlphabetisedParallelProcessIteImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParActionElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParActionElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.InterleaveProcess.class), "net.sourceforge.czt.circus.jaxb.gen.impl.InterleaveProcessImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.LetVarActionElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.LetVarActionElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ChannelSetElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ChannelSetElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.RefinementConjPara.class), "net.sourceforge.czt.circus.jaxb.gen.impl.RefinementConjParaImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcessElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.AlphabetisedParallelProcessElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ChannelParaElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ChannelParaElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.SubstitutionAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.SubstitutionActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.Action1 .class), "net.sourceforge.czt.circus.jaxb.gen.impl.Action1Impl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ActionIte.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ActionIteImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ActionSignatureElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.RenameProcessElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.RenameProcessElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.Process2Element.class), "net.sourceforge.czt.circus.jaxb.gen.impl.Process2ElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParallelProcessIte.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParallelProcessIteImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.MuAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.MuActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ChannelSetTypeElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ChannelSetTypeElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.FieldListElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.FieldListElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ProcessIdxElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ProcessIdxElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.CircusActionElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.CircusActionElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.StopAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.StopActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.NameSetType.class), "net.sourceforge.czt.circus.jaxb.gen.impl.NameSetTypeImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParProcessElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParProcessElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.PrefixingActionElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.PrefixingActionElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParProcessIdxElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParProcessIdxElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.Process2 .class), "net.sourceforge.czt.circus.jaxb.gen.impl.Process2Impl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.LetMuAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.LetMuActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.BasicProcess.class), "net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ActionSignature.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ActionPara.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ActionParaImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.AssignmentCommand.class), "net.sourceforge.czt.circus.jaxb.gen.impl.AssignmentCommandImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.MuActionElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.MuActionElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.CallProcess.class), "net.sourceforge.czt.circus.jaxb.gen.impl.CallProcessImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.IndexedProcess.class), "net.sourceforge.czt.circus.jaxb.gen.impl.IndexedProcessImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ChannelType.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ChannelTypeImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.QualifiedDeclElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.QualifiedDeclElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ProcessPara.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ProcessParaImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ActionDElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ActionDElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.HideProcessElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.HideProcessElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.SigmaExprElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.SigmaExprElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ProcessIdx.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ProcessIdxImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ProcessD.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ProcessDImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParallelActionElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParallelActionElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParActionIteElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParActionIteElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.BasicProcessSignature.class), "net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessSignatureImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParProcessIdx.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParProcessIdxImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParallelAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParallelActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ProcessType.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ProcessTypeImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.PrefixingAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.PrefixingActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.LetVarAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.LetVarActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.HideAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.HideActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.OnTheFlyDefAnn.class), "net.sourceforge.czt.circus.jaxb.gen.impl.OnTheFlyDefAnnImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ChannelSetType.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ChannelSetTypeImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.GuardedActionElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.GuardedActionElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.NameSetElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.NameSetElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.CircusCommand.class), "net.sourceforge.czt.circus.jaxb.gen.impl.CircusCommandImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.CircusCommandElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.CircusCommandElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.AlphabetisedParallelActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ChannelTypeElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ChannelTypeElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ExtChoiceActionIte.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ExtChoiceActionIteImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcess.class), "net.sourceforge.czt.circus.jaxb.gen.impl.AlphabetisedParallelProcessImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ProcessTypeElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ProcessTypeElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.IntChoiceActionIte.class), "net.sourceforge.czt.circus.jaxb.gen.impl.IntChoiceActionIteImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.Communication.class), "net.sourceforge.czt.circus.jaxb.gen.impl.CommunicationImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelActionElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.AlphabetisedParallelActionElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.Process1Element.class), "net.sourceforge.czt.circus.jaxb.gen.impl.Process1ElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.SubstitutionActionElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.SubstitutionActionElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.SigmaExpr.class), "net.sourceforge.czt.circus.jaxb.gen.impl.SigmaExprImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.CallProcessElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.CallProcessElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.QualifiedDecl.class), "net.sourceforge.czt.circus.jaxb.gen.impl.QualifiedDeclImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.DotFieldElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.DotFieldElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.SchExprActionElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.SchExprActionElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.SpecStmtCommand.class), "net.sourceforge.czt.circus.jaxb.gen.impl.SpecStmtCommandImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.DotField.class), "net.sourceforge.czt.circus.jaxb.gen.impl.DotFieldImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.LetMuActionElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.LetMuActionElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.AssignmentPairs.class), "net.sourceforge.czt.circus.jaxb.gen.impl.AssignmentPairsImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.LetAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.LetActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcessIte.class), "net.sourceforge.czt.circus.jaxb.gen.impl.IntChoiceProcessIteImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.FieldList.class), "net.sourceforge.czt.circus.jaxb.gen.impl.FieldListImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.Action1Element.class), "net.sourceforge.czt.circus.jaxb.gen.impl.Action1ElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParamAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParamActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.RefinementConjParaElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.RefinementConjParaElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.OutputField.class), "net.sourceforge.czt.circus.jaxb.gen.impl.OutputFieldImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.CircusStateAnn.class), "net.sourceforge.czt.circus.jaxb.gen.impl.CircusStateAnnImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParProcess.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParProcessImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.SeqProcess.class), "net.sourceforge.czt.circus.jaxb.gen.impl.SeqProcessImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.CircusProcessElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.CircusProcessElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.BasicProcessSignatureElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessSignatureElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParallelProcessIteElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParallelProcessIteElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.SkipAction.class), "net.sourceforge.czt.circus.jaxb.gen.impl.SkipActionImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.IfGuardedCommandElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.IfGuardedCommandElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.SeqProcessIdx.class), "net.sourceforge.czt.circus.jaxb.gen.impl.SeqProcessIdxImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ActionIteElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ActionIteElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.NameSetTypeElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.NameSetTypeElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.InputFieldElement.class), "net.sourceforge.czt.circus.jaxb.gen.impl.InputFieldElementImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.InterleaveProcessIdx.class), "net.sourceforge.czt.circus.jaxb.gen.impl.InterleaveProcessIdxImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.RenameProcess.class), "net.sourceforge.czt.circus.jaxb.gen.impl.RenameProcessImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.Process1 .class), "net.sourceforge.czt.circus.jaxb.gen.impl.Process1Impl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ParallelProcessIdx.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ParallelProcessIdxImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.ActionD.class), "net.sourceforge.czt.circus.jaxb.gen.impl.ActionDImpl");
        defaultImplementations.put((net.sourceforge.czt.circus.jaxb.gen.InterleaveProcessIte.class), "net.sourceforge.czt.circus.jaxb.gen.impl.InterleaveProcessIteImpl");
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "OutputField"), (net.sourceforge.czt.circus.jaxb.gen.OutputField.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ParallelProcessIdx"), (net.sourceforge.czt.circus.jaxb.gen.ParallelProcessIdxElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "LetVarAction"), (net.sourceforge.czt.circus.jaxb.gen.LetVarActionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "BasicChannelSetExpr"), (net.sourceforge.czt.circus.jaxb.gen.BasicChannelSetExpr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "AlphabetisedParallelProcess"), (net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcessElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "Action1"), (net.sourceforge.czt.circus.jaxb.gen.Action1Element.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "SkipAction"), (net.sourceforge.czt.circus.jaxb.gen.SkipAction.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "RenameProcess"), (net.sourceforge.czt.circus.jaxb.gen.RenameProcessElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "IndexedProcess"), (net.sourceforge.czt.circus.jaxb.gen.IndexedProcess.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "AlphabetisedParallelAction"), (net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelActionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "SeqProcessIte"), (net.sourceforge.czt.circus.jaxb.gen.SeqProcessIte.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ExtChoiceActionIte"), (net.sourceforge.czt.circus.jaxb.gen.ExtChoiceActionIte.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ChannelSetType"), (net.sourceforge.czt.circus.jaxb.gen.ChannelSetTypeElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "QualifiedDecl"), (net.sourceforge.czt.circus.jaxb.gen.QualifiedDeclElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "AlphabetisedParallelProcessIdx"), (net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcessIdx.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "NameSetPara"), (net.sourceforge.czt.circus.jaxb.gen.NameSetParaElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "SeqProcess"), (net.sourceforge.czt.circus.jaxb.gen.SeqProcess.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "InterleaveProcessIte"), (net.sourceforge.czt.circus.jaxb.gen.InterleaveProcessIte.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "MuAction"), (net.sourceforge.czt.circus.jaxb.gen.MuActionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "Process1"), (net.sourceforge.czt.circus.jaxb.gen.Process1Element.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "OnTheFlyDefAnn"), (net.sourceforge.czt.circus.jaxb.gen.OnTheFlyDefAnnElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ChannelSetPara"), (net.sourceforge.czt.circus.jaxb.gen.ChannelSetParaElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "SigmaExpr"), (net.sourceforge.czt.circus.jaxb.gen.SigmaExprElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "SubstitutionAction"), (net.sourceforge.czt.circus.jaxb.gen.SubstitutionActionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ProcessSignature"), (net.sourceforge.czt.circus.jaxb.gen.ProcessSignatureElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "GuardedAction"), (net.sourceforge.czt.circus.jaxb.gen.GuardedActionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "StopAction"), (net.sourceforge.czt.circus.jaxb.gen.StopAction.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "IfGuardedCommand"), (net.sourceforge.czt.circus.jaxb.gen.IfGuardedCommandElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ParamAction"), (net.sourceforge.czt.circus.jaxb.gen.ParamAction.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "InputField"), (net.sourceforge.czt.circus.jaxb.gen.InputFieldElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ActionD"), (net.sourceforge.czt.circus.jaxb.gen.ActionDElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ParallelProcess"), (net.sourceforge.czt.circus.jaxb.gen.ParallelProcessElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ParallelActionIte"), (net.sourceforge.czt.circus.jaxb.gen.ParallelActionIteElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "NameSet"), (net.sourceforge.czt.circus.jaxb.gen.NameSetElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "DotField"), (net.sourceforge.czt.circus.jaxb.gen.DotFieldElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ActionPara"), (net.sourceforge.czt.circus.jaxb.gen.ActionParaElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ActionIte"), (net.sourceforge.czt.circus.jaxb.gen.ActionIteElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "CircusProcess"), (net.sourceforge.czt.circus.jaxb.gen.CircusProcessElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ParProcess"), (net.sourceforge.czt.circus.jaxb.gen.ParProcessElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ParamProcess"), (net.sourceforge.czt.circus.jaxb.gen.ParamProcess.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "BasicProcessSignature"), (net.sourceforge.czt.circus.jaxb.gen.BasicProcessSignatureElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "SpecStmtCommand"), (net.sourceforge.czt.circus.jaxb.gen.SpecStmtCommandElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ParProcessIdx"), (net.sourceforge.czt.circus.jaxb.gen.ParProcessIdxElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "InterleaveActionIte"), (net.sourceforge.czt.circus.jaxb.gen.InterleaveActionIte.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "InterleaveProcess"), (net.sourceforge.czt.circus.jaxb.gen.InterleaveProcess.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ParallelProcessIte"), (net.sourceforge.czt.circus.jaxb.gen.ParallelProcessIteElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "IntChoiceActionIte"), (net.sourceforge.czt.circus.jaxb.gen.IntChoiceActionIte.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ExtChoiceAction"), (net.sourceforge.czt.circus.jaxb.gen.ExtChoiceAction.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ParallelAction"), (net.sourceforge.czt.circus.jaxb.gen.ParallelActionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "LetMuAction"), (net.sourceforge.czt.circus.jaxb.gen.LetMuActionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "Communication"), (net.sourceforge.czt.circus.jaxb.gen.CommunicationElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ChannelType"), (net.sourceforge.czt.circus.jaxb.gen.ChannelTypeElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "NameSetType"), (net.sourceforge.czt.circus.jaxb.gen.NameSetTypeElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "IntChoiceProcessIdx"), (net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcessIdx.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ExtChoiceProcess"), (net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcess.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ActionType"), (net.sourceforge.czt.circus.jaxb.gen.ActionTypeElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "CircusCommand"), (net.sourceforge.czt.circus.jaxb.gen.CircusCommandElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "InterleaveProcessIdx"), (net.sourceforge.czt.circus.jaxb.gen.InterleaveProcessIdx.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ProcessIdx"), (net.sourceforge.czt.circus.jaxb.gen.ProcessIdxElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "Field"), (net.sourceforge.czt.circus.jaxb.gen.FieldElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "VarDeclCommand"), (net.sourceforge.czt.circus.jaxb.gen.VarDeclCommandElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ProcessPara"), (net.sourceforge.czt.circus.jaxb.gen.ProcessParaElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "InterleaveAction"), (net.sourceforge.czt.circus.jaxb.gen.InterleaveAction.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "AlphabetisedParallelProcessIte"), (net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcessIte.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "LetAction"), (net.sourceforge.czt.circus.jaxb.gen.LetActionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "BasicAction"), (net.sourceforge.czt.circus.jaxb.gen.BasicActionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ChannelPara"), (net.sourceforge.czt.circus.jaxb.gen.ChannelParaElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ChannelSet"), (net.sourceforge.czt.circus.jaxb.gen.ChannelSetElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "CallProcess"), (net.sourceforge.czt.circus.jaxb.gen.CallProcessElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ProcessType"), (net.sourceforge.czt.circus.jaxb.gen.ProcessTypeElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "CircusConjPara"), (net.sourceforge.czt.circus.jaxb.gen.CircusConjParaElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ExtChoiceProcessIte"), (net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcessIte.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ProcessD"), (net.sourceforge.czt.circus.jaxb.gen.ProcessDElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "AssignmentPairs"), (net.sourceforge.czt.circus.jaxb.gen.AssignmentPairsElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "IntChoiceAction"), (net.sourceforge.czt.circus.jaxb.gen.IntChoiceAction.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "FieldList"), (net.sourceforge.czt.circus.jaxb.gen.FieldListElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "SeqProcessIdx"), (net.sourceforge.czt.circus.jaxb.gen.SeqProcessIdx.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ParActionIte"), (net.sourceforge.czt.circus.jaxb.gen.ParActionIteElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "SeqAction"), (net.sourceforge.czt.circus.jaxb.gen.SeqAction.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "HideAction"), (net.sourceforge.czt.circus.jaxb.gen.HideActionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "AlphabetisedParallelActionIte"), (net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelActionIte.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "CircusStateAnn"), (net.sourceforge.czt.circus.jaxb.gen.CircusStateAnnElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "Action2"), (net.sourceforge.czt.circus.jaxb.gen.Action2Element.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ProcessIte"), (net.sourceforge.czt.circus.jaxb.gen.ProcessIteElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ChaosAction"), (net.sourceforge.czt.circus.jaxb.gen.ChaosAction.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "CircusAction"), (net.sourceforge.czt.circus.jaxb.gen.CircusActionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "RefinementConjPara"), (net.sourceforge.czt.circus.jaxb.gen.RefinementConjParaElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ExtChoiceProcessIdx"), (net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcessIdx.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "CircusFieldList"), (net.sourceforge.czt.circus.jaxb.gen.CircusFieldListElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "IntChoiceProcess"), (net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcess.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "IntChoiceProcessIte"), (net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcessIte.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "PrefixingAction"), (net.sourceforge.czt.circus.jaxb.gen.PrefixingActionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "CallAction"), (net.sourceforge.czt.circus.jaxb.gen.CallActionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "SeqActionIte"), (net.sourceforge.czt.circus.jaxb.gen.SeqActionIte.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ActionSignature"), (net.sourceforge.czt.circus.jaxb.gen.ActionSignatureElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ChannelDecl"), (net.sourceforge.czt.circus.jaxb.gen.ChannelDeclElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ParProcessIte"), (net.sourceforge.czt.circus.jaxb.gen.ParProcessIteElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "BasicProcess"), (net.sourceforge.czt.circus.jaxb.gen.BasicProcessElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "SchExprAction"), (net.sourceforge.czt.circus.jaxb.gen.SchExprActionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "ParAction"), (net.sourceforge.czt.circus.jaxb.gen.ParActionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "AssignmentCommand"), (net.sourceforge.czt.circus.jaxb.gen.AssignmentCommandElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "HideProcess"), (net.sourceforge.czt.circus.jaxb.gen.HideProcessElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/circus", "Process2"), (net.sourceforge.czt.circus.jaxb.gen.Process2Element.class));
    }

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: net.sourceforge.czt.circus.jaxb.gen
     * 
     */
    public ObjectFactory() {
        super(grammarInfo);
    }

    /**
     * Create an instance of the specified Java content interface.
     * 
     * @param javaContentInterface
     *     the Class object of the javacontent interface to instantiate
     * @return
     *     a new instance
     * @throws JAXBException
     *     if an error occurs
     */
    public java.lang.Object newInstance(java.lang.Class javaContentInterface)
        throws javax.xml.bind.JAXBException
    {
        return super.newInstance(javaContentInterface);
    }

    /**
     * Get the specified property. This method can only be
     * used to get provider specific properties.
     * Attempting to get an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name
     *     the name of the property to retrieve
     * @return
     *     the value of the requested property
     * @throws PropertyException
     *     when there is an error retrieving the given property or value
     */
    public java.lang.Object getProperty(java.lang.String name)
        throws javax.xml.bind.PropertyException
    {
        return super.getProperty(name);
    }

    /**
     * Set the specified property. This method can only be
     * used to set provider specific properties.
     * Attempting to set an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param value
     *     the value of the property to be set
     * @param name
     *     the name of the property to retrieve
     * @throws PropertyException
     *     when there is an error processing the given property or value
     */
    public void setProperty(java.lang.String name, java.lang.Object value)
        throws javax.xml.bind.PropertyException
    {
        super.setProperty(name, value);
    }

    /**
     * Create an instance of ProcessParaElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ProcessParaElement createProcessParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ProcessParaElementImpl();
    }

    /**
     * Create an instance of CallActionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.CallActionElement createCallActionElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.CallActionElementImpl();
    }

    /**
     * Create an instance of BasicAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.BasicAction createBasicAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.BasicActionImpl();
    }

    /**
     * Create an instance of GuardedAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.GuardedAction createGuardedAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.GuardedActionImpl();
    }

    /**
     * Create an instance of AssignmentCommandElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.AssignmentCommandElement createAssignmentCommandElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.AssignmentCommandElementImpl();
    }

    /**
     * Create an instance of CircusAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.CircusAction createCircusAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.CircusActionImpl();
    }

    /**
     * Create an instance of CallAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.CallAction createCallAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.CallActionImpl();
    }

    /**
     * Create an instance of ParallelActionIteElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParallelActionIteElement createParallelActionIteElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParallelActionIteElementImpl();
    }

    /**
     * Create an instance of InterleaveAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.InterleaveAction createInterleaveAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.InterleaveActionImpl();
    }

    /**
     * Create an instance of ParProcessIte
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParProcessIte createParProcessIte()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParProcessIteImpl();
    }

    /**
     * Create an instance of Action2Element
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.Action2Element createAction2Element()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.Action2ElementImpl();
    }

    /**
     * Create an instance of AlphabetisedParallelProcessIdx
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcessIdx createAlphabetisedParallelProcessIdx()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.AlphabetisedParallelProcessIdxImpl();
    }

    /**
     * Create an instance of ChannelSetPara
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ChannelSetPara createChannelSetPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ChannelSetParaImpl();
    }

    /**
     * Create an instance of VarDeclCommandElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.VarDeclCommandElement createVarDeclCommandElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.VarDeclCommandElementImpl();
    }

    /**
     * Create an instance of VarDeclCommand
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.VarDeclCommand createVarDeclCommand()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.VarDeclCommandImpl();
    }

    /**
     * Create an instance of NameSetParaElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.NameSetParaElement createNameSetParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.NameSetParaElementImpl();
    }

    /**
     * Create an instance of ChaosAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ChaosAction createChaosAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ChaosActionImpl();
    }

    /**
     * Create an instance of ProcessDElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ProcessDElement createProcessDElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ProcessDElementImpl();
    }

    /**
     * Create an instance of CircusStateAnnElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.CircusStateAnnElement createCircusStateAnnElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.CircusStateAnnElementImpl();
    }

    /**
     * Create an instance of BasicActionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.BasicActionElement createBasicActionElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.BasicActionElementImpl();
    }

    /**
     * Create an instance of SeqActionIte
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.SeqActionIte createSeqActionIte()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.SeqActionIteImpl();
    }

    /**
     * Create an instance of SpecStmtCommandElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.SpecStmtCommandElement createSpecStmtCommandElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.SpecStmtCommandElementImpl();
    }

    /**
     * Create an instance of NameSetPara
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.NameSetPara createNameSetPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.NameSetParaImpl();
    }

    /**
     * Create an instance of ParallelActionIte
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParallelActionIte createParallelActionIte()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParallelActionIteImpl();
    }

    /**
     * Create an instance of ChannelDeclElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ChannelDeclElement createChannelDeclElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ChannelDeclElementImpl();
    }

    /**
     * Create an instance of ProcessIte
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ProcessIte createProcessIte()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ProcessIteImpl();
    }

    /**
     * Create an instance of SeqProcessIte
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.SeqProcessIte createSeqProcessIte()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.SeqProcessIteImpl();
    }

    /**
     * Create an instance of InterleaveActionIte
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.InterleaveActionIte createInterleaveActionIte()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.InterleaveActionIteImpl();
    }

    /**
     * Create an instance of ExtChoiceProcessIdx
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcessIdx createExtChoiceProcessIdx()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ExtChoiceProcessIdxImpl();
    }

    /**
     * Create an instance of ChannelSetParaElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ChannelSetParaElement createChannelSetParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ChannelSetParaElementImpl();
    }

    /**
     * Create an instance of CircusFieldListElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.CircusFieldListElement createCircusFieldListElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListElementImpl();
    }

    /**
     * Create an instance of SchExprAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.SchExprAction createSchExprAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.SchExprActionImpl();
    }

    /**
     * Create an instance of HideActionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.HideActionElement createHideActionElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.HideActionElementImpl();
    }

    /**
     * Create an instance of ExtChoiceProcessIte
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcessIte createExtChoiceProcessIte()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ExtChoiceProcessIteImpl();
    }

    /**
     * Create an instance of NameSet
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.NameSet createNameSet()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.NameSetImpl();
    }

    /**
     * Create an instance of ParamProcess
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParamProcess createParamProcess()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParamProcessImpl();
    }

    /**
     * Create an instance of IfGuardedCommand
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.IfGuardedCommand createIfGuardedCommand()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.IfGuardedCommandImpl();
    }

    /**
     * Create an instance of CircusFieldList
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.CircusFieldList createCircusFieldList()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl();
    }

    /**
     * Create an instance of AlphabetisedParallelActionIte
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelActionIte createAlphabetisedParallelActionIte()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.AlphabetisedParallelActionIteImpl();
    }

    /**
     * Create an instance of FieldElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.FieldElement createFieldElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.FieldElementImpl();
    }

    /**
     * Create an instance of HideProcess
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.HideProcess createHideProcess()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.HideProcessImpl();
    }

    /**
     * Create an instance of ParallelProcess
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParallelProcess createParallelProcess()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParallelProcessImpl();
    }

    /**
     * Create an instance of ChannelDecl
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ChannelDecl createChannelDecl()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ChannelDeclImpl();
    }

    /**
     * Create an instance of InputField
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.InputField createInputField()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.InputFieldImpl();
    }

    /**
     * Create an instance of CircusConjPara
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.CircusConjPara createCircusConjPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.CircusConjParaImpl();
    }

    /**
     * Create an instance of ExtChoiceProcess
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcess createExtChoiceProcess()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ExtChoiceProcessImpl();
    }

    /**
     * Create an instance of BasicProcessElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.BasicProcessElement createBasicProcessElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessElementImpl();
    }

    /**
     * Create an instance of SeqAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.SeqAction createSeqAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.SeqActionImpl();
    }

    /**
     * Create an instance of ProcessSignatureElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ProcessSignatureElement createProcessSignatureElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ProcessSignatureElementImpl();
    }

    /**
     * Create an instance of OnTheFlyDefAnnElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.OnTheFlyDefAnnElement createOnTheFlyDefAnnElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.OnTheFlyDefAnnElementImpl();
    }

    /**
     * Create an instance of ActionTypeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ActionTypeElement createActionTypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ActionTypeElementImpl();
    }

    /**
     * Create an instance of ActionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ActionType createActionType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ActionTypeImpl();
    }

    /**
     * Create an instance of CircusConjParaElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.CircusConjParaElement createCircusConjParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.CircusConjParaElementImpl();
    }

    /**
     * Create an instance of ParProcessIteElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParProcessIteElement createParProcessIteElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParProcessIteElementImpl();
    }

    /**
     * Create an instance of LetActionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.LetActionElement createLetActionElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.LetActionElementImpl();
    }

    /**
     * Create an instance of ExtChoiceAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ExtChoiceAction createExtChoiceAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ExtChoiceActionImpl();
    }

    /**
     * Create an instance of ChannelSet
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ChannelSet createChannelSet()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ChannelSetImpl();
    }

    /**
     * Create an instance of ProcessSignature
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ProcessSignature createProcessSignature()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ProcessSignatureImpl();
    }

    /**
     * Create an instance of CircusProcess
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.CircusProcess createCircusProcess()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.CircusProcessImpl();
    }

    /**
     * Create an instance of CommunicationElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.CommunicationElement createCommunicationElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.CommunicationElementImpl();
    }

    /**
     * Create an instance of ParallelProcessIdxElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParallelProcessIdxElement createParallelProcessIdxElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParallelProcessIdxElementImpl();
    }

    /**
     * Create an instance of AssignmentPairsElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.AssignmentPairsElement createAssignmentPairsElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.AssignmentPairsElementImpl();
    }

    /**
     * Create an instance of Action2
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.Action2 createAction2()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.Action2Impl();
    }

    /**
     * Create an instance of ChannelPara
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ChannelPara createChannelPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ChannelParaImpl();
    }

    /**
     * Create an instance of BasicChannelSetExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.BasicChannelSetExpr createBasicChannelSetExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.BasicChannelSetExprImpl();
    }

    /**
     * Create an instance of IntChoiceAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.IntChoiceAction createIntChoiceAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.IntChoiceActionImpl();
    }

    /**
     * Create an instance of ParallelProcessElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParallelProcessElement createParallelProcessElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParallelProcessElementImpl();
    }

    /**
     * Create an instance of ActionParaElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ActionParaElement createActionParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ActionParaElementImpl();
    }

    /**
     * Create an instance of Field
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.Field createField()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.FieldImpl();
    }

    /**
     * Create an instance of IntChoiceProcess
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcess createIntChoiceProcess()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.IntChoiceProcessImpl();
    }

    /**
     * Create an instance of IntChoiceProcessIdx
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcessIdx createIntChoiceProcessIdx()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.IntChoiceProcessIdxImpl();
    }

    /**
     * Create an instance of ProcessIteElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ProcessIteElement createProcessIteElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ProcessIteElementImpl();
    }

    /**
     * Create an instance of ParActionIte
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParActionIte createParActionIte()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParActionIteImpl();
    }

    /**
     * Create an instance of AlphabetisedParallelProcessIte
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcessIte createAlphabetisedParallelProcessIte()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.AlphabetisedParallelProcessIteImpl();
    }

    /**
     * Create an instance of ParActionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParActionElement createParActionElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParActionElementImpl();
    }

    /**
     * Create an instance of InterleaveProcess
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.InterleaveProcess createInterleaveProcess()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.InterleaveProcessImpl();
    }

    /**
     * Create an instance of LetVarActionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.LetVarActionElement createLetVarActionElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.LetVarActionElementImpl();
    }

    /**
     * Create an instance of ChannelSetElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ChannelSetElement createChannelSetElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ChannelSetElementImpl();
    }

    /**
     * Create an instance of RefinementConjPara
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.RefinementConjPara createRefinementConjPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.RefinementConjParaImpl();
    }

    /**
     * Create an instance of AlphabetisedParallelProcessElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcessElement createAlphabetisedParallelProcessElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.AlphabetisedParallelProcessElementImpl();
    }

    /**
     * Create an instance of ChannelParaElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ChannelParaElement createChannelParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ChannelParaElementImpl();
    }

    /**
     * Create an instance of SubstitutionAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.SubstitutionAction createSubstitutionAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.SubstitutionActionImpl();
    }

    /**
     * Create an instance of Action1
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.Action1 createAction1()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.Action1Impl();
    }

    /**
     * Create an instance of ActionIte
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ActionIte createActionIte()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ActionIteImpl();
    }

    /**
     * Create an instance of ActionSignatureElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ActionSignatureElement createActionSignatureElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureElementImpl();
    }

    /**
     * Create an instance of RenameProcessElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.RenameProcessElement createRenameProcessElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.RenameProcessElementImpl();
    }

    /**
     * Create an instance of Process2Element
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.Process2Element createProcess2Element()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.Process2ElementImpl();
    }

    /**
     * Create an instance of ParallelProcessIte
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParallelProcessIte createParallelProcessIte()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParallelProcessIteImpl();
    }

    /**
     * Create an instance of MuAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.MuAction createMuAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.MuActionImpl();
    }

    /**
     * Create an instance of ChannelSetTypeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ChannelSetTypeElement createChannelSetTypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ChannelSetTypeElementImpl();
    }

    /**
     * Create an instance of FieldListElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.FieldListElement createFieldListElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.FieldListElementImpl();
    }

    /**
     * Create an instance of ProcessIdxElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ProcessIdxElement createProcessIdxElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ProcessIdxElementImpl();
    }

    /**
     * Create an instance of CircusActionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.CircusActionElement createCircusActionElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.CircusActionElementImpl();
    }

    /**
     * Create an instance of StopAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.StopAction createStopAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.StopActionImpl();
    }

    /**
     * Create an instance of NameSetType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.NameSetType createNameSetType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.NameSetTypeImpl();
    }

    /**
     * Create an instance of ParProcessElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParProcessElement createParProcessElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParProcessElementImpl();
    }

    /**
     * Create an instance of ParAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParAction createParAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParActionImpl();
    }

    /**
     * Create an instance of PrefixingActionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.PrefixingActionElement createPrefixingActionElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.PrefixingActionElementImpl();
    }

    /**
     * Create an instance of ParProcessIdxElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParProcessIdxElement createParProcessIdxElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParProcessIdxElementImpl();
    }

    /**
     * Create an instance of Process2
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.Process2 createProcess2()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.Process2Impl();
    }

    /**
     * Create an instance of LetMuAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.LetMuAction createLetMuAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.LetMuActionImpl();
    }

    /**
     * Create an instance of BasicProcess
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.BasicProcess createBasicProcess()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessImpl();
    }

    /**
     * Create an instance of ActionSignature
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ActionSignature createActionSignature()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureImpl();
    }

    /**
     * Create an instance of ActionPara
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ActionPara createActionPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ActionParaImpl();
    }

    /**
     * Create an instance of AssignmentCommand
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.AssignmentCommand createAssignmentCommand()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.AssignmentCommandImpl();
    }

    /**
     * Create an instance of MuActionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.MuActionElement createMuActionElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.MuActionElementImpl();
    }

    /**
     * Create an instance of CallProcess
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.CallProcess createCallProcess()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.CallProcessImpl();
    }

    /**
     * Create an instance of IndexedProcess
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.IndexedProcess createIndexedProcess()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.IndexedProcessImpl();
    }

    /**
     * Create an instance of ChannelType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ChannelType createChannelType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ChannelTypeImpl();
    }

    /**
     * Create an instance of QualifiedDeclElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.QualifiedDeclElement createQualifiedDeclElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.QualifiedDeclElementImpl();
    }

    /**
     * Create an instance of ProcessPara
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ProcessPara createProcessPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ProcessParaImpl();
    }

    /**
     * Create an instance of ActionDElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ActionDElement createActionDElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ActionDElementImpl();
    }

    /**
     * Create an instance of HideProcessElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.HideProcessElement createHideProcessElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.HideProcessElementImpl();
    }

    /**
     * Create an instance of SigmaExprElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.SigmaExprElement createSigmaExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.SigmaExprElementImpl();
    }

    /**
     * Create an instance of ProcessIdx
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ProcessIdx createProcessIdx()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ProcessIdxImpl();
    }

    /**
     * Create an instance of ProcessD
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ProcessD createProcessD()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ProcessDImpl();
    }

    /**
     * Create an instance of ParallelActionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParallelActionElement createParallelActionElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParallelActionElementImpl();
    }

    /**
     * Create an instance of ParActionIteElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParActionIteElement createParActionIteElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParActionIteElementImpl();
    }

    /**
     * Create an instance of BasicProcessSignature
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.BasicProcessSignature createBasicProcessSignature()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessSignatureImpl();
    }

    /**
     * Create an instance of ParProcessIdx
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParProcessIdx createParProcessIdx()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParProcessIdxImpl();
    }

    /**
     * Create an instance of ParallelAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParallelAction createParallelAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParallelActionImpl();
    }

    /**
     * Create an instance of ProcessType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ProcessType createProcessType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ProcessTypeImpl();
    }

    /**
     * Create an instance of PrefixingAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.PrefixingAction createPrefixingAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.PrefixingActionImpl();
    }

    /**
     * Create an instance of LetVarAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.LetVarAction createLetVarAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.LetVarActionImpl();
    }

    /**
     * Create an instance of HideAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.HideAction createHideAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.HideActionImpl();
    }

    /**
     * Create an instance of OnTheFlyDefAnn
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.OnTheFlyDefAnn createOnTheFlyDefAnn()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.OnTheFlyDefAnnImpl();
    }

    /**
     * Create an instance of ChannelSetType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ChannelSetType createChannelSetType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ChannelSetTypeImpl();
    }

    /**
     * Create an instance of GuardedActionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.GuardedActionElement createGuardedActionElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.GuardedActionElementImpl();
    }

    /**
     * Create an instance of NameSetElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.NameSetElement createNameSetElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.NameSetElementImpl();
    }

    /**
     * Create an instance of CircusCommand
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.CircusCommand createCircusCommand()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.CircusCommandImpl();
    }

    /**
     * Create an instance of CircusCommandElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.CircusCommandElement createCircusCommandElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.CircusCommandElementImpl();
    }

    /**
     * Create an instance of AlphabetisedParallelAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelAction createAlphabetisedParallelAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.AlphabetisedParallelActionImpl();
    }

    /**
     * Create an instance of ChannelTypeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ChannelTypeElement createChannelTypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ChannelTypeElementImpl();
    }

    /**
     * Create an instance of ExtChoiceActionIte
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ExtChoiceActionIte createExtChoiceActionIte()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ExtChoiceActionIteImpl();
    }

    /**
     * Create an instance of AlphabetisedParallelProcess
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcess createAlphabetisedParallelProcess()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.AlphabetisedParallelProcessImpl();
    }

    /**
     * Create an instance of ProcessTypeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ProcessTypeElement createProcessTypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ProcessTypeElementImpl();
    }

    /**
     * Create an instance of IntChoiceActionIte
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.IntChoiceActionIte createIntChoiceActionIte()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.IntChoiceActionIteImpl();
    }

    /**
     * Create an instance of Communication
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.Communication createCommunication()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.CommunicationImpl();
    }

    /**
     * Create an instance of AlphabetisedParallelActionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelActionElement createAlphabetisedParallelActionElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.AlphabetisedParallelActionElementImpl();
    }

    /**
     * Create an instance of Process1Element
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.Process1Element createProcess1Element()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.Process1ElementImpl();
    }

    /**
     * Create an instance of SubstitutionActionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.SubstitutionActionElement createSubstitutionActionElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.SubstitutionActionElementImpl();
    }

    /**
     * Create an instance of SigmaExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.SigmaExpr createSigmaExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.SigmaExprImpl();
    }

    /**
     * Create an instance of CallProcessElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.CallProcessElement createCallProcessElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.CallProcessElementImpl();
    }

    /**
     * Create an instance of QualifiedDecl
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.QualifiedDecl createQualifiedDecl()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.QualifiedDeclImpl();
    }

    /**
     * Create an instance of DotFieldElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.DotFieldElement createDotFieldElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.DotFieldElementImpl();
    }

    /**
     * Create an instance of SchExprActionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.SchExprActionElement createSchExprActionElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.SchExprActionElementImpl();
    }

    /**
     * Create an instance of SpecStmtCommand
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.SpecStmtCommand createSpecStmtCommand()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.SpecStmtCommandImpl();
    }

    /**
     * Create an instance of DotField
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.DotField createDotField()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.DotFieldImpl();
    }

    /**
     * Create an instance of LetMuActionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.LetMuActionElement createLetMuActionElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.LetMuActionElementImpl();
    }

    /**
     * Create an instance of AssignmentPairs
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.AssignmentPairs createAssignmentPairs()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.AssignmentPairsImpl();
    }

    /**
     * Create an instance of LetAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.LetAction createLetAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.LetActionImpl();
    }

    /**
     * Create an instance of IntChoiceProcessIte
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcessIte createIntChoiceProcessIte()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.IntChoiceProcessIteImpl();
    }

    /**
     * Create an instance of FieldList
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.FieldList createFieldList()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.FieldListImpl();
    }

    /**
     * Create an instance of Action1Element
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.Action1Element createAction1Element()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.Action1ElementImpl();
    }

    /**
     * Create an instance of ParamAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParamAction createParamAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParamActionImpl();
    }

    /**
     * Create an instance of RefinementConjParaElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.RefinementConjParaElement createRefinementConjParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.RefinementConjParaElementImpl();
    }

    /**
     * Create an instance of OutputField
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.OutputField createOutputField()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.OutputFieldImpl();
    }

    /**
     * Create an instance of CircusStateAnn
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.CircusStateAnn createCircusStateAnn()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.CircusStateAnnImpl();
    }

    /**
     * Create an instance of ParProcess
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParProcess createParProcess()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParProcessImpl();
    }

    /**
     * Create an instance of SeqProcess
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.SeqProcess createSeqProcess()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.SeqProcessImpl();
    }

    /**
     * Create an instance of CircusProcessElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.CircusProcessElement createCircusProcessElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.CircusProcessElementImpl();
    }

    /**
     * Create an instance of BasicProcessSignatureElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.BasicProcessSignatureElement createBasicProcessSignatureElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessSignatureElementImpl();
    }

    /**
     * Create an instance of ParallelProcessIteElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParallelProcessIteElement createParallelProcessIteElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParallelProcessIteElementImpl();
    }

    /**
     * Create an instance of SkipAction
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.SkipAction createSkipAction()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.SkipActionImpl();
    }

    /**
     * Create an instance of IfGuardedCommandElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.IfGuardedCommandElement createIfGuardedCommandElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.IfGuardedCommandElementImpl();
    }

    /**
     * Create an instance of SeqProcessIdx
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.SeqProcessIdx createSeqProcessIdx()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.SeqProcessIdxImpl();
    }

    /**
     * Create an instance of ActionIteElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ActionIteElement createActionIteElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ActionIteElementImpl();
    }

    /**
     * Create an instance of NameSetTypeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.NameSetTypeElement createNameSetTypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.NameSetTypeElementImpl();
    }

    /**
     * Create an instance of InputFieldElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.InputFieldElement createInputFieldElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.InputFieldElementImpl();
    }

    /**
     * Create an instance of InterleaveProcessIdx
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.InterleaveProcessIdx createInterleaveProcessIdx()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.InterleaveProcessIdxImpl();
    }

    /**
     * Create an instance of RenameProcess
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.RenameProcess createRenameProcess()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.RenameProcessImpl();
    }

    /**
     * Create an instance of Process1
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.Process1 createProcess1()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.Process1Impl();
    }

    /**
     * Create an instance of ParallelProcessIdx
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ParallelProcessIdx createParallelProcessIdx()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ParallelProcessIdxImpl();
    }

    /**
     * Create an instance of ActionD
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.ActionD createActionD()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.ActionDImpl();
    }

    /**
     * Create an instance of InterleaveProcessIte
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.circus.jaxb.gen.InterleaveProcessIte createInterleaveProcessIte()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.InterleaveProcessIteImpl();
    }

}
