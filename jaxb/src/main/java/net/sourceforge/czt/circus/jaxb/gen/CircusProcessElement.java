//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.06.26 at 02:10:37 PM NZST 
//


package net.sourceforge.czt.circus.jaxb.gen;


/**
 * Java content class for CircusProcess element declaration.
 * <p>The following schema fragment specifies the expected content contained within this java content object. (defined at file:/research/czt/trunk/jaxb/build/xsd/Circus.xsd line 269)
 * <pre>&lt;p xmlns:Z="http://czt.sourceforge.net/zml" xmlns:CIRCUS="http://czt.sourceforge.net/circus" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:gnast="http://czt.sourceforge.net/gnast" xmlns:xml="http://www.w3.org/XML/1998/namespace" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb">
 * An abstract Circus process definition. It represents the
 * &lt;b>ProcessDefinition&lt;/b> grammar rule.
 * Available extensions are basic process description; recursion; prefixing; guarded process;
 * process call; all forms of unary, binary, iterated, and indexed processes;
 * processes involving expressions; and processes involving declarations. &lt;/p></pre>
 * 
 * <pre>&lt;p xmlns:Z="http://czt.sourceforge.net/zml" xmlns:CIRCUS="http://czt.sourceforge.net/circus" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:gnast="http://czt.sourceforge.net/gnast" xmlns:xml="http://www.w3.org/XML/1998/namespace" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb">
 * The parser is responsible to enforce restrictions over process definitions involving parameters
 * or indexes within some binary productions. For instance, the parse must rule out cases such as
 * 
 * &lt;code>(x: nat @ A) [] (y: nat @ B)&lt;/code>, since parameterised process can only appear in an
 * external choice whenever the actual parameters are given.&lt;/p></pre>
 * 
 * <pre>&lt;p xmlns:Z="http://czt.sourceforge.net/zml" xmlns:CIRCUS="http://czt.sourceforge.net/circus" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:gnast="http://czt.sourceforge.net/gnast" xmlns:xml="http://www.w3.org/XML/1998/namespace" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb">
 * This allows us to represent the grammar rules
 * &lt;b>ProcessDefinition&lt;/b> and
 * &lt;b>Process&lt;/b> with
 * a single class. The main advantage is that we can treat unary process definitions uniformly
 * through a single hierarchy tree.&lt;/p></pre>
 * 
 * <pre>&lt;p xmlns:Z="http://czt.sourceforge.net/zml" xmlns:CIRCUS="http://czt.sourceforge.net/circus" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:gnast="http://czt.sourceforge.net/gnast" xmlns:xml="http://www.w3.org/XML/1998/namespace" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb">
 * Naming this class
 * &lt;code>Process&lt;/code> would have been a better choice but unfortunately this would
 * conflict with the interface
 * &lt;code>java.lang.Process&lt;/code>.&lt;/p></pre>
 * 
 * 
 * 
 * <p>
 * <pre>
 * &lt;element name="CircusProcess" type="{http://czt.sourceforge.net/circus}CircusProcess"/>
 * </pre>
 * 
 */
public interface CircusProcessElement
    extends javax.xml.bind.Element, net.sourceforge.czt.circus.jaxb.gen.CircusProcess
{


}
