<?xml version="1.0"?>
<status>

  <developers>
    <person name="Tim Miller" email="timmiller@sourceforge.net" id="Tim"/>
    <!-- Add more people here -->
  </developers>

  <changes>
    <!-- Add new releases here -->
    <release version="0.4" date="unreleased">
      <action dev="Tim" type="add">
        Implemented implicit downcasting (e.g. a \in B => p)
      </action>
      <!-- Sample action:
      <action dev="JB" type="fix" due-to="Joe Contributor"
          due-to-email="joec@apache.org" fixes-bug="123">
          Fixed a bug in the Foo class.
        </action>
      Some action types have associated images. By default, images are
      defined for 'add', 'fix', 'remove', 'update' and 'hack'. If you add
      src/site/resources/images/<foo>.jpg images, these will
      automatically be used for entries of type <foo>. -->
    </release>
    <release version="0.3" date="March 17, 2005">
      <action dev="Tim" type="add" context="admin">
        Initial Release.
      </action>
    </release>
  </changes>

  <todo>
    <actions priority="high">
      <action context="docs" dev="open">
        Improve the web site.
      </action>
      <action context="code" dev="Tim">
        Finish implementing weak typing unification algorithm.
      </action>
      <action context="code" dev="Tim">
        Write test class and commit test scripts for use before
        declaration functionality.
      </action>
      <action context="code" dev="Tim">
        Finish type rules for PolyExpr (check that sublasses have the
        type-compatible features).
      </action>
      <action context="code" dev="Tim">
        Currently, use before declaration does not work for operations
        declared within the same class paragraph. Update the adding of
        class types to the typing environment to overcome this.
      </action>
      <action context="code" dev="Tim">
        Investigate further generic definitions inside classes, and their 
        reference/instantiation from without and outside the class.
      </action>
    </actions>
    <actions priority="medium">
      <action context="code" dev="open">
        Specify the Object-Z type rules using the type-inference rule
        metalanguage defined in the Z standard.
      </action>
      <action context="code" dev="open">
        Look at ways to infer class types using attribute and
        operation selection expressions.
      </action>
    </actions>
    <!-- Add todo items. @context is an arbitrary string. Eg:
    <actions priority="high">
      <action context="code" dev="SN">
      </action>
    </actions>
    <actions priority="medium">
      <action context="docs" dev="open">
      </action>
    </actions>
    -->
  </todo>

</status>
