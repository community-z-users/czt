<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE unicode SYSTEM "unicode.dtd">
<Spec xmlns="http://czt.sourceforge.net/zml" xmlns:gnast="http://czt.sourceforge.net/gnast" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://czt.sourceforge.net/zml
D:\Academic\typechecker\zml\Z.xsd">
	<ZSect>
		<Name>sequence_toolkit</Name>
		<Parent>
			<Word>function_toolkit</Word>
		</Parent>
		<Parent>
			<Word>number_toolkit</Word>
		</Parent>
		<!-- operator temp: number range -->
		<OptempPara Cat="Function" Prec="20" Assoc="Left">
			<Operand/>
			<Operator>
				<Word>&upto;</Word>
			</Operator>
			<Operand/>
		</OptempPara>
		<!-- axiomatic defn: number range -->
		<AxPara>
			<SchText>
				<VarDecl>
					<DeclName>
						<Word> _ &upto; _</Word>
					</DeclName>
					<RefExpr Mixfix="true">
						<RefName>
							<Word> _ &pfun; </Word>
						</RefName>
						<ProdExpr>
							<RefExpr>
								<RefName>
									<Word>&arithmos;</Word>
								</RefName>
							</RefExpr>
							<RefExpr>
								<RefName>
									<Word>&arithmos;</Word>
								</RefName>
							</RefExpr>
						</ProdExpr>
						<PowerExpr>
							<RefExpr>
								<RefName>
									<Word>&arithmos;</Word>
								</RefName>
							</RefExpr>
						</PowerExpr>
					</RefExpr>
				</VarDecl>
				<AndPred Op="NL">
					<MemPred>
						<ApplExpr>
							<RefExpr>
								<RefName>
									<Word> _ &dres; _ </Word>
								</RefName>
							</RefExpr>
							<TupleExpr>
								<ProdExpr>
									<RefExpr>
										<RefName>
											<Word>&integer;</Word>
										</RefName>
									</RefExpr>
									<RefExpr>
										<RefName>
											<Word>&integer;</Word>
										</RefName>
									</RefExpr>
								</ProdExpr>
								<RefExpr>
									<RefName>
										<Word> _ &upto; _ </Word>
									</RefName>
								</RefExpr>
							</TupleExpr>
						</ApplExpr>
						<RefExpr Mixfix="true">
							<RefName>
								<Word> _ &tfun; _ </Word>
							</RefName>
							<ProdExpr>
								<RefExpr>
									<RefName>
										<Word>&integer;</Word>
									</RefName>
								</RefExpr>
								<RefExpr>
									<RefName>
										<Word>&integer;</Word>
									</RefName>
								</RefExpr>
							</ProdExpr>
							<PowerExpr>
								<RefExpr>
									<RefName>
										<Word>&integer;</Word>
									</RefName>
								</RefExpr>
							</PowerExpr>
						</RefExpr>
					</MemPred>
					<ForallPred>
						<SchText>
							<VarDecl>
								<DeclName>
									<Word>i</Word>
								</DeclName>
								<DeclName>
									<Word>j</Word>
								</DeclName>
								<RefExpr>
									<RefName>
										<Word>&integer;</Word>
									</RefName>
								</RefExpr>
							</VarDecl>
						</SchText>
						<MemPred>
							<TupleExpr>
								<ApplExpr>
									<RefExpr>
										<RefName>
											<Word> _ &upto; _ </Word>
										</RefName>
									</RefExpr>
									<TupleExpr>
										<RefExpr>
											<RefName>
												<Word>i</Word>
											</RefName>
										</RefExpr>
										<RefExpr>
											<RefName>
												<Word>j</Word>
											</RefName>
										</RefExpr>
									</TupleExpr>
								</ApplExpr>
								<SetCompExpr>
									<SchText>
										<VarDecl>
											<DeclName>
												<Word>k</Word>
											</DeclName>
											<RefExpr>
												<RefName>
													<Word>&integer;</Word>
												</RefName>
											</RefExpr>
										</VarDecl>
										<AndPred Op="Chain">
											<ExprPred>
												<RefExpr Mixfix="true">
													<RefName>
														<Word> _ &leq; _ </Word>
													</RefName>
													<RefExpr>
														<RefName>
															<Word>i</Word>
														</RefName>
													</RefExpr>
													<RefExpr>
														<RefName>
															<Word>k</Word>
														</RefName>
													</RefExpr>
												</RefExpr>
											</ExprPred>
											<ExprPred>
												<RefExpr Mixfix="true">
													<RefName>
														<Word> _ &leq; _ </Word>
													</RefName>
													<RefExpr>
														<RefName>
															<Word>k</Word>
														</RefName>
													</RefExpr>
													<RefExpr>
														<RefName>
															<Word>j</Word>
														</RefName>
													</RefExpr>
												</RefExpr>
											</ExprPred>
										</AndPred>
									</SchText>
								</SetCompExpr>
							</TupleExpr>
							<RefExpr>
								<RefName>
									<Word>=</Word>
								</RefName>
							</RefExpr>
						</MemPred>
					</ForallPred>
				</AndPred>
			</SchText>
		</AxPara>
		<!-- generic axiomatic defn: iteration -->
		<AxPara>
			<DeclName>
				<Word>X</Word>
			</DeclName>
			<SchText>
				<VarDecl>
					<DeclName>
						<Word>iter</Word>
					</DeclName>
					<RefExpr Mixfix="true">
						<RefName>
							<Word> _ &tfun; _ </Word>
						</RefName>
						<RefExpr>
							<RefName>
								<Word>&integer;</Word>
							</RefName>
						</RefExpr>
						<RefExpr Mixfix="true">
							<RefName>
								<Word> _ &tfun; _ </Word>
							</RefName>
							<RefExpr Mixfix="true">
								<RefName>
									<Word> _ &rel; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
							<RefExpr Mixfix="true">
								<RefName>
									<Word> _ &rel; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</RefExpr>
					</RefExpr>
				</VarDecl>
				<AndPred Op="NL">
					<ForallPred>
						<SchText>
							<VarDecl>
								<DeclName>
									<Word>r</Word>
								</DeclName>
								<RefExpr Mixfix="true">
									<RefName>
										<Word> _ &rel; _ </Word>
									</RefName>
									<RefExpr>
										<RefName>
											<Word>X</Word>
										</RefName>
									</RefExpr>
									<RefExpr>
										<RefName>
											<Word>X</Word>
										</RefName>
									</RefExpr>
								</RefExpr>
							</VarDecl>
						</SchText>
						<MemPred>
							<TupleExpr>
								<ApplExpr>
									<RefExpr>
										<RefName>
											<Word>iter</Word>
										</RefName>
									</RefExpr>
									<TupleExpr>
										<NumExpr Value="0"/>
										<RefExpr>
											<RefName>
												<Word>r</Word>
											</RefName>
										</RefExpr>
									</TupleExpr>
								</ApplExpr>
								<RefExpr Mixfix="true">
									<RefName>
										<Word>id _ </Word>
									</RefName>
									<RefExpr>
										<RefName>
											<Word>X</Word>
										</RefName>
									</RefExpr>
								</RefExpr>
							</TupleExpr>
							<RefExpr>
								<RefName>
									<Word>=</Word>
								</RefName>
							</RefExpr>
						</MemPred>
					</ForallPred>
					<AndPred Op="NL">
						<ForallPred>
							<SchText>
								<VarDecl>
									<DeclName>
										<Word>r</Word>
									</DeclName>
									<RefExpr Mixfix="true">
										<RefName>
											<Word> _ &rel; _ </Word>
										</RefName>
										<RefExpr>
											<RefName>
												<Word>X</Word>
											</RefName>
										</RefExpr>
										<RefExpr>
											<RefName>
												<Word>X</Word>
											</RefName>
										</RefExpr>
									</RefExpr>
								</VarDecl>
								<VarDecl>
									<DeclName>
										<Word>n</Word>
									</DeclName>
									<RefExpr>
										<RefName>
											<Word>&nat;</Word>
										</RefName>
									</RefExpr>
								</VarDecl>
							</SchText>
							<MemPred>
								<TupleExpr>
									<ApplExpr>
										<RefExpr>
											<RefName>
												<Word>iter</Word>
											</RefName>
										</RefExpr>
										<TupleExpr>
											<ApplExpr>
												<RefExpr>
													<RefName>
														<Word> _ + _ </Word>
													</RefName>
												</RefExpr>
												<TupleExpr>
													<RefExpr>
														<RefName>
															<Word>n</Word>
														</RefName>
													</RefExpr>
													<NumExpr Value="1"/>
												</TupleExpr>
											</ApplExpr>
											<RefExpr>
												<RefName>
													<Word>r</Word>
												</RefName>
											</RefExpr>
										</TupleExpr>
									</ApplExpr>
									<ApplExpr>
										<RefExpr>
											<RefName>
												<Word> _ &rcmp; _ </Word>
											</RefName>
										</RefExpr>
										<TupleExpr>
											<RefExpr>
												<RefName>
													<Word>r</Word>
												</RefName>
											</RefExpr>
											<ApplExpr>
												<RefExpr>
													<RefName>
														<Word>iter</Word>
													</RefName>
												</RefExpr>
												<TupleExpr>
													<RefExpr>
														<RefName>
															<Word>n</Word>
														</RefName>
													</RefExpr>
													<RefExpr>
														<RefName>
															<Word>r</Word>
														</RefName>
													</RefExpr>
												</TupleExpr>
											</ApplExpr>
										</TupleExpr>
									</ApplExpr>
								</TupleExpr>
								<RefExpr>
									<RefName>
										<Word>=</Word>
									</RefName>
								</RefExpr>
							</MemPred>
						</ForallPred>
						<ForallPred>
							<SchText>
								<VarDecl>
									<DeclName>
										<Word>r</Word>
									</DeclName>
									<RefExpr Mixfix="true">
										<RefName>
											<Word> _ &rel; _ </Word>
										</RefName>
										<RefExpr>
											<RefName>
												<Word>X</Word>
											</RefName>
										</RefExpr>
										<RefExpr>
											<RefName>
												<Word>X</Word>
											</RefName>
										</RefExpr>
									</RefExpr>
								</VarDecl>
								<VarDecl>
									<DeclName>
										<Word>n</Word>
									</DeclName>
									<RefExpr>
										<RefName>
											<Word>&nat;</Word>
										</RefName>
									</RefExpr>
								</VarDecl>
							</SchText>
							<MemPred>
								<TupleExpr>
									<ApplExpr>
										<RefExpr>
											<RefName>
												<Word>iter</Word>
											</RefName>
										</RefExpr>
										<TupleExpr>
											<RefExpr Mixfix="true">
												<RefName>
													<Word>- _ </Word>
												</RefName>
												<RefExpr>
													<RefName>
														<Word>n</Word>
													</RefName>
												</RefExpr>
											</RefExpr>
											<RefExpr>
												<RefName>
													<Word>r</Word>
												</RefName>
											</RefExpr>
										</TupleExpr>
									</ApplExpr>
									<ApplExpr>
										<RefExpr>
											<RefName>
												<Word>iter</Word>
											</RefName>
										</RefExpr>
										<TupleExpr>
											<RefExpr>
												<RefName>
													<Word>n</Word>
												</RefName>
											</RefExpr>
											<RefExpr Mixfix="true">
												<RefName>
													<Word> _ &inv;</Word>
												</RefName>
												<RefExpr>
													<RefName>
														<Word>r</Word>
													</RefName>
												</RefExpr>
											</RefExpr>
										</TupleExpr>
									</ApplExpr>
								</TupleExpr>
								<RefExpr>
									<RefName>
										<Word>=</Word>
									</RefName>
								</RefExpr>
							</MemPred>
						</ForallPred>
					</AndPred>
				</AndPred>
			</SchText>
		</AxPara>
		<!-- operator temp: - (alternative iteration) -->
		<OptempPara Cat="Function" Prec="90">
			<Operand/>
			<Operator>
				<Word>-</Word>
			</Operator>
		</OptempPara>
		<!-- generic axiomatic defn: - (alternative iteration) -->
		<AxPara>
			<SchText>
				<VarDecl>
					<DeclName>
						<Word> _ -</Word>
					</DeclName>
					<RefExpr Mixfix="true">
						<RefName>
							<Word> _ &tfun; _ </Word>
						</RefName>
						<ProdExpr>
							<RefExpr Mixfix="true">
								<RefName>
									<Word> _ &rel; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
							<RefExpr>
								<RefName>
									<Word>&integer;</Word>
								</RefName>
							</RefExpr>
						</ProdExpr>
						<RefExpr Mixfix="true">
							<RefName>
								<Word> _ &rel; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
					</RefExpr>
				</VarDecl>
				<ForallPred>
					<SchText>
						<VarDecl>
							<DeclName>
								<Word>x</Word>
							</DeclName>
							<RefExpr Mixfix="true">
								<RefName>
									<Word> _ &rel; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</VarDecl>
						<VarDecl>
							<DeclName>
								<Word>n</Word>
							</DeclName>
							<RefExpr>
								<RefName>
									<Word>&nat;</Word>
								</RefName>
							</RefExpr>
						</VarDecl>
					</SchText>
					<MemPred>
						<TupleExpr>
							<RefExpr Mixfix="true">
								<RefName>
									<Word> _ &#x2198;n&#x2196;</Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>r</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
							<ApplExpr>
								<RefExpr>
									<RefName>
										<Word>iter</Word>
									</RefName>
								</RefExpr>
								<TupleExpr>
									<RefExpr>
										<RefName>
											<Word>n</Word>
										</RefName>
									</RefExpr>
									<RefExpr>
										<RefName>
											<Word>r</Word>
										</RefName>
									</RefExpr>
								</TupleExpr>
							</ApplExpr>
						</TupleExpr>
						<RefExpr>
							<RefName>
								<Word>=</Word>
							</RefName>
						</RefExpr>
					</MemPred>
				</ForallPred>
			</SchText>
		</AxPara>
		<!-- operator temp: number of members of a set -->
		<OptempPara Cat="Function" Prec="80">
			<Operator>
				<Word>&car;</Word>
			</Operator>
			<Operand/>
		</OptempPara>
		<!-- generic axiomatic defn: number of members of a set -->
		<AxPara>
			<DeclName>
				<Word>X</Word>
			</DeclName>
			<SchText>
				<VarDecl>
					<DeclName>
						<Word>&car; _ </Word>
					</DeclName>
					<RefExpr Mixfix="true">
						<RefName>
							<Word> _ &tfun; _ </Word>
						</RefName>
						<RefExpr Mixfix="true">
							<RefName>
								<Word>&fset; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
						<RefExpr>
							<RefName>
								<Word>&nat;</Word>
							</RefName>
						</RefExpr>
					</RefExpr>
				</VarDecl>
				<ForallPred>
					<SchText>
						<VarDecl>
							<DeclName>
								<Word>a</Word>
							</DeclName>
							<RefExpr Mixfix="true">
								<RefName>
									<Word>&fset; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</VarDecl>
					</SchText>
					<MemPred>
						<TupleExpr>
							<ApplExpr>
								<RefExpr>
									<RefName>
										<Word>&car; _ </Word>
									</RefName>
								</RefExpr>
								<RefExpr>
									<RefName>
										<Word>a</Word>
									</RefName>
								</RefExpr>
							</ApplExpr>
							<MuExpr>
								<SchText>
									<VarDecl>
										<DeclName>
											<Word>n</Word>
										</DeclName>
										<RefExpr>
											<RefName>
												<Word>&nat;</Word>
											</RefName>
										</RefExpr>
									</VarDecl>
									<ExistsPred>
										<SchText>
											<VarDecl>
												<DeclName>
													<Word>f</Word>
												</DeclName>
												<ApplExpr>
													<RefExpr>
														<RefName>
															<Word> _ &tinj; _ </Word>
														</RefName>
													</RefExpr>
													<TupleExpr>
														<ApplExpr>
															<RefExpr>
																<RefName>
																	<Word> _ &upto; _ </Word>
																</RefName>
															</RefExpr>
															<TupleExpr>
																<NumExpr Value="1"/>
																<RefExpr>
																	<RefName>
																		<Word>n</Word>
																	</RefName>
																</RefExpr>
															</TupleExpr>
														</ApplExpr>
														<RefExpr>
															<RefName>
																<Word>a</Word>
															</RefName>
														</RefExpr>
													</TupleExpr>
												</ApplExpr>
											</VarDecl>
										</SchText>
										<MemPred>
											<TupleExpr>
												<ApplExpr>
													<RefExpr>
														<RefName>
															<Word>&ran; _ </Word>
														</RefName>
													</RefExpr>
													<RefExpr>
														<RefName>
															<Word>f</Word>
														</RefName>
													</RefExpr>
												</ApplExpr>
												<RefExpr>
													<RefName>
														<Word>a</Word>
													</RefName>
												</RefExpr>
											</TupleExpr>
											<RefExpr>
												<RefName>
													<Word>=</Word>
												</RefName>
											</RefExpr>
										</MemPred>
									</ExistsPred>
								</SchText>
							</MuExpr>
						</TupleExpr>
						<RefExpr>
							<RefName>
								<Word>=</Word>
							</RefName>
						</RefExpr>
					</MemPred>
				</ForallPred>
			</SchText>
		</AxPara>
		<!-- operator temp: minimum -->
		<OptempPara Cat="Function" Prec="80">
			<Operator>
				<Word>min</Word>
			</Operator>
			<Operand/>
		</OptempPara>
		<!-- axiomatic defn: minimum -->
		<AxPara>
			<SchText>
				<VarDecl>
					<DeclName>
						<Word>min _ </Word>
					</DeclName>
					<RefExpr Mixfix="true">
						<RefName>
							<Word> _ &pfun; _ </Word>
						</RefName>
						<PowerExpr>
							<RefExpr>
								<RefName>
									<Word>&arithmos;</Word>
								</RefName>
							</RefExpr>
						</PowerExpr>
						<RefExpr>
							<RefName>
								<Word>&arithmos;</Word>
							</RefName>
						</RefExpr>
					</RefExpr>
				</VarDecl>
				<MemPred>
					<TupleExpr>
						<ApplExpr>
							<RefExpr>
								<RefName>
									<Word> _ &dres; _ </Word>
								</RefName>
							</RefExpr>
							<TupleExpr>
								<PowerExpr>
									<RefExpr>
										<RefName>
											<Word>&integer;</Word>
										</RefName>
									</RefExpr>
								</PowerExpr>
								<RefExpr Mixfix="true">
									<RefName>
										<Word>min _ </Word>
									</RefName>
								</RefExpr>
							</TupleExpr>
						</ApplExpr>
						<SetCompExpr>
							<SchText>
								<VarDecl>
									<DeclName>
										<Word>a</Word>
									</DeclName>
									<PowerExpr>
										<RefExpr>
											<RefName>
												<Word>&integer;</Word>
											</RefName>
										</RefExpr>
									</PowerExpr>
								</VarDecl>
								<VarDecl>
									<DeclName>
										<Word>m</Word>
									</DeclName>
									<RefExpr>
										<RefName>
											<Word>&integer;</Word>
										</RefName>
									</RefExpr>
								</VarDecl>
								<AndPred Op="And">
									<MemPred>
										<RefExpr>
											<RefName>
												<Word>m</Word>
											</RefName>
										</RefExpr>
										<RefExpr>
											<RefName>
												<Word>a</Word>
											</RefName>
										</RefExpr>
									</MemPred>
									<ForallPred>
										<SchText>
											<VarDecl>
												<DeclName>
													<Word>n</Word>
												</DeclName>
												<RefExpr>
													<RefName>
														<Word>a</Word>
													</RefName>
												</RefExpr>
											</VarDecl>
										</SchText>
										<ExprPred>
											<RefExpr Mixfix="true">
												<RefName>
													<Word> _ &leq; _ </Word>
												</RefName>
												<RefExpr>
													<RefName>
														<Word>m</Word>
													</RefName>
												</RefExpr>
												<RefExpr>
													<RefName>
														<Word>n</Word>
													</RefName>
												</RefExpr>
											</RefExpr>
										</ExprPred>
									</ForallPred>
								</AndPred>
							</SchText>
							<ApplExpr>
								<RefExpr>
									<RefName>
										<Word> _ &map; _ </Word>
									</RefName>
								</RefExpr>
								<TupleExpr>
									<RefExpr>
										<RefName>
											<Word>a</Word>
										</RefName>
									</RefExpr>
									<RefExpr>
										<RefName>
											<Word>m</Word>
										</RefName>
									</RefExpr>
								</TupleExpr>
							</ApplExpr>
						</SetCompExpr>
					</TupleExpr>
					<RefExpr>
						<RefName>
							<Word>=</Word>
						</RefName>
					</RefExpr>
				</MemPred>
			</SchText>
		</AxPara>
		<!-- operator temp: maximum -->
		<OptempPara Cat="Function" Prec="80">
			<Operator>
				<Word>max</Word>
			</Operator>
			<Operand/>
		</OptempPara>
		<!-- axiomatic defn: maximum-->
		<AxPara>
			<SchText>
				<VarDecl>
					<DeclName>
						<Word>max _ </Word>
					</DeclName>
					<RefExpr Mixfix="true">
						<RefName>
							<Word> _ &pfun; _ </Word>
						</RefName>
						<PowerExpr>
							<RefExpr>
								<RefName>
									<Word>&arithmos;</Word>
								</RefName>
							</RefExpr>
						</PowerExpr>
						<RefExpr>
							<RefName>
								<Word>&arithmos;</Word>
							</RefName>
						</RefExpr>
					</RefExpr>
				</VarDecl>
				<MemPred>
					<TupleExpr>
						<ApplExpr>
							<RefExpr>
								<RefName>
									<Word> _ &dres; _ </Word>
								</RefName>
							</RefExpr>
							<TupleExpr>
								<PowerExpr>
									<RefExpr>
										<RefName>
											<Word>&integer;</Word>
										</RefName>
									</RefExpr>
								</PowerExpr>
								<RefExpr Mixfix="true">
									<RefName>
										<Word>max _ </Word>
									</RefName>
								</RefExpr>
							</TupleExpr>
						</ApplExpr>
						<SetCompExpr>
							<SchText>
								<VarDecl>
									<DeclName>
										<Word>a</Word>
									</DeclName>
									<PowerExpr>
										<RefExpr>
											<RefName>
												<Word>&integer;</Word>
											</RefName>
										</RefExpr>
									</PowerExpr>
								</VarDecl>
								<VarDecl>
									<DeclName>
										<Word>m</Word>
									</DeclName>
									<RefExpr>
										<RefName>
											<Word>&integer;</Word>
										</RefName>
									</RefExpr>
								</VarDecl>
								<AndPred Op="And">
									<MemPred>
										<RefExpr>
											<RefName>
												<Word>m</Word>
											</RefName>
										</RefExpr>
										<RefExpr>
											<RefName>
												<Word>a</Word>
											</RefName>
										</RefExpr>
									</MemPred>
									<ForallPred>
										<SchText>
											<VarDecl>
												<DeclName>
													<Word>n</Word>
												</DeclName>
												<RefExpr>
													<RefName>
														<Word>a</Word>
													</RefName>
												</RefExpr>
											</VarDecl>
										</SchText>
										<ExprPred>
											<RefExpr Mixfix="true">
												<RefName>
													<Word> _ &leq; _ </Word>
												</RefName>
												<RefExpr>
													<RefName>
														<Word>n</Word>
													</RefName>
												</RefExpr>
												<RefExpr>
													<RefName>
														<Word>m</Word>
													</RefName>
												</RefExpr>
											</RefExpr>
										</ExprPred>
									</ForallPred>
								</AndPred>
							</SchText>
							<ApplExpr>
								<RefExpr>
									<RefName>
										<Word> _ &map; _ </Word>
									</RefName>
								</RefExpr>
								<TupleExpr>
									<RefExpr>
										<RefName>
											<Word>a</Word>
										</RefName>
									</RefExpr>
									<RefExpr>
										<RefName>
											<Word>m</Word>
										</RefName>
									</RefExpr>
								</TupleExpr>
							</ApplExpr>
						</SetCompExpr>
					</TupleExpr>
					<RefExpr>
						<RefName>
							<Word>=</Word>
						</RefName>
					</RefExpr>
				</MemPred>
			</SchText>
		</AxPara>
		<!-- operator temp: finite sequence -->
		<OptempPara Cat="Generic" Prec="80">
			<Operator>
				<Word>&seq;</Word>
			</Operator>
			<Operand/>
		</OptempPara>
		<!-- generic axiomatic defn: finite sequence -->
		<AxPara>
			<DeclName>
				<Word>X</Word>
			</DeclName>
			<SchText>
				<ConstDecl>
					<DeclName>
						<Word>&seq; _ </Word>
					</DeclName>
					<SetCompExpr>
						<SchText>
							<VarDecl>
								<DeclName>
									<Word>f</Word>
								</DeclName>
								<RefExpr Mixfix="true">
									<RefName>
										<Word> _ &ffun; _ </Word>
									</RefName>
									<RefExpr>
										<RefName>
											<Word>&nat;</Word>
										</RefName>
									</RefExpr>
									<RefExpr>
										<RefName>
											<Word>X</Word>
										</RefName>
									</RefExpr>
								</RefExpr>
							</VarDecl>
							<MemPred>
								<TupleExpr>
									<ApplExpr>
										<RefExpr>
											<RefName>
												<Word>&dom; _ </Word>
											</RefName>
										</RefExpr>
										<RefExpr>
											<RefName>
												<Word>f</Word>
											</RefName>
										</RefExpr>
									</ApplExpr>
									<ApplExpr>
										<RefExpr>
											<RefName>
												<Word> _ &upto; _ </Word>
											</RefName>
										</RefExpr>
										<TupleExpr>
											<NumExpr Value="1"/>
											<ApplExpr>
												<RefExpr>
													<RefName>
														<Word>&car; _ </Word>
													</RefName>
												</RefExpr>
												<RefExpr>
													<RefName>
														<Word>f</Word>
													</RefName>
												</RefExpr>
											</ApplExpr>
										</TupleExpr>
									</ApplExpr>
								</TupleExpr>
								<RefExpr>
									<RefName>
										<Word>=</Word>
									</RefName>
								</RefExpr>
							</MemPred>
						</SchText>
					</SetCompExpr>
				</ConstDecl>
			</SchText>
		</AxPara>
		<!-- generic axiomatic defn: non-empty sequence -->
		<AxPara>
			<DeclName>
				<Word>X</Word>
			</DeclName>
			<SchText>
				<ConstDecl>
					<DeclName>
						<Word>&seqone; _ </Word>
					</DeclName>
					<ApplExpr>
						<RefExpr>
							<RefName>
								<Word> _ &setdiff; _ </Word>
							</RefName>
						</RefExpr>
						<TupleExpr>
							<RefExpr Mixfix="true">
								<RefName>
									<Word>&seq; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
							<SetExpr>
								<RefExpr>
									<RefName>
										<Word>&emptyset;</Word>
									</RefName>
								</RefExpr>
							</SetExpr>
						</TupleExpr>
					</ApplExpr>
				</ConstDecl>
			</SchText>
		</AxPara>
		<!-- operator temp: injective sequence -->
		<OptempPara Cat="Generic" Prec="80">
			<Operator>
				<Word>iseq</Word>
			</Operator>
			<Operand/>
		</OptempPara>
		<!-- generic axiomatic defn: injective sequence -->
		<AxPara>
			<DeclName>
				<Word>X</Word>
			</DeclName>
			<SchText>
				<ConstDecl>
					<DeclName>
						<Word>iseq _ </Word>
					</DeclName>
					<ApplExpr>
						<RefExpr>
							<RefName>
								<Word> _ &int; _ </Word>
							</RefName>
						</RefExpr>
						<TupleExpr>
							<RefExpr Mixfix="true">
								<RefName>
									<Word>&seq; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
							<ApplExpr>
								<RefExpr>
									<RefName>
										<Word> _ &pinj; _ </Word>
									</RefName>
								</RefExpr>
								<TupleExpr>
									<RefExpr>
										<RefName>
											<Word>&nat;</Word>
										</RefName>
									</RefExpr>
									<RefExpr>
										<RefName>
											<Word>X</Word>
										</RefName>
									</RefExpr>
								</TupleExpr>
							</ApplExpr>
						</TupleExpr>
					</ApplExpr>
				</ConstDecl>
			</SchText>
		</AxPara>
		<!-- generic axiomatic defn: sequence brackets -->
		<AxPara>
			<DeclName>
				<Word>X</Word>
			</DeclName>
			<SchText>
				<ConstDecl>
					<DeclName>
						<Word>&lseq; _ &rseq;</Word>
					</DeclName>
					<LambdaExpr>
						<SchText>
							<VarDecl>
								<DeclName>
									<Word>s</Word>
								</DeclName>
								<RefExpr Mixfix="true">
									<RefName>
										<Word>&seq; _ </Word>
									</RefName>
									<RefExpr>
										<RefName>
											<Word>X</Word>
										</RefName>
									</RefExpr>
								</RefExpr>
							</VarDecl>
						</SchText>
						<RefExpr>
							<RefName>
								<Word>s</Word>
							</RefName>
						</RefExpr>
					</LambdaExpr>
				</ConstDecl>
			</SchText>
		</AxPara>
		<!-- operator temp: concatenation -->
		<OptempPara Cat="Function" Prec="30" Assoc="Left">
			<Operand/>
			<Operator>
				<Word>&cat;</Word>
			</Operator>
			<Operand/>
		</OptempPara>
		<!-- generic axiomatic defn: concatenation -->
		<AxPara>
			<DeclName>
				<Word>X</Word>
			</DeclName>
			<SchText>
				<VarDecl>
					<DeclName>
						<Word>&cat;</Word>
					</DeclName>
					<RefExpr Mixfix="true">
						<RefName>
							<Word> _ &tfun; _ </Word>
						</RefName>
						<ProdExpr>
							<RefExpr>
								<RefName>
									<Word>&seq;</Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
							<RefExpr>
								<RefName>
									<Word>&seq;</Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</ProdExpr>
						<RefExpr Mixfix="true">
							<RefName>
								<Word>&seq;</Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
					</RefExpr>
				</VarDecl>
				<ForallPred>
					<SchText>
						<VarDecl>
							<DeclName>
								<Word>s</Word>
							</DeclName>
							<DeclName>
								<Word>t</Word>
							</DeclName>
							<RefExpr Mixfix="true">
								<RefName>
									<Word>&seq;</Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</VarDecl>
					</SchText>
					<MemPred>
						<TupleExpr>
							<ApplExpr>
								<RefExpr>
									<RefName>
										<Word> _ &cat; _ </Word>
									</RefName>
								</RefExpr>
								<TupleExpr>
									<RefExpr>
										<RefName>
											<Word>s</Word>
										</RefName>
									</RefExpr>
									<RefExpr>
										<RefName>
											<Word>t</Word>
										</RefName>
									</RefExpr>
								</TupleExpr>
							</ApplExpr>
							<ApplExpr>
								<RefExpr>
									<RefName>
										<Word> _ &uni; _ </Word>
									</RefName>
								</RefExpr>
								<TupleExpr>
									<RefExpr>
										<RefName>
											<Word>s</Word>
										</RefName>
									</RefExpr>
									<SetCompExpr>
										<SchText>
											<VarDecl>
												<DeclName>
													<Word>n</Word>
												</DeclName>
												<ApplExpr>
													<RefExpr>
														<RefName>
															<Word>&dom; _ </Word>
														</RefName>
													</RefExpr>
													<RefExpr>
														<RefName>
															<Word>t</Word>
														</RefName>
													</RefExpr>
												</ApplExpr>
											</VarDecl>
										</SchText>
										<ApplExpr>
											<RefExpr>
												<RefName>
													<Word> _ &map; _ </Word>
												</RefName>
											</RefExpr>
											<TupleExpr>
												<ApplExpr>
													<RefExpr>
														<RefName>
															<Word> _ + _ </Word>
														</RefName>
													</RefExpr>
													<TupleExpr>
														<RefExpr>
															<RefName>
																<Word>n</Word>
															</RefName>
														</RefExpr>
														<ApplExpr>
															<RefExpr>
																<RefName>
																	<Word>&car; _ </Word>
																</RefName>
															</RefExpr>
															<RefExpr>
																<RefName>
																	<Word>s</Word>
																</RefName>
															</RefExpr>
														</ApplExpr>
													</TupleExpr>
												</ApplExpr>
												<RefExpr Mixfix="true">
													<RefName>
														<Word>&seq; _ </Word>
													</RefName>
													<RefExpr>
														<RefName>
															<Word>n</Word>
														</RefName>
													</RefExpr>
												</RefExpr>
											</TupleExpr>
										</ApplExpr>
									</SetCompExpr>
								</TupleExpr>
							</ApplExpr>
						</TupleExpr>
						<RefExpr>
							<RefName>
								<Word>=</Word>
							</RefName>
						</RefExpr>
					</MemPred>
				</ForallPred>
			</SchText>
		</AxPara>
		<!-- generic axiomatic defn: reverse -->
		<AxPara>
			<DeclName>
				<Word>X</Word>
			</DeclName>
			<SchText>
				<VarDecl>
					<DeclName>
						<Word>&rev;</Word>
					</DeclName>
					<RefExpr Mixfix="true">
						<RefName>
							<Word> _ &tfun; _ </Word>
						</RefName>
						<RefExpr Mixfix="true">
							<RefName>
								<Word>&seq; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
						<RefExpr Mixfix="true">
							<RefName>
								<Word>&seq; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
					</RefExpr>
				</VarDecl>
				<ForallPred>
					<SchText>
						<VarDecl>
							<DeclName>
								<Word>s</Word>
							</DeclName>
							<RefExpr Mixfix="true">
								<RefName>
									<Word>&seq; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</VarDecl>
					</SchText>
					<MemPred>
						<TupleExpr>
							<ApplExpr>
								<RefExpr>
									<RefName>
										<Word>&rev;</Word>
									</RefName>
								</RefExpr>
								<RefExpr>
									<RefName>
										<Word>s</Word>
									</RefName>
								</RefExpr>
							</ApplExpr>
							<LambdaExpr>
								<SchText>
									<VarDecl>
										<DeclName>
											<Word>n</Word>
										</DeclName>
										<RefExpr Mixfix="true">
											<RefName>
												<Word>&dom; _ </Word>
											</RefName>
											<RefExpr>
												<RefName>
													<Word>s</Word>
												</RefName>
											</RefExpr>
										</RefExpr>
									</VarDecl>
								</SchText>
								<RefExpr Mixfix="true">
									<RefName>
										<Word>&seq; _ </Word>
									</RefName>
									<ApplExpr>
										<RefExpr>
											<RefName>
												<Word> _ + _ </Word>
											</RefName>
										</RefExpr>
										<TupleExpr>
											<ApplExpr>
												<RefExpr>
													<RefName>
														<Word> _ - _ </Word>
													</RefName>
												</RefExpr>
												<TupleExpr>
													<ApplExpr>
														<RefExpr>
															<RefName>
																<Word>&car; _ </Word>
															</RefName>
														</RefExpr>
														<RefExpr>
															<RefName>
																<Word>s</Word>
															</RefName>
														</RefExpr>
													</ApplExpr>
													<RefExpr>
														<RefName>
															<Word>n</Word>
														</RefName>
													</RefExpr>
												</TupleExpr>
											</ApplExpr>
											<NumExpr Value="1"/>
										</TupleExpr>
									</ApplExpr>
								</RefExpr>
							</LambdaExpr>
						</TupleExpr>
						<RefExpr>
							<RefName>
								<Word>=</Word>
							</RefName>
						</RefExpr>
					</MemPred>
				</ForallPred>
			</SchText>
		</AxPara>
		<!-- generic axiomatic defn: head of a sequence -->
		<AxPara>
			<DeclName>
				<Word>X</Word>
			</DeclName>
			<SchText>
				<VarDecl>
					<DeclName>
						<Word>&head;</Word>
					</DeclName>
					<RefExpr Mixfix="true">
						<RefName>
							<Word> _ &tfun; _ </Word>
						</RefName>
						<RefExpr Mixfix="true">
							<RefName>
								<Word>&seqone; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
						<RefExpr>
							<RefName>
								<Word>X</Word>
							</RefName>
						</RefExpr>
					</RefExpr>
				</VarDecl>
				<ForallPred>
					<SchText>
						<VarDecl>
							<DeclName>
								<Word>s</Word>
							</DeclName>
							<RefExpr Mixfix="true">
								<RefName>
									<Word>&seqone; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</VarDecl>
					</SchText>
					<MemPred>
						<TupleExpr>
							<ApplExpr>
								<RefExpr>
									<RefName>
										<Word>&head;</Word>
									</RefName>
								</RefExpr>
								<RefExpr>
									<RefName>
										<Word>s</Word>
									</RefName>
								</RefExpr>
							</ApplExpr>
							<RefExpr Mixfix="true">
								<RefName>
									<Word>s</Word>
								</RefName>
								<NumExpr Value="1"/>
							</RefExpr>
						</TupleExpr>
						<RefExpr>
							<RefName>
								<Word>=</Word>
							</RefName>
						</RefExpr>
					</MemPred>
				</ForallPred>
			</SchText>
		</AxPara>
		<!-- generic axiomatic defn: last of a sequence -->
		<AxPara>
			<DeclName>
				<Word>X</Word>
			</DeclName>
			<SchText>
				<VarDecl>
					<DeclName>
						<Word>&last;</Word>
					</DeclName>
					<RefExpr Mixfix="true">
						<RefName>
							<Word> _ &tfun; _ </Word>
						</RefName>
						<RefExpr Mixfix="true">
							<RefName>
								<Word>&seqone; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
						<RefExpr>
							<RefName>
								<Word>X</Word>
							</RefName>
						</RefExpr>
					</RefExpr>
				</VarDecl>
				<ForallPred>
					<SchText>
						<VarDecl>
							<DeclName>
								<Word>s</Word>
							</DeclName>
							<RefExpr Mixfix="true">
								<RefName>
									<Word>&seqone; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</VarDecl>
					</SchText>
					<MemPred>
						<TupleExpr>
							<ApplExpr>
								<RefExpr>
									<RefName>
										<Word>&last;</Word>
									</RefName>
								</RefExpr>
								<RefExpr>
									<RefName>
										<Word>s</Word>
									</RefName>
								</RefExpr>
							</ApplExpr>
							<RefExpr Mixfix="true">
								<RefName>
									<Word>s</Word>
								</RefName>
								<ApplExpr>
									<RefExpr>
										<RefName>
											<Word>&car; _ </Word>
										</RefName>
									</RefExpr>
									<RefExpr>
										<RefName>
											<Word>s</Word>
										</RefName>
									</RefExpr>
								</ApplExpr>
							</RefExpr>
						</TupleExpr>
						<RefExpr>
							<RefName>
								<Word>=</Word>
							</RefName>
						</RefExpr>
					</MemPred>
				</ForallPred>
			</SchText>
		</AxPara>
		<!-- generic axiomatic defn: tail of a sequence -->
		<AxPara>
			<DeclName>
				<Word>X</Word>
			</DeclName>
			<SchText>
				<VarDecl>
					<DeclName>
						<Word>&tail;</Word>
					</DeclName>
					<RefExpr Mixfix="true">
						<RefName>
							<Word> _ &tfun; _ </Word>
						</RefName>
						<RefExpr Mixfix="true">
							<RefName>
								<Word>&seqone; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
						<RefExpr Mixfix="true">
							<RefName>
								<Word>&seq; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
					</RefExpr>
				</VarDecl>
				<ForallPred>
					<SchText>
						<VarDecl>
							<DeclName>
								<Word>s</Word>
							</DeclName>
							<RefExpr Mixfix="true">
								<RefName>
									<Word>&seqone; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</VarDecl>
					</SchText>
					<MemPred>
						<TupleExpr>
							<ApplExpr>
								<RefExpr>
									<RefName>
										<Word>&tail;</Word>
									</RefName>
								</RefExpr>
								<RefExpr>
									<RefName>
										<Word>s</Word>
									</RefName>
								</RefExpr>
							</ApplExpr>
							<LambdaExpr>
								<SchText>
									<VarDecl>
										<DeclName>
											<Word>n</Word>
										</DeclName>
										<RefExpr Mixfix="true">
											<RefName>
												<Word> _ &upto; _ </Word>
											</RefName>
											<NumExpr Value="1"/>
											<ApplExpr>
												<RefExpr>
													<RefName>
														<Word> _ - _ </Word>
													</RefName>
												</RefExpr>
												<TupleExpr>
													<ApplExpr>
														<RefExpr>
															<RefName>
																<Word>&car; _ </Word>
															</RefName>
														</RefExpr>
														<RefExpr>
															<RefName>
																<Word>s</Word>
															</RefName>
														</RefExpr>
													</ApplExpr>
													<NumExpr Value="1"/>
												</TupleExpr>
											</ApplExpr>
										</RefExpr>
									</VarDecl>
								</SchText>
								<RefExpr Mixfix="true">
									<RefName>
										<Word>s</Word>
									</RefName>
									<ApplExpr>
										<RefExpr>
											<RefName>
												<Word> _ + _ </Word>
											</RefName>
										</RefExpr>
										<TupleExpr>
											<RefExpr>
												<RefName>
													<Word>n</Word>
												</RefName>
											</RefExpr>
											<NumExpr Value="1"/>
										</TupleExpr>
									</ApplExpr>
								</RefExpr>
							</LambdaExpr>
						</TupleExpr>
						<RefExpr>
							<RefName>
								<Word>=</Word>
							</RefName>
						</RefExpr>
					</MemPred>
				</ForallPred>
			</SchText>
		</AxPara>
		<!-- generic axiomatic defn: front of a sequence -->
		<AxPara>
			<DeclName>
				<Word>X</Word>
			</DeclName>
			<SchText>
				<VarDecl>
					<DeclName>
						<Word>&front;</Word>
					</DeclName>
					<RefExpr Mixfix="true">
						<RefName>
							<Word> _ &tfun; _ </Word>
						</RefName>
						<RefExpr Mixfix="true">
							<RefName>
								<Word>&seqone; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
						<RefExpr Mixfix="true">
							<RefName>
								<Word>&seq; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
					</RefExpr>
				</VarDecl>
				<ForallPred>
					<SchText>
						<VarDecl>
							<DeclName>
								<Word>s</Word>
							</DeclName>
							<RefExpr Mixfix="true">
								<RefName>
									<Word>&seqone; _</Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</VarDecl>
					</SchText>
					<MemPred>
						<TupleExpr>
							<ApplExpr>
								<RefExpr>
									<RefName>
										<Word>&front;</Word>
									</RefName>
								</RefExpr>
								<RefExpr>
									<RefName>
										<Word>s</Word>
									</RefName>
								</RefExpr>
							</ApplExpr>
							<ApplExpr>
								<RefExpr>
									<RefName>
										<Word> _ &dsub; _ </Word>
									</RefName>
								</RefExpr>
								<TupleExpr>
									<ApplExpr>
										<RefExpr>
											<RefName>
												<Word>&car; _ </Word>
											</RefName>
										</RefExpr>
										<RefExpr>
											<RefName>
												<Word>s</Word>
											</RefName>
										</RefExpr>
									</ApplExpr>
									<RefExpr>
										<RefName>
											<Word>s</Word>
										</RefName>
									</RefExpr>
								</TupleExpr>
							</ApplExpr>
						</TupleExpr>
						<RefExpr>
							<RefName>
								<Word>=</Word>
							</RefName>
						</RefExpr>
					</MemPred>
				</ForallPred>
			</SchText>
		</AxPara>
		<!-- generic axiomatic defn: squashing -->
		<AxPara>
			<DeclName>
				<Word>X</Word>
			</DeclName>
			<SchText>
				<VarDecl>
					<DeclName>
						<Word>&squash;</Word>
					</DeclName>
					<RefExpr Mixfix="true">
						<RefName>
							<Word> _ &tfun; _ </Word>
						</RefName>
						<RefExpr Mixfix="true">
							<RefName>
								<Word> _ &ffun; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>&integer;</Word>
								</RefName>
							</RefExpr>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
						<RefExpr Mixfix="true">
							<RefName>
								<Word>&seq; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
					</RefExpr>
				</VarDecl>
				<ForallPred>
					<SchText>
						<VarDecl>
							<DeclName>
								<Word>f</Word>
							</DeclName>
							<RefExpr Mixfix="true">
								<RefName>
									<Word> _ &ffun; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>&integer;</Word>
									</RefName>
								</RefExpr>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</VarDecl>
					</SchText>
					<MemPred>
						<TupleExpr>
							<ApplExpr>
								<RefExpr>
									<RefName>
										<Word>&squash;</Word>
									</RefName>
								</RefExpr>
								<RefExpr>
									<RefName>
										<Word>f</Word>
									</RefName>
								</RefExpr>
							</ApplExpr>
							<SetCompExpr>
								<SchText>
									<VarDecl>
										<DeclName>
											<Word>p</Word>
										</DeclName>
										<RefExpr>
											<RefName>
												<Word>f</Word>
											</RefName>
										</RefExpr>
									</VarDecl>
								</SchText>
								<ApplExpr>
									<RefExpr>
										<RefName>
											<Word> _ &map; _ </Word>
										</RefName>
									</RefExpr>
									<TupleExpr>
										<ApplExpr>
											<RefExpr>
												<RefName>
													<Word>&car; _ </Word>
												</RefName>
											</RefExpr>
											<SetCompExpr>
												<SchText>
													<VarDecl>
														<DeclName>
															<Word>i</Word>
														</DeclName>
														<ApplExpr>
															<RefExpr>
																<RefName>
																	<Word>&dom;</Word>
																</RefName>
															</RefExpr>
															<RefExpr>
																<RefName>
																	<Word>f</Word>
																</RefName>
															</RefExpr>
														</ApplExpr>
													</VarDecl>
													<MemPred>
														<TupleExpr>
															<RefExpr>
																<RefName>
																	<Word>i</Word>
																</RefName>
															</RefExpr>
															<TupleSelExpr Select="1">
																<RefExpr>
																	<RefName>
																		<Word>p</Word>
																	</RefName>
																</RefExpr>
															</TupleSelExpr>
														</TupleExpr>
														<RefExpr>
															<RefName>
																<Word>&leq;</Word>
															</RefName>
														</RefExpr>
													</MemPred>
												</SchText>
											</SetCompExpr>
										</ApplExpr>
										<TupleSelExpr Select="2">
											<RefExpr>
												<RefName>
													<Word>p</Word>
												</RefName>
											</RefExpr>
										</TupleSelExpr>
									</TupleExpr>
								</ApplExpr>
							</SetCompExpr>
						</TupleExpr>
						<RefExpr>
							<RefName>
								<Word>=</Word>
							</RefName>
						</RefExpr>
					</MemPred>
				</ForallPred>
			</SchText>
		</AxPara>
		<!-- operator temp: extraction -->
		<OptempPara Cat="Function" Prec="45" Assoc="Right">
			<Operand/>
			<Operator>
				<Word>&extraction;</Word>
			</Operator>
			<Operand/>
		</OptempPara>
		<!-- generic axiomatic defn: extraction -->
		<AxPara>
			<DeclName>
				<Word>X</Word>
			</DeclName>
			<SchText>
				<VarDecl>
					<DeclName>
						<Word> _ &extraction; _ </Word>
					</DeclName>
					<RefExpr Mixfix="true">
						<RefName>
							<Word> _ &tfun; _ </Word>
						</RefName>
						<ProdExpr>
							<PowerExpr>
								<RefExpr>
									<RefName>
										<Word>&integer;</Word>
									</RefName>
								</RefExpr>
							</PowerExpr>
							<RefExpr Mixfix="true">
								<RefName>
									<Word>&seq; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</ProdExpr>
						<RefExpr Mixfix="true">
							<RefName>
								<Word>&seq; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
					</RefExpr>
				</VarDecl>
				<ForallPred>
					<SchText>
						<VarDecl>
							<DeclName>
								<Word>a</Word>
							</DeclName>
							<PowerExpr>
								<RefExpr>
									<RefName>
										<Word>&integer;</Word>
									</RefName>
								</RefExpr>
							</PowerExpr>
						</VarDecl>
						<VarDecl>
							<DeclName>
								<Word>s</Word>
							</DeclName>
							<RefExpr Mixfix="true">
								<RefName>
									<Word>&seq; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</VarDecl>
					</SchText>
					<MemPred>
						<TupleExpr>
							<ApplExpr>
								<RefExpr>
									<RefName>
										<Word> _ &extraction; _ </Word>
									</RefName>
								</RefExpr>
								<TupleExpr>
									<RefExpr>
										<RefName>
											<Word>a</Word>
										</RefName>
									</RefExpr>
									<RefExpr>
										<RefName>
											<Word>s</Word>
										</RefName>
									</RefExpr>
								</TupleExpr>
							</ApplExpr>
							<ApplExpr>
								<RefExpr>
									<RefName>
										<Word>&squash;</Word>
									</RefName>
								</RefExpr>
								<ApplExpr>
									<RefExpr>
										<RefName>
											<Word> _ &dres; _ </Word>
										</RefName>
									</RefExpr>
									<TupleExpr>
										<RefExpr>
											<RefName>
												<Word>a</Word>
											</RefName>
										</RefExpr>
										<RefExpr>
											<RefName>
												<Word>s</Word>
											</RefName>
										</RefExpr>
									</TupleExpr>
								</ApplExpr>
							</ApplExpr>
						</TupleExpr>
						<RefExpr>
							<RefName>
								<Word>=</Word>
							</RefName>
						</RefExpr>
					</MemPred>
				</ForallPred>
			</SchText>
		</AxPara>
		<!-- operator temp: filtering -->
		<OptempPara Cat="Function" Prec="40" Assoc="Left">
			<Operand/>
			<Operator>
				<Word>&filter;</Word>
			</Operator>
			<Operand/>
		</OptempPara>
		<!-- generic axiomatic defn: filtering -->
		<AxPara>
			<DeclName>
				<Word>X</Word>
			</DeclName>
			<SchText>
				<VarDecl>
					<DeclName>
						<Word> _ &filter; _ </Word>
					</DeclName>
					<RefExpr Mixfix="true">
						<RefName>
							<Word> _ &tfun; _ </Word>
						</RefName>
						<ProdExpr>
							<RefExpr Mixfix="true">
								<RefName>
									<Word>&seq; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
							<PowerExpr>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</PowerExpr>
						</ProdExpr>
						<RefExpr Mixfix="true">
							<RefName>
								<Word>&seq; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
					</RefExpr>
				</VarDecl>
				<ForallPred>
					<SchText>
						<VarDecl>
							<DeclName>
								<Word>s</Word>
							</DeclName>
							<RefExpr Mixfix="true">
								<RefName>
									<Word>&seq; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</VarDecl>
						<VarDecl>
							<DeclName>
								<Word>a</Word>
							</DeclName>
							<PowerExpr>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</PowerExpr>
						</VarDecl>
					</SchText>
					<MemPred>
						<TupleExpr>
							<ApplExpr>
								<RefExpr>
									<RefName>
										<Word> _ &filter; _ </Word>
									</RefName>
								</RefExpr>
								<TupleExpr>
									<RefExpr>
										<RefName>
											<Word>s</Word>
										</RefName>
									</RefExpr>
									<RefExpr>
										<RefName>
											<Word>a</Word>
										</RefName>
									</RefExpr>
								</TupleExpr>
							</ApplExpr>
							<ApplExpr>
								<RefExpr>
									<RefName>
										<Word>&squash;</Word>
									</RefName>
								</RefExpr>
								<ApplExpr>
									<RefExpr>
										<RefName>
											<Word> _ &rres; _ </Word>
										</RefName>
									</RefExpr>
									<TupleExpr>
										<RefExpr>
											<RefName>
												<Word>s</Word>
											</RefName>
										</RefExpr>
										<RefExpr>
											<RefName>
												<Word>a</Word>
											</RefName>
										</RefExpr>
									</TupleExpr>
								</ApplExpr>
							</ApplExpr>
						</TupleExpr>
						<RefExpr>
							<RefName>
								<Word>=</Word>
							</RefName>
						</RefExpr>
					</MemPred>
				</ForallPred>
			</SchText>
		</AxPara>
		<!-- generic axiomatic defn: prefix -->
		<AxPara>
			<DeclName>
				<Word>X</Word>
			</DeclName>
			<SchText>
				<VarDecl>
					<DeclName>
						<Word> _ &prefix; _ </Word>
					</DeclName>
					<RefExpr Mixfix="true">
						<RefName>
							<Word> _ &rel; _ </Word>
						</RefName>
						<RefExpr Mixfix="true">
							<RefName>
								<Word>&seq; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
						<RefExpr Mixfix="true">
							<RefName>
								<Word>&seq; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
					</RefExpr>
				</VarDecl>
				<ForallPred>
					<SchText>
						<VarDecl>
							<DeclName>
								<Word>s</Word>
							</DeclName>
							<DeclName>
								<Word>t</Word>
							</DeclName>
							<RefExpr Mixfix="true">
								<RefName>
									<Word>&seq; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</VarDecl>
					</SchText>
					<IffPred>
						<ExprPred>
							<RefExpr Mixfix="true">
								<RefName>
									<Word> _ &rel; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>s</Word>
									</RefName>
								</RefExpr>
								<RefExpr>
									<RefName>
										<Word>t</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</ExprPred>
						<MemPred>
							<TupleExpr>
								<RefExpr>
									<RefName>
										<Word>s</Word>
									</RefName>
								</RefExpr>
								<RefExpr>
									<RefName>
										<Word>t</Word>
									</RefName>
								</RefExpr>
							</TupleExpr>
							<RefExpr>
								<RefName>
									<Word>&subseteq;</Word>
								</RefName>
							</RefExpr>
						</MemPred>
					</IffPred>
				</ForallPred>
			</SchText>
		</AxPara>
		<!-- generic axiomatic defn: suffix -->
		<AxPara>
			<DeclName>
				<Word>X</Word>
			</DeclName>
			<SchText>
				<VarDecl>
					<DeclName>
						<Word> _ &suffix; _ </Word>
					</DeclName>
					<RefExpr Mixfix="true">
						<RefName>
							<Word> _ &rel; _ </Word>
						</RefName>
						<RefExpr Mixfix="true">
							<RefName>
								<Word>&seq; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
						<RefExpr Mixfix="true">
							<RefName>
								<Word>&seq; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
					</RefExpr>
				</VarDecl>
				<ForallPred>
					<SchText>
						<VarDecl>
							<DeclName>
								<Word>s</Word>
							</DeclName>
							<DeclName>
								<Word>t</Word>
							</DeclName>
							<RefExpr Mixfix="true">
								<RefName>
									<Word>&seq; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</VarDecl>
					</SchText>
					<IffPred>
						<ExprPred>
							<RefExpr Mixfix="true">
								<RefName>
									<Word> _ &suffix; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>s</Word>
									</RefName>
								</RefExpr>
								<RefExpr>
									<RefName>
										<Word>s</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</ExprPred>
						<ExistsPred>
							<SchText>
								<VarDecl>
									<DeclName>
										<Word>u</Word>
									</DeclName>
									<RefExpr Mixfix="true">
										<RefName>
											<Word>&seq; _ </Word>
										</RefName>
										<RefExpr>
											<RefName>
												<Word>X</Word>
											</RefName>
										</RefExpr>
									</RefExpr>
								</VarDecl>
							</SchText>
							<MemPred>
								<TupleExpr>
									<ApplExpr>
										<RefExpr>
											<RefName>
												<Word> _ &cat;	_ </Word>
											</RefName>
										</RefExpr>
										<TupleExpr>
											<RefExpr>
												<RefName>
													<Word>u</Word>
												</RefName>
											</RefExpr>
											<RefExpr>
												<RefName>
													<Word>s</Word>
												</RefName>
											</RefExpr>
										</TupleExpr>
									</ApplExpr>
									<RefExpr>
										<RefName>
											<Word>t</Word>
										</RefName>
									</RefExpr>
								</TupleExpr>
								<RefExpr>
									<RefName>
										<Word>=</Word>
									</RefName>
								</RefExpr>
							</MemPred>
						</ExistsPred>
					</IffPred>
				</ForallPred>
			</SchText>
		</AxPara>
		<!-- generic axiomatic defn: infix -->
		<AxPara>
			<DeclName>
				<Word>X</Word>
			</DeclName>
			<SchText>
				<VarDecl>
					<DeclName>
						<Word> _ &infix; _ </Word>
					</DeclName>
					<RefExpr Mixfix="true">
						<RefName>
							<Word> _ &rel; _ </Word>
						</RefName>
						<RefExpr>
							<RefName>
								<Word>X</Word>
							</RefName>
						</RefExpr>
						<RefExpr>
							<RefName>
								<Word>X</Word>
							</RefName>
						</RefExpr>
					</RefExpr>
				</VarDecl>
				<ForallPred>
					<SchText>
						<VarDecl>
							<DeclName>
								<Word>u</Word>
							</DeclName>
							<DeclName>
								<Word>v</Word>
							</DeclName>
							<RefExpr Mixfix="true">
								<RefName>
									<Word>&seq; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</VarDecl>
					</SchText>
					<IffPred>
						<ExprPred>
							<RefExpr Mixfix="true">
								<RefName>
									<Word> _ &infix; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>s</Word>
									</RefName>
								</RefExpr>
								<RefExpr>
									<RefName>
										<Word>t</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</ExprPred>
						<MemPred>
							<TupleExpr>
								<ApplExpr>
									<RefExpr>
										<RefName>
											<Word> _ &cat; _ </Word>
										</RefName>
									</RefExpr>
									<TupleExpr>
										<ApplExpr>
											<RefExpr>
												<RefName>
													<Word> _ &cat; _ </Word>
												</RefName>
											</RefExpr>
											<TupleExpr>
												<RefExpr>
													<RefName>
														<Word>u</Word>
													</RefName>
												</RefExpr>
												<RefExpr>
													<RefName>
														<Word>s</Word>
													</RefName>
												</RefExpr>
											</TupleExpr>
										</ApplExpr>
										<RefExpr>
											<RefName>
												<Word>v</Word>
											</RefName>
										</RefExpr>
									</TupleExpr>
								</ApplExpr>
								<RefExpr>
									<RefName>
										<Word>t</Word>
									</RefName>
								</RefExpr>
							</TupleExpr>
							<RefExpr>
								<RefName>
									<Word>=</Word>
								</RefName>
							</RefExpr>
						</MemPred>
					</IffPred>
				</ForallPred>
			</SchText>
		</AxPara>
		<!-- generic axioatic defn: distriuted concatenation -->
		<AxPara>
			<DeclName>
				<Word>X</Word>
			</DeclName>
			<SchText>
				<VarDecl>
					<DeclName>
						<Word>&dcat;</Word>
					</DeclName>
					<RefExpr Mixfix="true">
						<RefName>
							<Word> _ &tfun; _ </Word>
						</RefName>
						<RefExpr Mixfix="true">
							<RefName>
								<Word>&seq; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>&seq; _ </Word>
								</RefName>
								<RefExpr>
									<RefName>
										<Word>X</Word>
									</RefName>
								</RefExpr>
							</RefExpr>
						</RefExpr>
						<RefExpr Mixfix="true">
							<RefName>
								<Word>&seq; _ </Word>
							</RefName>
							<RefExpr>
								<RefName>
									<Word>X</Word>
								</RefName>
							</RefExpr>
						</RefExpr>
					</RefExpr>
				</VarDecl>
				<AndPred Op="NL">
					<MemPred>
						<TupleExpr>
							<ApplExpr>
								<RefExpr>
									<RefName>
										<Word>&dcat;</Word>
									</RefName>
								</RefExpr>
								<RefExpr>
									<RefName>
										<Word>&emptyseq;</Word>
									</RefName>
								</RefExpr>
							</ApplExpr>
							<RefExpr>
								<RefName>
									<Word>&emptyseq;</Word>
								</RefName>
							</RefExpr>
						</TupleExpr>
						<RefExpr>
							<RefName>
								<Word>=</Word>
							</RefName>
						</RefExpr>
					</MemPred>
					<AndPred Op="NL">
						<ForallPred>
							<SchText>
								<VarDecl>
									<DeclName>
										<Word>s</Word>
									</DeclName>
									<RefExpr Mixfix="true">
										<RefName>
											<Word>&seq; _ </Word>
										</RefName>
										<RefExpr>
											<RefName>
												<Word>X</Word>
											</RefName>
										</RefExpr>
									</RefExpr>
								</VarDecl>
							</SchText>
							<MemPred>
								<TupleExpr>
									<ApplExpr>
										<RefExpr>
											<RefName>
												<Word>&dcat;</Word>
											</RefName>
										</RefExpr>
										<ApplExpr>
											<RefExpr>
												<RefName>
													<Word>&lseq; _ &rseq;</Word>
												</RefName>
											</RefExpr>
											<RefExpr>
												<RefName>
													<Word>s</Word>
												</RefName>
											</RefExpr>
										</ApplExpr>
									</ApplExpr>
									<RefExpr>
										<RefName>
											<Word>s</Word>
										</RefName>
									</RefExpr>
								</TupleExpr>
								<RefExpr>
									<RefName>
										<Word>=</Word>
									</RefName>
								</RefExpr>
							</MemPred>
						</ForallPred>
						<ForallPred>
							<SchText>
								<VarDecl>
									<DeclName>
										<Word>q</Word>
									</DeclName>
									<DeclName>
										<Word>r</Word>
									</DeclName>
									<RefExpr Mixfix="true">
										<RefName>
											<Word>&seq; _ </Word>
										</RefName>
										<RefExpr Mixfix="true">
											<RefName>
												<Word>&seq; _ </Word>
											</RefName>
											<RefExpr>
												<RefName>
													<Word>X</Word>
												</RefName>
											</RefExpr>
										</RefExpr>
									</RefExpr>
								</VarDecl>
							</SchText>
							<MemPred>
								<TupleExpr>
									<ApplExpr>
										<RefExpr>
											<RefName>
												<Word>&dcat;</Word>
											</RefName>
										</RefExpr>
										<ApplExpr>
											<RefExpr>
												<RefName>
													<Word> _ &cat; _ </Word>
												</RefName>
											</RefExpr>
											<TupleExpr>
												<RefExpr>
													<RefName>
														<Word>q</Word>
													</RefName>
												</RefExpr>
												<RefExpr>
													<RefName>
														<Word>r</Word>
													</RefName>
												</RefExpr>
											</TupleExpr>
										</ApplExpr>
									</ApplExpr>
									<ApplExpr>
										<RefExpr>
											<RefName>
												<Word> _ &cat; _ </Word>
											</RefName>
										</RefExpr>
										<TupleExpr>
											<ApplExpr>
												<RefExpr>
													<RefName>
														<Word>&dcat;</Word>
													</RefName>
												</RefExpr>
												<RefExpr>
													<RefName>
														<Word>q</Word>
													</RefName>
												</RefExpr>
											</ApplExpr>
											<ApplExpr>
												<RefExpr>
													<RefName>
														<Word>&dcat;</Word>
													</RefName>
												</RefExpr>
												<RefExpr>
													<RefName>
														<Word>r</Word>
													</RefName>
												</RefExpr>
											</ApplExpr>
										</TupleExpr>
									</ApplExpr>
								</TupleExpr>
								<RefExpr>
									<RefName>
										<Word>=</Word>
									</RefName>
								</RefExpr>
							</MemPred>
						</ForallPred>
					</AndPred>
				</AndPred>
			</SchText>
		</AxPara>
	</ZSect>
</Spec>
