<?xml version="1.0" encoding="UTF-8"?>
<xs:schema
  targetNamespace="http://czt.sourceforge.net/tcoz"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:TCOZ="http://czt.sourceforge.net/tcoz"
  xmlns:OZ="http://czt.sourceforge.net/object-z"
  xmlns:Z="http://czt.sourceforge.net/zml"
  xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" jaxb:version="1.0"
  xmlns:gnast="http://czt.sourceforge.net/gnast"
  elementFormDefault="qualified"
  attributeFormDefault="unqualified"
  version="1.1">

  <xs:annotation>
    <xs:documentation>
      Copyright 2003 Li Yuanfang
      This file is part of the Community Z Tools (CZT) project.
      
      The CZT project contains free software; you can
      redistribute it and/or modify it under the terms
      of the GNU General Public License as published by
      the Free Software Foundation; either version 2 of
      the License, or (at your option) any later version.

      The CZT project is distributed in the hope that it
      will be useful, but WITHOUT ANY WARRANTY; without
      even the implied warranty of MERCHANTABILITY or
      FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU General Public License for more details.
      
      You should have received a copy of the GNU General
      Public License along with CZT; if not, write to the
      Free Software Foundation, Inc., 59 Temple Place,
      Suite 330, Boston, MA  02111-1307  USA
    </xs:documentation>
    <xs:appinfo>
      <jaxb:schemaBindings>
        <jaxb:package name="net.sourceforge.czt.tcoz.jaxb.gen">
          <jaxb:javadoc>
            &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
            &lt;html&gt;
            &lt;body&gt;
            &lt;p&gt;Classes generated by Jaxb.&lt;/p&gt;
            &lt;/body&gt;
            &lt;/html&gt;
          </jaxb:javadoc>
        </jaxb:package>
      </jaxb:schemaBindings>
      <gnast:schemaBindings name="Timed Communicating Object Z">
        <gnast:package name="net.sourceforge.czt.tcoz">
          <gnast:package id="ast" name="ast">
            <gnast:generate id="factory" class="TcozFactory" template="CoreFactory.vm"/>
          </gnast:package>
          <gnast:package id="impl" name="impl">
            <gnast:generate id="factoryImpl" class="TcozFactoryImpl" template="CoreFactoryImpl.vm"/>
          </gnast:package>
          <gnast:package id="visitor" name="visitor">
            <gnast:generate id="AstVisitor" class="TcozVisitor" template="AstVisitor.vm"/>
          </gnast:package>
          <gnast:package id="util" name="util">
            <gnast:generate id="convFactory" class="Factory" template="Factory.vm"/>
          </gnast:package>
          <gnast:package id="jaxb" name="jaxb">
            <gnast:generate id="AstToJaxb" class="AstToJaxb" template="AstToJaxb.vm"/>
            <gnast:generate id="JaxbToAst" class="JaxbToAst" template="JaxbToAst.vm"/>
          </gnast:package>
          <gnast:package id="dom" name="dom">
            <gnast:generate id="AstToDom" class="AstToDom" template="AstToDom.vm"/>
          </gnast:package>
        </gnast:package>
      </gnast:schemaBindings>
     </xs:appinfo>
  </xs:annotation>

  <xs:import namespace="http://czt.sourceforge.net/object-z" schemaLocation="Object-Z.xsd"/>
  <xs:import namespace="http://czt.sourceforge.net/zml" schemaLocation="Z.xsd"/>

  <!-- the Expression hierarchy -->
  <xs:element name="ChannelExpr" type="TCOZ:ChannelExpr"
    substitutionGroup="Z:Expr">
    <xs:annotation>
      <xs:documentation>
        Used to represent the type of a channel variable declaration.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  <!-- the OpExpr hierarchy -->
  <xs:element name="DistInChoiceProExpr" type="OZ:DistOpExpr"
    substitutionGroup="OZ:DistOpExpr">
    <xs:annotation>
      <xs:documentation>
        This is the intentional form of InChoiceProExpr when the range of
        choice is large (possibly infinite).
        See "Timed Communicating Object Z" by Brendan Mahony and Jin Song Dong.
        Syntax: \Intchoice SchemaText @ OpExp
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="DistInterleaveProExpr" type="OZ:DistOpExpr"
    substitutionGroup="OZ:DistOpExpr">
    <xs:annotation>
      <xs:documentation>
        This is the intentional form of InterleaveProExpr when the number
        of asynchronous parallel components is large.
        See "Timed Communicating Object Z" by Brendan Mahony and Jin Song Dong.
        Syntax: ||| Schematext @ OpExp
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="InChoiceProExpr" type="OZ:OpExpr2"
    substitutionGroup="OZ:OpExpr2">
    <xs:annotation>
      <xs:documentation>
        An internal choice expression.
        It describes variation in behavior determined by the internal
        state of the process.
        See "Timed Communicating Object Z" by Brendan Mahony and Jin Song Dong.
        Syntax: OpExp \intchoice OpExp
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="InterleaveProExpr" type="OZ:OpExpr2"
    substitutionGroup="OZ:OpExpr2"/>
  <xs:element name="SynPllProExpr" type="TCOZ:SynPllProExpr"
    substitutionGroup="OZ:OpExpr2"/>
  <xs:element name="TimeoutStartProExpr" type="TCOZ:InterruptTimeOpExpr"
    substitutionGroup="OZ:OpExpr">
    <xs:annotation>
      <xs:documentation>
        If first process doesn't start by time t,
        control pass to second process.
        In LaTeX, p \rres \lbrack t \rbrack Q.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="TimeoutEndProExpr" type="TCOZ:InterruptTimeOpExpr"
    substitutionGroup="OZ:OpExpr">
    <xs:annotation>
      <xs:documentation>
        If first process doesn't end by time t, control pass to second process.
        In LaTeX, p \swarrow \lbrack t \rbrack Q.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="InterruptProExpr" type="TCOZ:InterruptTimeOpExpr"
    substitutionGroup="OZ:OpExpr">
    <xs:annotation>
      <xs:documentation>
        Perform process p until exception e,
        then transfer control to process Q.
        In LaTeX, p \nabla e \rightarrow Q.
        According to icfem98 paper.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="DeadlineProExpr" type="TCOZ:DeadlineProExpr"
    substitutionGroup="OZ:OpExpr"/>
  <xs:element name="WaitUntilProExpr" type="TCOZ:WaitUntilProExpr"
    substitutionGroup="OZ:OpExpr"/>
  <xs:element name="WaitProExpr" type="TCOZ:WaitProExpr"
    substitutionGroup="OZ:OpExpr"/>
  <xs:element name="GuardProExpr" type="TCOZ:GuardProExpr"
    substitutionGroup="OZ:OpExpr">
    <xs:annotation>
      <xs:documentation>
        Process can perform only if the event is enabled (usually a predicate).
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="AtProExpr" type="TCOZ:AtProExpr"
    substitutionGroup="OZ:OpExpr">
    <xs:annotation>
      <xs:documentation>
        The optional expression is for timing constraints.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="RecProExpr" type="TCOZ:RecProExpr"
    substitutionGroup="OZ:OpExpr"/>
  <xs:element name="DivergeProExpr" type="OZ:OpExpr"
    substitutionGroup="OZ:OpExpr"/>
  <xs:element name="StopProExpr" type="OZ:OpExpr"
    substitutionGroup="OZ:OpExpr"/>
  <xs:element name="SkipProExpr" type="OZ:OpExpr"
    substitutionGroup="OZ:OpExpr"/>
  <xs:element name="TopologyProExpr" type="TCOZ:TopologyProExpr"
    substitutionGroup="OZ:OpExpr"/>
  <xs:element name="InterruptTimeOpExpr" type="TCOZ:InterruptTimeOpExpr"
    substitutionGroup="OZ:OpExpr"/>
  <!-- Miscellaneous -->
  <xs:element name="EventSet" type="TCOZ:EventSet"/>
  <xs:element name="Connection" type="TCOZ:Connection"/>
  <xs:element name="Event" type="TCOZ:Event">
    <xs:annotation>
      <xs:documentation>
        An event.
        The expression is needed to cater for cases such as right!first(h)...
        In or out stroke is mandatory in Z:RefNameType.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <!-- Definitions of the complexTypes -->
  <xs:complexType name="ChannelExpr">
    <xs:complexContent>
      <xs:extension base="Z:Expr">
        <xs:sequence>
          <xs:element ref="Z:Expr" minOccurs="0"/>
          <xs:element name="ChannelType" type="TCOZ:ChannelType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ChannelType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Sensor"/>
      <xs:enumeration value="Actuator"/>
      <xs:enumeration value="Chan"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="SynPllProExpr">
    <xs:complexContent>
      <xs:extension base="OZ:OpExpr2">
        <xs:sequence>
          <xs:element name="Events" type="TCOZ:EventSet"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EventSet">
    <xs:complexContent>
      <xs:extension base="Z:TermA">
        <xs:sequence>
          <xs:element name="Event" type="Z:Expr1" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="InterruptTimeOpExpr">
    <xs:complexContent>
      <xs:extension base="OZ:OpExpr">
        <xs:sequence>
          <xs:element name="NormalOp" type="OZ:OpExpr"/>
          <xs:element name="IntOrTimeout" type="Z:Expr1"/>
          <xs:element name="HandlerOp" type="OZ:OpExpr"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DeadlineProExpr">
    <xs:complexContent>
      <xs:extension base="OZ:OpExpr">
        <xs:sequence>
          <xs:element ref="OZ:OpExpr"/>
          <xs:element name="Deadline" type="Z:Expr1"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="WaitUntilProExpr">
    <xs:complexContent>
      <xs:extension base="OZ:OpExpr">
        <xs:sequence>
          <xs:element ref="OZ:OpExpr"/>
          <xs:element name="WaitUntil" type="Z:Expr1"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="WaitProExpr">
    <xs:complexContent>
      <xs:extension base="OZ:OpExpr">
        <xs:sequence>
          <xs:element ref="Z:Expr"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="GuardProExpr">
    <xs:complexContent>
      <xs:extension base="OZ:OpExpr">
        <xs:sequence>
          <xs:element name="Guard" type="Z:SchText"/>
          <xs:element ref="OZ:OpExpr"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AtProExpr">
    <xs:complexContent>
      <xs:extension base="OZ:OpExpr">
        <xs:sequence>
          <xs:element ref="TCOZ:Event"/>
          <xs:element ref="Z:Expr" minOccurs="0"/>
          <xs:element ref="OZ:OpExpr"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="RecProExpr">
    <xs:complexContent>
      <xs:extension base="OZ:OpExpr">
        <xs:sequence>
          <xs:element name="OpName" type="Z:RefName"/>
          <xs:element ref="OZ:OpExpr"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="TopologyProExpr">
    <xs:complexContent>
      <xs:extension base="OZ:OpExpr">
        <xs:sequence>
          <xs:element ref="TCOZ:Connection" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Connection">
    <xs:complexContent>
      <xs:extension base="Z:TermA">
        <xs:sequence>
          <xs:element name="LeftProcess" type="Z:RefName" maxOccurs="unbounded"/>
          <xs:element name="RightProcess" type="Z:RefName" maxOccurs="unbounded"/>
          <xs:element name="Channels" type="Z:RefName" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Event">
    <xs:complexContent>
      <xs:extension base="Z:TermA">
        <xs:sequence>
          <xs:element name="Name" type="Z:RefName"/>
          <xs:element ref="Z:Expr" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>
