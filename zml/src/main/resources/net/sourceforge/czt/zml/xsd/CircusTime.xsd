<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  Despite other extensions having xmlns inclusion top-down and some bottom-up,
  the top-down approach (i.e. circus, zpatt, zml) was creating problems for GnAST.
-->
<xs:schema  
  targetNamespace="http://czt.sourceforge.net/circustime"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:Z="http://czt.sourceforge.net/zml"
  xmlns:P="http://czt.sourceforge.net/zpatt"
  xmlns:CIRCUS="http://czt.sourceforge.net/circus"
  xmlns:CP="http://czt.sourceforge.net/circuspatt"
  xmlns:CT="http://czt.sourceforge.net/circustime"
  xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" jaxb:version="1.0"
  xmlns:gnast="http://czt.sourceforge.net/gnast"
  elementFormDefault="qualified"
  attributeFormDefault="unqualified"
  version="0.1">
  <xs:annotation>
    <xs:documentation>
      Copyright 2012 Leo Freitas
      $Id$
      
      This XML schema defines XML markup for formal specifications 
      written in Circus Time, a concurrent language for refinement that
      combines CSP, Z and the refinement calculus with time operators.
      More information at <a href="http://www.cs.york.ac.uk/~circus">Circus main web page</a>.
      
      This file is part of the Community Z Tools (CZT) project.
      
      The CZT project contains free software; you can
      redistribute it and/or modify it under the terms
      of the GNU General Public License as published by
      the Free Software Foundation; either version 2 of
      the License, or (at your option) any later version.
      
      The CZT project is distributed in the hope that it
      will be useful, but WITHOUT ANY WARRANTY; without
      even the implied warranty of MERCHANTABILITY or
      FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU General Public License for more details.
      
      You should have received a copy of the GNU General
      Public License along with CZT; if not, write to the
      Free Software Foundation, Inc., 59 Temple Place,
      Suite 330, Boston, MA  02111-1307  USA
    </xs:documentation>
    <xs:appinfo>
      <jaxb:schemaBindings>
        <jaxb:package name="net.sourceforge.czt.circustime.jaxb.gen">
          <jaxb:javadoc>
            &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
            &lt;html&gt;
            &lt;body&gt;
            &lt;p&gt;Classes generated by Jaxb.&lt;/p&gt;
            &lt;/body&gt;
            &lt;/html&gt;
          </jaxb:javadoc>
        </jaxb:package>
      </jaxb:schemaBindings>
      <gnast:schemaBindings name="CircusTime">
        <gnast:package name="net.sourceforge.czt.circustime">
          <gnast:package id="ast" name="ast">
            <gnast:generate id="factory" class="CircusTimeFactory" template="CoreFactory.vm"/>
            <gnast:javadoc>
              &lt;p&gt;
              These interfaces represent the AST for Circus Time. 
              &lt;/p&gt;
            </gnast:javadoc>
          </gnast:package>
          <gnast:package id="impl" name="impl">
            <gnast:generate id="factoryImpl" class="CircusTimeFactoryImpl" template="CoreFactoryImpl.vm"/>
          </gnast:package>
          <gnast:package id="visitor" name="visitor">
            <gnast:generate id="AstVisitor" class="CircusTimeVisitor" template="AstVisitor.vm"/>
          </gnast:package>
          <gnast:package id="util" name="util">
            <gnast:generate id="convFactory" class="Factory" template="Factory.vm"/>
          </gnast:package>
          <!-- NOT YET...
          <gnast:package id="util" name="util">
            <gnast:generate id="flyFactory" class="FlyweightFactory"
              template="FlyweightFactory.vm"/>
          </gnast:package>
          <gnast:package id="util" name="util">
            <gnast:generate id="createVisitor" class="CreateVisitor"
              template="CreateVisitor.vm"/>
          </gnast:package>
          -->
          <gnast:package id="jaxb" name="jaxb">
            <gnast:generate id="AstToJaxb" class="AstToJaxb" template="AstToJaxb.vm"/>
            <gnast:generate id="JaxbToAst" class="JaxbToAst" template="JaxbToAst.vm"/>
          </gnast:package>
          <gnast:package id="dom" name="dom">
            <gnast:generate id="AstToDom" class="AstToDom" template="AstToDom.vm"/>
          </gnast:package>
        </gnast:package>
      </gnast:schemaBindings>
    </xs:appinfo>
  </xs:annotation>
  
  <!-- NOTE: GnAST considers the first import only in the SchemaProject build phase,
             so always put ZPattern.xsd first for Circus.xsd (i.e. innermost parent).
   -->
  <xs:import namespace="http://czt.sourceforge.net/circuspatt" schemaLocation="CircusPattern.xsd"/>  
  <xs:import namespace="http://czt.sourceforge.net/circus" schemaLocation="Circus.xsd"/>  
  <xs:import namespace="http://czt.sourceforge.net/zpatt" schemaLocation="ZPattern.xsd"/>  
  <xs:import namespace="http://czt.sourceforge.net/zml" schemaLocation="Z.xsd"/>
  
  <!-- ********************************************************************* -->
  <!-- Definitions of the elements in the order of appearance in the grammar -->
  <!-- ********************************************************************* -->
  

  <!-- CSP Process :: Basic -->


  <!-- CSP Process :: Unary -->  
  
  
   <xs:element name="ProcessTime1" type="CT:ProcessTime1" substitutionGroup="CIRCUS:Process1" abstract="true">
    <xs:annotation>
      <xs:documentation>
	Base class for unary Circus time processes
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ProcessTime1">
    <xs:complexContent>
      <xs:extension base="CIRCUS:Process1">
        <xs:sequence>
          <xs:element ref="Z:Expr"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
 
  <xs:element name="TimeEndByProcess" type="CT:ProcessTime1" substitutionGroup="CT:ProcessTime1">
    <xs:annotation>
      <xs:documentation>
        Deadline process of Circus Time (End).
      </xs:documentation>
    </xs:annotation>
  </xs:element>

 <xs:element name="TimeStartByProcess" type="CT:ProcessTime1" substitutionGroup="CT:ProcessTime1">
    <xs:annotation>
      <xs:documentation>
        Deadline process of Circus Time (Start).
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  
   <!-- CSP Process :: Binary -->  

  <xs:element name="ProcessTime2" type="CT:ProcessTime2" substitutionGroup="CIRCUS:Process2" abstract="true">
    <xs:annotation>
      <xs:documentation>
	Base class for binary Circus time processes
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ProcessTime2">
    <xs:complexContent>
      <xs:extension base="CIRCUS:Process2">
        <xs:sequence>
          <xs:element ref="Z:Expr"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
   
<xs:element name="TimeoutProcess" type="CT:ProcessTime2" substitutionGroup="CT:ProcessTime2">
    <xs:annotation>
      <xs:documentation>
        Timeout process of the Circus Time.
      </xs:documentation>
    </xs:annotation>
  </xs:element>


  
  <xs:element name="TimedinterruptProcess" type="CT:ProcessTime2" substitutionGroup="CT:ProcessTime2">
    <xs:annotation>
      <xs:documentation>
        Timed Interrupt process of the Circus Time.
      </xs:documentation>
    </xs:annotation>
  </xs:element>


  <!-- CSP Action :: Basic -->
  <!-- Wait Action -->
  <xs:element name="WaitAction" type="CT:WaitAction" substitutionGroup="CIRCUS:BasicAction">
    <xs:annotation>
      <xs:documentation>
        Wait action of Circus Time as a basic action. This covers wait on any expression,
        as well wait on a range (upto) expression.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <!-- Wait Action -->
  <xs:complexType name="WaitAction">
    <xs:complexContent>
      <xs:extension base="CIRCUS:BasicAction">
        <xs:sequence>
          <xs:element ref="Z:Expr"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
   
    <!-- CSP Action :: Unary -->  
  
  
   <xs:element name="ActionTime1" type="CT:ActionTime1" substitutionGroup="CIRCUS:Action1" abstract="true">
    <xs:annotation>
      <xs:documentation>
	Base class for unary Circus time action. It contains an expression
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ActionTime1">
    <xs:complexContent>
      <xs:extension base="CIRCUS:Action1">
        <xs:sequence>
          <xs:element ref="Z:Expr"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  
  <xs:element name="TimeEndByAction" type="CT:ActionTime1" substitutionGroup="CT:ActionTime1">
    <xs:annotation>
      <xs:documentation>
        Deadline process of Circus Time (End). This is for (P |&gt; e).
      </xs:documentation>
    </xs:annotation>
  </xs:element>

 <xs:element name="TimeStartByAction" type="CT:ActionTime1" substitutionGroup="CT:ActionTime1">
    <xs:annotation>
      <xs:documentation>
        Deadline process of Circus Time (Start). This is for (e &lt;| P).
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
 <xs:element name="WaitExprAction" type="CT:WaitExprAction" substitutionGroup="CT:ActionTime1">
    <xs:annotation>
      <xs:documentation>
        Timed Range action. This AST encompases the three cases of wait operators,
        where the use of the AST determines which one is the case. Whenever N is null (or ???)
        then we have the first two cases (wait Expr; wait Expr .. Expr), whereas when N is not null
        we have (wait N: Expr .. Expr). In any case the upto expression only allows Arithmos type, so
        it's not quite needed anyway in so far as the AST is concerned.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <xs:complexType name="WaitExprAction">
    <xs:complexContent>
      <xs:extension base="CT:ActionTime1">
        <xs:sequence>
          <xs:element ref="Z:Name"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
   <!-- CSP Action :: Binary -->  
   <xs:element name="ActionTime2" type="CT:ActionTime2" substitutionGroup="CIRCUS:Action2" abstract="true">
    <xs:annotation>
      <xs:documentation>
	Base class for binary Circus time action
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ActionTime2">
    <xs:complexContent>
      <xs:extension base="CIRCUS:Action2">
        <xs:sequence>
          <xs:element ref="Z:Expr"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
   
  <xs:element name="TimeoutAction" type="CT:ActionTime2" substitutionGroup="CT:ActionTime2">
    <xs:annotation>
      <xs:documentation>
        Timeout action.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  
  <xs:element name="TimedinterruptAction" type="CT:ActionTime2" substitutionGroup="CT:ActionTime2">
    <xs:annotation>
      <xs:documentation>
        Timed Interrupt action.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  
  <xs:element name="PrefixingTimeAction" type="CT:PrefixingTimeAction" substitutionGroup="CIRCUS:PrefixingAction">
    <xs:annotation>
      <xs:documentation>
		 <p>
		 Common AST for all Circus Time actions. This include the three productions for prefixing as
		 at prefixing action (Comm@N prefix Act); prefixing expression action (Comm prefix expr act);
		 at prefixing expr action (Comm@N prefix expr Act). The first would have a null expr?, the second
		 a null N, the third a non null N and expr. and so on...
		 </p>
		 <p>
		 It's up to the programmer using/creating the AST to differentiate between these three cases.
		 It's worth NOT having explicit AST productions for each as they have too much in common and that
		 would lead to much repeated code and higher maintainence effort.
		 </p> 
		 <p>
		 DESIGN DECISION: we have decided against having something like a <code>TimedCommunication</code>
		 encompasing the channel elapsed time variable as this would greatly increase the complexity of the
		 grammar when handling Circus communication, which is already complex. This would also entail needs
		 for SmartScanning updates and potential conflicts. Given the elapsed time variable is not referenciable
		 within the communication (i.e. we cannot have c?x!y+u@u), then it is okay to keep it within the prefixing
		 itself.
		 </p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="PrefixingTimeAction">
    <xs:complexContent>
      <xs:extension base="CIRCUS:PrefixingAction">
        <xs:sequence>
          <xs:element ref="Z:Name">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property name="ChannelElapsedTime"
                               generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element ref="Z:Expr"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
    
</xs:schema>
