<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  Despite other extensions having xmlns inclusion top-down and some bottom-up,
  the top-down approach (i.e. circus, zpatt, zml) was creating problems for GnAST.
-->
<xs:schema
  targetNamespace="http://czt.sourceforge.net/circuspatt"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:Z="http://czt.sourceforge.net/zml"
  xmlns:P="http://czt.sourceforge.net/zpatt"
  xmlns:CIRCUS="http://czt.sourceforge.net/circus"
  xmlns:CP="http://czt.sourceforge.net/circuspatt"
  xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" jaxb:version="1.0"
  xmlns:gnast="http://czt.sourceforge.net/gnast"
  elementFormDefault="qualified"
  attributeFormDefault="unqualified"  
  version="0.1">
  <xs:annotation>
    <xs:documentation>
      Copyright 2005, 2006 Leonardo Freitas
      $Id: Circus.xsd 5189 2007-03-13 00:20:43Z petramalik $

      This XML schema defines XML markup for formal specifications 
      written of refinement laws to be used in Circus, a concurrent 
      language for refinement that combines CSP, Z and the refinement calculus.
      More information at <a href="http://www.cs.york.ac.uk/~circus">Circus main web page</a>
      or at <a href="http://www.cs.york.ac.uk/~leo">the author'ss web page</a>.

      This file is part of the Community Z Tools (CZT) project.
 
      The CZT project contains free software; you can
      redistribute it and/or modify it under the terms
      of the GNU General Public License as published by
      the Free Software Foundation; either version 2 of
      the License, or (at your option) any later version.
 
      The CZT project is distributed in the hope that it
      will be useful, but WITHOUT ANY WARRANTY; without
      even the implied warranty of MERCHANTABILITY or
      FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU General Public License for more details.

      You should have received a copy of the GNU General
      Public License along with CZT; if not, write to the
      Free Software Foundation, Inc., 59 Temple Place,
      Suite 330, Boston, MA  02111-1307  USA
    </xs:documentation>
    <xs:appinfo>
      <jaxb:schemaBindings>
        <jaxb:package name="net.sourceforge.czt.circuspatt.jaxb.gen">
          <jaxb:javadoc>
            &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
            &lt;html&gt;
            &lt;body&gt;
            &lt;p&gt;Classes generated by Jaxb.&lt;/p&gt;
            &lt;/body&gt;
            &lt;/html&gt;
          </jaxb:javadoc>
        </jaxb:package>
      </jaxb:schemaBindings>
      <gnast:schemaBindings name="CircusPattern">
        <gnast:package name="net.sourceforge.czt.circuspatt">
          <gnast:package id="ast" name="ast">
            <gnast:generate id="factory" class="CircusPatternFactory" template="CoreFactory.vm"/>
          </gnast:package>
          <gnast:package id="impl" name="impl">
            <gnast:generate id="factoryImpl" class="CircusPatternFactoryImpl" template="CoreFactoryImpl.vm"/>
          </gnast:package>
          <gnast:package id="visitor" name="visitor">
            <gnast:generate id="AstVisitor" class="CircusPatternVisitor" template="AstVisitor.vm"/>
          </gnast:package>
          <gnast:package id="util" name="util">
            <gnast:generate id="convFactory" class="Factory" template="Factory.vm"/>
          </gnast:package>
          <!-- NOT YET
          <gnast:package id="util" name="util">
            <gnast:generate id="flyFactory" class="FlyweightFactory"
              template="FlyweightFactory.vm"/>
          </gnast:package>
          <gnast:package id="util" name="util">
            <gnast:generate id="createVisitor" class="CreateVisitor"
              template="CreateVisitor.vm"/>
          </gnast:package>
          -->
          <gnast:package id="jaxb" name="jaxb">
            <gnast:generate id="AstToJaxb" class="AstToJaxb" template="AstToJaxb.vm"/>
            <gnast:generate id="JaxbToAst" class="JaxbToAst" template="JaxbToAst.vm"/>
          </gnast:package>
          <gnast:package id="dom" name="dom">
            <gnast:generate id="AstToDom" class="AstToDom" template="AstToDom.vm"/>
          </gnast:package>
        </gnast:package>
      </gnast:schemaBindings>
    </xs:appinfo>
  </xs:annotation>

  <!-- NOTE: GnAST considers the first import only in the SchemaProject build phase,
             so always put Circus.xsd first for Circus.xsd (i.e. innermost parent).
   -->
  <xs:import namespace="http://czt.sourceforge.net/circus" schemaLocation="Circus.xsd"/>
  <xs:import namespace="http://czt.sourceforge.net/zml" schemaLocation="Z.xsd"/>
  <xs:import namespace="http://czt.sourceforge.net/zpatt" schemaLocation="ZPattern.xsd"/>

  <!-- ********************************************************************* -->
  <!-- Definitions of the elements in the order of appearance in the grammar -->
  <!-- ********************************************************************* -->

  <!-- Section level paragraphs -->
  
  <!-- CircusLaw is just a Bridge to a Rule, where the paragraphs are extracted accordingly.
       It is now part of an utility class into net.sourceforge.czt.circuspatt.util.CircusLaw.
  <xs:element name="CircusLaw" type="CP:CircusLaw" substitutionGroup="P:Rule">
    <xs:annotation>
      <xs:documentation>
        <p>
        A  <code>CircusLaw</code> is the base class for all refinement rules for Circus.
        It extends  <code>Rule</code> as a list of <code>Sequent</code>s to include
        a list of arguments. 
        </p>        
      </xs:documentation>
    </xs:annotation>
  </xs:element> 
  
  From the provided grammar, a CircusLaw, say for actions, is given as:
  
  <ACTION_LAW> ::= <BEGIN_ENV> <ACTION_LAW_LABEL> <LAW_NAME>
                 <ACTION_TRANS>
                 [<PROVIDED> <OP> (<NEXT> <OP>)*]
                 [<ARGS> <ARG> (<NEXT> <ARG>)*]
                 <END_ENV> <ACTION_LABEL>
  
  This is just a rule, where the adequate provisos and arguments leave
  at different places within the Sequent list. Arguments are the jokers
  above the line in a rule. Provisos are relations (i.e. MemPred) to hold 
  between some of these jokers, which again are just sequent within Rule.                 
  -->
  
  <xs:element name="CircusJokers" type="CP:CircusJokers" substitutionGroup="Z:Para">
    <xs:annotation>
      <xs:documentation>
        This records the names that have been declared as a particular
        kind of joker.  It is used by the parser to map those names to
        the appropriate kind of JokerXXX term, but is not needed later
        when rules are being used.  It is similar in purpose to the
        LaTeX markup directives in the standard Z XML schema.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <!-- Jokers are syntactical categories place holders. They can appear wherever the 
       corresponding syntax could. One could see them as formal parameters of a rule -->
  <xs:element name="JokerProcess" type="CP:JokerProcess" substitutionGroup="CIRCUS:CircusProcess"/>
  <xs:element name="JokerAction" type="CP:JokerAction" substitutionGroup="CIRCUS:CircusAction"/>
  <xs:element name="JokerCommunication" type="CP:JokerCommunication" substitutionGroup="CIRCUS:Communication"/>
  <xs:element name="JokerChannelSet" type="CP:JokerChannelSet" substitutionGroup="CIRCUS:ChannelSet"/>
  <xs:element name="JokerNameSet" type="CP:JokerNameSet" substitutionGroup="CIRCUS:NameSet"/>
  <xs:element name="JokerPara" type="CP:JokerPara" substitutionGroup="Z:Para"/>
  <xs:element name="JokerParaList" type="CP:JokerParaList" substitutionGroup="Z:ParaList"/>

  <!-- Bindings are real instances to associate jokers with. They are instantiated by
       rules wherever Jokers were used. One could see them as actual parameters of a rule -->  
  <xs:element name="JokerProcessBinding" type="CP:JokerProcessBinding" substitutionGroup="P:Binding"/>
  <xs:element name="JokerActionBinding" type="CP:JokerActionBinding" substitutionGroup="P:Binding"/>
  <xs:element name="JokerCommunicationBinding" type="CP:JokerCommunicationBinding" substitutionGroup="P:Binding"/>
  <xs:element name="JokerNameSetBinding" type="CP:JokerNameSetBinding" substitutionGroup="P:Binding"/>
  <xs:element name="JokerChannelSetBinding" type="CP:JokerChannelSetBinding" substitutionGroup="P:Binding"/>
  <xs:element name="JokerParaBinding" type="CP:JokerParaBinding" substitutionGroup="P:Binding"/>
  <xs:element name="JokerParaListBinding" type="CP:JokerParaListBinding" substitutionGroup="P:Binding"/>
  
  <!-- 
  I am not convinced there is a case for CommunicationExpr or other forms of 
  inclusion within the Expr tree. That is, although Circus have a form of expression
  that is a communication, it should not be allowed to appear anywhere a Z expression
  is allowed. If at all, such CommunicationExpr may be part of some Circus Law, but 
  we will see. 
  
  For Process and Action there is definitely a case for it since we want them to
  be part of the \refs, \sim, tree. 
  -->
  
  <!-- Complex types -->
  
  <!-- 
  <xs:complexType name="CircusLaw">
    <xs:complexContent>
      <xs:extension base="P:Rule">
        <xs:sequence>
          <xs:element name="Arguments" type="P:Sequent" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property name="Arguments"
                  generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>        
        </xs:sequence>        
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  -->
  
  <xs:complexType name="CircusJokers">
    <xs:complexContent>
      <xs:extension base="Z:Para">
        <xs:sequence>
          <xs:element name="Name" type="xs:string"  minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="CircusJokerType" type="CP:CircusJokerType" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="CircusJokerType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Process"/>
      <xs:enumeration value="Action"/>
      <xs:enumeration value="Communication"/>
      <xs:enumeration value="ChanelSet"/>
      <xs:enumeration value="NameSet"/>
      <xs:enumeration value="Para"/>
      <xs:enumeration value="ParaList"/>
    </xs:restriction>
  </xs:simpleType>
  
  <xs:complexType name="JokerProcess">
    <xs:complexContent>
      <xs:extension base="CIRCUS:CircusProcess">
        <xs:attribute name="Name" type="xs:string"/>
        <xs:attribute name="Id" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>  
  
  <xs:complexType name="JokerAction">
    <xs:complexContent>
      <xs:extension base="CIRCUS:CircusAction">
        <xs:attribute name="Name" type="xs:string"/>
        <xs:attribute name="Id" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="JokerCommunication">
    <xs:complexContent>
      <xs:extension base="CIRCUS:Communication">
        <xs:attribute name="Name" type="xs:string"/>
        <xs:attribute name="Id" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="JokerChannelSet">
    <xs:complexContent>
      <xs:extension base="CIRCUS:ChannelSet">
        <xs:attribute name="Name" type="xs:string"/>
        <xs:attribute name="Id" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="JokerNameSet">
    <xs:complexContent>
      <xs:extension base="CIRCUS:NameSet">
        <xs:attribute name="Name" type="xs:string"/>
        <xs:attribute name="Id" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="JokerPara">
    <xs:complexContent>
      <xs:extension base="Z:Para">
        <xs:attribute name="Name" type="xs:string"/>
        <xs:attribute name="Id" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="JokerParaList">
    <xs:complexContent>
      <xs:extension base="Z:ParaList">
        <xs:attribute name="Name" type="xs:string"/>
        <xs:attribute name="Id" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="JokerProcessBinding">
    <xs:complexContent>
      <xs:extension base="P:Binding">
        <xs:sequence>
          <xs:element ref="CP:JokerProcess">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element ref="CIRCUS:CircusProcess"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="JokerActionBinding">
    <xs:complexContent>
      <xs:extension base="P:Binding">
        <xs:sequence>
          <xs:element ref="CP:JokerAction">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element ref="CIRCUS:CircusAction"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="JokerCommunicationBinding">
    <xs:complexContent>
      <xs:extension base="P:Binding">
        <xs:sequence>
          <xs:element ref="CP:JokerCommunication">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element ref="CIRCUS:Communication"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="JokerChannelSetBinding">
    <xs:complexContent>
      <xs:extension base="P:Binding">
        <xs:sequence>
          <xs:element ref="CP:JokerChannelSet">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element ref="CIRCUS:ChannelSet"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="JokerNameSetBinding">
    <xs:complexContent>
      <xs:extension base="P:Binding">
        <xs:sequence>
          <xs:element ref="CP:JokerNameSet">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element ref="CIRCUS:NameSet"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="JokerParaBinding">
    <xs:complexContent>
      <xs:extension base="P:Binding">
        <xs:sequence>
          <xs:element ref="CP:JokerPara">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element ref="Z:Para"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>  
  
  <xs:complexType name="JokerParaListBinding">
    <xs:complexContent>
      <xs:extension base="P:Binding">
        <xs:sequence>
          <xs:element ref="CP:JokerParaList">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element ref="Z:ParaList"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>  
</xs:schema>
