<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  Despite other extensions having xmlns inclusion top-down and some bottom-up,
  the top-down approach (i.e. circus, zpatt, zml) was creating problems for GnAST.
-->
<xs:schema  
  targetNamespace="http://czt.sourceforge.net/ohcircus"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:Z="http://czt.sourceforge.net/zml"
  xmlns:P="http://czt.sourceforge.net/zpatt"
  xmlns:CIRCUS="http://czt.sourceforge.net/circus"
  xmlns:CP="http://czt.sourceforge.net/circuspatt"
  xmlns:CT="http://czt.sourceforge.net/circustime"
  xmlns:OHCIRCUS="http://czt.sourceforge.net/ohcircus"
  xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" jaxb:version="1.0"
  xmlns:gnast="http://czt.sourceforge.net/gnast"
  elementFormDefault="qualified"
  attributeFormDefault="unqualified"
  version="0.1">
  <xs:annotation>
    <xs:documentation>
      Copyright 2012 Leo Freitas
      $Id$
      
      This XML schema defines XML markup for formal specifications 
      written in Circus Time, a concurrent language for refinement that
      combines CSP, Z and the refinement calculus with time operators.
      More information at <a href="http://www.cs.york.ac.uk/~circus">Circus main web page</a>.
      
      This file is part of the Community Z Tools (CZT) project.
      
      The CZT project contains free software; you can
      redistribute it and/or modify it under the terms
      of the GNU General Public License as published by
      the Free Software Foundation; either version 2 of
      the License, or (at your option) any later version.
      
      The CZT project is distributed in the hope that it
      will be useful, but WITHOUT ANY WARRANTY; without
      even the implied warranty of MERCHANTABILITY or
      FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU General Public License for more details.
      
      You should have received a copy of the GNU General
      Public License along with CZT; if not, write to the
      Free Software Foundation, Inc., 59 Temple Place,
      Suite 330, Boston, MA  02111-1307  USA
    </xs:documentation>
    <xs:appinfo>
      <jaxb:schemaBindings>
        <jaxb:package name="net.sourceforge.czt.ohcircus.jaxb.gen">
          <jaxb:javadoc>
            &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
            &lt;html&gt;
            &lt;body&gt;
            &lt;p&gt;Classes generated by Jaxb.&lt;/p&gt;
            &lt;/body&gt;
            &lt;/html&gt;
          </jaxb:javadoc>
        </jaxb:package>
      </jaxb:schemaBindings>
      <gnast:schemaBindings name="OhCircus">
        <gnast:package name="net.sourceforge.czt.ohcircus">
          <gnast:package id="ast" name="ast">
            <gnast:generate id="factory" class="OhCircusFactory" template="CoreFactory.vm"/>
            <gnast:javadoc>
              &lt;p&gt;
              These interfaces represent the AST for OhCircus. 
              &lt;/p&gt;
            </gnast:javadoc>
          </gnast:package>
          <gnast:package id="impl" name="impl">
            <gnast:generate id="factoryImpl" class="OhCircusFactoryImpl" template="CoreFactoryImpl.vm"/>
          </gnast:package>
          <gnast:package id="visitor" name="visitor">
            <gnast:generate id="AstVisitor" class="OhCircusVisitor" template="AstVisitor.vm"/>
          </gnast:package>
          <gnast:package id="util" name="util">
            <gnast:generate id="convFactory" class="Factory" template="Factory.vm"/>
          </gnast:package>
          <!-- NOT YET...
          <gnast:package id="util" name="util">
            <gnast:generate id="flyFactory" class="FlyweightFactory"
              template="FlyweightFactory.vm"/>
          </gnast:package>
          <gnast:package id="util" name="util">
            <gnast:generate id="createVisitor" class="CreateVisitor"
              template="CreateVisitor.vm"/>
          </gnast:package>
          -->
          <gnast:package id="jaxb" name="jaxb">
            <gnast:generate id="AstToJaxb" class="AstToJaxb" template="AstToJaxb.vm"/>
            <gnast:generate id="JaxbToAst" class="JaxbToAst" template="JaxbToAst.vm"/>
          </gnast:package>
          <gnast:package id="dom" name="dom">
            <gnast:generate id="AstToDom" class="AstToDom" template="AstToDom.vm"/>
          </gnast:package>
        </gnast:package>
      </gnast:schemaBindings>
    </xs:appinfo>
  </xs:annotation>
  
  <!-- NOTE: GnAST considers the first import only in the SchemaProject build phase,
             so always put ZPattern.xsd first for Circus.xsd (i.e. innermost parent).
   -->
  <xs:import namespace="http://czt.sourceforge.net/circustime" schemaLocation="CircusTime.xsd"/>  
  <xs:import namespace="http://czt.sourceforge.net/circuspatt" schemaLocation="CircusPattern.xsd"/>  
  <xs:import namespace="http://czt.sourceforge.net/circus" schemaLocation="Circus.xsd"/>  
  <xs:import namespace="http://czt.sourceforge.net/zpatt" schemaLocation="ZPattern.xsd"/>  
  <xs:import namespace="http://czt.sourceforge.net/zml" schemaLocation="Z.xsd"/>
  
  <!-- ********************************************************************* -->
  <!-- Definitions of the elements in the order of appearance in the grammar -->
  <!-- ********************************************************************* -->
  

  <!-- OhCircus Para-->
  <!-- OhCircus Class Para-->
  
  
  <xs:element name="OhCircusClassPara" type="OHCIRCUS:OhCircusClassPara" substitutionGroup="Z:Para">
    <xs:annotation>
      <xs:documentation>
		<p>
        	A class para is extending the Z para. 
		</p>
		<p>
          	This element represents the <b>ClassDefinition</b> grammar rule.
		</p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  
   <xs:element name="OhCircusClassDef" type="OHCIRCUS:OhCircusClassDef" abstract="true">
    <xs:annotation>
      <xs:documentation>
        <p>
          An abstract OhCircus class definition. It represents the <b>ClassDefinition</b> grammar rule.
        </p>
      </xs:documentation>
        <xs:appinfo>
           <jaxb:property generateElementProperty="true"/>
        </xs:appinfo>
     </xs:annotation>
  </xs:element>
  
  
  
<!-- OhCircus Method Para-->

 <xs:element name="OhCircusMethodPara" type="OHCIRCUS:OhCircusMethodPara" substitutionGroup="Z:Para">
    <xs:annotation>
      <xs:documentation>
        <p>
          A method paragraph that declares a name for a method definition.
        </p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>

<!-- OhCircus Class  -->

<xs:element name="OhCircusClass" type="OHCIRCUS:OhCircusClass" abstract="true">
    <xs:annotation>
      <xs:documentation>
        <p>
          An abstract OhCircus Class definition. It represents the <b>Class Definition</b> grammar rule.
        </p>
       </xs:documentation>
    </xs:annotation>
</xs:element>
  
<!-- OhCircus Method -->
     
  <xs:element name="OhCircusMethod" type="OHCIRCUS:OhCircusMethod" abstract="true">
    <xs:annotation>
      <xs:documentation>
        <p>
          An abstract OhCircus method definition that presents the grammar rule. The extesions of 
	  this abstract method are guarded methods, recursion, method call etc.
        </p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <xs:element name="Method1" type="OHCIRCUS:Method1" abstract="true" substitutionGroup="OHCIRCUS:OhCircusMethod">
    <xs:annotation>
      <xs:documentation>
        An abstract unary OhCircus Method definition.
      </xs:documentation>
    </xs:annotation>
  </xs:element>  
  
  <xs:element name="Method2" type="OHCIRCUS:Method2" abstract="true" substitutionGroup="OHCIRCUS:OhCircusMethod">
    <xs:annotation>
      <xs:documentation>
        An abstract binary OhCircus method definition.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <xs:element name="MethodD" type="OHCIRCUS:MethodD" abstract="true" substitutionGroup="OHCIRCUS:Method1">
    <xs:annotation>
      <xs:documentation>
        <p>
          An abstract unary OhCircus method with Z declarations.
        </p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>  
  
   <xs:element name="ParamMethod" type="OHCIRCUS:ParamMethod" substitutionGroup="OHCIRCUS:MethodD">
    <xs:annotation>
      <xs:documentation>
        A parameterised method definition. It represents grammar rule <b>Declaration @ ParMethod</b>.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <xs:element name="CallMethod" type="OHCIRCUS:CallMethod" substitutionGroup="OHCIRCUS:OhCircusMethod">
    <xs:annotation>
      <xs:documentation>
        <p>
          OhCircus method reference call. In other words, it permits a name to be a method.
          That is, it contains a reference name to lookup the method definition.
        </p>
        <p>
          Moreover, it contains a list of expressions representing possible actual parameters.
          An empty list of expressions means a simple method call of the grammar rule <b>N</b>,
          where <b>N</b> is the method name.
          If the list of expressions is not empty, then the this is a parameterised method.
          It represents the grammar rule <b>N(Expr+)</b> for method instantiation.
        </p>
        <p>
          The invariant is as follows:        
          <ul>
            <li>N        = nonempty name and empty parameters. </li>
            <li>N(Expr+) = nonempty parameters. Internal name for on-the-fly, user given name for previously declared method. </li>
          </ul>
        </p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <xs:element name="SchExprMethod" type="OHCIRCUS:SchExprMethod" substitutionGroup="OHCIRCUS:OhCircusMethod">
    <xs:annotation>
      <xs:documentation>
        <p>
          A method given as a schema expression.
          In this way, schema expressions are included into the <code>OhCircusMethod</code> subtree
          in a similar way as schema expressions are included in the declaration and predicate subtrees.
        </p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>  
  
    
  <!-- OhCircus Method :: Unary -->  
  
  <xs:element name="GuardedMethod" type="OHCIRCUS:GuardedMethod" substitutionGroup="OHCIRCUS:Method1">
    <xs:annotation>
      <xs:documentation>
        The OhCircus guarded method defines a methods guarded by a Z predicate.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <xs:element name="MuMethod" type="OHCIRCUS:MuMethod" substitutionGroup="OHCIRCUS:Method1">
    <xs:annotation>
      <xs:documentation>
	<p>
	  The mu operator defines a recursive method.
	</p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <!-- OhCircus Method :: Binary -->  
  
   <xs:element name="SeqMethod" type="OHCIRCUS:SeqMethod" substitutionGroup="OHCIRCUS:Method2">
    <xs:annotation>
      <xs:documentation>
        Sequential composition between two method.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <!-- OhCircus Method :: Commands -->
  <xs:element name="OhCircusCommand" type="OHCIRCUS:OhCircusCommand" abstract="true" substitutionGroup="OHCIRCUS:OhCircusMethod">
    <xs:annotation>
      <xs:documentation>
        <p>
	  An abstract OhCircus command.  
	</p>        
      </xs:documentation>
    </xs:annotation>
  </xs:element>    
  
  <xs:element name="OhCircusGuardedCommand" type="OHCIRCUS:OhCircusGuardedCommand" substitutionGroup="OHCIRCUS:OhCircusCommand">
    <xs:annotation>
      <xs:documentation>
        Abstract base class for IfOhCircusGuardedCommand and DoOhCircusGuardedCommand
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
   <xs:element name="IfOhCircusGuardedCommand" type="OHCIRCUS:IfOhCircusGuardedCommand" substitutionGroup="OHCIRCUS:OhCircusGuardedCommand">
    <xs:annotation>
      <xs:documentation>
        <p>
          Command declaring an if statement containing guarded methods in Dijkstra's style.
        </p>
      </xs:documentation>
    </xs:annotation>
  </xs:element> 
  <xs:element name="DoOhCircusGuardedCommand" type="OHCIRCUS:DoOhCircusGuardedCommand" substitutionGroup="OHCIRCUS:OhCircusGuardedCommand">
    <xs:annotation>
      <xs:documentation>
        <p>
          Command declaring a do (while) statement containing guarded methods in Dijkstra's style.
        </p>
      </xs:documentation>
    </xs:annotation>
  </xs:element> 
  <xs:element name="VarDeclOhCircusCommand" type="OHCIRCUS:VarDeclOhCircusCommand" substitutionGroup="OHCIRCUS:OhCircusCommand">
    <xs:annotation>
      <xs:documentation>
        <p>
          Command declaring (possibly multiple) variables local to an method definition.
          The parser is responsible to ensure that no strokes are allowed in the frame variables.
        </p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <!-- OhCircus "dot" (.) operator --> 
  
  <xs:element name="OhCircusDot" type="OHCIRCUS:OhCircusDot"  substitutionGroup="OHCIRCUS:OhExpr">
    <xs:annotation>
      <xs:documentation>
        <p>
          A "dot" (.) operator is a part of an Expression. 
          It represents the grammar rule <b>Expr.N</b>.
        </p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
<!-- Special OhCircus methods are used on post-parsing. 
     They are related to scope for mutual recursion and variable declaration.
-->  
  
  <xs:element name="LetMethod" type="OHCIRCUS:LetMethod" substitutionGroup="OHCIRCUS:Method1" abstract="true">
    <xs:annotation>
      <xs:documentation>
        Abstract local environment.
      </xs:documentation>
    </xs:annotation>     
  </xs:element>      
  <xs:element name="LetMuMethod" type="OHCIRCUS:LetMuMethod" substitutionGroup="OHCIRCUS:LetMethod">
    <xs:annotation>
      <xs:documentation>
        Local environment for mu methods. It resolves mutual recursions through a weak fixed point
        equation with an array of recursive variables.
      </xs:documentation>
    </xs:annotation>     
  </xs:element>    
  <xs:element name="LetVarMethod" type="OHCIRCUS:LetVarMethod" substitutionGroup="OHCIRCUS:LetMethod">
    <xs:annotation>
      <xs:documentation>
        Local environment for methods involving parameterised methods and commands.
        They are important to carry the declared type, and any type restrictions, of these constructs.
      </xs:documentation>
    </xs:annotation>     
  </xs:element>    
  
  
  <!-- Predicate  -->
  
  <xs:element name="PredExpr" type="OHCIRCUS:PredExpr" substitutionGroup="Z:Expr">
    <xs:annotation>
      <xs:documentation>
	<p>
	  A boolean expression.
	</p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <!-- Class Reference  -->
  
  <xs:element name="OhCircusClassRef" type="OHCIRCUS:OhCircusClassRef" >
    <xs:annotation>
      <xs:documentation>
		<p>
	  		A reference to a class.
		</p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
   <xs:element name="OhCircusClassRefList" type="OHCIRCUS:OhCircusClassRefList">
    <xs:annotation>
      <xs:documentation>
      	<p>
      		A list of OhCircus ClassRefs.
      	</p></xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <xs:element name="OhCircusClassRefType" type="OHCIRCUS:OhCircusClassRefType"
    substitutionGroup="OHCIRCUS:OhCircusClassType">
    <xs:annotation>
      <xs:documentation>
      	<p>
      		Class reference type.
      	</p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <!-- the OhExpr hierarchy -->
  
  <xs:element name="OhExpr" type="OHCIRCUS:OhExpr" substitutionGroup="Z:Expr">
    <xs:annotation>
      <xs:documentation>
	<p>
	  An abstract operation expression.
	</p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <xs:element name="OhExpr2" type="OHCIRCUS:OhExpr2" abstract="true" substitutionGroup="OHCIRCUS:OhExpr">
    <xs:annotation>
      <xs:documentation>
	<p>
	  An abstract binary operation expression.
	</p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
   <xs:element name="OhExprList" type="OHCIRCUS:OhExprList" substitutionGroup="OHCIRCUS:OhExpr">
    <xs:annotation>
      <xs:documentation>
        An OhCircus expression list.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <xs:element name="OhCircusClassState" type="OHCIRCUS:OhCircusClassState"  >
    <xs:annotation>
      <xs:documentation>
		<p>
	  		State in the OhCircus Class.
		</p>
      </xs:documentation>
      <xs:appinfo>
            <jaxb:property generateElementProperty="true" />
     </xs:appinfo>
    </xs:annotation>
  </xs:element>
  
  <xs:element name="OhCircusClassInitialState" type="OHCIRCUS:OhCircusClassInitialState" >
    <xs:annotation>
      <xs:documentation>
	<p>
		InitialState in the OhCircus Class.
	</p>
      </xs:documentation>
      <xs:appinfo>
           <jaxb:property generateElementProperty="true" />
      </xs:appinfo>
    </xs:annotation>
  </xs:element>
  
    
     
  <!-- Additional top-level types in OhCircus  --> 
  
  <xs:element name="OhCircusClassType" type="OHCIRCUS:OhCircusClassType" substitutionGroup="CIRCUS:CircusType">
    <xs:annotation>
      <xs:documentation>
      	<p>
      		A class type.
      	</p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>
 
  <xs:element name="OhCircusMethodType" type="OHCIRCUS:OhCircusMethodType" substitutionGroup="CIRCUS:CircusType">
    <xs:annotation>
      <xs:documentation>
        <p>
          A method type.
        </p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>
 
 <xs:element name="OhCircusSignature" type="OHCIRCUS:OhCircusSignature" abstract="true">
    <xs:annotation>
      <xs:documentation>
        <p>
          An OhCircus method signature.
        </p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <xs:complexType name="OhCircusSignature">
    <xs:complexContent>
      <xs:extension base="Z:Term">
        <xs:sequence>
          <!-- maybe this is useless here: ActionSignature within actions do not have names? But they do within ActionPara -->
          <xs:element ref="Z:Name"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
 
  <!-- Additional top-level signatures in OhCircus -->
   <xs:element name="OhCircusClassSignature" type="OHCIRCUS:OhCircusClassSignature" substitutionGroup="OHCIRCUS:OhCircusSignature">
    <xs:annotation>
      <xs:documentation>
      	<p>
      		An OhCircus class signature.
      	</p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>
 
  <xs:element name="OhCircusMethodSignature" type="OHCIRCUS:OhCircusMethodSignature" substitutionGroup="OHCIRCUS:OhCircusSignature">
    <xs:annotation>
      <xs:documentation>
        <p>
          An OhCircus method signature.
        </p>
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <!-- Lists used by OhCircus method -->
  
   <xs:element name="MethodList" type="OHCIRCUS:MethodList" abstract="true">
    <xs:annotation>
      <xs:documentation>
        An abstract method list.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <xs:element name="OhCircusMethodList" type="OHCIRCUS:OhCircusMethodList"
              substitutionGroup="OHCIRCUS:MethodList">
    <xs:annotation>
      <xs:documentation>
        A list of OhCircus methods.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  
  
  <!-- Signature Lists -->
  
  <xs:element name="OhCircusClassSignatureList" type="OHCIRCUS:OhCircusClassSignatureList" 
              substitutionGroup="CIRCUS:SignatureList">
    <xs:annotation>
      <xs:documentation>
        A class signature list.
      </xs:documentation>
    </xs:annotation>
  </xs:element>  
  
  <xs:element name="OhCircusMethodSignatureList" type="OHCIRCUS:OhCircusMethodSignatureList" 
              substitutionGroup="CIRCUS:SignatureList">
    <xs:annotation>
      <xs:documentation>
        A method signature list.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
     
    <!-- OhCircus Class qualifiers -->  
  <xs:element name="QualifiedClassDecl" type="OHCIRCUS:QualifiedClassDecl" substitutionGroup="Z:Decl">
    <xs:annotation>
      <xs:documentation>
        It includes qualifier attributes for each <code>Name</code> related to the class components like methods.
      </xs:documentation>
    </xs:annotation>
  </xs:element> 
  
   
  
  <!-- ***************************************************************** -->
  <!-- ******************Definitions of complexTypes******************** -->
  <!-- ***************************************************************** -->

  
   <xs:complexType name="OhCircusClassPara">
    <xs:complexContent>
      <xs:extension base="Z:Para">
        <xs:sequence>
         <xs:element ref="Z:Name"/>            
	 	 <xs:element ref="OHCIRCUS:OhCircusClassDef"/>
	</xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  
  <xs:complexType name="OhCircusClassDef">
    <xs:complexContent>
      <xs:extension base="Z:Term">
        <xs:sequence>
	   		<xs:element ref="OHCIRCUS:OhCircusClassState"/>
            <xs:element ref="OHCIRCUS:OhCircusClassInitialState"/>
            <xs:element ref="OHCIRCUS:OhCircusClass" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
 <xs:complexType name="OhCircusMethodPara">
    <xs:complexContent>
      <xs:extension base="Z:Para">
        <xs:sequence>
          <xs:element ref="Z:Name"/>
          <xs:element ref="OHCIRCUS:OhCircusMethod"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>    
 
  <xs:complexType name="OhCircusClass">
    <xs:complexContent>
      <xs:extension base="Z:Term"/>
    </xs:complexContent>
  </xs:complexType>
 
  <xs:complexType name="OhCircusMethod">
    <xs:complexContent>
      <xs:extension base="Z:Term"/>
    </xs:complexContent>
  </xs:complexType>
   
  <xs:complexType name="Method1">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:OhCircusMethod">
        <xs:sequence>
          <xs:element ref="OHCIRCUS:OhCircusMethod"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="Method2">    
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:OhCircusMethod">
        <xs:sequence>
           <xs:element ref="OHCIRCUS:OhCircusMethod" minOccurs="2" maxOccurs="2"/>    
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="MethodD">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:Method1">
        <xs:sequence>                  
           <xs:element ref="Z:DeclList"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="OhCircusCommand">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:OhCircusMethod"/>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="SchExprMethod">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:OhCircusMethod">
        <xs:sequence>          
          <xs:element ref="Z:Expr"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="ParamMethod">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:MethodD"/>
    </xs:complexContent>
  </xs:complexType>
  
  
  <xs:complexType name="SeqMethod">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:Method2"/>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="CallMethod">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:OhCircusMethod">
        <xs:sequence>
          <xs:element ref="Z:Name"/>          
          <xs:element ref="Z:ExprList"/>
        </xs:sequence>        
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>    
  
    
  <xs:complexType name="MuMethod">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:Method1">
        <xs:sequence>
          <xs:element ref="Z:Name"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
 
 
 <xs:complexType name="GuardedMethod">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:Method1">
        <xs:sequence>
          <xs:element ref="Z:Pred"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="OhCircusGuardedCommand">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:OhCircusCommand">
        <xs:sequence>
          <xs:element ref="OHCIRCUS:MethodList"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  
  <xs:complexType name="IfOhCircusGuardedCommand">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:OhCircusGuardedCommand"/>
    </xs:complexContent>
  </xs:complexType>
  

  <xs:complexType name="DoOhCircusGuardedCommand">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:OhCircusGuardedCommand"/>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="VarDeclOhCircusCommand">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:OhCircusCommand">
        <xs:sequence>                    
          <xs:element ref="Z:DeclList"/>
          <xs:element ref="OHCIRCUS:OhCircusMethod"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  
  <!-- Additional OhCircus methods for recursive behavior -->
  <xs:complexType name="LetMethod">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:Method1"/>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="LetMuMethod">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:LetMethod">
        <xs:sequence>
          <!-- List of OhCircusMethodPara to handle mutual recursion -->
          <xs:element ref="Z:ParaList"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="LetVarMethod">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:LetMethod">
        <xs:sequence>                                       
          <xs:element ref="Z:DeclList"/>          
          <xs:element ref="Z:ExprList"/>            
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>  
  
  <xs:complexType name="OhCircusDot">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:OhExpr">
        <xs:sequence>                                       
          <xs:element ref="Z:Expr" minOccurs="0"/>          
          <xs:element ref="Z:Name"/>            
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>  
  
  <xs:complexType name="OhCircusType">
    <xs:complexContent>
      <xs:extension base="Z:Type2"/>
    </xs:complexContent>
  </xs:complexType>  
  
  <xs:complexType name="PredExpr">
    <xs:complexContent>
      <xs:extension base="Z:Expr">
        <xs:sequence>
          <xs:element ref="Z:Pred"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="ClassRef">
    <xs:complexContent>
      <xs:extension base="Z:Term">
        <xs:sequence>
          <xs:element ref="Z:ZName">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property name="Name"
                  generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element ref="Z:Type2" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property name="Type"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element ref="Z:NewOldPair" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="OhExpr">
    <xs:complexContent>
      <xs:extension base="Z:Expr"/>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="OhExprList">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:OhExpr">
        <xs:sequence>
          <xs:element ref="OHCIRCUS:OhExpr" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="OhExpr2">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:OhExpr">
        <xs:sequence>
          <xs:element ref="OHCIRCUS:OhExpr" minOccurs="2" maxOccurs="2"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="OhCircusClassState">
    <xs:complexContent>
      <xs:extension base="Z:Term">
        <xs:sequence>
          <xs:element ref="Z:Pred" minOccurs="0"/>
          <!-- <xs:element ref="Z:SchExpr2" minOccurs="0"/>  -->
        </xs:sequence>
        <xs:attribute name="Box" type="Z:Box" use="optional" default="SchBox"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
   
  <xs:complexType name="OhCircusClassInitialState">
    <xs:complexContent>
      <xs:extension base="Z:Term">
        <xs:sequence>
          <xs:element ref="Z:Pred" minOccurs="0"/>
        </xs:sequence>
	<xs:attribute name="Box" type="Z:Box" use="optional" default="SchBox"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
    
  <xs:complexType name="OhPromotionExpr">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:OhExpr">
        <xs:sequence>
          <xs:element ref="Z:Expr" minOccurs="0"/>
          <xs:element ref="Z:Name"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
     
     <!-- Type  -->
     
      <xs:complexType name="OhCircusClassType">
    <xs:complexContent>
      <xs:extension base="CIRCUS:CircusType">
        <xs:sequence>
          <xs:element ref="OHCIRCUS:OhCircusClassSignature">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>  
  
  <xs:complexType name="OhCircusMethodType">
    <xs:complexContent>
      <xs:extension base="CIRCUS:CircusType">
        <xs:sequence>
          <xs:element ref="OHCIRCUS:OhCircusMethodSignature">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>    
  
   <xs:complexType name="OhCircusClassSignature">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:OhCircusSignature">
        <xs:sequence>               
          <xs:element ref="OHCIRCUS:OhCircusClassRefList">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
         </xs:sequence>
     </xs:extension>            
   </xs:complexContent>
 </xs:complexType>    
    
  
  <!-- Revisit the signature of the method -->
  
  <xs:complexType name="OhCircusMethodSignature">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:OhCircusSignature">
         <xs:sequence>              
           <xs:element ref="OHCIRCUS:OhCircusMethodList">
              <xs:annotation>
              	<xs:appinfo>
                  <jaxb:property generateElementProperty="true"/>
                </xs:appinfo>
              </xs:annotation>
            </xs:element>
          </xs:sequence>  
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
     
   <xs:complexType name="MethodList">
    <xs:complexContent>
      <xs:extension base="Z:Term"/>
    </xs:complexContent>
  </xs:complexType>
     
     <xs:complexType name="OhCircusMethodList">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:MethodList">
        <xs:sequence>
          <xs:element ref="OHCIRCUS:OhCircusMethod" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
     
     
     <xs:complexType name="OhCircusClassSignatureList">
    <xs:complexContent>
      <xs:extension base="CIRCUS:SignatureList">
        <xs:sequence>
          <xs:element ref="OHCIRCUS:OhCircusClassSignature" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
              <xs:appinfo>
                <jaxb:property generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
             </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="OhCircusMethodSignatureList">
    <xs:complexContent>
      <xs:extension base="CIRCUS:SignatureList">
        <xs:sequence>
          <xs:element ref="OHCIRCUS:OhCircusMethodSignature" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
              <xs:appinfo>
                <jaxb:property generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
           </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>       
  
  
  <xs:complexType name="OhCircusClassRef">
    <xs:complexContent>
      <xs:extension base="Z:Term">
        <xs:sequence>
          <xs:element ref="Z:ZName">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property name="Name"
                  generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element ref="Z:Type2" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property name="Type"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element ref="Z:NewOldPair" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
     
 <xs:complexType name="OhCircusClassRefList">
    <xs:complexContent>
      <xs:extension base="Z:Term">
        <xs:sequence>
          <xs:element ref="OHCIRCUS:OhCircusClassRef" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
 
  
 
  
  <xs:complexType name="OhCircusClassRefType">
    <xs:complexContent>
      <xs:extension base="OHCIRCUS:OhCircusClassType">
        <xs:sequence>
          <xs:element ref="OHCIRCUS:OhCircusClassRef">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property name="ThisClass"
                  generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element ref="OHCIRCUS:OhCircusClassRefList">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property name="SuperClass"
                  generateElementProperty="true"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element ref="Z:Name" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:appinfo>
                <jaxb:property name="Primary"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType> 
    
  <xs:complexType name="QualifiedClassDecl">
    <xs:complexContent>
      <xs:extension base="Z:Decl">
        <xs:sequence>
          <xs:element ref="Z:Name"/>
        </xs:sequence>
	<!--<xs:attribute name="ClassQualifier" type="OHCIRCUS:ClassQualifier" use="optional" default="Private"/>   -->
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--
  <xs:simpleType name="ClassQualifier">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Public"/>
      <xs:enumeration value="Protected"/>
      <xs:enumeration value="Private"/>
      <xs:enumeration value="Logical"/>
    </xs:restriction>
  </xs:simpleType>  
  -->          
</xs:schema>
