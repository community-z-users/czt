<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
  <properties> 
    <title>CZT User Manual</title> 
  </properties>
  <body> 
    <section name="About CZT">
      <p>
        The Community Z Tools (CZT) project is an open-source Java
        framework for building formal methods tools for Z and Z
        dialects.  It includes a set of tools for parsing,
        typechecking, transforming, animating and printing ISO
        Standard Z conforming specifications in LaTeX, Unicode and XML
        formats.
      </p>
      <p>
        The latest version includes parser, typechecker and printer
        for Z and Object Z, an animator for Z (supports only a
        restricted subset of Z) as well as jEdit plugins that give
        WYSIWYG editing of Z specifications and easy access to
        the CZT tools.
      </p>
      <p>
        Releases can be downloaded from
        <a
          href="http://sourceforge.net/project/showfiles.php?group_id=86250">
          Sourceforge</a>.
        There are three bundles on the sourceforge web-site.  The
        bundle "corejava" is deprecated and contains only old releases
        of corejava.  The bundle "czt" is a collection of all the
        tools that we consider mature enough to be distributed, and
        also contains "corejava".  The bundle "typechecker" contains a
        stand-alone typechecker for Z and Object Z specifications.
      </p>
    </section>
    <section name="Source Releases">
      <p>
        Currently, there are two alternative ways to compile CZT.  The
        recommended way is to use maven.  It doesn't require to
        install so many things in advance since maven downloads the
        dependencies automatically.  Using ant is the more traditional
        way but it requires to install all the 3rd party software in
        advance.  It also requires to set the paths to the installed
        software in the
        <code>&lt;CZT_HOME&gt;/czt.properties</code> file
        appropriately, which is cumbersome.
      </p>

      <p>
        This manual describes how maven is used to compile and isntall
        CZT.  See the file
        <code>&lt;CZT_HOME&gt;/INSTALL.txt</code>
        for more information about how ant can be used to build CZT.
      </p>

      <section name="Compiling using maven" id="installation">
        <p>
          You need at least the following:
        </p>
        <ul>
          <li>
            <a href="http://java.sun.com/javase/downloads/">
              J2SE Development Kit >= 5.0
            </a>
          </li>
          <li>
            <a href="http://maven.apache.org/">
              Maven version >= 2.0.4
            </a>
          </li>
        </ul>
        <p>
          to build CZT.  If you don't have these installed on your
          system, you should download and install them before you can
          start.
        </p>
        <p>
          The required jEdit plugins, namely
          <a href="http://plugins.jedit.org/plugins/?Console">Console</a>,
          <a href="http://plugins.jedit.org/plugins/?ErrorList">ErrorList</a>,
          and
          <a href="http://plugins.jedit.org/plugins/?SideKick">SideKick</a>,
          can be installed using jEdit's plugin manager (select
          Plugins/Plugin Manager from the jEdit menu).  After the
          installation, the jar files of the plugins can be found in
          the jars directory of the jEdit settings or home directory.
          This is usually
          <code>&lt;JEDIT_INSTALL_DIR&gt;/jars</code> or
          <code>&lt;USER_HOME&gt;/.jedit/jars</code>.
          To find out the location for you setup, select
          Utilities/Troubleshooting/Activity Log from the jEdit menu.
          The displayed log file should tell you the values for your
          jEdit settings and home directory.
        </p>
        <p>
          You also need to increase the Java heap size to at least
          256Mb, which is done by setting the
          <code>MAVEN_OPTS</code>
          environment variable to
          <code>-Xmx256m</code>.
          Then change into the
          <code>&lt;CZT_HOME&gt;</code>
          directory, and call
          <code>mvn install</code>.
          This compiles, tests, packages, and installs all the CZT
          tools into your local maven repository, ready to be used in
          your own projects.  Running the CZT tests takes quite a long
          time.  If you want to skip running the unit tests call
          <code>mvn -Dmaven.test.skip=true install</code>
          instead.
        </p>
      </section>
    </section>
    <section name="Sources from Subversion">
      <p>
        If you are really feeling adventurous, you can try to build
        CZT using the sources from Subversion.  See the
        <a href="http://sourceforge.net/svn/?group_id=86250">
          documentation about Subversion on sourceforge
        </a>
        for more information about how to access the CZT repository.
      </p>
      <p>
        Starting from 3 June 2005, the corejava AST classes are no
        no longer in the repository but must be generated
        using the code generator gnast, which is included in the
        Subversion repository.
      </p>
    </section>
    <section name="Running CZT as a command line tool">
      <p>
        If you have got the CZT sources, you should first follow the
        <a href="#installation">installation instructions</a>.
        This will create the jar files mentioned below.
      </p>
      <p>
        The jar file
        <code>&lt;CZT_HOME&gt;/bin/czt-dep.jar</code>
        can be executed and used as a command line tool by calling
        <code>java -jar czt-dep.jar</code> followed by arguments.
        Calling it without arguments prints its usage information.
        The command line tool can be used in two different ways.
      </p>
      <p>
        Firstly, it can be called with the file name as argument,
        preceded by optional flags.  This
        file is then parsed and typechecked and errors, if present,
        are reported.  By specifying an output file using the
        <code>-o</code> flag, a specification can be translated into
        a different mark-up.  The mark-up of a file (input or
        output) is determined by its file ending.  For example,
        to translate a file in LaTeX mark-up into Unicode, call
        <code>java -jar czt-dep.jar -o file.utf8 file.tex</code>.
        See the usage information to get a list of supported mark-ups
        and file endings.  There are other various flags that control
        the parsing behaviour; see the usage message to get more
        information about those.
      </p>
      <p>
        Secondly, the command line tool can be used to call other
        CZT tools like, for example, the Z animator zlive.  This is
        done by giving the name of the CZT tool as first argument
        followed by the arguments for the selected tool.
        For example, the animator is started using
        <code>java -jar czt-dep.jar zlive</code>.
        See the usage information for a  list of availabe tools.
      </p>
    </section>
    <section name="The CZT jEdit plugins">
      <section name="Installation">
        <p>
          If you have not already done so, install
          <a href="http://www.jedit.org">jEdit</a>
          and make sure it is using Java 5.  By clicking on
          "Macros / Properties / System Properties" you can check which
          Java version jEdit is using.  The
          property java.version should be set to something that starts
          with 1.5.  Also make sure to deinstall old CZT plugins, if
          necessary.
        </p>
        <p>
          In the following, it is assumed that
          <code>&lt;SETTINGS_DIR&gt;</code> is the
          jEdit settings directory.  This might be (a)
          the directory in which jEdit has been installed, or
          (b) the user specific settings directory.
          The location of this directory is system-specific (see
          jEdit the Customizing jEdit section in the User's Guide,
          or evaluate the BeanShell expression
          "jEdit.getSettingsDirectory()";
          select "Utilities / BeanShell / Evaluate BeanShell Expression").
          On a unix machine is usually
          <code>~/.jedit</code>
        </p>
        <p>
          CZT comes with three jEdit plugins:
        </p>
        <ul>
          <li>
            <em>ZCharMap</em> provides a palette for commonly used
            Z charcters and constructs.  They can be inserted in the
            current buffer and, depending on the selected mode, LaTeX
            or Unicode mark-up is used.
          </li>
          <li>
            <em>ZSideKick</em> provides parsing and typechecking
            functionality based on jEdit's SideKick plugin. The structure
            of a specification is displayed in a dockable window.
          </li>
          <li>
            <em>ZLivePlugin</em> provides a console interface to the
            Z animator zlive.
          </li>
        </ul>
        <p>
          Since the CZT plugins need to be installed manually
          (not using the plugin manager),
          we need to take care of the plugin's
          dependencies.  The ZSideKick plugin depends on the
          <a href="http://plugins.jedit.org/plugins/?Console">Console</a>,
          <a href="http://plugins.jedit.org/plugins/?ErrorList">ErrorList</a>,
          and
          <a href="http://plugins.jedit.org/plugins/?SideKick">SideKick</a>,
          plugin.
          Please install the required plugins from within
          jEdit's plugin manager before installing the CZT plugins.
        </p>
        <p>
          Copy the plugin's jar file(s) you want to have installed from
          <code>&lt;CZT_HOME&gt;/jedit/bin</code> into
          <code>&lt;SETTINGS_DIR&gt;/jars/</code>.
          The ZSideKick and ZLivePlugin plugin also need the file
          <code>&lt;CZT_HOME&gt;/bin/czt-dep.jar</code> next to it.
          That is, if you have copied ZSideKick.jar or
          ZLivePlugin.jar, you should also copy czt-dep.jar into
          <code>&lt;SETTINGS_DIR&gt;/jars/</code>.
        </p>
        <p>
          For the ZCharMap and ZSideKick plugins, new edit modes for
          Z need to be installed.  This is done by updating the file
          <code>&lt;SETTINGS_DIR&gt;/modes/catalog</code>.
          An example catalog file is given in
          <code>&lt;CZT_HOME&gt;/jedit/catalog</code>.
          If you want to edit specificatons in Unicode, you can also
          copy the Unicode syntax-colouring mode for Z from
          <code>&lt;CZT_HOME&gt;/jedit/zed.xml</code> into
          <code>&lt;SETTINGS_DIR&gt;/modes/</code>.
         </p>
      </section>
      <section name="Using the CZT jEdit plugins">
        <p>
          After you restart jEdit, you should now find an entry
          "Community Z Tools" in the plugin menu, which pops up the
          ZCharMap plugin.  It will show some "missing font" square
          boxes until you
          <a href="#font">install the CZT font</a>.  We like to
          "dock" this plugin at the top or bottom of the main jEdit
          window -- see the jEdit documentation how plugins can be
          docked etc.
        </p>
        <p>
          You can test the installation by opening the sample
          specification, which should parse and typecheck it.
          After a few seconds, it should say 
          "Z parsing complete, 0 errors" in the jEdit status bar.
          You might like to try inserting some syntax errors, to see
          how they are reported using the ErrorList plugin (Note: you
          must open the ErrorList plugin to see the errors, then you
          can click on an error to go the the cause of the problem in
          the Z specification).
        </p>
        <p>
          Try to insert new constructs by clicking
          the "Sect", "::=" and "Sch" buttons in the
          ZCharMap plugin.  These should insert a section header, then
          a free type definition, then a schema definition.
        </p>
        <p>
          The ZLivePlugin can be accessed via the Console dockable window.
          If properly installed, it should be possible to select ZLive
          from the drop-down menu for possible Console parsers.
        </p>
      </section>
    </section>
    <section name="Installing the CZT font" id="font">
      <p>
        We are not experts in installing fonts, so please check the
        documentation of your operating system how fonts are installed.  The
        following summarises our experiences with installing the font on
        Windows XP and Linux.
      </p>

      <section name="Installing the CZT font on Windows XP">
        <p>
          Go into Start/Control Panel, then into the "Fonts" program.
          (If you are using the new XP categories, you need to select
          "Appearance and Themes" first, then the "Fonts" link will appear
          in the left-hand sidebar).  Once you are in the "Fonts" program,
          use the "File/Install new font" menu entry, then browse to the
          fonts/ttf subdirectory  and add the "CZT Sans" font.
        </p>
      </section>

      <section name="Installing the CZT font on Linux">
        <p>
          Executing the following commands worked for me on gentoo
          (without having root privileges):
        </p>
        <source>
          cd fonts/ttf
          ttmkfdir > fonts.scale
          mkfontdir
          xset fp+ `pwd`
          xset fp rehash
        </source>

        <p>
          More information can be obtained from:
        </p>
        <ul>
          <li><a href="http://www.gnome.org/fonts">The Gnome Web-Site</a></li>
          <li><a href="http://www.linux.org/docs/ldp/howto/Font-HOWTO/">The Font HOWTO</a></li>
          <li><a href="http://linux.org.mt/article/ttfonts">The Malta Linux User Group</a></li>
        </ul>
      </section>

      <section name="Selecting the CZT font within jEdit">
        <p>
          After installing the font, we must tell jEdit to use that font
          in all its buffers.  To do this, go into the jEdit global settings
          panel (you can use the "Utilities / Global Options" menu to open
          this panel), then into the "Text Area" pane and set the "Text Font"
          to be CZT (clicking on the existing font name will open a requestor,
          then you can scroll down the left-hand column to select the "CZT"
          family). You might also like to enable the "Smooth Text" and
          "Fractional Font Metrics" on this "Text Area" pane, to turn on
          anti-aliasing of fonts.
        </p>

        <p>
          You need to restart jEdit to see the font in the CZT plugin as well,
          since the font in the CZT plugin cannot yet be set dynamically.  
          After you have done this, you should see all the Z characters
          in the CZT plugin (no little square boxes, which mean a missing
          symbol in the font).  
        </p>
      </section>
    </section>
  </body>
</document>
