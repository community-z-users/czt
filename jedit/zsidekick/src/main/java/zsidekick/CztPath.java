/*
 * CztPath.java
 *
 * Created on 21 November 2008, 11:14
 */
package zsidekick;

import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.Arrays;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author  leo
 */
public class CztPath extends javax.swing.JFrame
  {

  public CztPath()
  {
    this(CztPath.getDefaultPaths());    
  }
  
  /** Creates new form CztPath */
  public CztPath(List<String> paths)
  {    
    initComponents();
    // after init components, please
    initFields(paths);
    
    // remove CztPath as a JFrame latter - for now leave it invisible
    // and just use the msgDialog within it to show the path as we want.
    this.setVisible(false);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    msgDialog = new javax.swing.JDialog();
    pathPanel = new javax.swing.JPanel();
    pathLabel = new javax.swing.JLabel();
    upButton = new javax.swing.JButton();
    addButton = new javax.swing.JButton();
    addButton.setActionCommand("Add");
    addButton.setEnabled(false);
    fileDialogButton = new javax.swing.JButton();
    pathField = new javax.swing.JTextField();
    jScrollPane1 = new javax.swing.JScrollPane();

    pathList = new javax.swing.JList();
    downButton = new javax.swing.JButton();
    removeButton = new javax.swing.JButton();

    msgDialog.setTitle("Chossing CZT paths");
    msgDialog.setMinimumSize(new java.awt.Dimension(100, 100));
    msgDialog.setModal(true);
    msgDialog.setName("msgDialog"); // NOI18N

    pathPanel.setNextFocusableComponent(fileDialogButton);

    pathLabel.setText("List of CZT paths to be considered by the active Section Manager");

    upButton.setText("Move up");
    upButton.setToolTipText("Move directory up");
    upButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        upButtonActionPerformed(evt);
      }
    });

    addButton.setText("Add");
    addButton.setToolTipText("Add directory to list");
    addButton.setNextFocusableComponent(removeButton);
    addButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addButtonActionPerformed(evt);
      }
    });

    fileDialogButton.setText("File Dialog");
    fileDialogButton.setNextFocusableComponent(pathList);
    fileDialogButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        fileDialogButtonActionPerformed(evt);
      }
    });

    pathField.setToolTipText("Directory to add to list");
    pathField.setNextFocusableComponent(addButton);

    pathList.setToolTipText("List CZT path directories for the Section Manager");
    pathList.setNextFocusableComponent(pathField);
    jScrollPane1.setViewportView(pathList);

    downButton.setText("Move down");
    downButton.setToolTipText("Move directory down");
    downButton.setNextFocusableComponent(fileDialogButton);
    downButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        downButtonActionPerformed(evt);
      }
    });

    removeButton.setText("Remove");
    removeButton.setToolTipText("Remove directory from lists");
    removeButton.setNextFocusableComponent(upButton);
    removeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        removeButtonActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout pathPanelLayout = new javax.swing.GroupLayout(pathPanel);
    pathPanel.setLayout(pathPanelLayout);
    pathPanelLayout.setHorizontalGroup(
      pathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pathPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(pathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(pathPanelLayout.createSequentialGroup()
            .addGroup(pathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
              .addComponent(pathField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(pathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
              .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
              .addComponent(upButton, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
              .addComponent(downButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(fileDialogButton, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)))
          .addComponent(pathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap())
    );

    pathPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addButton, downButton, fileDialogButton, removeButton, upButton});

    pathPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, pathField});

    pathPanelLayout.setVerticalGroup(
      pathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(pathPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(pathLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(pathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(pathField)
          .addComponent(addButton))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(pathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addGroup(pathPanelLayout.createSequentialGroup()
            .addComponent(removeButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(upButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(downButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(fileDialogButton))
          .addComponent(jScrollPane1, 0, 0, Short.MAX_VALUE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pathPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addButton, downButton, fileDialogButton, removeButton, upButton});

    javax.swing.GroupLayout msgDialogLayout = new javax.swing.GroupLayout(msgDialog.getContentPane());
    msgDialog.getContentPane().setLayout(msgDialogLayout);
    msgDialogLayout.setHorizontalGroup(
      msgDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(msgDialogLayout.createSequentialGroup()
        .addComponent(pathPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
        .addContainerGap())
    );
    msgDialogLayout.setVerticalGroup(
      msgDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(pathPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
    );

    msgDialog.setBounds(pathPanel.getBounds());

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setResizable(false);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 384, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 181, Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
  //This method can be called only if there's a valid selection
  //so go ahead and remove whatever's selected.
  int index = pathList.getSelectedIndex();
  assert index >= 0 && index < pathListModel_.size();
  pathListModel_.remove(index);

  int size = pathListModel_.getSize();
  if (size == 0) 
  { //Nobody's left, disable removing.
    removeButton.setEnabled(false);
  } else 
  { 
    //Select an index.
    if (index == pathListModel_.getSize()) 
    {
      //removed item in last position
      index--;
    }
    pathList.setSelectedIndex(index);
    pathList.ensureIndexIsVisible(index);
  }
}//GEN-LAST:event_removeButtonActionPerformed

private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
  String path = pathField.getText();              
  if (!canAddToPathList(path))
  {
    Toolkit.getDefaultToolkit().beep();
    pathField.requestFocusInWindow();
    pathField.selectAll();
    return;
  }                    

  // update the path list model from selected index, or top if none selected
  updatePathListModel(path);

  //Reset the text field.
  pathField.requestFocusInWindow();
  pathField.setText("");
  //addButton.setEnabled(false);? no need.
}//GEN-LAST:event_addButtonActionPerformed

private void fileDialogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileDialogButtonActionPerformed
  int returnVal = fileChooser_.showOpenDialog(this);
  if (returnVal == JFileChooser.APPROVE_OPTION) 
  {
    File[] files = fileChooser_.getSelectedFiles();
    for(File file : files)
    {      
      addPathToList(file);
    }      
  } 
}//GEN-LAST:event_fileDialogButtonActionPerformed

private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
  updateIndexes(pathList.getSelectedIndices(), true);
}//GEN-LAST:event_upButtonActionPerformed

private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
  updateIndexes(pathList.getSelectedIndices(), false);
}//GEN-LAST:event_downButtonActionPerformed
  
  private JFileChooser fileChooser_;
  private DefaultListModel pathListModel_;  
  private ListSelection listSelectionListener_;
    
  private void initFields(List<String> paths)
  {
    javax.swing.JOptionPane.showMessageDialog(pathPanel, "Original CZT-paths = " + paths.toString().replace(',', '\n'));
    
    // setup the add button listener
    PathFieldListener pathListener_ = new PathFieldListener();    
    pathField.addActionListener(pathListener_);
    pathField.getDocument().addDocumentListener(pathListener_);       
    pathField.setText("");    
    addButton.setEnabled(!pathField.getText().isEmpty());
    //pathListener_.alreadyEnabled = false;
    
    
    // setup the list selection listener
    listSelectionListener_ = new ListSelection();
    pathList.addListSelectionListener(listSelectionListener_);
    
    // create a default list model to use within pathList
    // populate the list model with the right known paths    
    pathListModel_ = new DefaultListModel();                
    pathListModel_.addListDataListener(new PathListModelListener());    
    for (String path : paths)
    {
      addPathToList(path);
    }
    pathList.setModel(pathListModel_);
    if (pathListModel_.size() > 0)
    {
      pathList.setSelectedIndex(0);
      pathList.ensureIndexIsVisible(0);      
      removeButton.setEnabled(true);      
    }
    
    // setup the file chooser
    fileChooser_ = new JFileChooser("./");
    fileChooser_.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    fileChooser_.setMultiSelectionEnabled(true);
  }
   
  private final String SECTION_MANAGER_PATH_SEPARATOR = File.pathSeparator + "\n";
  
  public String buildPathList()
  {
    Object[] paths = pathListModel_.toArray();
    int length = paths.length;
    // if there is at least one, get it; otherwise, it is empty
    StringBuilder pathList = new StringBuilder("");
    pathList.append(length > 0 ? padPath(paths[0].toString().trim()) : "");
    // from the second onwards, append the ";" and append the next path
    for(int i = 1; i < paths.length; i++)  
    {
      pathList.append(SECTION_MANAGER_PATH_SEPARATOR);
      pathList.append(padPath(paths[i].toString().trim()));
    }
    return pathList.toString();
  }
 
  public void showDialog()
  {
     msgDialog.setVisible(true);
     msgDialog.setBounds(200, 200, 700, 400);
  }
  private boolean requiresPathPadding(String path)
  {
    assert path != null;
    //return path.indexOf(" ") != -1;
    return true;
  }
  
  private String padPath(String path)
  {
    return requiresPathPadding(path) ? "\"" + path + "\"" : path;
  }
  
  private int[] shiftIndexes(int[] indexes, int offset)
  {
    int[] result = new int[indexes.length];
    for(int i = 0; i < indexes.length; i++)
    {
      result[i] = indexes[i] - offset;
    }
    return result;
  }
  private void updateIndexes(int[] indexes, boolean goingUp)
  {
    int size = pathListModel_.size();
    // for all indexes selected, update then accordingly
    for(int index : indexes)
    {
      updateIndex(index, size, goingUp);
    }
    //Select the new item and make it visible.
    pathList.setSelectedIndices(shiftIndexes(indexes, goingUp ? 1 : -1));
    pathList.ensureIndexIsVisible(indexes[0]);
  }
  
  private void updateIndex(int index, int size, boolean goingUp)
  { 
    // calculate the right offsetting depending on operation:
    // goingUp offsets next neighbour positively [decreases its index]; 
    ///goingDown offsets next neighbour negatively [increases its index];    
    int newidx = index - (goingUp ? 1 : -1); //int offset = (goingUp ? 1 : -1); 
    
    // offset index must be within size - i.e., enabled for up/downn is safe
    assert newidx >= 0 && newidx < size;    

    // get values at each index
    Object vindex  = pathListModel_.get(index);
    Object vnewidx = pathListModel_.get(newidx);
    
    // update value at each index
    pathListModel_.set(index, vnewidx);
    pathListModel_.set(newidx, vindex);
  }
  
  private void addPathToList(File file)
  {
    String path = file.getAbsolutePath();
    if (file.isDirectory() && canAddToPathList(path))
    {
      updatePathListModel(path);
    }
    else
    {
      Toolkit.getDefaultToolkit().beep();
    }
  }
  
  private void addPathToList(String path)
  {
    if (canAddToPathList(path))
    {
      updatePathListModel(path);
    }
    else
    {
      Toolkit.getDefaultToolkit().beep();
    }
  }
  
  private void updatePathListModel(String path)
  {    
    // update the path list model from selected index, or top if none selected
    int index = pathList.getSelectedIndex();
    if (index == -1)
    { 
      //no selection, so insert at beginning
      index = 0;
    } else 
    {           
      //add after the selected item
      index++;
    }

    // add element at the right place
    assert canAddToPathList(path) && index != -1;
    pathListModel_.add(index, path);
    
    //Select the new item and make it visible.
    pathList.setSelectedIndex(index);
    pathList.ensureIndexIsVisible(index);
  }
  
  private static List<String> getDefaultPaths()
  {
    // retrieve paths from section manager, for now just return something funny
    return Arrays.asList("zero", "one", "two", "three", "four", "five", "six");
  }
  
  private boolean isValidDirectory(String path)
  {
    //always accept non empty paths, at least.
    return path != null && !path.isEmpty();
  }
  
  //This method tests for string equality. You could certainly
  //get more sophisticated about the algorithm.  For example,
  //you might want to ignore white space and capitalization.
  private boolean alreadyInPathList(String path) 
  {
    return pathListModel_.contains(path);
  }
  
  private boolean canAddToPathList(String path)
  {
    return isValidDirectory(path) && !alreadyInPathList(path);
  }

  class ListSelection implements ListSelectionListener
  { 
    public void valueChanged(ListSelectionEvent e) 
    {      
      if (!e.getValueIsAdjusting()) 
      {
        int index = pathList.getSelectedIndex();        
        int maxidx = pathList.getMaxSelectionIndex();
        int minidx = pathList.getMinSelectionIndex();        
//        JOptionPane.showMessageDialog(pathPanel, 
//            "SI = " + index + "; MnI = " + minidx + "; MxI = " + maxidx +
//            "\n Size = " + pathListModel_.size() + 
//            "\n ListSelectionEvent: FI=" + e.getFirstIndex() + 
//            "; LI=" + e.getLastIndex());        
        if (index == -1) 
        {
          //No selection, disable buttons
          removeButton.setEnabled(false);
          upButton.setEnabled(false);
          downButton.setEnabled(false);          
        } 
        else 
        {
          //Selection, enable the remove button.
          removeButton.setEnabled(true);
          upButton.setEnabled(minidx > 0);
          downButton.setEnabled(maxidx < pathListModel_.size()-1);
        }
      }
    }    
  }
    
  class PathFieldListener implements ActionListener, DocumentListener 
  {
    private boolean alreadyEnabled = false;    
    
    //Required by ActionListener.
    public void actionPerformed(ActionEvent e) 
    {
      addButtonActionPerformed(e);
    }

    //Required by DocumentListener.
    public void insertUpdate(DocumentEvent e) 
    {
      enableButton();
    }

    //Required by DocumentListener.
    public void removeUpdate(DocumentEvent e) 
    {
      handleEmptyTextField(e);
    }

    //Required by DocumentListener.
    public void changedUpdate(DocumentEvent e) 
    {
      if (!handleEmptyTextField(e)) 
      {
        enableButton();
      }
    }

    private void enableButton() 
    {
      if (!alreadyEnabled) 
      {
        addButton.setEnabled(true);
      }
    }

    private boolean handleEmptyTextField(DocumentEvent e) 
    {
      if (e.getDocument().getLength() <= 0) 
      {
        addButton.setEnabled(false);
        alreadyEnabled = false;
        return true;
      }
      return false;
    }
  }    
  
  class PathListModelListener implements ListDataListener
  {
    public void intervalAdded(ListDataEvent e)
    {
      //notifyChange(e.getIndex0(), e.getIndex1());
    }

    public void intervalRemoved(ListDataEvent e)
    {
      //notifyChange(e.getIndex0(), e.getIndex1());
    }

    public void contentsChanged(ListDataEvent e)
    {
      //notifyChange(e.getIndex0(), e.getIndex1());
    }
  }
  
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CztPath().setVisible(true);
            }
        });
    }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton addButton;
  private javax.swing.JButton downButton;
  private javax.swing.JButton fileDialogButton;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JDialog msgDialog;
  private javax.swing.JTextField pathField;
  private javax.swing.JLabel pathLabel;
  private javax.swing.JList pathList;
  private javax.swing.JPanel pathPanel;
  private javax.swing.JButton removeButton;
  private javax.swing.JButton upButton;
  // End of variables declaration//GEN-END:variables

}
