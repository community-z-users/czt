Usage:
  java -jar czt.jar [-d <dialect>] [-o <filename>] [-s] <filename>
  java -jar czt.jar <command> [<commandArg1> .. <commandArgN>]
Flags:
  -d   specify the dialect to be used
  -o   specify output file (mark-up is determined by file ending)
  -s   syntax check only
  -p   makes it zpatt dialect and set prove as true?
  -dc  domain check the specification
  -id  if an output in LaTeX or Unicode mark-up is specified,
       prints the ids for names as part of the name.
       Note that this is for debugging purposes.  The output won't
       typecheck any more.
  -cp <l> specify the value for czt.path as a semicolon-separated list
        of directories (e.g., -cp=./tests:/user/local/pkg/myfiles).
        The list is mandatory and must not be empty.
Dialects:
  z       Standard Z (default)
  oz      Object Z
  circus  Circus language
  zeves   ZEves proof languages
  zpatt   Z with transformation rules
  ozpatt  Object Z with transformation rules
File ending bindings:
  tex, zed --> LaTeX mark-up
  xml, zml --> ZML
  zev      --> ZEves
  *8       --> Unicode (encoding UTF-8)
  *16      --> Unicode (encoding UTF-16)
Commands:
  ozedtypecheck (bound to net.sourceforge.czt.typecheck.oz.TypeCheckUtils)
  zlive (bound to net.sourceforge.czt.animation.eval.TextUI)
  zedtypecheck (bound to net.sourceforge.czt.typecheck.z.TypeCheckUtils)
  circustypecheck (bound to net.sourceforge.czt.typecheck.circus.TypeCheckUtils)
  zevestypecheck (bound to net.sourceforge.czt.typecheck.zeves.TypeCheckUtils)
  zeddomaincheck (bound to net.sourceforge.czt.dc.z.DomainCheckUtils)
  zedvcgfsb (bound to net.sourceforge.czt.vcg.z.feasibility.FeasibilityUtils)
  zedvcgdc (bound to net.sourceforge.czt.vcg.z.dc.DomainCheckUtils)

NOTE: -cp within commands overides the one here.

===

usage: zedtypecheck [-sdt] filename ...
flags: -s     syntax check only
       -d     allow use before declaration
       -n     force declarations before use
       -r     allow recursive types
       -i     use name ids
       -p     print the AST
       -t     print global type declarations
       -b     print benchmarking times
       -h     hide warnings (cannot hide when raising!)
       -o     show warnings
       -w     raise warnings as errors
      -cp <l> specify the value for czt.path as
              a semicolon-separated list of dirs
              (e.g., -cp ./tests;/user/myfiles).
              The list is mandatory and must not be empty.


Default flags are: "-n"

===
usage: oztypecheck [-sdt] filename ...
flags: -s     syntax check only
       -d     allow use before declaration
       -n     force declarations before use
       -r     allow recursive types
       -i     use name ids
       -p     print the AST
       -t     print global type declarations
       -b     print benchmarking times
       -h     hide warnings (cannot hide when raising!)
       -o     show warnings
       -w     raise warnings as errors
      -cp <l> specify the value for czt.path as
              a semicolon-separated list of dirs
              (e.g., -cp ./tests;/user/myfiles).
              The list is mandatory and must not be empty.


Default flags are: "-n r"


===

usage: circustypecheck [-sdt] filename ...
flags: -s     syntax check only
       -d     allow use before declaration
       -n     force declarations before use
       -r     allow recursive types
       -i     use name ids
       -p     print the AST
       -t     print global type declarations
       -b     print benchmarking times
       -h     hide warnings (cannot hide when raising!)
       -o     show warnings
       -w     raise warnings as errors
      -cp <l> specify the value for czt.path as
              a semicolon-separated list of dirs
              (e.g., -cp ./tests;/user/myfiles).
              The list is mandatory and must not be empty.


Default flags are: "-n t b"

===

usage: zevestypecheck [-sdt] filename ...
flags: -s     syntax check only
       -d     allow use before declaration
       -n     force declarations before use
       -r     allow recursive types
       -i     use name ids
       -p     print the AST
       -t     print global type declarations
       -b     print benchmarking times
       -h     hide warnings (cannot hide when raising!)
       -o     show warnings
       -w     raise warnings as errors
      -cp <l> specify the value for czt.path as
              a semicolon-separated list of dirs
              (e.g., -cp ./tests;/user/myfiles).
              The list is mandatory and must not be empty.


Default flags are: "-n t bh"

===

usage: zedvcgdc [-bptrw] filename1 ... filenameN
flags: -b     print execution benchmarks.
       -p     process parent sections.
       -t     add trivial VCs.
       -r     apply term transformers.
       -s     show warnings (cannot show when hiding!)
       -h     hide warnings (cannot hide when raising!)
       -w     raise type warnings as errors.
       -y     check def table consistency.
       -mX    prefered markup to print results
              where X=LATEX, UNICODE, XML
       -eX    prefered czt extension to use
              where X=Z, OZ, CIRCUS, ZEVES, etc.
       -i <l> list of parents to ignore.
              a path-separated list of section names
              (e.g., -cp ./tests:/user/myfiles).
              The list is mandatory and must not be empty.
      -cp <l> specify the value for czt.path as
              a semicolon-separated list of dirs
              (e.g., -cp ./tests:/user/myfiles).
              The list is mandatory and must not be empty.
       -a     use infix applies to definition.


Default flags are: "-b -p -t -r -y -ez-mLATEX-a"

===
ZLive version 1.6-SNAPSHOT, (C) 2006, Mark Utting
Options:
  --help         (print this help message)
  --logrules     (print rule-unfolding debug messages into zlive.log)
  --logeval      (print evaluation debug messages into zlive.log)
  --load SPEC    (load the Z specification SPEC)
  --test SECTION (evaluate all conjectures in SECTION)
If there are no --test arguments, ZLive goes into interactive mode,
using the last section of the last SPEC loaded.


===

usage: zedvcgfsb [-bptrw] filename1 ... filenameN
flags: -b     print execution benchmarks.
       -p     process parent sections.
       -t     add trivial VCs.
       -r     apply term transformers.
       -s     show warnings (cannot show when hiding!)
       -h     hide warnings (cannot hide when raising!)
       -w     raise type warnings as errors.
       -y     check def table consistency.
       -mX    prefered markup to print results
              where X=LATEX, UNICODE, XML
       -eX    prefered czt extension to use
              where X=Z, OZ, CIRCUS, ZEVES, etc.
       -i <l> list of parents to ignore.
              a path-separated list of section names
              (e.g., -cp ./tests:/user/myfiles).
              The list is mandatory and must not be empty.
      -cp <l> specify the value for czt.path as
              a semicolon-separated list of dirs
              (e.g., -cp ./tests:/user/myfiles).
              The list is mandatory and must not be empty.
       -g     add non-empty given set VC.
       -z     create Z schemas for precondition VC.



Exception in thread "main" java.lang.NoClassDefFoundError: net/sourceforge/czt/z/ast/ZStateInfo
	at net.sourceforge.czt.vcg.z.feasibility.FeasibilityVCCollector.<clinit>(FeasibilityVCCollector.java:106)
	at net.sourceforge.czt.vcg.z.feasibility.FeasibilityVCG.<init>(FeasibilityVCG.java:67)
	at net.sourceforge.czt.vcg.z.feasibility.FeasibilityVCG.<init>(FeasibilityVCG.java:60)
	at net.sourceforge.czt.vcg.z.feasibility.FeasibilityUtils.createVCG(FeasibilityUtils.java:56)
	at net.sourceforge.czt.vcg.z.VCGUtils.getVCG(VCGUtils.java:91)
	at net.sourceforge.czt.vcg.z.VCGUtils.printToolDefaultFlagsUsage(VCGUtils.java:187)
	at net.sourceforge.czt.vcg.z.feasibility.FeasibilityUtils.printToolDefaultFlagsUsage(FeasibilityUtils.java:93)
	at net.sourceforge.czt.vcg.z.VCGUtils.printUsage(VCGUtils.java:225)
	at net.sourceforge.czt.vcg.z.VCGUtils.run(VCGUtils.java:759)
	at net.sourceforge.czt.vcg.z.feasibility.FeasibilityUtils.main(FeasibilityUtils.java:144)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at net.sourceforge.czt.ui.Main.command(Main.java:485)
	at net.sourceforge.czt.ui.Main.parseArgs(Main.java:141)
	at net.sourceforge.czt.ui.Main.run(Main.java:103)
	at net.sourceforge.czt.ui.Main.main(Main.java:94)
Caused by: java.lang.ClassNotFoundException: net.sourceforge.czt.z.ast.ZStateInfo
	at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:423)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:356)
!!!