<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:Z="http://czt.sourceforge.net/zml" xmlns:P="http://czt.sourceforge.net/zpatt" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:gnast="http://czt.sourceforge.net/gnast" targetNamespace="http://czt.sourceforge.net/zpatt" jaxb:version="1.0" elementFormDefault="qualified" attributeFormDefault="unqualified" version="1.0">
<xs:annotation>
<xs:documentation>
      This XML schema defines Z patterns for the XML markup for formal
      specifications written in the ISO Standard Z notation.
      $Id$
      
      Copyright 2003 Mark Utting
      This file is part of the Community Z Tools (CZT) project.
      
      The CZT project contains free software; you can
      redistribute it and/or modify it under the terms
      of the GNU General Public License as published by
      the Free Software Foundation; either version 2 of
      the License, or (at your option) any later version.
      
      The CZT project is distributed in the hope that it
      will be useful, but WITHOUT ANY WARRANTY; without
      even the implied warranty of MERCHANTABILITY or
      FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU General Public License for more details.
      
      You should have received a copy of the GNU General
      Public License along with CZT; if not, write to the
      Free Software Foundation, Inc., 59 Temple Place,
      Suite 330, Boston, MA  02111-1307  USA
    </xs:documentation>
<xs:appinfo>
<jaxb:schemaBindings>
<jaxb:package name="net.sourceforge.czt.zpatt.jaxb.gen">
<jaxb:javadoc>
            &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
            &lt;html&gt;
            &lt;body&gt;
            &lt;p&gt;Classes generated by Jaxb.&lt;/p&gt;
            &lt;/body&gt;
            &lt;/html&gt;
          </jaxb:javadoc>
</jaxb:package>
</jaxb:schemaBindings>
<gnast:schemaBindings name="Z Pattern">
<gnast:package name="net.sourceforge.czt.zpatt">
<gnast:package id="ast" name="ast" template="AstInterface.vm">
<gnast:generate id="factory" class="ZpattFactory" template="CoreFactory.vm"/>
</gnast:package>
<gnast:package id="impl" name="impl" template="AstClass.vm">
<gnast:generate id="factoryImpl" class="ZpattFactoryImpl" template="CoreFactoryImpl.vm"/>
</gnast:package>
<gnast:package id="visitor" name="visitor" template="AstVisitorInterface.vm">
<gnast:generate id="AstVisitor" class="ZpattVisitor" template="AstVisitor.vm"/>
</gnast:package>
<gnast:package id="jaxb" name="jaxb">
<gnast:generate id="AstToJaxb" class="AstToJaxb" template="AstToJaxb.vm"/>
<gnast:generate id="JaxbToAst" class="JaxbToAst" template="JaxbToAst.vm"/>
</gnast:package>
<gnast:package id="dom" name="dom">
<gnast:generate id="AstToDom" class="AstToDom" template="AstToDom.vm"/>
</gnast:package>
</gnast:package>
</gnast:schemaBindings>
</xs:appinfo>
</xs:annotation>
<xs:import namespace="http://czt.sourceforge.net/zml" schemaLocation="Z.xsd"/>
<xs:element name="TransformList" type="P:TransformList">
<xs:annotation>
<xs:documentation>
        A list of transformation rules.
	Each rule says how one Z term (for example an expression) can be
        transformed into another term.  Usually the intention is that
	the two terms are equivalent, but a TransformList could also be
	used to store rules that weaken predicates etc.  The order of
	rules in this list can be significant, because if two rules match
	the same term, transformation engines should try to give priority to 
	rules nearer the start of the list.
      </xs:documentation>
<xs:appinfo>
<jaxb:class name="TransformListElement"/>
</xs:appinfo>
</xs:annotation>
</xs:element>
<xs:element name="Transform" type="P:Transform" abstract="true">
<xs:annotation>
<xs:documentation>
        This is a abstract superclass of all the various kinds of
	transformations that are possible.
	Each transformation has a left-hand-side (LHS) and a RHS. 
	These terms can contain jokers (JokerExpr/JokerPred).
	Usually, the jokers in RHS should be a subset of those in the LHS,
	otherwise the transformation may not be well defined.
      </xs:documentation>
<xs:appinfo>
<jaxb:class name="TransformElement"/>
</xs:appinfo>
</xs:annotation>
</xs:element>
<xs:element name="ExprTransform" type="P:ExprTransform" substitutionGroup="P:Transform">
<xs:annotation>
<xs:documentation>
        Transforms one Expr into another.
      </xs:documentation>
<xs:appinfo>
<jaxb:class name="ExprTransformElement"/>
</xs:appinfo>
</xs:annotation>
</xs:element>
<xs:element name="PredTransform" type="P:PredTransform" substitutionGroup="P:Transform">
<xs:annotation>
<xs:documentation>
        Transforms one Expr into another.
      </xs:documentation>
<xs:appinfo>
<jaxb:class name="PredTransformElement"/>
</xs:appinfo>
</xs:annotation>
</xs:element>
<xs:element name="JokerExpr" type="P:JokerExpr" substitutionGroup="Z:Expr">
<xs:annotation>
<xs:appinfo>
<jaxb:class name="JokerExprElement"/>
</xs:appinfo>
</xs:annotation>
</xs:element>
<xs:element name="JokerPred" type="P:JokerPred" substitutionGroup="Z:Pred">
<xs:annotation>
<xs:appinfo>
<jaxb:class name="JokerPredElement"/>
</xs:appinfo>
</xs:annotation>
</xs:element>
<xs:complexType name="TransformList">
<xs:sequence>
<xs:element ref="P:Transform" minOccurs="0" maxOccurs="unbounded"/>
</xs:sequence>
</xs:complexType>
<xs:complexType name="Transform"/>
<xs:complexType name="ExprTransform">
<xs:complexContent>
<xs:extension base="P:Transform">
<xs:sequence>
<xs:element ref="Z:Expr">
<xs:annotation>
<xs:appinfo>
<jaxb:property name="LeftExpr"/>
</xs:appinfo>
</xs:annotation>
</xs:element>
<xs:element ref="Z:Expr">
<xs:annotation>
<xs:appinfo>
<jaxb:property name="RightExpr"/>
</xs:appinfo>
</xs:annotation>
</xs:element>
</xs:sequence>
</xs:extension>
</xs:complexContent>
</xs:complexType>
<xs:complexType name="PredTransform">
<xs:complexContent>
<xs:extension base="P:Transform">
<xs:sequence>
<xs:element ref="Z:Pred">
<xs:annotation>
<xs:appinfo>
<jaxb:property name="LeftPred"/>
</xs:appinfo>
</xs:annotation>
</xs:element>
<xs:element ref="Z:Expr">
<xs:annotation>
<xs:appinfo>
<jaxb:property name="RightPred"/>
</xs:appinfo>
</xs:annotation>
</xs:element>
</xs:sequence>
</xs:extension>
</xs:complexContent>
</xs:complexType>
<xs:complexType name="JokerExpr">
<xs:complexContent>
<xs:extension base="Z:Expr">
<xs:attribute name="Name" type="xs:string" use="optional"/>
</xs:extension>
</xs:complexContent>
</xs:complexType>
<xs:complexType name="JokerPred">
<xs:complexContent>
<xs:extension base="Z:Pred">
<xs:attribute name="Name" type="xs:string" use="optional"/>
</xs:extension>
</xs:complexContent>
</xs:complexType>
</xs:schema>
