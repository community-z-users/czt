<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:jaxb="http://java.sun.com/xml/ns/jaxb">

<xsl:output method="xml"
  encoding="UTF-8"
  indent="yes"/>
<xsl:strip-space elements="*"/>





<xsl:template match="/xs:schema">
  <xsl:copy>
    <xsl:attribute name="jaxb:version">1.0</xsl:attribute>
    <xsl:apply-templates select="@*"/>
    <xs:annotation>
      <xsl:apply-templates select="xs:annotation/*"/>
      <xs:appinfo>
        <xsl:apply-templates select="xs:annotation/xs:appinfo/*"/>
        <jaxb:schemaBindings>
          <jaxb:package name="net.sourceforge.czt.core.jaxb.gen">
            <jaxb:javadoc><![CDATA[
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<head>
<title>Classes generated by Jaxb.</title>
</head>
<body bgcolor="white">

  <p>Classes generated by Jaxb.</p>

</body>
</html>]]>
</jaxb:javadoc>
          </jaxb:package>
        </jaxb:schemaBindings>
        <jaxb:globalBindings>
          <xsl:attribute name="bindingStyle">modelGroupBinding</xsl:attribute>
          <xsl:attribute name="choiceContentProperty">true</xsl:attribute>
          <jaxb:javaType name="java.lang.Integer" xmlType="xs:positiveInteger"
            printMethod="net.sourceforge.czt.core.jaxb.CztDatatypeConverter.printInteger"
            parseMethod="net.sourceforge.czt.core.jaxb.CztDatatypeConverter.parseInteger"/>
          <jaxb:javaType name="java.lang.Integer" xmlType="xs:nonNegativeInteger"
            printMethod="net.sourceforge.czt.core.jaxb.CztDatatypeConverter.printInteger"
            parseMethod="net.sourceforge.czt.core.jaxb.CztDatatypeConverter.parseInteger"/>
          <jaxb:javaType name="java.lang.Boolean" xmlType="xs:boolean"
            printMethod="net.sourceforge.czt.core.jaxb.CztDatatypeConverter.printBoolean"
            parseMethod="net.sourceforge.czt.core.jaxb.CztDatatypeConverter.parseBoolean"/>
        </jaxb:globalBindings>
      </xs:appinfo>
    </xs:annotation>
    <xsl:apply-templates select="node()"/>
  </xsl:copy>
</xsl:template>





<xsl:template match="xs:schema/xs:element[@name=substring-after(@type, ':') and
                     not(xs:annotation/xs:appinfo/jaxb:class)]">
  <xsl:copy>
    <xsl:apply-templates select="@*"/>
    <xs:annotation>
      <xsl:apply-templates select="xs:annotation/*[not(self::xs:appinfo)]"/>
      <xs:appinfo>
        <xsl:apply-templates select="xs:annotation/xs:appinfo/*"/>
        <jaxb:class>
          <xsl:attribute name="name"><xsl:value-of select="@name"/>Element</xsl:attribute>
        </jaxb:class>
      </xs:appinfo>
    </xs:annotation>
    <xsl:apply-templates select="*[not(self::xs:annotation)]"/>
  </xsl:copy>
</xsl:template>






<xsl:template match="/ | @* | node()">
  <xsl:copy>
    <xsl:apply-templates select="@*"/>
    <xsl:apply-templates select="node()"/>
  </xsl:copy>
</xsl:template>


</xsl:stylesheet>
