InStroke = The stroke "?".
OutStroke = The stroke "!".
NextStroke = The stroke "'".
PowerExpr = A powerset expression (C.6.20).
SetExpr = A set extension expression (C.6.31).
TupleExpr = A tuple extension expression (C.6.36).
ProdExpr = A Cartesian product expression (C.6.19).
NegExpr = A schema negation expression (C.6.12).
PreExpr = A schema precondition expression (C.6.18).
AndExpr = A schema conjunction expression (C.6.11).
OrExpr = A schema disjunction expression (C.6.10).
ImpliesExpr = A schema implication expression (C.6.9).
IffExpr = A schema equivalence expression (C.6.8).
CompExpr = A schema composition expression (C.6.14).
PipeExpr = A schema piping expression (C.6.15).
ProjExpr = A schema projection expression (C.6.17).
ForallExpr = A schema univeral quantification expression (C.6.2).
LambdaExpr = A function construction expression (C.6.5).
MuExpr = A (characteristic) definite description expression (C.6.6, C.6.37).
LetExpr = A substitution expression (C.6.7).  Note that the SchText should contain x==Expr only, and no predicate.
SetCompExpr = A (characteristic) set comprehension expression (C.6.32, C.6.33).
OrPred = A disjunction (C.5.9).
ImpliesPred = An implication (C.5.8).
IffPred = An equivalence (C.5.7).
ForallPred = An universal quantification (C.5.2).
ForallPred.Pred = This is the predicate part of this quantifier.
ExistsPred = An existential quantification (C.5.3).
Exists1Pred = An unique existential quantification (C.5.4).
FalsePred = Falsity (C.5.15).
TruePred = Truth (C.5.14).
ParenAnn = This means unnecessary parentheses surrounded the annotated element
TermA = An abstract annotated Z construct.
Sect = An abstract section.
ZSect = A concrete section (C.3).  Note that it may contain unparsed paragraphs.
UnparsedZSect = A completely unparsed section.  It is used for representing possibly erroneous specifications.  It may become one or more sections if it can be parsed.
NarrSect = Narrative before or after sections.
Parent = 
Para = An abstract paragraph (C.4).
GivenPara = A given types paragraph (C.4.2).
AxPara = A (generic) axiomatic paragraph, (generic) schema definition, or (generic) horizontal definition (C.4.3, C.4.4, C.4.5, C.4.6, C.4.7, C.4.8).
FreePara = A free types paragraph (C.4.10).
ConjPara = A (generic) conjecture paragraph (C.4.11, C.4.12).
OptempPara = An operator template paragraph (C.4.13).
UnparsedPara = A completely unparsed paragraph.
NarrPara = A narrative paragraph.  It contains arbitrary unicode and markup.
Freetype = A free type (C.4.10).
Branch = A branch of a free type (C.4.10).
SchText = A schema text (C.7).
Decl = An abstract declaration.
Name = An abstract Z name that can be decorated.
DeclName = A declaring name.
RefName = A referencing name.
Stroke = An abstract stroke.
Expr = An abstract expression (C.6).
Expr1 = An abstract unary expression.
Expr2 = An abstract binary expression.
Expr0N = An abstract expression containing 0..N expressions.
Expr2N = An abstract expression containing 2..N expressions.
LogExpr = An abstract binary logical schema operator expression.
QntExpr = An abstract quantifier-like expression.
Qnt1Expr = An abstract quantifier-like expression with compusory expression.
Pred = An abstract predicate (C.5).
Pred2 = An abstract binary predicate.
QntPred = An abstract quantifier like predicate.
Fact = 
Ann = An abstract annotation.
Type = An abstract base type.
Signature = A signature.  It is a function from names to types, but the class just containes a list of pairs consisting of a name and a type.
NameExprPair = A pair of a name and an expression.
NameTypePair = A pair of a name and a type.
NameSectTypeTriple = A tuple consisting of a name, a section, and a type.
NameNamePair = A pair of two names.
Spec = A specification (C.2).  It contains a list of {@link Sect sections} and {@link java.lang.Object non Z-related things}.
VarDecl = A variable declaration.
ConstDecl = A constant declaration.
InclDecl = 
NumStroke = A digit stroke.  Note that multidigit strokes are not allowed.
RefExpr = A reference expression (C.6.28).  The mixfix attribute distinguishes S \fun T (mixfix=true) from (_ \fun _) [S, T] (mixfix=false).
NumExpr = A number literal expression (C.6.30).
BindExpr = A binding extension expression (C.6.35).
TupleSelExpr = A tuple selection expression (C.6.26).
BindSelExpr = A binding selection expression (C.6.25).
CondExpr = A conditional expression (C.6.13).
ApplExpr = A function and (generic operator) application expression (C.6.21, C.6.22).
DecorExpr = A schema decoration expression (C.6.23).
ThetaExpr = A binding construction expression (C.6.27).
SchExpr = A schema construction expression (C.6.34).
RenameExpr = A schema renaming expression (C.6.24).
HideExpr = A schema hiding expression (C.6.16).
ExprPred = A schema predicate.
NegPred = A negation (C.5.11).
AndPred = A conjunction (C.5.5, C.5.6, C.5.10).  The Op attribute identifies the kind of conjunction: whether it is an /\, a semicolon, a newline, or a chain (an implicit conjunction like in a=b=c).
MemPred = A member operator application (C.5.12).  The mixfix attribute distinguishes m = n (mixfix=true) from (m,n) \in (_ = _) (mixfix=false).
TypeAnn = A type annotation.  It gives the type of an expression/term.
TypeEnvAnn = A type environment (4.4 Table 22). It associates names with types.
SectTypeEnvAnn = A section-type environment (4.4 Table 22).  It associates names of declarations with the name of the ancestral section that originally declared the name paired with its type.
LocAnn = Location annotations define the source-code location of a construct.
GivenType = A given type.
GenType = A generic parameter type.
PowerType = A powerset type.
ProdType = A Cartesian product type.
SchemaType = A schema type.
Box = A typesafe enumeration of possible boxes around an axiomatic paragraph.
Assoc = A typesafe enumeration of possible associations of an operator template (C.4.13).
Cat = A typesafe enumeration of possible categories of an operator template (C.4.13).
Prec = A typesafe enumeration of possible prec of an operator template (C.4.13).
Op = A typesafe enumeration of possible conjunctions.

