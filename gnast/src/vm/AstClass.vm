#*
Copyright 2003, 2005, 2006, 2007 Petra Malik
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-----------------------------------------------------------------------------
Variables and methods used:
  class:     An implementation of GnastClass;
             represents the class to be generated.
             (assumes that an interface is generated as well).
  author:    The author of the generated class.
  copyright: Name of a file containing copyright information to be included
             in the generated file.
  getObject("factory"):
             The name of the AST object factory.  This is used
             in javadoc in order to link from the constructor to the
             object factory.
*#
#parse("src/vm/variables.vm")
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstClass.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

#if($copyright)#include($copyright)#end
******************************************************************************/

package ${class.ImplPackage};

import java.util.*;
import java.util.logging.*;

import net.sourceforge.czt.base.ast.*;
import net.sourceforge.czt.base.impl.*;
import net.sourceforge.czt.base.visitor.*;
import net.sourceforge.czt.util.Visitor;
#foreach($p in $projects)
import ${p.AstPackage}.*;
import ${p.ImplPackage}.*;
#end
import ${project.AstPackage}.*;
import ${project.VisitorPackage}.*;

import ${project.VisitorPackage}.${class.Name}Visitor;

/**
 * An implementation of the interface
 * {@link ${class.Name}}.
 *
#if($author) * @author ${author}
#end
 */
#if(${class.isList()})
#set($type = ${class.getAllProperties().get(0).getListType()})

public class ${class.ImplName}
  extends java.util.AbstractList<${type}>
  implements ${class.Name}
{
  private BaseFactory factory_;

  /**
   * The list containing the data.
   */
  /*@ non_null @*/
  private List<${type}> list_ = new ArrayList<${type}>();

  /**
   * A list of annotations.
   */
  private List<Object> anns_ = new java.util.ArrayList<Object>();

  /**
   * The default constructor.
   *
   * Do not use it explicitly, unless you are extending this class.
   * If you want to create an instance of this class, please use the
   * {@link ${project.getObject("factory")} object factory}.
   */
  protected ${class.ImplName}()
  {
    factory_ = null;
  }

  protected ${class.ImplName}(BaseFactory factory)
  {
    super();
    factory_ = factory;
  }

  public String toString()
  {
    try {
      if (factory_ != null) {
        final String result = factory_.toString(this);
        if (result != null) return result;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return super.toString();
  }

  /**
   * Returns a list of annotiations.
   */
  public List<Object> getAnns()
  {
    return anns_;
  }


  public ${class.Name} ${class.getAllProperties().get(0).GetterName}()
  {
    return this;
  }

  public <T> T getAnn(Class<T> aClass)
  {
    for (Object annotation : anns_) {
      if (aClass.isInstance(annotation)) {
        return (T) annotation;
      }
    }
    return null;
  }

  /**
   * Inserts the specified element at the specified position in this list.
   * Shifts the element currently at that position (if any) and any
   * subsequent elements to the right (adds one to their indices).
   *
   * @param index the index at which the specified element is to be inserted.
   * @param element the element to be inserted.
   * @throws IndexOutOfBoundsException if the index is out of range
   *         <code>(index < 0 || index > size())</code>.
   */
  public void add(int index, ${type} element)
  {
    list_.add(index, element);
  }

  /**
   * Returns the element at the specified position in this list.
   *
   * @param index the index of the elment to be returned.
   * @return the element at the specified position in this list.
   * @throws IndexOutOfBoundsException if the index is out of range
   *         <code>(index < 0 || index >= size())</code>.
   */
  public ${type} get(int index)
  {
    return list_.get(index);
  }

  /**
   * Removes the element at the specified position in this list.
   * Shifts any subsequent elements to the left
   * (subtracts one from their indices).
   * Returns the element that was removed from the list.
   *
   * @param index the index of the element to be removed.
   * @return the element previously at the specified position.
   * @throws IndexOutOfBoundsException if the index is out of range
   *         <code>(index < 0 || index >= size())</code>.
   */
  public ${type} remove(int index)
  {
    return list_.remove(index);
  }

  /**
   * Replaces the elment at the specifed position
   * in this list with the specified element.
   *
   * @param index the position of the element to replace.
   * @param element the new element to be stored at the specified position.
   * @return the element previously at the specified position.
   * @throws ArrayIndexOutOfBoundsException if <code>index</code>
   *         is out of range <code>(index < 0 || index >= size())</code>.
   */
  public ${type} set(int index, ${type} element)
  {
    return list_.set(index, element);
  }

  /**
   * Returns the number of components in this list.
   */
  public int size()
  {
    return list_.size();
  }

  public <R> R accept(Visitor<R> v)
  {
    if (v instanceof ${class.Name}Visitor) {
      ${class.Name}Visitor<R> visitor = (${class.Name}Visitor<R>) v;
      return visitor.visit${class.Name}(this);
    }
    if (v instanceof TermVisitor) {
      TermVisitor<R> visitor = (TermVisitor<R>) v;
      return visitor.visitTerm(this);
    }
    return null;
  }

  public Object[] getChildren()
  {
    return list_.toArray();
  }

  public ${class.ImplName} create(Object[] args)
  {
    ${class.ImplName} result = new ${class.ImplName}(factory_);
    for (int i = 0; i < args.length; i++) {
      result.add((${type}) args[i]);
    }
    return result;
  }
}
#else
public#abstract($class) class ${class.ImplName}
#if($class.Extends)  extends ${class.ImplExtends} #end
  implements ${class.Name}
{
  /**
   * The default constructor.
   *
   * Do not use it explicitly, unless you are extending this class.
   * If you want to create an instance of this class, please use the
   * {@link ${project.getObject("factory")} object factory}.
   */
  protected ${class.ImplName}()
  {
  }

  protected ${class.ImplName}(BaseFactory factory)
  {
    super(factory);
  }

  /**
   * Compares the specified object with this ${class.ImplName}
   * for equality.  Returns true if and only if the specified object is
   * also a(n) ${class.ImplName} and all the getter methods except getAnns
   * return equal objects.
   */
  public boolean equals(Object obj)
  {
    if (obj != null) {
      if (this.getClass().equals(obj.getClass()) && super.equals(obj)) {
        ${class.ImplName} object = (${class.ImplName}) obj;
#foreach($prop in ${class.Properties})
        if (${prop.MemVarName} != null) {
          if (!${prop.MemVarName}.equals(object.${prop.MemVarName})) {
            return false;
          }
        }
        else {
          if (object.${prop.MemVarName} != null) {
            return false;
          }
        }
#end
        return true;
      }
    }
    return false;
  }

  /**
   * Returns the hash code value for this ${class.ImplName}.
   */
  public int hashCode()
  {
    final int constant = 31;

    int hashCode = super.hashCode();
    hashCode += "${class.ImplName}".hashCode();
#foreach($prop in ${class.Properties})
    if (${prop.MemVarName} != null) {
      hashCode += constant * ${prop.MemVarName}.hashCode();
    }
#end
    return hashCode;
  }

  /**
   * Accepts a visitor.
   */
  public <R> R accept(${baseVisitor}<R> v)
  {
    if (v instanceof ${class.Name}Visitor) {
      ${class.Name}Visitor<R> visitor = (${class.Name}Visitor<R>) v;
      return visitor.visit${class.Name}(this);
    }
    return super.accept(v);
  }

#if(! ${class.Abstract})
#set($methodName = 'create')
  /**
   * Returns a new object of this class.
   */
  public ${class.ImplName} ${methodName}(Object[] args)
  {
    ${class.ImplName} zedObject = null;
    try {
#foreach($prop in $class.AllProperties)
#set($counter = $velocityCount - 1)
      ${prop.Type.FullName} ${prop.VarName} = (${prop.Type.FullName}) args[$counter];
#end
      zedObject = new ${class.ImplName}(getFactory());
#foreach($prop in $class.AllProperties)
#if(${prop.isList()})
      if (${prop.VarName} != null) {
        zedObject.${prop.GetterName}().addAll(${prop.VarName});
      }
#else
      zedObject.${prop.SetterName}(${prop.VarName});
#end
#end## foreach prop
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
    return zedObject;
  }

#set($methodName = 'getChildren')
  public Object[] ${methodName}()
  {
    Object[] erg = { #getterList(${class.AllProperties}) };
    return erg;
  }
#end##end if not abstract
#foreach($prop in $class.Properties)

#if(${prop.isList()})

  private ListTerm<${prop.ListType.FullName}> ${prop.MemVarName} =
    new ListTermImpl<${prop.ListType.FullName}>();

  public ListTerm<${prop.ListType.FullName}> ${prop.GetterName}()
  {
    return ${prop.MemVarName};
  }
#else
  private ${prop.Type.FullName} ${prop.MemVarName};

  public ${prop.Type.FullName} ${prop.GetterName}()
  {
    return ${prop.MemVarName};
  }

  public void ${prop.SetterName}(${prop.Type.FullName} ${prop.VarName})
  {
    ${prop.MemVarName} = ${prop.VarName};
  }
#if(${prop.Type.Name} == 'ExprList' || ${prop.Type.Name} == 'RenameList' || ${prop.Type.Name} == 'NameList' || ${prop.Type.Name} == 'DeclList')
#if(${prop.GetterName} == "get${prop.Type.Name}")
  /**
   * This is a convenience method.
   * It returns a Z${prop.Type.Name} if #${prop.GetterName}
   * returns an instance of Z${prop.Type.Name}
   * and throws an UnsupportedAstClassException otherwise.
   */
  public Z${prop.Type.Name} getZ${prop.Type.Name}()
  {
    ${prop.Type.Name} object = ${prop.GetterName}();
    if (object instanceof Z${prop.Type.Name}) {
      return (Z${prop.Type.Name}) object;
    }
    final String message = "Expected the Z implementation of ${prop.Type.Name}" +
      " but found " + String.valueOf(object);
    throw new net.sourceforge.czt.base.util.UnsupportedAstClassException(message);
  }
#end
#end
#end
#end
#if(${class.AdditionalImplCodeFilename})
#include(${class.AdditionalImplCodeFilename})
#end
}
#end
