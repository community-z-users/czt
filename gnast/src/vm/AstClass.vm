#*
Copyright 2003 Petra Malik
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-----------------------------------------------------------------------------
Variables used:
  class:     An implementation of GnastClass; represents the class to be generated.
             (assumes that an interface is generated as well).
  author:    The author of the generated class.
  copyright: Name of a file containing copyright information to be included in the generated file.
  AstFactoryInterface_Name:
             The name of the AST object factory.  This is used
             in javadoc in order to link from the constructor to the
             object factory.
*#
#parse("src/vm/variables.vm")
#if($copyright)#include($copyright)
#end

package ${class.ImplPackage};

import java.util.*;
import java.util.logging.*;

#foreach($p in $projects)
import ${p.AstPackage}.*;
import ${p.ImplPackage}.*;
#end
import ${project.AstPackage}.*;
import ${visitor.Package}.*;

import net.sourceforge.czt.core.visitor.${class.Name}Visitor;

/**
 * An implementation of the interface
 * {@link ${class.Name}}.
 *
#if($author) * @author ${author}
#end
 */
public#abstract($class) class ${class.ImplName}
#if($class.Extends)extends ${class.ImplExtends} #end
implements ${class.Name}
{
#if(! ${class.Abstract})
  private static final Logger sLogger =
    Logger.getLogger("${class.ImplPackage}.${class.ImplName}");

#end
#if(! ${class.Abstract})
  /**
   * The default constructor.
   *
   * Do not use it explicitly, unless you are extending this class.
   * If you want to create an instance of this class, please use the
   * {@link ${AstFactoryInterface_Name} object factory}.
   */
  protected ${class.ImplName}() { }
#end

  /**
   * Compares the specified object with this ${class.ImplName}
   * for equality.  Returns true if and only if the specified object is
   * also a(n) ${class.ImplName} and all the getter methods except getAnns
   * return equal objects.
   */
  public boolean equals(Object obj)
  {
    if(obj != null &&
       this.getClass().equals(obj.getClass()) &&
       super.equals(obj)) {
      ${class.ImplName} object = (${class.ImplName}) obj;
#foreach($prop in ${class.Properties})
      if((${prop.MemVarName} == null && object.${prop.MemVarName} != null) ||
         (${prop.MemVarName} != null &&
         ! ${prop.MemVarName}.equals(object.${prop.MemVarName}))) return false;
      if(${prop.MemVarName} == null && object.${prop.MemVarName} != null)
        return false;
#end
      return true;
    }
    return false;
  }

  /**
   * Returns the hash code value for this ${class.ImplName}.
   * The hash code of a ${class.ImplName} is defined to be
   * the result of the following calculation:
   *
   * @czt.todo Write the calculation procedure for method hashCode().
   */
  public int hashCode()
  {
    int hashCode = super.hashCode();
    hashCode += "${class.ImplName}".hashCode();
#foreach($prop in ${class.Properties})
    if(${prop.MemVarName} != null) {
      hashCode += 31*${prop.MemVarName}.hashCode();
    }
#end
    return hashCode;
  }

  /**
   * Accepts a visitor.
   */
  public Object accept(${baseVisitor} v)
  {
    if (v instanceof ${class.Name}Visitor)
    {
      ${class.Name}Visitor visitor = (${class.Name}Visitor) v;
      return visitor.visit${class.Name}(this);
    }
    return super.accept(v);
  }

#if(! ${class.Abstract})
#set($methodName = 'create')
  /**
   * Returns a new object of this class.
   */
  public Term ${methodName}(Object[] args) {
    sLogger.entering("${class.ImplName}", "$methodName", args);
    ${class.Name} zedObject = null;
    try {
#foreach($prop in $class.AllProperties)
#set($counter = $velocityCount - 1)
      ${prop.Type} ${prop.VarName} = (${prop.Type}) args[$counter];
#end
      zedObject = new ${class.ImplName}();
#foreach($prop in $class.AllProperties)
#if(${prop.Type} == 'java.util.List')
      if(${prop.VarName} != null) {
        zedObject.${prop.GetterName}().addAll(${prop.VarName});
      }
#else
      zedObject.${prop.SetterName}(${prop.VarName});
#end
#end## foreach prop
    } catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException();
    } catch (ClassCastException e) {
      throw new IllegalArgumentException();
    }
    sLogger.exiting("${class.ImplName}", "$methodName", zedObject);
    return zedObject;
  }

#set($methodName = 'getChildren')
  public Object[] ${methodName}()
  {
    sLogger.entering("${class.ImplName}", "$methodName");
    Object[] erg = { #getterList(${class.AllProperties}) };
    sLogger.exiting("${class.ImplName}", "$methodName", erg);
    return erg;
  }
#end##end if not abstract
#foreach($prop in $class.Properties)

#if(${prop.Type} == 'java.util.List')
  private ${prop.Type} ${prop.MemVarName} = new java.util.Vector();
#else
  private ${prop.Type} ${prop.MemVarName};
#end

  public ${prop.Type} ${prop.GetterName}()
  {
    return ${prop.MemVarName};
  }
#if(${prop.Type} != 'java.util.List')

  public void ${prop.SetterName}(${prop.Type} ${prop.VarName})
  {
    ${prop.MemVarName} = ${prop.VarName};
  }
#end
#end
}
