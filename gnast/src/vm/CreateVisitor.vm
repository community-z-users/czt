#*
Copyright 2006 Petra Malik
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*#
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

#if($copyright)#include($copyright)#end
******************************************************************************/

package ${project.BasePackage}.${class.Package};

import java.util.*;

import net.sourceforge.czt.base.ast.*;
import net.sourceforge.czt.base.visitor.*;

import ${project.AstPackage}.*;
import ${project.VisitorPackage}.*;
#foreach($p in $projects)
import ${p.AstPackage}.*;
#end

/**
 * <p>A copy visitor.</p>
 *
#if($author) * @author ${author}
#end
 */
public class ${class.Name}
#if($ImportProject)
  extends ${ImportProject.getObject("copyVisitor")}
#end
  implements ${project.getObject("AstVisitor")}<Term>,
             ListTermVisitor<Term>,
             TermVisitor<Term>
{
  private ${project.getObject("factory")} factory_ =
    new ${project.getObject("factoryImpl")}();
  private Object[] children_ = new Object[0];

  /**
   * Creates a new copy visitor that uses the given factory
   * for creating AST terms.
   */
  public ${class.Name}(${project.getObject("factory")} factory)
  {
#if($ImportProject)
    super(factory);
#end
    factory_ = factory;
  }

  public void setChildren(Object[] children)
  {
    children_ = children;
  }

  public Term visitTerm(Term term)
  {
    throw new UnsupportedOperationException();
  }

#foreach($c in $classes)
#if(!$c.Abstract)
  /**
   * Creates an instance of {@link ${c.Name}}.
   *
   * @return the new instance of ${c.Name}.
   */
  public Term visit${c.Name}(${c.Name} term)
  {
    try {
#if(!${c.isList()})
      return factory_.create${c.Name}(
#foreach($prop in $c.AllProperties)
#set($counter = $velocityCount - 1)
#if($counter > 0),#end
          (${prop.Type.FullName}) children_[$counter]
#end## foreach prop
        );
#else## c.isList()
#set($type = ${c.getAllProperties().get(0).getListType()})
      List<${type}> list = new ArrayList<${type}>(children_.length);
      for (int i = 0; i < children_.length; i++) {
        list.add((${type}) children_[i]);
      }
      return factory_.create${c.Name}(list);
#end
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
#end## if
#end## foreach c

  public Term visitListTerm(ListTerm listTerm)
  {
    ListTerm result =
      new net.sourceforge.czt.base.impl.ListTermImpl();
    for (Object o : children_) result.add(o);
    return result;
  }

  public Term create(Term term, Object[] children)
  {
    setChildren(children);
    return term.accept(this);
  }

  public Term copy(Term term, boolean copyAnnotations)
  {
    Object[] args = term.getChildren();
    for (int i = 0; i < args.length; i++) {
      if (args[i] instanceof Term) {
        args[i] = copy((Term) args[i], copyAnnotations);
      }
    }
    Term result = create(term, args);
    if (copyAnnotations && term.getAnns() != null) {
      for (Object o : term.getAnns()) {
        if (o instanceof Term) {
          result.getAnns().add(copy((Term) o, copyAnnotations));
        }
        else {
          result.getAnns().add(o);
        }
      }
    }
    args = null;
    return result;
  }
#if($class.AdditionalCodeFilename)
#include($class.AdditionalCodeFilename)
#end
}
