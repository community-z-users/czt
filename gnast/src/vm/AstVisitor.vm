#*
Copyright 2003 Petra Malik
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*#
#if($copyright)#include($copyright)
#end
package ${BasePackage}.${class.Package};

#if($ImportPackage)import ${ImportPackage}.ast.*;
#end
import #package(${AstPackage}).*;

/**
#if(! $ImportPackage)
 * <p>The visitor interface for visiting
 * {@link #package($AstPackage).Term Z terms}.</p>
 *
 * <p>This interface provides a way of implementing
 * the visitor design pattern.  See, for instance,
 * Erich Gamma, Richard Helm, Ralph Johnson,
 * John Vissides: "Design Patterns : Elements of Reusable Object-Oriented
 * Software." for an introduction to the visitor design
 * pattern.</p>
 *
 * <p>To implement a visitor of the AST for standard Z,
 * the programmer needs to implement all methods of this interface.
 * There is a visit method for each AST interface.  If an AST interface
 * does not have a corresponding create method in the {link CoreFactory},
 * (like, for instance, {link Expr}), none of the
 * {link net.sourceforge.czt.core.ast.impl AST (core) classes}
 * will ever call this method.  However, they may be called by
 * terms defined in one of the Z extensions.
 * For instance, <code>visitExpr(Expr)</code> may be called by an Object Z
 * expression defined in an Object Z extension.</p>
 * 
 * <p>The programmer implementing this interface should think
 * about how to handle possible Z extensions.
 * A visitor implementation
 * may throw an <code>UnsupportedOperationException</code>
 * for all visit methods visiting interfaces without a corresponding
 * create method.  This ensures that only
 * {@link net.sourceforge.czt.core.ast core Z terms}
 * are processed.  Another possibility is to handle Z extensions
 * as good as possible by exploiting the information provided by
 * the core interfaces.</p>
#end
 *
#if($author) * @author ${author}
#end
 */
public interface ${class.Name}
  extends
#foreach($c in $classes)
#if(! ${c.Abstract})
    net.sourceforge.czt.core.visitor.${c.Name}Visitor,
#end
#end
    net.sourceforge.czt.util.Visitor
{
}
