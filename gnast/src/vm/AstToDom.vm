#*
Copyright 2003 Petra Malik
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*#
#parse("src/vm/variables.vm")
#set($NS = "http://czt.sourceforge.net/zml")
#if($copyright)#include($copyright)
#end

package ${BasePackage}.${class.Package};

import java.util.logging.Logger;
import java.util.*;
import org.w3c.dom.*;

import #package(${AstVisitorInterface_Package}).${AstVisitorInterface_Name};
import #package(${AstPackage}).*;
#if($ImportPackage)import ${ImportPackage}.ast.*;
#end

#foreach($import in $imports)
import ${import};
#end

/**
 * Transformer from AST classes to a DOM tree.
 *
#if($author) * @author ${author}
#end
 */
public class $class.Name#if($ImportPackage) extends ${ImportPackage}.dom.${class.Name}#end implements ${AstVisitorInterface_Name}
{
  private static final Logger sLogger =
    Logger.getLogger("#package(${class.Package}).${class.Name}");

#if(! $ImportPackage)
  protected Document mDocument;
#end

  public ${class.Name}(Document document)
  {
#if($ImportPackage)
    super(document);
#else
    mDocument = document;
#end
  }

#foreach($c in $classes)
#if(${c.Abstract})

  public Object visit${c.Name}(${c.Name} zedObject)
  {
    throw(new UnsupportedOperationException());
  }
#else

  public Object visit${c.Name}(${c.Name} zedObject)
  {
    sLogger.entering("${class.Package}.${class.Name}", "visit${c.Name}", zedObject);
    Element elem = mDocument.createElementNS("$NS", "$c.Name");
    try {
#if($c.isInstanceOf("TermA"))
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("$NS", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof ${term}) {
	    Node node = (Node) ((${term}) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
#end
#foreach($prop in $c.AllProperties)
#if($prop.Name == 'Content')
      Node content = mDocument.createElementNS("$NS", "Content");
      for(Iterator iter=zedObject.${prop.GetterName}().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof ${term}) {
	  Node node = (Node) ((${term}) o).accept(this);
	  content.appendChild(node);
	} else {
	  content.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
      elem.appendChild(content);
#elseif($prop.Name == 'Decl' && $c.Name == 'RefName')
      if (zedObject.getDecl() != null) {
	elem.setAttributeNS("$NS", "Decl", zedObject.getDecl().getId());
      }
#elseif($prop.Type.FullName == 'java.util.List')
      for(Iterator iter=zedObject.${prop.GetterName}().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof ${term}) {
	  Node node = (Node) ((${term}) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
#else
      if (zedObject.${prop.GetterName}()!=null) {
#if($prop.Type.FullName == 'String' || $prop.Type.FullName == 'java.lang.String' || $prop.Type.FullName == 'java.math.BigInteger' || $prop.Type.FullName =='org.w3._2001.xmlschema.AnyType' || $prop.Type.FullName == 'java.lang.Integer' || $prop.Type.FullName == 'Integer' || $prop.Type.FullName == 'java.lang.Boolean' || $prop.Type.FullName == 'Boolean' || $prop.Type.FullName == 'Box' || $prop.Type.FullName == 'Cat' || $prop.Type.FullName == 'Assoc' || $prop.Type.FullName == 'Op')
#if(${prop.Attribute})
        elem.setAttributeNS("$NS", "${prop.Name}", zedObject.${prop.GetterName}().toString());
#else
	Element child = mDocument.createElementNS("$NS", "${prop.Name}");
	child.appendChild(mDocument.createTextNode(zedObject.${prop.GetterName}().toString()));
	elem.appendChild(child);
#end
#else
        elem.appendChild((Node)((${term}) zedObject.${prop.GetterName}()).accept(this));
#end
      }
#end
#end
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("${class.Package}.${class.Name}", "visit${c.Name}", elem);
    return elem;
  }
#end
#end
}
