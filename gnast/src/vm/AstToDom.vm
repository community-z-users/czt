#*
Copyright (C) 2003, 2004, 2006 Petra Malik
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*#
#parse("src/vm/variables.vm")
#set($NS = "http://czt.sourceforge.net/zml")
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToDom.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

#if($copyright)#include($copyright)#end
******************************************************************************/

package ${project.BasePackage}.${class.Package};

import java.util.logging.Logger;
import java.util.*;
import org.w3c.dom.*;

import net.sourceforge.czt.base.ast.ListTerm;
import net.sourceforge.czt.base.ast.Term;

import net.sourceforge.czt.util.CztException;

import ${project.AstPackage}.*;
import ${project.VisitorPackage}.*;
#foreach($p in $projects)
import ${p.AstPackage}.*;
import ${p.VisitorPackage}.*;
#end

/**
 * Transformer from AST classes to a DOM tree.
 *
#if($author) * @author ${author}
#end
 */
public class $class.Name
#if($ImportPackage)
  extends ${ImportProject.BasePackage}.${class.Package}.${class.Name}
#end
  implements#if(! $ImportPackage) net.sourceforge.czt.base.dom.DomVisitor,
            #end ${project.getObject("AstVisitor")},
    net.sourceforge.czt.base.visitor.TermVisitor
{
  private Logger getLogger()
  {
    return Logger.getLogger("#package(${class.Package}).${class.Name}");
  }

#if(! $ImportPackage)
  private Document document_;

  public Document getDocument()
  {
    return document_;
  }

  public void setDocument(Document document)
  {
    document_ = document;
  }

  public Object visitTerm(Term zedObject)
  {
    throw(new UnsupportedOperationException("Unexpected element "
                                            + zedObject.getClass().getName()));
  }

#end

#foreach($c in $classes)
#if(${c.Abstract})

  public Object visit${c.Name}(${c.Name} zedObject)
  {
    throw(new UnsupportedOperationException());
  }
#else

  public Object visit${c.Name}(${c.Name} zedObject)
  {
    getLogger().entering("${class.Package}.${class.Name}", "visit${c.Name}", zedObject);
    final String ns = "$NS";
    Element elem = getDocument().createElementNS(ns, "$c.Name");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
#foreach($prop in $c.AllProperties)
#if($prop.Name == 'Content')
      Node content = getDocument().createElementNS(ns, "Content");
      for (Iterator iter = zedObject.${prop.GetterName}().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          content.appendChild(node);
        }
        else {
          content.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      elem.appendChild(content);
#elseif($prop.Name == 'Decl' && $c.Name == 'RefName')
      if (zedObject.getDecl() != null) {
        elem.setAttributeNS(ns, "Decl", zedObject.getDecl().getId());
      }
#elseif($prop.Type.FullName == 'java.util.List')
      for (Iterator iter = zedObject.${prop.GetterName}().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
#else
      if (zedObject.${prop.GetterName}() != null) {
#if($prop.Type.FullName == 'String' || $prop.Type.FullName == 'java.lang.String' || $prop.Type.FullName == 'java.math.BigInteger' || $prop.Type.FullName =='org.w3._2001.xmlschema.AnyType' || $prop.Type.FullName == 'java.lang.Integer' || $prop.Type.FullName == 'Integer' || $prop.Type.FullName == 'java.lang.Boolean' || $prop.Type.FullName == 'Boolean' || $prop.Type.FullName == 'Box' || $prop.Type.FullName == 'Cat' || $prop.Type.FullName == 'Assoc' || $prop.Type.FullName == 'DirectiveType' || $prop.Type.FullName == 'And' || $prop.Type.Name == 'CommUsage' || $prop.Type.Name == 'CommPattern' || $prop.Type.Name == 'CallUsage' || $prop.Type.Name == 'Model' || $prop.Type.Name == 'Transformation' || $prop.Type.Name == 'CircusJokerType' || $prop.Type.Name == 'ParamQualifier' || $prop.Type.Name == 'JokerType')
#if(${prop.Attribute})
        elem.setAttributeNS(ns, "${prop.Name}", zedObject.${prop.GetterName}().toString());
#else
        Element child = getDocument().createElementNS(ns, "${prop.Name}");
        String string = zedObject.${prop.GetterName}().toString();
        child.appendChild(getDocument().createTextNode(string));
        elem.appendChild(child);
#end
#else
        Term term = (Term) zedObject.${prop.GetterName}();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
#end
      }
#end
#end
    }
    catch (Exception exception) {
      String message = "class ${class.Name}: "
                       + "Cannot transform a ${c.Name} to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("${class.Package}.${class.Name}", "visit${c.Name}", elem);
    return elem;
  }
#end
#end
}
