#*
Copyright (C) 2003, 2004 Petra Malik
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*#
#parse("src/vm/variables.vm")
#set($jaxbPackage = "${project.JaxbGenPackage}")
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToJaxb.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

#if($copyright)#include($copyright)#end
******************************************************************************/

package ${project.BasePackage}.${class.Package};

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.base.ast.Term;

#foreach($p in $projects)
import ${p.JaxbGenPackage}.*;
#end
import ${project.JaxbGenPackage}.*;
import org.w3._2001.xmlschema.*;

/**
 * The marshaller responsible for serializing XML data.
 *
#if($author) * @author ${author}
#end
 */
public class $class.Name
#if($ImportPackage)
#set($object = ${ImportProject.getObject("AstToJaxb")})
  extends ${object.Package}.${object.Name}
#end
  implements ${visitor.FullName},
             net.sourceforge.czt.base.visitor.TermVisitor
{
#if(!$ImportPackage)
  protected boolean createElement_ = true;
#end

  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  private ${jaxbPackage}.ObjectFactory
    objectFactory_ = new ${jaxbPackage}.ObjectFactory();
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    annsObjectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();
  private org.w3._2001.xmlschema.ObjectFactory
    anyTypeObjectFactory_ = new org.w3._2001.xmlschema.ObjectFactory();

  /**
   * A map that maps id's to the corresponding Object.
   */
  private Map hash_ = new HashMap();

  private String getClassName()
  {
    return "#package(${class.Package}).${class.Name}";
  }

  private Logger getLogger()
  {
    return Logger.getLogger(getClassName());
  }

  private net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType visitAnnotations(List list)
    throws javax.xml.bind.JAXBException
  {
      net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
        annsObjectFactory_.createTermAAnnsType();
    List newlist = anns.getany();
    for (Iterator iter = list.iterator(); iter.hasNext();) {
      Object obj = iter.next();
      if (obj instanceof Term) {
        Term term = (Term) obj;
        try {
          createElement_ = true;
          Object visitedTerm = term.accept(this);
          newlist.add(visitedTerm);
        }
        catch (Exception e) {
          String message = "Annotation " + term + " cannot be handled; " +
            "drop it.";
          getLogger().warning(message);
        }
      }
    }
    return anns;
  }


  public Object visitTerm(Term zedObject)
  {
    String message = "Unexpected element " + zedObject.getClass().getName();
    // getLogger().warning(message);
    // return null;
    throw(new UnsupportedOperationException(message));
  }

#foreach($c in $classes)
#if(! ${c.Abstract})
#if($c.Name == "RefName")

  public Object visitRefName(${project.AstPackage}.RefName zedObject)
  {
    getLogger().entering(getClassName(), "visitRefName", zedObject);
    try {
      RefName jaxbObject = objectFactory_.createRefNameElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createRefName();
      }
      if (zedObject.getDecl() != null) {
        String id = zedObject.getDecl().getId();
        getLogger().finer("Retrieve reference " + id);
        DeclName decl = (DeclName) hash_.get(id);
        if (decl == null) {
          getLogger().warning("Could not find reference " + id);
        }
        jaxbObject.setDecl(decl);
      }
      {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
      jaxbObject.setWord((String) zedObject.getWord());
      {
        List list = zedObject.getStroke();
        List newlist = jaxbObject.getStroke();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Term term = (Term) iter.next();
          Object o = term.accept(this);
          newlist.add(o);
        }
      }
      getLogger().exiting(getClassName(), "visitRefName", jaxbObject);
      createElement_ = true;
      return jaxbObject;
    }
    catch (Exception exception) {
      String message = "class AstToJaxb: "
                       + "Cannot transform a RefName to the corresponding "
                       + "Jaxb class";
      throw new CztException(message, exception);
    }
  }
#elseif($c.Name == "DeclName")
#set($DeclName = "${project.AstPackage}.DeclName")

  public java.lang.Object visitDeclName($DeclName zedObject)
  {
    getLogger().entering(getClassName(), "visitDeclName", zedObject);
    try {
      DeclName jaxbObject = objectFactory_.createDeclNameElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createDeclName();
      }
      if (zedObject.getId() != null) {
        getLogger().finest("Setting Id to " + zedObject.getId().toString());
        jaxbObject.setId(zedObject.getId());
        getLogger().finer("Hashing " + zedObject.getId());
        hash_.put(zedObject.getId(), jaxbObject);
      }
      {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
      getLogger().finest("Setting Word to " + zedObject.getWord().toString());
      jaxbObject.setWord(zedObject.getWord());
      {
        List list = zedObject.getStroke();
        getLogger().finest("Setting strokes " + list.toString());
        List newlist = jaxbObject.getStroke();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Term term = (Term) iter.next();
          Object o = term.accept(this);
          newlist.add(o);
        }
      }
      getLogger().exiting(getClassName(), "visitDeclName", jaxbObject);
      createElement_ = true;
      return jaxbObject;
    }
    catch (Exception exception) {
      String message = "class AstToJaxb: "
                       + "Cannot transform a DeclName to the corresponding "
                       + "Jaxb class";
      throw new CztException(message, exception);
    }
  }
#else

  public Object visit${c.Name}(${project.AstPackage}.${c.Name} zedObject)
  {
    getLogger().entering(getClassName(), "visit${c.Name}", zedObject);

    $c.Name jaxbObject = null;
    try {
#if(${c.NameEqualsType})
      jaxbObject = objectFactory_.create${c.Name}Element();
      if (!createElement_) {
        jaxbObject = objectFactory_.create${c.Name}();
      }
#else
      jaxbObject = objectFactory_.create${c.Name}();
#end
#foreach($prop in $c.AllProperties)
#if($prop.Name == 'Content')
      {
        List list = zedObject.getContent();
        if (list.size() > 0) {
          AnyType anyType =
            anyTypeObjectFactory_.createAnyType();
          List newlist = anyType.getContent();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Object o = iter.next();
            if (o instanceof Term) {
#if($prop.isReference())
              createElement_ = true;
#else
              createElement_ = false;
#end
              o = ((Term) o).accept(this);
            }
            newlist.add(o);
          }
          jaxbObject.setContent(anyType);
        }
      }
#elseif($prop.Type.FullName == 'java.util.List')
      {
        List list = zedObject.${prop.GetterName}();
        List newlist = jaxbObject.${prop.GetterName}();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
#if($prop.isReference())
            createElement_ = true;
#else
            createElement_ = false;
#end
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
#else
#if($prop.isReference())
      createElement_ = true;
#else
      createElement_ = false;
#end
      if (zedObject.${prop.GetterName}() != null) {
#if($prop.Type.FullName == 'String' || $prop.Type.FullName == 'java.lang.String' || $prop.Type.FullName == 'java.math.BigInteger' || $prop.Type.FullName =='org.w3._2001.xmlschema.AnyType' || $prop.Type.FullName == 'java.lang.Integer' || $prop.Type.FullName == 'Integer' || $prop.Type.FullName == 'java.lang.Boolean' || $prop.Type.FullName == 'Boolean' || $prop.Type.FullName == 'java.util.Calendar')
        jaxbObject.${prop.SetterName}(zedObject.${prop.GetterName}());
#elseif($prop.Type.Name == 'Box' || $prop.Type.Name == 'Cat' || $prop.Type.Name == 'Assoc' || $prop.Type.Name == 'DirectiveType' || $prop.Type.Name == 'Op' || $prop.Type.Name == 'ChannelType' || $prop.Type.Name == 'CommType')
        jaxbObject.${prop.SetterName}(zedObject.${prop.GetterName}().toString());
#else
        Term term = zedObject.${prop.GetterName}();
        jaxbObject.${prop.SetterName}((${prop.Type.Name}) term.accept(this));
#end
      }
#end
#end
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ${c.Name} to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
#if($c.isInstanceOf("TermA"))
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ${c.Name} to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }
#end

    getLogger().exiting(getClassName(), "visit${c.Name}", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }
#end
#end
#end
}
