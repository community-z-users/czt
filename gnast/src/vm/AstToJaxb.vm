#*
Copyright (C) 2003, 2004, 2005, 2006, 2007 Petra Malik
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*#
#parse("src/vm/variables.vm")
#set($jaxbPackage = "${project.JaxbGenPackage}")
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToJaxb.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

#if($copyright)#include($copyright)#end
******************************************************************************/

package ${project.BasePackage}.${class.Package};

import java.util.*;
import java.util.logging.Logger;

import javax.xml.bind.JAXBElement;

import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.base.ast.Term;

#foreach($p in $projects)
import ${p.JaxbGenPackage}.*;
#end
import ${project.JaxbGenPackage}.*;

/**
 * The marshaller responsible for serializing XML data.
 *
#if($author) * @author ${author}
#end
 */
public class $class.Name
#if($ImportPackage)
#set($object = ${ImportProject.getObject("AstToJaxb")})
  extends ${object.Package}.${object.Name}
  implements ${visitor.FullName}<Object>
#else
  implements ${visitor.FullName}<Object>,
             net.sourceforge.czt.base.visitor.TermVisitor<Object>
#end
{
  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  private ${jaxbPackage}.ObjectFactory
    objectFactory_ = new ${jaxbPackage}.ObjectFactory();
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    annsObjectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();

  private String getClassName()
  {
    return "#package(${class.Package}).${class.Name}";
  }

  private Logger getLogger()
  {
    return Logger.getLogger(getClassName());
  }

  private net.sourceforge.czt.z.jaxb.gen.Term.Anns visitAnnotations(List list)
    throws javax.xml.bind.JAXBException
  {
      net.sourceforge.czt.z.jaxb.gen.Term.Anns anns =
        annsObjectFactory_.createTermAnns();
    List newlist = anns.getAny();
    for (Object obj : list) {
      if (obj instanceof Term) {
        Term term = (Term) obj;
        try {
          Object visitedTerm = term.accept(this);
          newlist.add(visitedTerm);
        }
        catch (Exception e) {
          String message = "Annotation " + term + " cannot be handled; " +
            "drop it.";
          getLogger().warning(message);
          throw new CztException(message, e);
        }
      }
    }
    return anns;
  }


  public Object visitTerm(Term zedObject)
  {
    String message = "Unexpected element " + zedObject.getClass().getName();
    throw(new UnsupportedOperationException(message));
  }

#foreach($c in $classes)
#if(! ${c.Abstract})

  public Object visit${c.Name}(${project.AstPackage}.${c.Name} zedObject)
  {
    getLogger().entering(getClassName(), "visit${c.Name}", zedObject);
    try {
      $c.Name jaxbObject = objectFactory_.create${c.Name}();
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
#foreach($prop in $c.AllProperties)
#if($prop.Name == 'Content')
      {
        List list = zedObject.getContent();
        if (list.size() == 1) {
          Object o = list.get(0);
          if (o instanceof Term) {
            o = ((Term) o).accept(this);
          }
          jaxbObject.setContent(o);
        }
        else if (list.size() > 1) {
          List newlist = new java.util.ArrayList();
          for (Object o : list) {
            if (o instanceof Term) {
              o = ((Term) o).accept(this);
            }
            newlist.add(o);
          }
          jaxbObject.setContent(newlist);
        }
      }
#elseif($prop.isList())
      {
        List newlist = jaxbObject.${prop.GetterName}();
        for (Object o : zedObject.${prop.GetterName}()) {
          if (o instanceof Term) {
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
#else
      if (zedObject.${prop.GetterName}() != null) {
#if($prop.Type.FullName == 'net.sourceforge.czt.base.ast.Digit' || $prop.Type.FullName == 'String' || $prop.Type.FullName == 'java.lang.String' || $prop.Type.FullName == 'java.math.BigInteger' || $prop.Type.FullName == 'java.lang.Integer' || $prop.Type.FullName == 'Integer' || $prop.Type.FullName == 'java.lang.Boolean' || $prop.Type.FullName == 'Boolean' || $prop.Type.FullName == 'java.util.Calendar' || $prop.Type.FullName == 'javax.xml.datatype.XMLGregorianCalendar')
        jaxbObject.${prop.SetterName}(zedObject.${prop.GetterName}());
#elseif($prop.Type.Name == 'Box' || $prop.Type.Name == 'Cat' || $prop.Type.Name == 'Assoc' || $prop.Type.Name == 'DirectiveType' || $prop.Type.Name == 'And' || $prop.Type.Name == 'CommKind' || $prop.Type.Name == 'CallKind' || $prop.Type.FullName == 'ProcessKind' || $prop.Type.Name == 'Model' || $prop.Type.Name == 'ParamQualifier' || $prop.Type.Name == 'JokerType')
        jaxbObject.${prop.SetterName}(${prop.Type.Name}.fromValue(zedObject.${prop.GetterName}().toString()));
#else
        Term term = zedObject.${prop.GetterName}();
        JAXBElement<${prop.Type.Name}> newValue = (JAXBElement)
          term.accept(this);
        jaxbObject.${prop.SetterName}(newValue);
#end
      }
#end
#end
      getLogger().exiting(getClassName(), "visit${c.Name}", jaxbObject);
      return objectFactory_.create${c.Name}(jaxbObject);
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ${c.Name} to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
  }
#end
#end
}
