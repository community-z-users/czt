#*
Copyright 2003 Petra Malik
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*#
#parse("src/vm/variables.vm")
#set($jaxbPackage = "${BasePackage}.$JaxbPackage")
#if($copyright)#include($copyright)
#end

package ${BasePackage}.${class.Package};

import java.util.*;
import java.util.logging.Logger;

#foreach($p in $projects)
import ${p.JaxbPackage}.*;
#end
import ${project.JaxbPackage}.*;
import org.w3._2001.xmlschema.*;

/**
 * The marshaller responsible for serializing XML data.
 *
#if($author) * @author ${author}
#end
 */
public class $class.Name
#if($ImportPackage)
#set($object = ${ImportProject.getObject("AstToJaxbVisitor")})
  extends ${object.Package}.${object.Name}
#end
  implements ${visitor.FullName},
             net.sourceforge.czt.zed.visitor.TermVisitor
{
  private static final Logger sLogger =
    Logger.getLogger("#package(${class.Package}).${class.Name}");

  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  protected ${jaxbPackage}.ObjectFactory
    mObjectFactory = new ${jaxbPackage}.ObjectFactory();
  protected net.sourceforge.czt.core.jaxb.gen.ObjectFactory
    mAnnsObjectFactory = new net.sourceforge.czt.core.jaxb.gen.ObjectFactory();
  protected org.w3._2001.xmlschema.ObjectFactory
    mAnyTypeObjectFactory = new org.w3._2001.xmlschema.ObjectFactory();

  /**
   * A map that maps id's to the corresponding Object
   */
  protected Map mHash = new HashMap();

  public Object visitTerm($term zedObject)
  {
    throw(new UnsupportedOperationException());
  }

#foreach($c in $classes)
#if(! ${c.Abstract})
#if($c.Name == "RefName")

  public Object visitRefName(#package($AstPackage).RefName zedObject)
  {
    sLogger.entering("#package(${class.Package}).${class.Name}", "visitRefName", zedObject);
    try {
      RefName jaxbObject = mObjectFactory.createRefNameElement();
      if (zedObject.getDecl() != null) {
	String id = zedObject.getDecl().getId();
        sLogger.finer("Retrieve reference " + id);
        DeclName decl = (DeclName) mHash.get(id);
	if(decl == null) {
	  sLogger.warning("Could not find reference " + id);
	}
	jaxbObject.setDecl(decl);
      }
      {
        java.util.List list = zedObject.getAnns();
        if(list.size() > 0) {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
	    mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    $term term = ($term) iter.next();
            Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
        }
      }
      jaxbObject.setWord((String) zedObject.getWord());
      {
        java.util.List list = zedObject.getStroke();
        java.util.List newlist = jaxbObject.getStroke();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
	  $term term = ($term) iter.next();
          Object o = term.accept(this);
          newlist.add(o);
        }
      }
      sLogger.exiting("#package(${class.Package}).${class.Name}", "visitRefName", jaxbObject);
      return jaxbObject;
    } catch( Exception e) { e.printStackTrace(); return null; }
  }
#elseif($c.Name == "DeclName")
#set($DeclName = "#package(${AstPackage}).DeclName")

  public java.lang.Object visitDeclName($DeclName zedObject)
  {
    sLogger.entering("#package(${class.Package}).${class.Name}", "visitDeclName", zedObject);
    try {
      DeclName jaxbObject = mObjectFactory.createDeclNameElement();
      if (zedObject.getId() != null) {
        sLogger.finest("Setting Id to " + zedObject.getId().toString());
	jaxbObject.setId(zedObject.getId());
        sLogger.finer("Hashing " + zedObject.getId());
        mHash.put(zedObject.getId(), jaxbObject);
      }
      {
        java.util.List list = zedObject.getAnns();
        if(list.size() > 0) {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
	    mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    $term term = ($term) iter.next();
            Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
        }
      }
      sLogger.finest("Setting Word to " + zedObject.getWord().toString());
      jaxbObject.setWord(zedObject.getWord());
      {
        java.util.List list = zedObject.getStroke();
        sLogger.finest("Setting strokes " + list.toString());
        java.util.List newlist = jaxbObject.getStroke();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
	  $term term = ($term) iter.next();
          Object o = term.accept(this);
          newlist.add(o);
        }
      }
      sLogger.exiting("#package(${class.Package}).${class.Name}", "visitDeclName", jaxbObject);
      return jaxbObject;
    } catch( Exception e) { e.printStackTrace(); return null; }
  }
#else

  public Object visit${c.Name}(#package(${AstPackage}).${c.Name} zedObject)
  {
    sLogger.entering("#package(${class.Package}).${class.Name}", "visit${c.Name}", zedObject);

    $c.Name jaxbObject = null;
    try {
#if(${c.NameEqualsType})
      jaxbObject = mObjectFactory.create${c.Name}Element();
#else
      jaxbObject = mObjectFactory.create${c.Name}();
#end
#foreach($prop in $c.AllProperties)
#if($prop.Name == 'Content')
      {
        java.util.List list = zedObject.getContent();
        if(list.size() > 0) {
          AnyType anyType =
	    mAnyTypeObjectFactory.createAnyType();
	  java.util.List newlist = anyType.getContent();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    Object o = iter.next();
	    if (o instanceof $term) {
	      o = (($term) o).accept(this);
	    }
            newlist.add(o);
	  }
	  jaxbObject.setContent(anyType);
        }
      }
#elseif($prop.Type.FullName == 'java.util.List')
      {
        java.util.List list = zedObject.${prop.GetterName}();
        java.util.List newlist = jaxbObject.${prop.GetterName}();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          $term term = ($term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
#else
      if (zedObject.${prop.GetterName}()!=null) {
#if($prop.Type.FullName == 'String' || $prop.Type.FullName == 'java.lang.String' || $prop.Type.FullName == 'java.math.BigInteger' || $prop.Type.FullName =='org.w3._2001.xmlschema.AnyType' || $prop.Type.FullName == 'java.lang.Integer' || $prop.Type.FullName == 'Integer' || $prop.Type.FullName == 'java.lang.Boolean' || $prop.Type.FullName == 'Boolean' || $prop.Type.FullName == 'java.util.Calendar')
        jaxbObject.${prop.SetterName}(zedObject.${prop.GetterName}());
#elseif($prop.Type.FullName == 'Box' || $prop.Type.FullName == 'Cat' || $prop.Type.FullName == 'Assoc' || $prop.Type.FullName == 'Op')
        jaxbObject.${prop.SetterName}(zedObject.${prop.GetterName}().toString());
#else
        jaxbObject.${prop.SetterName}((${prop.Type.Name}) zedObject.${prop.GetterName}().accept(this));
#end
      }
#end
#end
    } catch(Exception e) { e.printStackTrace(); }
#if($c.isInstanceOf("TermA"))
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    $term term = ($term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }
#end

    sLogger.exiting("#package(${class.Package}).${class.Name}", "visit${c.Name}", jaxbObject);
    return jaxbObject;
  }
#end
#end
#end
}
