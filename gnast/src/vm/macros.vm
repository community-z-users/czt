## ##################################################
## List handling
## ##################################################

## ******************************
## list
## ----
## Takes a list of strings as argument and
## returns a string where all the list elements
## are concated and seperated by a comma.
## ******************************
#macro(list $list)
#foreach($element in $list)
#if($velocityCount == 1)${element}#else, ${element}#end#end#end

## ******************************
## typeVarList
## -----------
## Takes a list of Gnast variables as argument and
## returns a string of variable types and variable names
## seperated by comma.
## This is used to build an argument list for a method
## consisting of the given variables.
## ******************************
#macro(typeVarList $varList)
#foreach($var in $varList)
#if($velocityCount == 1)${var.Type.FullName} ${var.VarName}#else, ${var.Type.FullName} ${var.VarName}$#end#end#end

## ******************************
## varList
## -------
## Takes a list of Gnast variable as argument and
## returns a string of variable names seperated by comma.
## This is used to build an argument list for a method call
## consisting of the given variables.
## ******************************
#macro(varList $varList)
#foreach($var in $varList)
#if($velocityCount == 1)${var.VarName}#else, ${var.VarName}$#end#end#end

## ******************************
## memList
## -------
## Takes a list of Gnast properties as argument and
## returns a string of member variable names seperated by comma.
## This is used to build an argument list for a method call
## consisting of the given property member variables.
## ******************************
#macro(memList $propList)
#foreach($prop in $propList)
#if($velocityCount == 1)${prop.MemVarName}#else, ${prop.MemVarName}$#end#end#end

## ******************************
## getterList
## -------
## Takes a list of Gnast properties as argument and
## returns a string of member variable names seperated by comma.
## This is used to build an argument list for a method call
## consisting of the given property member variables.
## ******************************
#macro(getterList $propList)
#foreach($prop in $propList)
#if($velocityCount == 1)${prop.GetterName}()#else, ${prop.GetterName}()$#end#end#end

## ##################################################
## Making class and interface generation easier
## ##################################################
## Adds the base package to the given package name
#macro(package $name)
${project.BasePackage}.$name#end

#macro(fullname $class)
${class.Name}.${class.Package}#end

#macro(abstract $class)
#if($class.Abstract) abstract#end#end
