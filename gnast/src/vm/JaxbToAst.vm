#*
Copyright 2003, 2005, 2006, 2007 Petra Malik
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*#
#set($factory = ${project.getGenObject("factory")})
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE JaxbToAst.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

#if($copyright)#include($copyright)#end
******************************************************************************/

package #package(${class.Package});

import java.util.*;
import java.util.logging.Logger;

import com.sun.org.apache.xerces.internal.dom.ElementNSImpl;
import javax.xml.bind.JAXBElement;

import net.sourceforge.czt.util.ReflectiveVisitor;
import ${project.AstPackage}.*;
#foreach($p in $projects)
import ${p.AstPackage}.*;
#end

/**
 * The unmarshaller responsible for deserializing XML data.
 *
#if($author) * @author ${author}
#end
 */
public class ${class.Name}#if($ImportProject)
 extends ${ImportProject.BasePackage}.${class.Package}.${class.Name}
#else
 extends ReflectiveVisitor
#end
{
  protected ${factory.Name} m${factory.Name}_;

  public ${class.Name}()
  {
    m${factory.Name}_ =
      new ${project.getGenObject("factoryImpl").FullName}();
  }

  public ${class.Name}(#foreach($p in $projects)${p.getGenObject("factory").FullName} v${p.getGenObject("factory").Name}, #end${project.getGenObject("factory").Name} v${factory.Name})
  {
#if(${ImportProject})    super(#foreach($p in $projects)#if($velocityCount == 1)v${p.getGenObject("factory").Name}#else, v${p.getGenObject("factory").Name}#end#end);
#end
    m${factory.Name}_ = v${factory.Name};
  }

  private static Logger getLogger()
  {
    return Logger.getLogger("#package(${class.Package}).${class.Name}");
  }

  public Object visitObject(Object object)
  {
    getLogger().fine("Visit " + object.getClass().toString());
    if (object instanceof String
        || object instanceof Boolean
        || object instanceof List
        || object instanceof Integer
        || object instanceof java.math.BigInteger
        || object instanceof net.sourceforge.czt.base.ast.Digit) {
      return object;
    }
    throw new UnsupportedOperationException("Unexpected element "
                                            + object.getClass().getName());
  }

  public Object visitJAXBElement(JAXBElement jaxbElement)
  {
    return dispatch(jaxbElement.getValue());
  }

  public Object visitElementNSImpl(ElementNSImpl obj)
  {
    return obj;
  }

#foreach($c in $classes)
#if(!$c.Abstract)

  public Object visit${c.Name}(${project.JaxbGenPackage}.${c.Name} jaxbObject)
  {
    getLogger().entering("${class.Name}", "visit${c.Name}", jaxbObject);
#foreach($prop in $c.AllProperties)
#if(${prop.Name} == 'Content')
    List<Object> content = new Vector<Object>();
    if (jaxbObject.getContent() != null) {
      content.add(dispatch(jaxbObject.getContent()));
    }
#elseif(${prop.isList()})
    ${prop.Type.FullName} ${prop.VarName} = new Vector<${prop.ListType.FullName}>();
    for (Object obj : jaxbObject.${prop.GetterName}()) {
      ${prop.ListType.FullName} o = (${prop.ListType.FullName}) dispatch(obj);
      ${prop.VarName}.add(o);
    }
#elseif($prop.Type.Name == 'Box' || $prop.Type.Name == 'Cat' || $prop.Type.Name == 'Assoc' || $prop.Type.Name == 'DirectiveType' || $prop.Type.Name == 'And' || $prop.Type.Name == 'CommUsage' || $prop.Type.Name == 'CommPattern' || $prop.Type.Name == 'CallKind' || $prop.Type.Name == 'Model' || $prop.Type.Name == 'Transformation' || $prop.Type.Name == 'CircusJokerType' || $prop.Type.Name == 'ProcessKind' || $prop.Type.Name == 'ParamQualifier' || $prop.Type.Name == 'JokerType')
    ${prop.Type.FullName} ${prop.VarName} = null;
    if (jaxbObject.${prop.GetterName}() != null) {
      String ${prop.VarName}Jaxb = jaxbObject.${prop.GetterName}().value();
      ${prop.VarName} = ${prop.Type.FullName}.fromString(${prop.VarName}Jaxb);
    }
#elseif($prop.Type.Name == 'Boolean')
    ${prop.Type.FullName} ${prop.VarName} =
      (${prop.Type.FullName}) jaxbObject.is${prop.Name}();
#else
    ${prop.Type.FullName} ${prop.VarName} =
      (${prop.Type.FullName}) dispatch(jaxbObject.${prop.GetterName}());
#end
#end
    ${c.Name} erg = m${factory.Name}_.create${c.Name}(#varList(${c.AllProperties}));

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getAny() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("${class.Name}", "visit${c.Name}", erg);
    return erg;
  }
#end
#end
}
