#*
Copyright 2003 Petra Malik
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*#
#set($jaxbPackage = "${BasePackage}.$JaxbPackage")
#if($copyright)#include($copyright)
#end

package #package(${class.Package});

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.util.ReflectiveVisitor;
import #package(${AstPackage}).*;

/**
 * The unmarshaller responsible for deserializing XML data.
 *
#if($author) * @author ${author}
#end
 */
public class ${class.Name}#if($ImportProject)
 extends ${ImportProject.BasePackage}.${class.Package}.${class.Name}
#else
 extends ReflectiveVisitor
#end
{
  protected ${AstFactoryInterface_Name} objectFactory_;

  public ${class.Name}()
  {
    objectFactory_ =
      new #package(${AstFactoryImpl_Package}).${AstFactoryImpl_Name}();
  }

  public ${class.Name}(${AstFactoryInterface_Name} objectFactory)
  {
    objectFactory_ = objectFactory;
  }

  private static Logger getLogger()
  {
    return Logger.getLogger("#package(${class.Package}).${class.Name}");
  }

  public Object visitObject(Object object) {
    getLogger().fine("Visit " + object.getClass().toString());
    return object;
  }
#foreach($c in $classes)
#if(!$c.Abstract)

  public Object visit${c.Name}(${jaxbPackage}.${c.Name} jaxbObject)
  {
    getLogger().entering("${class.Name}", "visit${c.Name}", jaxbObject);
#foreach($prop in $c.AllProperties)
#if(${prop.Name} == 'Content')
    java.util.List content = new java.util.Vector();
    if(jaxbObject.getContent() != null &&
       jaxbObject.getContent().getContent() != null) {
      for(Iterator iter=jaxbObject.getContent().getContent().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	content.add(o);
      }
    }
#elseif(${prop.Type.FullName} == 'java.util.List')
    java.util.List ${prop.VarName} = new java.util.Vector();
    for(Iterator iter=jaxbObject.${prop.GetterName}().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      ${prop.VarName}.add(o);
    }
#elseif($prop.Type.FullName == 'Box' || $prop.Type.FullName == 'Cat' || $prop.Type.FullName == 'Assoc' || $prop.Type.FullName == 'Op')
    ${prop.Type.FullName} ${prop.VarName} = ${prop.Type.FullName}.fromString(jaxbObject.${prop.GetterName}());
#else
    ${prop.Type.FullName} ${prop.VarName} =
      (${prop.Type.FullName}) dispatch(jaxbObject.${prop.GetterName}());
#end
#end
    ${c.Name} erg = objectFactory_.create${c.Name}(#varList(${c.AllProperties}));
#if($c.isInstanceOf("TermA"))
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
#end
    getLogger().exiting("${class.Name}", "visit${c.Name}", erg);
    return erg;
  }
#end
#end
}
