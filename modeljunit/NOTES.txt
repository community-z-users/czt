TODO:
* implement a visualizer?
  Perhaps using JGraph (http://www.jgraph.com) or 
  GINY (http://csbi.sourceforge.net) or some other Java graphics package.
  See http://manageability.org/blog/stuff/open-source-graph-network-visualization-in-java


Log of Design and Implementation Changes
========================================
14Dec05: First version as subclass of junit TestCase.  Loads FSM.class
21Dec05: Moved boolean testing parameter from transitions into just init().
24Dec05: Added coverage listeners.  Renamed @transition to @Action.
03Jan06: Implemented graph builder (with random seed).
04Jan06: Made CoverageHistory into a separate wrapper class.
04Jan06: Non-resetable FSMs make buildGraph loop.  So added random init().
	     Same in fsmRandomWalk -- this increased coverage slightly.
04Jan06: Added State coverage and Transition coverage.
05Jan06: Added Transition-Pair coverage.


Experiences using ModelJUnit to test ZLive FlatPred subclasses
==============================================================
Initially, all testing was done on the FlatMult subclass of FlatPred.

Wed 21 Dec 2005: 1/2 day
----------------
Designed and implemented FlatPredModel with 5 states and 6 actions.  
Found one error, but it was in the test harness part: 
(I added something to env_, but forgot to save the result.)



Sat 24 Dec 2005: 1 hour
----------------
[Plus about 4 hours on the ModelJUnit classes, implementing Action coverage]
Split the chooseModeIII into lots of modes.
Another adaptor error: forgot to use new env after evaluation.
      env_ = pred_.getEnvir();
It takes about 50 random steps to reach 100% Action coverage.



Sat 24 Dec 2005: 2 more hours (about 1/2 hour writing model, rest debugging).
----------------
Split the startEval into 1 good-value and 3 bad-value transitions.
Another adaptor error: quite difficult to find (about 1 hour+).
     startEval was assigning the output env to be the current one,
     but in fact, the FlatPred was still using the original input env.
     So this caused the *next* startEval operation to fail one of its
     checks.

Then an IUT error!: with inputs x=2, z=5, there is no solution for y,
but FlatMult returns true (with y=3 I guess).

After that was fixed, I got an x=0 exception, which was expected,
but not by the test adaptor/model.  After trying some other bad
combinations, it became apparent that bad values can have solutions
when non-III modes are used!  The model needs to be parameterized
in some different way!

Model now has 13 Actions and it takes a bit over 200 steps
to reach 100% coverage.


Mon 2 Jan 2006:  2 more hours generalising model.
----------------
It now takes 2 Eval data objects which parameterize the eval1/eval2 actions.
Found one minor adaptor/oracle bug -- checked the wrong envir in chooseMode.
Model now has 11 actions and about 14 states.
It takes 43 steps to reach 100% action coverage.


Wed 4 Jan 2006:  a few minutes fixing the model bug.
---------------
Noticed a bug in FlatPredModel while looking at BuildGraph output
-- this illustrates the benefit of being able to 'see' the graph.
It had NoModeIII, NoModeIOI... states, as well as the expected NoMode.
(I had not realised that newMode needed to set mode_ and env_ to null).
This meant that NoMode was only reachable from init.
This non-resetable loop made fsmBuildGraph loop infinitely, and
exposed the need for a random init.  Adding the random init to
fsmRandomWalk also increased transition coverage from 61 to 65 (the max).
Before the FlatPredModel bug was fixed, the model had:
  11 actions, 19 states, 65 transitions.  
  Took 6 inits and 145 transitions to build the graph.
After the model was corrected, it had:
  11 actions, 14 states, 40 transitions.
  Took 8 inits and 115 transitions to build the graph.


Thu 5 Jan 2006:
---------------
Coverage metrics:
