                  Compiling and installing CZT
                  ============================

These instructions are for users of a source version of CZT.

CZT includes the following sub-projects in the form of sub-directories
in <CZT_HOME> (which is the directory where this INSTALL.txt file is in).
Note that not all of these may be included in a given release.

corejava/    Java AST classes for standard Z
java_cup/    The Java Cup parser generator adapted for the CZT project
jaxb/        Support classes for reading/writing Z XML files.
jedit/       Several CZT plugins for the jEdit editor
modeljunit/  Model-based unit testing, used by ZLive
parser/      Parses and prints Z specs (various markups) into and from ZML
rules/       Support for Z AST transformation rules (see doc/papers/rules)
typechecker/ Typechecks Z and Object-Z specifications
ui/          User interface for calling the various CZT tools
util/        Support classes that are independent of Z
web/         Sources to the czt.sourceforge.net web site
zlive/       Z animator
zml/         XML schemas for Z and several Z extensions, with examples

Here are the main dependencies between these projects:
jaxb         uses:  util
corejava     uses:  jaxb
parser       uses:  session, java_cup
typechecker  uses:  parser
rules        uses:  typechecker
zlive        uses:  typechecker, modeljunit
jedit        uses:  zlive

See the README file in each directory for more details on each sub-project.


Currently, there are two alternative ways to compile CZT.  The
recommended way is to use maven.  It doesn't require to install so
many things in advance since maven downloads the dependencies
automatically.  Using ant is the more traditional way but it requires
to install all the 3rd party software in advance.  It also requires to
set the paths to the installed software in the czt.properties file
appropriately, which is cumbersome.


Compiling using maven
*********************

You need at least the following:
- J2SE Development Kit >= 5.0
  http://java.sun.com/javase/downloads/
- Maven version >= 2.0.4
  http://maven.apache.org/
to build CZT.  If you don't have these installed on your system,
you should download and install them before you can build czt.

Maven will download most of the dependencies automatically.
However, there are a few things that maven can't download
for you.  This includes
jflex (downloadable from http://jflex.de/download.html),
jEdit (downloadable from http://jedit.org/index.php?page=download),
and various jEdit plugins.  Please follow the instructions given by
maven to install those in the maven repository so that maven can find
them.
The required jEdit plugins, namely Console, ErrorList, and SideKick,
can be installed using jEdit's plugin manager (select Plugins/Plugin
Manager from the jEdit menu).  After the installation, the jar files
of the plugins can be found in the jars directory of the jEdit settings
or home directory.  This is usually <JEDIT_INSTALL_DIR>/jars or
<USER_HOME>/.jedit/jars.  To find out the location for you setup,
select Utilities/Troubleshooting/Activity Log from the jEdit menu.
The displayed log file should tell you the values for your jEdit
settings and home directory.

To build CZT, you need to increase the Java heap size to at least
256Mb, which is done by setting the MAVEN_OPTS environment variable
to "-Xmx256m".  Then change into the <CZT_HOME> directory, and call
  mvn install
This should compile, test, package, and install all the CZT tools into
your local maven repository, ready to be used in your own projects.
Running the CZT tests takes quite a long time.  If you want to skip
running the unit tests call
  mvn -Dmaven.test.skip=true install
instead.

See also README.txt for information how to use CZT.


Compiling using ant
*******************

Most of the sub-projects will need at least the following:
- Java 2 SDK >= 1.5
  http://java.sun.com/j2se/
- Ant version >= 1.6
  http://ant.apache.org/
- Java Web Services Developer Pack (JWSDP) >= 1.5
  http://java.sun.com/webservices/downloads/webservicespack.html

If you don't have these installed on your system,
you should download and install them before you compile and run czt.

Additional requirements are described in the top-level czt.properties
file--you should start by reading that file, checking that you have
installed the libraries/tools that are needed for the subprojects
that you want to use, and set the paths to point to the correct
installation locations for your system.

More information about the requirements for each subproject can
often be obtained from the README.txt files within the sub-projects
directories (but these are sometimes less up-to-date than czt.properties).
For instance, read '<CZT_HOME>/corejava/README.txt' to get detailed
information on requirements for the corejava sub-project.

1. Customise the file czt.properties.
   CZT relies on quite a few (10-15!) external libraries and tools.
   You will need to install these and change the paths in czt.properties
   to point to the correct location of these libraries/tools on your system.
   Each path variable in czt.properties includes a URL to obtain
   the library/tool from, and a recommended version to use.
   We suggest that you use the recommended versions to get CZT
   working correctly, before you experiment with newer (or older)
   versions.  Most problems with compiling CZT are due to differences
   between versions of external libraries.

2. Call `ant -Xmx256m'
   You will need to have ant in your path to do this, obviously.
   You should also ensure that JUnit is correctly installed and known
   to ant (you should have the JUnit*.jar file in ant's lib directory).

   The argument increases the Java heap size to 256Mb, which is 
   necessary to build some of the CZT parsers.
   Alternatively, you can set the ANT_OPTS environment variable
   to -Xmx256m before you call ant.

   By default, ant will build the jar files and install them in 
   the '<CZT_HOME>/lib' directory.  Optionally, you can pass an 
   argument to ant.  Call "ant -projecthelp" to get help information 
   about which arguments are available.

   The jar file <CZT_HOME>/lib/czt.jar contains all the CZT tools but
   without 3th party dependencies.  In contrast, the czt-dep.jar file
   created by maven contains all dependencies, including 3th party.
   You need to create the czt-dep.jar file yourself, or you need to
   make sure that the 3th party libraries are in your classpath.

3. Enjoy CZT!  (See the README.txt file for more information)


Troubleshooting
***************
Please read the README.txt file within the sub-project you have
trouble with.
