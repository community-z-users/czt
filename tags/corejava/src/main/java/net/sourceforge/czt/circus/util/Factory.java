
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.util;

import net.sourceforge.czt.circus.ast.*;
import net.sourceforge.czt.z.ast.*;

/**
 * <p>An object factory for the AST.
 *
 * <p>This object factory allows the programmer
 * to programatically construct new instances of concrete Z terms.
 * </p>
 *
 * @author Gnast version 0.1
 */
public class Factory
  extends net.sourceforge.czt.z.util.Factory
{
  private net.sourceforge.czt.circus.ast.CircusFactory factory_ =
    new net.sourceforge.czt.circus.impl.CircusFactoryImpl();

  /**
   * Creates a new convenience factory that uses the standard factory
   * implementation for creating AST terms.
   */
  public Factory()
  {
    super();
  }

  /**
   * Creates a new convenience factory that uses the given base factory
   * for creating AST terms.
   */
  public Factory(net.sourceforge.czt.circus.ast.CircusFactory factory)
  {
    super(factory);
    factory_ = factory;
  }

  /**
   * Creates an instance of {@link ChannelSetType}.
   *
   * @return the new instance of ChannelSetType.
   */
  public ChannelSetType createChannelSetType()
  {
    return factory_.createChannelSetType();
  }

  /**
   * Creates an instance of {@link ChannelSetType} with the given children.
   *
   * @return the new instance of ChannelSetType.
   */
  public ChannelSetType createChannelSetType( net.sourceforge.czt.z.ast.Signature  signature)
  {
    return factory_.createChannelSetType(signature);
  }

  /**
   * Creates an instance of {@link GuardedAction}.
   *
   * @return the new instance of GuardedAction.
   */
  public GuardedAction createGuardedAction()
  {
    return factory_.createGuardedAction();
  }

  /**
   * Creates an instance of {@link GuardedAction} with the given children.
   *
   * @return the new instance of GuardedAction.
   */
  public GuardedAction createGuardedAction( CircusAction  circusAction, net.sourceforge.czt.z.ast.Pred  pred)
  {
    return factory_.createGuardedAction(circusAction, pred);
  }

  /**
   * Creates an instance of {@link ParallelAction}.
   *
   * @return the new instance of ParallelAction.
   */
  public ParallelAction createParallelAction()
  {
    return factory_.createParallelAction();
  }

  /**
   * Creates an instance of {@link ParallelAction} with the given children.
   *
   * @return the new instance of ParallelAction.
   */
  public ParallelAction createParallelAction( CircusAction  leftAction, CircusAction  rightAction, NameSet  leftNameSet, NameSet  rightNameSet, ChannelSet  channelSet)
  {
    return factory_.createParallelAction(leftAction, rightAction, leftNameSet, rightNameSet, channelSet);
  }

  /**
   * Creates an instance of {@link ChannelDecl}.
   *
   * @return the new instance of ChannelDecl.
   */
  public ChannelDecl createChannelDecl()
  {
    return factory_.createChannelDecl();
  }

  /**
   * Creates an instance of {@link ChannelDecl} with the given children.
   *
   * @return the new instance of ChannelDecl.
   */
  public ChannelDecl createChannelDecl( net.sourceforge.czt.z.ast.DeclNameList  genFormals, net.sourceforge.czt.z.ast.DeclNameList  declNameList, net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createChannelDecl(genFormals, declNameList, expr);
  }

  /**
   * Creates an instance of {@link HideAction}.
   *
   * @return the new instance of HideAction.
   */
  public HideAction createHideAction()
  {
    return factory_.createHideAction();
  }

  /**
   * Creates an instance of {@link HideAction} with the given children.
   *
   * @return the new instance of HideAction.
   */
  public HideAction createHideAction( CircusAction  circusAction, ChannelSet  channelSet)
  {
    return factory_.createHideAction(circusAction, channelSet);
  }

  /**
   * Creates an instance of {@link ExtChoiceProcessIte}.
   *
   * @return the new instance of ExtChoiceProcessIte.
   */
  public ExtChoiceProcessIte createExtChoiceProcessIte()
  {
    return factory_.createExtChoiceProcessIte();
  }

  /**
   * Creates an instance of {@link ExtChoiceProcessIte} with the given children.
   *
   * @return the new instance of ExtChoiceProcessIte.
   */
  public ExtChoiceProcessIte createExtChoiceProcessIte( CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createExtChoiceProcessIte(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link ChaosAction}.
   *
   * @return the new instance of ChaosAction.
   */
  public ChaosAction createChaosAction()
  {
    return factory_.createChaosAction();
  }

  /**
   * Creates an instance of {@link CircusFieldList}.
   *
   * @return the new instance of CircusFieldList.
   */
  public CircusFieldList createCircusFieldList()
  {
    return factory_.createCircusFieldList();
  }

  /**
   * Creates an instance of {@link CircusFieldList} with the given children.
   *
   * @return the new instance of CircusFieldList.
   */
  public CircusFieldList createCircusFieldList(java.util.List<? extends Field>
 field)
  {
    return factory_.createCircusFieldList(field);
  }

  /**
   * Creates an instance of {@link CircusStateAnn}.
   *
   * @return the new instance of CircusStateAnn.
   */
  public CircusStateAnn createCircusStateAnn()
  {
    return factory_.createCircusStateAnn();
  }

  /**
   * Creates an instance of {@link IntChoiceProcessIte}.
   *
   * @return the new instance of IntChoiceProcessIte.
   */
  public IntChoiceProcessIte createIntChoiceProcessIte()
  {
    return factory_.createIntChoiceProcessIte();
  }

  /**
   * Creates an instance of {@link IntChoiceProcessIte} with the given children.
   *
   * @return the new instance of IntChoiceProcessIte.
   */
  public IntChoiceProcessIte createIntChoiceProcessIte( CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createIntChoiceProcessIte(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelAction}.
   *
   * @return the new instance of AlphabetisedParallelAction.
   */
  public AlphabetisedParallelAction createAlphabetisedParallelAction()
  {
    return factory_.createAlphabetisedParallelAction();
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelAction} with the given children.
   *
   * @return the new instance of AlphabetisedParallelAction.
   */
  public AlphabetisedParallelAction createAlphabetisedParallelAction( CircusAction  leftAction, CircusAction  rightAction, NameSet  leftNameSet, NameSet  rightNameSet, ChannelSet  leftAlpha, ChannelSet  rightAlpha)
  {
    return factory_.createAlphabetisedParallelAction(leftAction, rightAction, leftNameSet, rightNameSet, leftAlpha, rightAlpha);
  }

  /**
   * Creates an instance of {@link SkipAction}.
   *
   * @return the new instance of SkipAction.
   */
  public SkipAction createSkipAction()
  {
    return factory_.createSkipAction();
  }

  /**
   * Creates an instance of {@link ProcessType}.
   *
   * @return the new instance of ProcessType.
   */
  public ProcessType createProcessType()
  {
    return factory_.createProcessType();
  }

  /**
   * Creates an instance of {@link ProcessType} with the given children.
   *
   * @return the new instance of ProcessType.
   */
  public ProcessType createProcessType( ProcessSignature  processSignature)
  {
    return factory_.createProcessType(processSignature);
  }

  /**
   * Creates an instance of {@link SeqProcessIdx}.
   *
   * @return the new instance of SeqProcessIdx.
   */
  public SeqProcessIdx createSeqProcessIdx()
  {
    return factory_.createSeqProcessIdx();
  }

  /**
   * Creates an instance of {@link SeqProcessIdx} with the given children.
   *
   * @return the new instance of SeqProcessIdx.
   */
  public SeqProcessIdx createSeqProcessIdx( CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createSeqProcessIdx(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link ExtChoiceActionIte}.
   *
   * @return the new instance of ExtChoiceActionIte.
   */
  public ExtChoiceActionIte createExtChoiceActionIte()
  {
    return factory_.createExtChoiceActionIte();
  }

  /**
   * Creates an instance of {@link ExtChoiceActionIte} with the given children.
   *
   * @return the new instance of ExtChoiceActionIte.
   */
  public ExtChoiceActionIte createExtChoiceActionIte( CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createExtChoiceActionIte(circusAction, declList);
  }

  /**
   * Creates an instance of {@link QualifiedDecl}.
   *
   * @return the new instance of QualifiedDecl.
   */
  public QualifiedDecl createQualifiedDecl()
  {
    return factory_.createQualifiedDecl();
  }

  /**
   * Creates an instance of {@link QualifiedDecl} with the given children.
   *
   * @return the new instance of QualifiedDecl.
   */
  public QualifiedDecl createQualifiedDecl( net.sourceforge.czt.z.ast.DeclNameList  declNameList, net.sourceforge.czt.z.ast.Expr  expr, ParamQualifier  paramQualifier)
  {
    return factory_.createQualifiedDecl(declNameList, expr, paramQualifier);
  }

  /**
   * Creates an instance of {@link AssignmentPairs}.
   *
   * @return the new instance of AssignmentPairs.
   */
  public AssignmentPairs createAssignmentPairs()
  {
    return factory_.createAssignmentPairs();
  }

  /**
   * Creates an instance of {@link AssignmentPairs} with the given children.
   *
   * @return the new instance of AssignmentPairs.
   */
  public AssignmentPairs createAssignmentPairs( net.sourceforge.czt.z.ast.RefNameList  lHS, net.sourceforge.czt.z.ast.ExprList  rHS)
  {
    return factory_.createAssignmentPairs(lHS, rHS);
  }

  /**
   * Creates an instance of {@link IndexedProcess}.
   *
   * @return the new instance of IndexedProcess.
   */
  public IndexedProcess createIndexedProcess()
  {
    return factory_.createIndexedProcess();
  }

  /**
   * Creates an instance of {@link IndexedProcess} with the given children.
   *
   * @return the new instance of IndexedProcess.
   */
  public IndexedProcess createIndexedProcess( CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createIndexedProcess(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link LetMuAction}.
   *
   * @return the new instance of LetMuAction.
   */
  public LetMuAction createLetMuAction()
  {
    return factory_.createLetMuAction();
  }

  /**
   * Creates an instance of {@link LetMuAction} with the given children.
   *
   * @return the new instance of LetMuAction.
   */
  public LetMuAction createLetMuAction( CircusAction  circusAction, net.sourceforge.czt.z.ast.ParaList  paraList)
  {
    return factory_.createLetMuAction(circusAction, paraList);
  }

  /**
   * Creates an instance of {@link ChannelType}.
   *
   * @return the new instance of ChannelType.
   */
  public ChannelType createChannelType()
  {
    return factory_.createChannelType();
  }

  /**
   * Creates an instance of {@link ChannelType} with the given children.
   *
   * @return the new instance of ChannelType.
   */
  public ChannelType createChannelType( net.sourceforge.czt.z.ast.DeclNameList  genFormals, net.sourceforge.czt.z.ast.Type2  declaredType, net.sourceforge.czt.z.ast.Type2  resolvedType)
  {
    return factory_.createChannelType(genFormals, declaredType, resolvedType);
  }

  /**
   * Creates an instance of {@link InterleaveAction}.
   *
   * @return the new instance of InterleaveAction.
   */
  public InterleaveAction createInterleaveAction()
  {
    return factory_.createInterleaveAction();
  }

  /**
   * Creates an instance of {@link InterleaveAction} with the given children.
   *
   * @return the new instance of InterleaveAction.
   */
  public InterleaveAction createInterleaveAction( CircusAction  leftAction, CircusAction  rightAction, NameSet  leftNameSet, NameSet  rightNameSet)
  {
    return factory_.createInterleaveAction(leftAction, rightAction, leftNameSet, rightNameSet);
  }

  /**
   * Creates an instance of {@link IntChoiceProcess}.
   *
   * @return the new instance of IntChoiceProcess.
   */
  public IntChoiceProcess createIntChoiceProcess()
  {
    return factory_.createIntChoiceProcess();
  }

  /**
   * Creates an instance of {@link IntChoiceProcess} with the given children.
   *
   * @return the new instance of IntChoiceProcess.
   */
  public IntChoiceProcess createIntChoiceProcess( CircusProcess  leftProc, CircusProcess  rightProc)
  {
    return factory_.createIntChoiceProcess(leftProc, rightProc);
  }

  /**
   * Creates an instance of {@link SchExprAction}.
   *
   * @return the new instance of SchExprAction.
   */
  public SchExprAction createSchExprAction()
  {
    return factory_.createSchExprAction();
  }

  /**
   * Creates an instance of {@link SchExprAction} with the given children.
   *
   * @return the new instance of SchExprAction.
   */
  public SchExprAction createSchExprAction( net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createSchExprAction(expr);
  }

  /**
   * Creates an instance of {@link IfGuardedCommand}.
   *
   * @return the new instance of IfGuardedCommand.
   */
  public IfGuardedCommand createIfGuardedCommand()
  {
    return factory_.createIfGuardedCommand();
  }

  /**
   * Creates an instance of {@link IfGuardedCommand} with the given children.
   *
   * @return the new instance of IfGuardedCommand.
   */
  public IfGuardedCommand createIfGuardedCommand(java.util.List<? extends GuardedAction>
 guardedAction)
  {
    return factory_.createIfGuardedCommand(guardedAction);
  }

  /**
   * Creates an instance of {@link ParallelProcessIte}.
   *
   * @return the new instance of ParallelProcessIte.
   */
  public ParallelProcessIte createParallelProcessIte()
  {
    return factory_.createParallelProcessIte();
  }

  /**
   * Creates an instance of {@link ParallelProcessIte} with the given children.
   *
   * @return the new instance of ParallelProcessIte.
   */
  public ParallelProcessIte createParallelProcessIte( CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList, ChannelSet  channelSet)
  {
    return factory_.createParallelProcessIte(circusProcess, declList, channelSet);
  }

  /**
   * Creates an instance of {@link ExtChoiceProcess}.
   *
   * @return the new instance of ExtChoiceProcess.
   */
  public ExtChoiceProcess createExtChoiceProcess()
  {
    return factory_.createExtChoiceProcess();
  }

  /**
   * Creates an instance of {@link ExtChoiceProcess} with the given children.
   *
   * @return the new instance of ExtChoiceProcess.
   */
  public ExtChoiceProcess createExtChoiceProcess( CircusProcess  leftProc, CircusProcess  rightProc)
  {
    return factory_.createExtChoiceProcess(leftProc, rightProc);
  }

  /**
   * Creates an instance of {@link StopAction}.
   *
   * @return the new instance of StopAction.
   */
  public StopAction createStopAction()
  {
    return factory_.createStopAction();
  }

  /**
   * Creates an instance of {@link ExtChoiceAction}.
   *
   * @return the new instance of ExtChoiceAction.
   */
  public ExtChoiceAction createExtChoiceAction()
  {
    return factory_.createExtChoiceAction();
  }

  /**
   * Creates an instance of {@link ExtChoiceAction} with the given children.
   *
   * @return the new instance of ExtChoiceAction.
   */
  public ExtChoiceAction createExtChoiceAction( CircusAction  leftAction, CircusAction  rightAction)
  {
    return factory_.createExtChoiceAction(leftAction, rightAction);
  }

  /**
   * Creates an instance of {@link InterleaveProcessIdx}.
   *
   * @return the new instance of InterleaveProcessIdx.
   */
  public InterleaveProcessIdx createInterleaveProcessIdx()
  {
    return factory_.createInterleaveProcessIdx();
  }

  /**
   * Creates an instance of {@link InterleaveProcessIdx} with the given children.
   *
   * @return the new instance of InterleaveProcessIdx.
   */
  public InterleaveProcessIdx createInterleaveProcessIdx( CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createInterleaveProcessIdx(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelProcessIte}.
   *
   * @return the new instance of AlphabetisedParallelProcessIte.
   */
  public AlphabetisedParallelProcessIte createAlphabetisedParallelProcessIte()
  {
    return factory_.createAlphabetisedParallelProcessIte();
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelProcessIte} with the given children.
   *
   * @return the new instance of AlphabetisedParallelProcessIte.
   */
  public AlphabetisedParallelProcessIte createAlphabetisedParallelProcessIte( CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList, ChannelSet  channelSet)
  {
    return factory_.createAlphabetisedParallelProcessIte(circusProcess, declList, channelSet);
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelProcessIdx}.
   *
   * @return the new instance of AlphabetisedParallelProcessIdx.
   */
  public AlphabetisedParallelProcessIdx createAlphabetisedParallelProcessIdx()
  {
    return factory_.createAlphabetisedParallelProcessIdx();
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelProcessIdx} with the given children.
   *
   * @return the new instance of AlphabetisedParallelProcessIdx.
   */
  public AlphabetisedParallelProcessIdx createAlphabetisedParallelProcessIdx( CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList, ChannelSet  channelSet)
  {
    return factory_.createAlphabetisedParallelProcessIdx(circusProcess, declList, channelSet);
  }

  /**
   * Creates an instance of {@link PrefixingAction}.
   *
   * @return the new instance of PrefixingAction.
   */
  public PrefixingAction createPrefixingAction()
  {
    return factory_.createPrefixingAction();
  }

  /**
   * Creates an instance of {@link PrefixingAction} with the given children.
   *
   * @return the new instance of PrefixingAction.
   */
  public PrefixingAction createPrefixingAction( CircusAction  circusAction, Communication  communication)
  {
    return factory_.createPrefixingAction(circusAction, communication);
  }

  /**
   * Creates an instance of {@link NameSetType}.
   *
   * @return the new instance of NameSetType.
   */
  public NameSetType createNameSetType()
  {
    return factory_.createNameSetType();
  }

  /**
   * Creates an instance of {@link NameSetType} with the given children.
   *
   * @return the new instance of NameSetType.
   */
  public NameSetType createNameSetType( net.sourceforge.czt.z.ast.Signature  signature)
  {
    return factory_.createNameSetType(signature);
  }

  /**
   * Creates an instance of {@link OnTheFlyDefAnn}.
   *
   * @return the new instance of OnTheFlyDefAnn.
   */
  public OnTheFlyDefAnn createOnTheFlyDefAnn()
  {
    return factory_.createOnTheFlyDefAnn();
  }

  /**
   * Creates an instance of {@link ChannelSet}.
   *
   * @return the new instance of ChannelSet.
   */
  public ChannelSet createChannelSet()
  {
    return factory_.createChannelSet();
  }

  /**
   * Creates an instance of {@link ChannelSet} with the given children.
   *
   * @return the new instance of ChannelSet.
   */
  public ChannelSet createChannelSet( net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createChannelSet(expr);
  }

  /**
   * Creates an instance of {@link AssignmentCommand}.
   *
   * @return the new instance of AssignmentCommand.
   */
  public AssignmentCommand createAssignmentCommand()
  {
    return factory_.createAssignmentCommand();
  }

  /**
   * Creates an instance of {@link AssignmentCommand} with the given children.
   *
   * @return the new instance of AssignmentCommand.
   */
  public AssignmentCommand createAssignmentCommand( AssignmentPairs  assignmentPairs)
  {
    return factory_.createAssignmentCommand(assignmentPairs);
  }

  /**
   * Creates an instance of {@link SeqProcessIte}.
   *
   * @return the new instance of SeqProcessIte.
   */
  public SeqProcessIte createSeqProcessIte()
  {
    return factory_.createSeqProcessIte();
  }

  /**
   * Creates an instance of {@link SeqProcessIte} with the given children.
   *
   * @return the new instance of SeqProcessIte.
   */
  public SeqProcessIte createSeqProcessIte( CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createSeqProcessIte(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link IntChoiceProcessIdx}.
   *
   * @return the new instance of IntChoiceProcessIdx.
   */
  public IntChoiceProcessIdx createIntChoiceProcessIdx()
  {
    return factory_.createIntChoiceProcessIdx();
  }

  /**
   * Creates an instance of {@link IntChoiceProcessIdx} with the given children.
   *
   * @return the new instance of IntChoiceProcessIdx.
   */
  public IntChoiceProcessIdx createIntChoiceProcessIdx( CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createIntChoiceProcessIdx(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link BasicProcessSignature}.
   *
   * @return the new instance of BasicProcessSignature.
   */
  public BasicProcessSignature createBasicProcessSignature()
  {
    return factory_.createBasicProcessSignature();
  }

  /**
   * Creates an instance of {@link BasicProcessSignature} with the given children.
   *
   * @return the new instance of BasicProcessSignature.
   */
  public BasicProcessSignature createBasicProcessSignature( net.sourceforge.czt.z.ast.DeclName  processName, net.sourceforge.czt.z.ast.DeclNameList  genFormals, net.sourceforge.czt.z.ast.Signature  paramOrIndexes, ProcessKind  kind, net.sourceforge.czt.z.ast.SchemaType  stateType,java.util.List<? extends net.sourceforge.czt.z.ast.Signature>
 zSignature,java.util.List<? extends ActionSignature>
 actionSignature, net.sourceforge.czt.z.ast.ZRefNameList  nameSet)
  {
    return factory_.createBasicProcessSignature(processName, genFormals, paramOrIndexes, kind, stateType, zSignature, actionSignature, nameSet);
  }

  /**
   * Creates an instance of {@link ParamProcess}.
   *
   * @return the new instance of ParamProcess.
   */
  public ParamProcess createParamProcess()
  {
    return factory_.createParamProcess();
  }

  /**
   * Creates an instance of {@link ParamProcess} with the given children.
   *
   * @return the new instance of ParamProcess.
   */
  public ParamProcess createParamProcess( CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createParamProcess(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link SigmaExpr}.
   *
   * @return the new instance of SigmaExpr.
   */
  public SigmaExpr createSigmaExpr()
  {
    return factory_.createSigmaExpr();
  }

  /**
   * Creates an instance of {@link SigmaExpr} with the given children.
   *
   * @return the new instance of SigmaExpr.
   */
  public SigmaExpr createSigmaExpr( net.sourceforge.czt.z.ast.RefExpr  channel, net.sourceforge.czt.z.ast.Expr  value)
  {
    return factory_.createSigmaExpr(channel, value);
  }

  /**
   * Creates an instance of {@link SubstitutionAction}.
   *
   * @return the new instance of SubstitutionAction.
   */
  public SubstitutionAction createSubstitutionAction()
  {
    return factory_.createSubstitutionAction();
  }

  /**
   * Creates an instance of {@link SubstitutionAction} with the given children.
   *
   * @return the new instance of SubstitutionAction.
   */
  public SubstitutionAction createSubstitutionAction( CircusAction  circusAction, net.sourceforge.czt.z.ast.RenameList  renameList)
  {
    return factory_.createSubstitutionAction(circusAction, renameList);
  }

  /**
   * Creates an instance of {@link SpecStmtCommand}.
   *
   * @return the new instance of SpecStmtCommand.
   */
  public SpecStmtCommand createSpecStmtCommand()
  {
    return factory_.createSpecStmtCommand();
  }

  /**
   * Creates an instance of {@link SpecStmtCommand} with the given children.
   *
   * @return the new instance of SpecStmtCommand.
   */
  public SpecStmtCommand createSpecStmtCommand( net.sourceforge.czt.z.ast.RefNameList  frame, net.sourceforge.czt.z.ast.Pred  pre, net.sourceforge.czt.z.ast.Pred  post)
  {
    return factory_.createSpecStmtCommand(frame, pre, post);
  }

  /**
   * Creates an instance of {@link MuAction}.
   *
   * @return the new instance of MuAction.
   */
  public MuAction createMuAction()
  {
    return factory_.createMuAction();
  }

  /**
   * Creates an instance of {@link MuAction} with the given children.
   *
   * @return the new instance of MuAction.
   */
  public MuAction createMuAction( CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclName  declName)
  {
    return factory_.createMuAction(circusAction, declName);
  }

  /**
   * Creates an instance of {@link ProcessSignature}.
   *
   * @return the new instance of ProcessSignature.
   */
  public ProcessSignature createProcessSignature()
  {
    return factory_.createProcessSignature();
  }

  /**
   * Creates an instance of {@link ProcessSignature} with the given children.
   *
   * @return the new instance of ProcessSignature.
   */
  public ProcessSignature createProcessSignature( net.sourceforge.czt.z.ast.DeclName  processName, net.sourceforge.czt.z.ast.DeclNameList  genFormals, net.sourceforge.czt.z.ast.Signature  paramOrIndexes, ProcessKind  kind)
  {
    return factory_.createProcessSignature(processName, genFormals, paramOrIndexes, kind);
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelProcess}.
   *
   * @return the new instance of AlphabetisedParallelProcess.
   */
  public AlphabetisedParallelProcess createAlphabetisedParallelProcess()
  {
    return factory_.createAlphabetisedParallelProcess();
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelProcess} with the given children.
   *
   * @return the new instance of AlphabetisedParallelProcess.
   */
  public AlphabetisedParallelProcess createAlphabetisedParallelProcess( CircusProcess  leftProc, CircusProcess  rightProc, ChannelSet  leftAlpha, ChannelSet  rightAlpha)
  {
    return factory_.createAlphabetisedParallelProcess(leftProc, rightProc, leftAlpha, rightAlpha);
  }

  /**
   * Creates an instance of {@link ProcessPara}.
   *
   * @return the new instance of ProcessPara.
   */
  public ProcessPara createProcessPara()
  {
    return factory_.createProcessPara();
  }

  /**
   * Creates an instance of {@link ProcessPara} with the given children.
   *
   * @return the new instance of ProcessPara.
   */
  public ProcessPara createProcessPara( net.sourceforge.czt.z.ast.DeclName  processName, net.sourceforge.czt.z.ast.DeclNameList  genFormals, CircusProcess  circusProcess)
  {
    return factory_.createProcessPara(processName, genFormals, circusProcess);
  }

  /**
   * Creates an instance of {@link SeqAction}.
   *
   * @return the new instance of SeqAction.
   */
  public SeqAction createSeqAction()
  {
    return factory_.createSeqAction();
  }

  /**
   * Creates an instance of {@link SeqAction} with the given children.
   *
   * @return the new instance of SeqAction.
   */
  public SeqAction createSeqAction( CircusAction  leftAction, CircusAction  rightAction)
  {
    return factory_.createSeqAction(leftAction, rightAction);
  }

  /**
   * Creates an instance of {@link BasicChannelSetExpr}.
   *
   * @return the new instance of BasicChannelSetExpr.
   */
  public BasicChannelSetExpr createBasicChannelSetExpr()
  {
    return factory_.createBasicChannelSetExpr();
  }

  /**
   * Creates an instance of {@link BasicChannelSetExpr} with the given children.
   *
   * @return the new instance of BasicChannelSetExpr.
   */
  public BasicChannelSetExpr createBasicChannelSetExpr( ExprList  exprList)
  {
    return factory_.createBasicChannelSetExpr(exprList);
  }

  /**
   * Creates an instance of {@link SeqActionIte}.
   *
   * @return the new instance of SeqActionIte.
   */
  public SeqActionIte createSeqActionIte()
  {
    return factory_.createSeqActionIte();
  }

  /**
   * Creates an instance of {@link SeqActionIte} with the given children.
   *
   * @return the new instance of SeqActionIte.
   */
  public SeqActionIte createSeqActionIte( CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createSeqActionIte(circusAction, declList);
  }

  /**
   * Creates an instance of {@link ParamAction}.
   *
   * @return the new instance of ParamAction.
   */
  public ParamAction createParamAction()
  {
    return factory_.createParamAction();
  }

  /**
   * Creates an instance of {@link ParamAction} with the given children.
   *
   * @return the new instance of ParamAction.
   */
  public ParamAction createParamAction( CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createParamAction(circusAction, declList);
  }

  /**
   * Creates an instance of {@link DotField}.
   *
   * @return the new instance of DotField.
   */
  public DotField createDotField()
  {
    return factory_.createDotField();
  }

  /**
   * Creates an instance of {@link DotField} with the given children.
   *
   * @return the new instance of DotField.
   */
  public DotField createDotField( net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createDotField(expr);
  }

  /**
   * Creates an instance of {@link ChannelSetPara}.
   *
   * @return the new instance of ChannelSetPara.
   */
  public ChannelSetPara createChannelSetPara()
  {
    return factory_.createChannelSetPara();
  }

  /**
   * Creates an instance of {@link ChannelSetPara} with the given children.
   *
   * @return the new instance of ChannelSetPara.
   */
  public ChannelSetPara createChannelSetPara( net.sourceforge.czt.z.ast.DeclNameList  genFormals, net.sourceforge.czt.z.ast.DeclName  name, ChannelSet  channelSet)
  {
    return factory_.createChannelSetPara(genFormals, name, channelSet);
  }

  /**
   * Creates an instance of {@link CallAction}.
   *
   * @return the new instance of CallAction.
   */
  public CallAction createCallAction()
  {
    return factory_.createCallAction();
  }

  /**
   * Creates an instance of {@link CallAction} with the given children.
   *
   * @return the new instance of CallAction.
   */
  public CallAction createCallAction( net.sourceforge.czt.z.ast.RefName  refName, net.sourceforge.czt.z.ast.ExprList  exprList)
  {
    return factory_.createCallAction(refName, exprList);
  }

  /**
   * Creates an instance of {@link ExtChoiceProcessIdx}.
   *
   * @return the new instance of ExtChoiceProcessIdx.
   */
  public ExtChoiceProcessIdx createExtChoiceProcessIdx()
  {
    return factory_.createExtChoiceProcessIdx();
  }

  /**
   * Creates an instance of {@link ExtChoiceProcessIdx} with the given children.
   *
   * @return the new instance of ExtChoiceProcessIdx.
   */
  public ExtChoiceProcessIdx createExtChoiceProcessIdx( CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createExtChoiceProcessIdx(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link NameSet}.
   *
   * @return the new instance of NameSet.
   */
  public NameSet createNameSet()
  {
    return factory_.createNameSet();
  }

  /**
   * Creates an instance of {@link NameSet} with the given children.
   *
   * @return the new instance of NameSet.
   */
  public NameSet createNameSet( net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createNameSet(expr);
  }

  /**
   * Creates an instance of {@link ParallelActionIte}.
   *
   * @return the new instance of ParallelActionIte.
   */
  public ParallelActionIte createParallelActionIte()
  {
    return factory_.createParallelActionIte();
  }

  /**
   * Creates an instance of {@link ParallelActionIte} with the given children.
   *
   * @return the new instance of ParallelActionIte.
   */
  public ParallelActionIte createParallelActionIte( CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList, NameSet  nameSet, ChannelSet  channelSet)
  {
    return factory_.createParallelActionIte(circusAction, declList, nameSet, channelSet);
  }

  /**
   * Creates an instance of {@link Communication}.
   *
   * @return the new instance of Communication.
   */
  public Communication createCommunication()
  {
    return factory_.createCommunication();
  }

  /**
   * Creates an instance of {@link Communication} with the given children.
   *
   * @return the new instance of Communication.
   */
  public Communication createCommunication( net.sourceforge.czt.z.ast.RefExpr  channelExpr, CircusFieldList  chanFields, CommKind  commKind, java.math.BigInteger  multiSych)
  {
    return factory_.createCommunication(channelExpr, chanFields, commKind, multiSych);
  }

  /**
   * Creates an instance of {@link OutputField}.
   *
   * @return the new instance of OutputField.
   */
  public OutputField createOutputField()
  {
    return factory_.createOutputField();
  }

  /**
   * Creates an instance of {@link OutputField} with the given children.
   *
   * @return the new instance of OutputField.
   */
  public OutputField createOutputField( net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createOutputField(expr);
  }

  /**
   * Creates an instance of {@link ActionPara}.
   *
   * @return the new instance of ActionPara.
   */
  public ActionPara createActionPara()
  {
    return factory_.createActionPara();
  }

  /**
   * Creates an instance of {@link ActionPara} with the given children.
   *
   * @return the new instance of ActionPara.
   */
  public ActionPara createActionPara( net.sourceforge.czt.z.ast.DeclName  declName, CircusAction  circusAction)
  {
    return factory_.createActionPara(declName, circusAction);
  }

  /**
   * Creates an instance of {@link HideProcess}.
   *
   * @return the new instance of HideProcess.
   */
  public HideProcess createHideProcess()
  {
    return factory_.createHideProcess();
  }

  /**
   * Creates an instance of {@link HideProcess} with the given children.
   *
   * @return the new instance of HideProcess.
   */
  public HideProcess createHideProcess( CircusProcess  circusProcess, ChannelSet  channelSet)
  {
    return factory_.createHideProcess(circusProcess, channelSet);
  }

  /**
   * Creates an instance of {@link ParallelProcess}.
   *
   * @return the new instance of ParallelProcess.
   */
  public ParallelProcess createParallelProcess()
  {
    return factory_.createParallelProcess();
  }

  /**
   * Creates an instance of {@link ParallelProcess} with the given children.
   *
   * @return the new instance of ParallelProcess.
   */
  public ParallelProcess createParallelProcess( CircusProcess  leftProc, CircusProcess  rightProc, ChannelSet  channelSet)
  {
    return factory_.createParallelProcess(leftProc, rightProc, channelSet);
  }

  /**
   * Creates an instance of {@link LetVarAction}.
   *
   * @return the new instance of LetVarAction.
   */
  public LetVarAction createLetVarAction()
  {
    return factory_.createLetVarAction();
  }

  /**
   * Creates an instance of {@link LetVarAction} with the given children.
   *
   * @return the new instance of LetVarAction.
   */
  public LetVarAction createLetVarAction( CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.z.ast.ExprList  exprList)
  {
    return factory_.createLetVarAction(circusAction, declList, exprList);
  }

  /**
   * Creates an instance of {@link ActionType}.
   *
   * @return the new instance of ActionType.
   */
  public ActionType createActionType()
  {
    return factory_.createActionType();
  }

  /**
   * Creates an instance of {@link ActionType} with the given children.
   *
   * @return the new instance of ActionType.
   */
  public ActionType createActionType( ActionSignature  actionSignature)
  {
    return factory_.createActionType(actionSignature);
  }

  /**
   * Creates an instance of {@link IntChoiceAction}.
   *
   * @return the new instance of IntChoiceAction.
   */
  public IntChoiceAction createIntChoiceAction()
  {
    return factory_.createIntChoiceAction();
  }

  /**
   * Creates an instance of {@link IntChoiceAction} with the given children.
   *
   * @return the new instance of IntChoiceAction.
   */
  public IntChoiceAction createIntChoiceAction( CircusAction  leftAction, CircusAction  rightAction)
  {
    return factory_.createIntChoiceAction(leftAction, rightAction);
  }

  /**
   * Creates an instance of {@link ParallelProcessIdx}.
   *
   * @return the new instance of ParallelProcessIdx.
   */
  public ParallelProcessIdx createParallelProcessIdx()
  {
    return factory_.createParallelProcessIdx();
  }

  /**
   * Creates an instance of {@link ParallelProcessIdx} with the given children.
   *
   * @return the new instance of ParallelProcessIdx.
   */
  public ParallelProcessIdx createParallelProcessIdx( CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList, ChannelSet  channelSet)
  {
    return factory_.createParallelProcessIdx(circusProcess, declList, channelSet);
  }

  /**
   * Creates an instance of {@link RenameProcess}.
   *
   * @return the new instance of RenameProcess.
   */
  public RenameProcess createRenameProcess()
  {
    return factory_.createRenameProcess();
  }

  /**
   * Creates an instance of {@link RenameProcess} with the given children.
   *
   * @return the new instance of RenameProcess.
   */
  public RenameProcess createRenameProcess( CircusProcess  circusProcess, AssignmentPairs  assignmentPairs)
  {
    return factory_.createRenameProcess(circusProcess, assignmentPairs);
  }

  /**
   * Creates an instance of {@link ChannelPara}.
   *
   * @return the new instance of ChannelPara.
   */
  public ChannelPara createChannelPara()
  {
    return factory_.createChannelPara();
  }

  /**
   * Creates an instance of {@link ChannelPara} with the given children.
   *
   * @return the new instance of ChannelPara.
   */
  public ChannelPara createChannelPara( net.sourceforge.czt.z.ast.DeclList  channelDecl)
  {
    return factory_.createChannelPara(channelDecl);
  }

  /**
   * Creates an instance of {@link CallProcess}.
   *
   * @return the new instance of CallProcess.
   */
  public CallProcess createCallProcess()
  {
    return factory_.createCallProcess();
  }

  /**
   * Creates an instance of {@link CallProcess} with the given children.
   *
   * @return the new instance of CallProcess.
   */
  public CallProcess createCallProcess( net.sourceforge.czt.z.ast.RefExpr  callExpr, net.sourceforge.czt.z.ast.ExprList  actuals, CallKind  callKind)
  {
    return factory_.createCallProcess(callExpr, actuals, callKind);
  }

  /**
   * Creates an instance of {@link IntChoiceActionIte}.
   *
   * @return the new instance of IntChoiceActionIte.
   */
  public IntChoiceActionIte createIntChoiceActionIte()
  {
    return factory_.createIntChoiceActionIte();
  }

  /**
   * Creates an instance of {@link IntChoiceActionIte} with the given children.
   *
   * @return the new instance of IntChoiceActionIte.
   */
  public IntChoiceActionIte createIntChoiceActionIte( CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createIntChoiceActionIte(circusAction, declList);
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelActionIte}.
   *
   * @return the new instance of AlphabetisedParallelActionIte.
   */
  public AlphabetisedParallelActionIte createAlphabetisedParallelActionIte()
  {
    return factory_.createAlphabetisedParallelActionIte();
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelActionIte} with the given children.
   *
   * @return the new instance of AlphabetisedParallelActionIte.
   */
  public AlphabetisedParallelActionIte createAlphabetisedParallelActionIte( CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList, NameSet  nameSet, ChannelSet  channelSet)
  {
    return factory_.createAlphabetisedParallelActionIte(circusAction, declList, nameSet, channelSet);
  }

  /**
   * Creates an instance of {@link NameSetPara}.
   *
   * @return the new instance of NameSetPara.
   */
  public NameSetPara createNameSetPara()
  {
    return factory_.createNameSetPara();
  }

  /**
   * Creates an instance of {@link NameSetPara} with the given children.
   *
   * @return the new instance of NameSetPara.
   */
  public NameSetPara createNameSetPara( net.sourceforge.czt.z.ast.DeclName  declName, NameSet  nameSet)
  {
    return factory_.createNameSetPara(declName, nameSet);
  }

  /**
   * Creates an instance of {@link InterleaveProcess}.
   *
   * @return the new instance of InterleaveProcess.
   */
  public InterleaveProcess createInterleaveProcess()
  {
    return factory_.createInterleaveProcess();
  }

  /**
   * Creates an instance of {@link InterleaveProcess} with the given children.
   *
   * @return the new instance of InterleaveProcess.
   */
  public InterleaveProcess createInterleaveProcess( CircusProcess  leftProc, CircusProcess  rightProc)
  {
    return factory_.createInterleaveProcess(leftProc, rightProc);
  }

  /**
   * Creates an instance of {@link SeqProcess}.
   *
   * @return the new instance of SeqProcess.
   */
  public SeqProcess createSeqProcess()
  {
    return factory_.createSeqProcess();
  }

  /**
   * Creates an instance of {@link SeqProcess} with the given children.
   *
   * @return the new instance of SeqProcess.
   */
  public SeqProcess createSeqProcess( CircusProcess  leftProc, CircusProcess  rightProc)
  {
    return factory_.createSeqProcess(leftProc, rightProc);
  }

  /**
   * Creates an instance of {@link InterleaveActionIte}.
   *
   * @return the new instance of InterleaveActionIte.
   */
  public InterleaveActionIte createInterleaveActionIte()
  {
    return factory_.createInterleaveActionIte();
  }

  /**
   * Creates an instance of {@link InterleaveActionIte} with the given children.
   *
   * @return the new instance of InterleaveActionIte.
   */
  public InterleaveActionIte createInterleaveActionIte( CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList, NameSet  nameSet)
  {
    return factory_.createInterleaveActionIte(circusAction, declList, nameSet);
  }

  /**
   * Creates an instance of {@link BasicProcess}.
   *
   * @return the new instance of BasicProcess.
   */
  public BasicProcess createBasicProcess()
  {
    return factory_.createBasicProcess();
  }

  /**
   * Creates an instance of {@link BasicProcess} with the given children.
   *
   * @return the new instance of BasicProcess.
   */
  public BasicProcess createBasicProcess( net.sourceforge.czt.z.ast.Para  statePara, net.sourceforge.czt.z.ast.ParaList  localPara, net.sourceforge.czt.z.ast.ParaList  onTheFlyPara, CircusAction  mainAction)
  {
    return factory_.createBasicProcess(statePara, localPara, onTheFlyPara, mainAction);
  }

  /**
   * Creates an instance of {@link InterleaveProcessIte}.
   *
   * @return the new instance of InterleaveProcessIte.
   */
  public InterleaveProcessIte createInterleaveProcessIte()
  {
    return factory_.createInterleaveProcessIte();
  }

  /**
   * Creates an instance of {@link InterleaveProcessIte} with the given children.
   *
   * @return the new instance of InterleaveProcessIte.
   */
  public InterleaveProcessIte createInterleaveProcessIte( CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createInterleaveProcessIte(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link VarDeclCommand}.
   *
   * @return the new instance of VarDeclCommand.
   */
  public VarDeclCommand createVarDeclCommand()
  {
    return factory_.createVarDeclCommand();
  }

  /**
   * Creates an instance of {@link VarDeclCommand} with the given children.
   *
   * @return the new instance of VarDeclCommand.
   */
  public VarDeclCommand createVarDeclCommand( net.sourceforge.czt.z.ast.DeclList  declList, CircusAction  circusAction)
  {
    return factory_.createVarDeclCommand(declList, circusAction);
  }

  /**
   * Creates an instance of {@link InputField}.
   *
   * @return the new instance of InputField.
   */
  public InputField createInputField()
  {
    return factory_.createInputField();
  }

  /**
   * Creates an instance of {@link InputField} with the given children.
   *
   * @return the new instance of InputField.
   */
  public InputField createInputField( net.sourceforge.czt.z.ast.RefName  variable, net.sourceforge.czt.z.ast.Pred  restriction)
  {
    return factory_.createInputField(variable, restriction);
  }

  /**
   * Creates an instance of {@link RefinementConjPara}.
   *
   * @return the new instance of RefinementConjPara.
   */
  public RefinementConjPara createRefinementConjPara()
  {
    return factory_.createRefinementConjPara();
  }

  /**
   * Creates an instance of {@link RefinementConjPara} with the given children.
   *
   * @return the new instance of RefinementConjPara.
   */
  public RefinementConjPara createRefinementConjPara( CircusAction  specification, CircusAction  implementation, Model  model)
  {
    return factory_.createRefinementConjPara(specification, implementation, model);
  }

  /**
   * Creates an instance of {@link ActionSignature}.
   *
   * @return the new instance of ActionSignature.
   */
  public ActionSignature createActionSignature()
  {
    return factory_.createActionSignature();
  }

  /**
   * Creates an instance of {@link ActionSignature} with the given children.
   *
   * @return the new instance of ActionSignature.
   */
  public ActionSignature createActionSignature( net.sourceforge.czt.z.ast.DeclName  actionName, net.sourceforge.czt.z.ast.Signature  formalParams, net.sourceforge.czt.z.ast.Signature  localVars, net.sourceforge.czt.z.ast.Signature  usedChannels)
  {
    return factory_.createActionSignature(actionName, formalParams, localVars, usedChannels);
  }

  /**
   * Creates an empty list of the given element type.
   * This is a convenience method.
   */
  public <E> java.util.List<E> list()
  {
    java.util.List<E> result = new java.util.ArrayList<E>();
    return result;
  }
  

  /**
   * Creates a list with the given elements.
   * This is a convenience method.
   */
  public <E> java.util.List<E> list(E... elems)
  {
    java.util.List<E> result = new java.util.ArrayList<E>();
    result.addAll(java.util.Arrays.asList(elems));
    return result;
  }

  /**
   * Creates an application (Expr followed by Expr in the syntax),
   * that is an ApplExpr with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public ApplExpr createApplication(RefName refName, Expr expr)
  {
    return createApplExpr(createRefExpr(refName), expr, Boolean.FALSE);
  }

  /**
   * Creates a ZDeclName with the given word and strokes and
   * id set to <code>null</code>.
   * This is a convenience method.
   */
  public ZDeclName createZDeclName(String word,
                                   StrokeList strokes)
  {
    return createZDeclName(word, strokes, null);
  }

  /**
   * Creates a ZDeclName from a decorword, that is a string that
   * may contain strokes at the end.
   * The strokes are extracted from the end and the resulting
   * name is returned.
   * This is a convenience method.
   */
  public ZDeclName createZDeclName(String decorword)
  {
    ZStrokeList strokes = createZStrokeList();
    final String word = getWordAndStrokes(decorword, strokes);
    return createZDeclName(word, strokes, null);
  }

  public String getWordAndStrokes(String decorword,
                                  ZStrokeList strokes)
  {
    net.sourceforge.czt.z.util.ZChar[] zchars =
      net.sourceforge.czt.z.util.ZChar.toZChars(decorword);
    int i;
    for (i = zchars.length - 1; i >= 0; i--) {
      net.sourceforge.czt.z.util.ZChar zchar = zchars[i];
      if (net.sourceforge.czt.z.util.ZChar.INSTROKE.equals(zchar)) {
        strokes.add(0, createInStroke());
      }
      else if (net.sourceforge.czt.z.util.ZChar.OUTSTROKE.equals(zchar)) {
        strokes.add(0, createOutStroke());
      }
      else if (net.sourceforge.czt.z.util.ZChar.PRIME.equals(zchar)) {
        strokes.add(0, createNextStroke());
      }
      else if (i >= 2 &&
          net.sourceforge.czt.z.util.ZChar.NW.equals(zchar) &&
          net.sourceforge.czt.z.util.ZChar.isDigit(zchars[i - 1]) &&
          net.sourceforge.czt.z.util.ZChar.SE.equals(zchars[i - 2])) {
        net.sourceforge.czt.base.ast.Digit digit =
          net.sourceforge.czt.base.util.CztDatatypeConverter.parseDigit(zchars[i - 1].toString());
        strokes.add(0, createNumStroke(digit));
        i = i - 2;
      }
      else {
        break;
      }
    }
    StringBuffer result = new StringBuffer();
    for (int j = 0; j <= i; j++) {
      result.append(zchars[j].toString());
    }
    return result.toString();
  }

  /**
   * Creates a member predicate that represents equality
   * between the two given expressions.
   * This is a convenience method.
   */
  public MemPred createEquality(Expr left, Expr right)
  {
    ZExprList zExprList = createZExprList();
    zExprList.add(right);
    return createMemPred(left, createSetExpr(zExprList), Boolean.TRUE);
  }

  /**
   * Creates a function operator application, that is an ApplExpr
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public ApplExpr createFunOpAppl(RefName refName, Expr expr)
  {
    return createApplExpr(createRefExpr(refName), expr, Boolean.TRUE);
  }

  /**
   * Creates a generic instantiation expression, that is a RefExpr
   * with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public RefExpr createGenInst(RefName refName,
                               java.util.List<? extends Expr> exprs)
  {
    ZExprList zExprList = createZExprList(exprs);
    return createRefExpr(refName, zExprList, Boolean.FALSE);
  }

  /**
   * Creates a generic operator application, that is a RefExpr
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public RefExpr createGenOpApp(RefName refName,
                                java.util.List<? extends Expr> exprs)
  {
    ZExprList zExprList = createZExprList(exprs);
    return createRefExpr(refName, zExprList, Boolean.TRUE);
  }

  /**
   * Creates a horizontal definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * expression and with Box set to OmitBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param expr an expression.
   */
  public AxPara createHorizontalDef(DeclName declName, Expr expr)
  {
    return createHorizontalDef(declName, null, expr);
  }

  /**
   * Creates a generic horizontal definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * expression and with Box set to OmitBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param formals a list of DeclName, the formal parameters.
   * @param expr an expression.
   */
  public AxPara createHorizontalDef(DeclName declName,
                                    java.util.List<? extends DeclName> formals,
                                    Expr expr)
  {
    ZDeclNameList zdnl = createZDeclNameList();
    if (formals != null) {
      zdnl.addAll(formals);
    }
    Decl decl = createConstDecl(declName, expr);
    SchText schText = createZSchText(createZDeclList(list(decl)), null);
    return createAxPara(zdnl, schText, Box.OmitBox);
  }

  /**
   * Creates a member predicate for a given referencing name and
   * an expression, that is a MemPred with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public MemPred createMemPred(RefName refName, Expr expr)
  {
    return createMemPred(createRefExpr(refName), expr, Boolean.FALSE);
  }

  /**
   * Creates a number expression with the given value.
   * This is a convenience method.
   */
  public NumExpr createNumExpr(int value)
  {
    return factory_.createNumExpr(createZNumeral(value));
  }

  /**
   * Creates a number expression with the given value.
   * This is a convenience method.
   */
  public NumExpr createNumExpr(java.math.BigInteger bigInt)
  {
    return createNumExpr(bigInt.intValue());
  }

  public ZNumeral createZNumeral(int value)
  {
    return factory_.createZNumeral(java.math.BigInteger.valueOf(value));
  }

  /**
   * Creates a binary product expression.
   * This is a convenience method.
   */
  public ProdExpr createProdExpr(Expr left, Expr right)
  {
    return createProdExpr(createZExprList(list(left, right)));
  }

  public RefExpr createRefExpr(RefName refName,
                               ZExprList zExprList,
                               Boolean mixfix)
  {
    return factory_.createRefExpr(refName, zExprList, mixfix, false);
  }

  /**
   * Creates a reference (expression) to the given name.
   * The mixfix child of the returned reference expression
   * is <code>false</code> and the list of expressions is empty.
   * This is a convenience method.
   */
  public RefExpr createRefExpr(RefName refName)
  {
    return createRefExpr(refName, createZExprList(), Boolean.FALSE);
  }

  /**
   * Creates a ZRefName with the given word and strokes and
   * decl set to <code>null</code>.
   * This is a convenience method.
   */
  public ZRefName createZRefName(String word,
                                 StrokeList strokes)
  {
    return createZRefName(word, strokes, null);
  }

  /**
   * Creates a ZRefName from a decorword, that is a string that
   * may contain strokes at the end.
   * The strokes are extracted from the end and the resulting
   * name is returned.
   * This is a convenience method.
   */
  public ZRefName createZRefName(String decorword)
  {
    ZStrokeList strokes = createZStrokeList();
    final String word = getWordAndStrokes(decorword, strokes);
    return createZRefName(word, strokes, null);
  }

  /**
   * Creates a referencing name that refers to the given
   * declaring name.
   * This is a convenience method.
   */
  public ZRefName createZRefName(ZDeclName declName)
  {
    return createZRefName(declName.getWord(),
			  declName.getStrokeList(),
			  declName);
  }

  /**
   * Creates a relation operator application, that is a MemPred
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public MemPred createRelOpAppl(Expr expr, RefName refName)
  {
    return createMemPred(expr, createRefExpr(refName), Boolean.TRUE);
  }

  /**
   * Creates a schema definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * schema text and with Box set to SchBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param schemaText the schema text.
   */
  public AxPara createSchema(DeclName declName, SchText schemaText)
  {
    return createSchema(declName, null, schemaText);
  }

  /**
   * Creates a generic schema definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * schema text and with Box set to SchBox.
   * This is a convenience method.
   *
   * @param formals a list of DeclName, the formal parameters.
   * @param declName name of the schema.
   * @param schemaText the schema text.
   */
  public AxPara createSchema(DeclName declName,
                             java.util.List<? extends DeclName> formals,
                             SchText schemaText)
  {
    ZDeclNameList zdnl = createZDeclNameList();
    if (formals != null) {
      zdnl.addAll(formals);
    }
    Decl decl = createConstDecl(declName, createSchExpr(schemaText));
    SchText schText = createZSchText(createZDeclList(list(decl)), null);
    return createAxPara(zdnl, schText, Box.SchBox);
  }

  /**
   * <p>Creates a sequence, that is a set of pairs of position
   * (starting from 1) and corresponding component expression.
   * This applies rule 12.2.12 of the Z standard to a list of
   * expressions.</p>
   *
   * <p>More formally, a list
   * <code>e_1, ..., e_n</code> of expressions is transformed into
   * the set <code>\{ (1, e_1), ... , (n, e_n) \}</code>.
   * </p>
   *
   * <p>This is a convenience method.</p>
   *
   * @param exprList a list of expressions (Expr).
   */
  public SetExpr createSequence(java.util.List<? extends Expr> exprList)
  {
    ZExprList zExprList = createZExprList();
    int count = 1;
    for (java.util.Iterator<? extends Expr> i = exprList.iterator();
         i.hasNext(); count++) {
      zExprList.add(createTupleExpr(createNumExpr(count), i.next()));
    }
    return createSetExpr(zExprList);
  }

  /**
   * Creates a pair, that is a tuple expression with two elements.
   * This is a convenience method.
   */
  public TupleExpr createTupleExpr(Expr left, Expr right)
  {
    return createTupleExpr(createZExprList(list(left, right)));
  }

  public java.math.BigInteger toBig(Integer i)
  {
    if (i != null) {
      return java.math.BigInteger.valueOf(i.intValue());
    }
    return null;
  }

  public NumStroke createNumStroke(int value)
  {
    net.sourceforge.czt.base.ast.Digit digit =
      net.sourceforge.czt.base.ast.Digit.fromValue(value);
    return createNumStroke(digit);
  }

  public LocAnn createLocAnn(String source, Integer line, Integer col)
  {
    return createLocAnn(source, line, col, null, null);
  }

  public LocAnn createLocAnn(String source,
                             Integer line, Integer col,
                             Integer start, Integer length)
  {
    return createLocAnn(source,
                        toBig(line), toBig(col),
                        toBig(start), toBig(length));
  }
}
