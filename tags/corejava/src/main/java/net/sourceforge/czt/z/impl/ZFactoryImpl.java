
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactoryImpl.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.impl;

import net.sourceforge.czt.base.util.VisitorImpl;

import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.util.PrintVisitor;

/**
 * <p>An implementation of the object factory for constructing
 * concrete Z terms.  Each factory method returns an instance
 * of the corresponding class provided in this package.</p>
 *
 * <p>To use a differnt implementation for a particular interface
 * overwrite the corresponding object factory methods
 * returning an instance of your implementation instead.
 * If there are two factory methods for this class, it is sufficient to
 * overwrite the default factory method (the method without arguments)
 * since the factory method with arguments first calls the default
 * factory method and then uses setter methods to set the children.</p>
 *
 * @author Gnast version 0.1
 */
public class ZFactoryImpl
  extends net.sourceforge.czt.base.impl.BaseFactory
  implements net.sourceforge.czt.z.ast.ZFactory
{
  protected ZFactoryImpl(VisitorImpl<String> toStringVisitor)
  {
    super(toStringVisitor);
  }

  public ZFactoryImpl()
  {
    super(new PrintVisitor());
  }

  public Freetype createFreetype()
  {
    Freetype zedObject = new FreetypeImpl(this);
    return zedObject;
  }

  public Freetype createFreetype( DeclName  declName, BranchList  branchList)
  {
    Freetype zedObject = createFreetype();
    zedObject.setDeclName(declName);
    zedObject.setBranchList(branchList);
    return zedObject;
  }

  public Exists1Expr createExists1Expr()
  {
    Exists1Expr zedObject = new Exists1ExprImpl(this);
    return zedObject;
  }

  public Exists1Expr createExists1Expr( SchText  schText, Expr  expr)
  {
    Exists1Expr zedObject = createExists1Expr();
    zedObject.setSchText(schText);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public ParenAnn createParenAnn()
  {
    ParenAnn zedObject = new ParenAnnImpl(this);
    return zedObject;
  }

  public NewOldPair createNewOldPair()
  {
    NewOldPair zedObject = new NewOldPairImpl(this);
    return zedObject;
  }

  public NewOldPair createNewOldPair( DeclName  newName, RefName  oldName)
  {
    NewOldPair zedObject = createNewOldPair();
    zedObject.setNewName(newName);
    zedObject.setOldName(oldName);
    return zedObject;
  }

  public ZExprList createZExprList()
  {
    ZExprList zedObject = new ZExprListImpl(this);
    return zedObject;
  }

  public ZExprList createZExprList(java.util.List<? extends Expr>
 expr)
  {
    ZExprList zedObject = createZExprList();
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    return zedObject;
  }

  public LatexMarkupPara createLatexMarkupPara()
  {
    LatexMarkupPara zedObject = new LatexMarkupParaImpl(this);
    return zedObject;
  }

  public LatexMarkupPara createLatexMarkupPara(java.util.List<? extends Directive>
 directive)
  {
    LatexMarkupPara zedObject = createLatexMarkupPara();
    if (directive != null) {
      zedObject.getDirective().addAll(directive);
    }
    return zedObject;
  }

  public ApplExpr createApplExpr()
  {
    ApplExpr zedObject = new ApplExprImpl(this);
    return zedObject;
  }

  public ApplExpr createApplExpr( Expr  leftExpr, Expr  rightExpr, Boolean  mixfix)
  {
    ApplExpr zedObject = createApplExpr();
    zedObject.setLeftExpr(leftExpr);
    zedObject.setRightExpr(rightExpr);
    zedObject.setMixfix(mixfix);
    return zedObject;
  }

  public Signature createSignature()
  {
    Signature zedObject = new SignatureImpl(this);
    return zedObject;
  }

  public Signature createSignature(java.util.List<? extends NameTypePair>
 nameTypePair)
  {
    Signature zedObject = createSignature();
    if (nameTypePair != null) {
      zedObject.getNameTypePair().addAll(nameTypePair);
    }
    return zedObject;
  }

  public LetExpr createLetExpr()
  {
    LetExpr zedObject = new LetExprImpl(this);
    return zedObject;
  }

  public LetExpr createLetExpr( SchText  schText, Expr  expr)
  {
    LetExpr zedObject = createLetExpr();
    zedObject.setSchText(schText);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public ConstDecl createConstDecl()
  {
    ConstDecl zedObject = new ConstDeclImpl(this);
    return zedObject;
  }

  public ConstDecl createConstDecl( DeclName  declName, Expr  expr)
  {
    ConstDecl zedObject = createConstDecl();
    zedObject.setDeclName(declName);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public ZDeclNameList createZDeclNameList()
  {
    ZDeclNameList zedObject = new ZDeclNameListImpl(this);
    return zedObject;
  }

  public ZDeclNameList createZDeclNameList(java.util.List<? extends DeclName>
 declName)
  {
    ZDeclNameList zedObject = createZDeclNameList();
    if (declName != null) {
      zedObject.getDeclName().addAll(declName);
    }
    return zedObject;
  }

  public ZRenameList createZRenameList()
  {
    ZRenameList zedObject = new ZRenameListImpl(this);
    return zedObject;
  }

  public ZRenameList createZRenameList(java.util.List<? extends NewOldPair>
 newOldPair)
  {
    ZRenameList zedObject = createZRenameList();
    if (newOldPair != null) {
      zedObject.getNewOldPair().addAll(newOldPair);
    }
    return zedObject;
  }

  public ZFreetypeList createZFreetypeList()
  {
    ZFreetypeList zedObject = new ZFreetypeListImpl(this);
    return zedObject;
  }

  public ZFreetypeList createZFreetypeList(java.util.List<? extends Freetype>
 freetype)
  {
    ZFreetypeList zedObject = createZFreetypeList();
    if (freetype != null) {
      zedObject.getFreetype().addAll(freetype);
    }
    return zedObject;
  }

  public NextStroke createNextStroke()
  {
    NextStroke zedObject = new NextStrokeImpl(this);
    return zedObject;
  }

  public InStroke createInStroke()
  {
    InStroke zedObject = new InStrokeImpl(this);
    return zedObject;
  }

  public MemPred createMemPred()
  {
    MemPred zedObject = new MemPredImpl(this);
    return zedObject;
  }

  public MemPred createMemPred( Expr  leftExpr, Expr  rightExpr, Boolean  mixfix)
  {
    MemPred zedObject = createMemPred();
    zedObject.setLeftExpr(leftExpr);
    zedObject.setRightExpr(rightExpr);
    zedObject.setMixfix(mixfix);
    return zedObject;
  }

  public ProdType createProdType()
  {
    ProdType zedObject = new ProdTypeImpl(this);
    return zedObject;
  }

  public ProdType createProdType(java.util.List<? extends Type2>
 type)
  {
    ProdType zedObject = createProdType();
    if (type != null) {
      zedObject.getType().addAll(type);
    }
    return zedObject;
  }

  public ImpliesExpr createImpliesExpr()
  {
    ImpliesExpr zedObject = new ImpliesExprImpl(this);
    return zedObject;
  }

  public ImpliesExpr createImpliesExpr( Expr  leftExpr, Expr  rightExpr)
  {
    ImpliesExpr zedObject = createImpliesExpr();
    zedObject.setLeftExpr(leftExpr);
    zedObject.setRightExpr(rightExpr);
    return zedObject;
  }

  public MuExpr createMuExpr()
  {
    MuExpr zedObject = new MuExprImpl(this);
    return zedObject;
  }

  public MuExpr createMuExpr( SchText  schText, Expr  expr)
  {
    MuExpr zedObject = createMuExpr();
    zedObject.setSchText(schText);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public ZSchText createZSchText()
  {
    ZSchText zedObject = new ZSchTextImpl(this);
    return zedObject;
  }

  public ZSchText createZSchText( DeclList  declList, Pred  pred)
  {
    ZSchText zedObject = createZSchText();
    zedObject.setDeclList(declList);
    zedObject.setPred(pred);
    return zedObject;
  }

  public ZNumeral createZNumeral()
  {
    ZNumeral zedObject = new ZNumeralImpl(this);
    return zedObject;
  }

  public ZNumeral createZNumeral( java.math.BigInteger  value)
  {
    ZNumeral zedObject = createZNumeral();
    zedObject.setValue(value);
    return zedObject;
  }

  public OrPred createOrPred()
  {
    OrPred zedObject = new OrPredImpl(this);
    return zedObject;
  }

  public OrPred createOrPred( Pred  leftPred, Pred  rightPred)
  {
    OrPred zedObject = createOrPred();
    zedObject.setLeftPred(leftPred);
    zedObject.setRightPred(rightPred);
    return zedObject;
  }

  public ExistsExpr createExistsExpr()
  {
    ExistsExpr zedObject = new ExistsExprImpl(this);
    return zedObject;
  }

  public ExistsExpr createExistsExpr( SchText  schText, Expr  expr)
  {
    ExistsExpr zedObject = createExistsExpr();
    zedObject.setSchText(schText);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public VarDecl createVarDecl()
  {
    VarDecl zedObject = new VarDeclImpl(this);
    return zedObject;
  }

  public VarDecl createVarDecl( DeclNameList  declNameList, Expr  expr)
  {
    VarDecl zedObject = createVarDecl();
    zedObject.setDeclNameList(declNameList);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public NarrSect createNarrSect()
  {
    NarrSect zedObject = new NarrSectImpl(this);
    return zedObject;
  }

  public NarrSect createNarrSect( java.util.List  content)
  {
    NarrSect zedObject = createNarrSect();
    zedObject.setContent(content);
    return zedObject;
  }

  public FreePara createFreePara()
  {
    FreePara zedObject = new FreeParaImpl(this);
    return zedObject;
  }

  public FreePara createFreePara( FreetypeList  freetypeList)
  {
    FreePara zedObject = createFreePara();
    zedObject.setFreetypeList(freetypeList);
    return zedObject;
  }

  public CompExpr createCompExpr()
  {
    CompExpr zedObject = new CompExprImpl(this);
    return zedObject;
  }

  public CompExpr createCompExpr( Expr  leftExpr, Expr  rightExpr)
  {
    CompExpr zedObject = createCompExpr();
    zedObject.setLeftExpr(leftExpr);
    zedObject.setRightExpr(rightExpr);
    return zedObject;
  }

  public BindExpr createBindExpr()
  {
    BindExpr zedObject = new BindExprImpl(this);
    return zedObject;
  }

  public BindExpr createBindExpr( DeclList  declList)
  {
    BindExpr zedObject = createBindExpr();
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public CondExpr createCondExpr()
  {
    CondExpr zedObject = new CondExprImpl(this);
    return zedObject;
  }

  public CondExpr createCondExpr( Pred  pred, Expr  leftExpr, Expr  rightExpr)
  {
    CondExpr zedObject = createCondExpr();
    zedObject.setPred(pred);
    zedObject.setLeftExpr(leftExpr);
    zedObject.setRightExpr(rightExpr);
    return zedObject;
  }

  public ForallExpr createForallExpr()
  {
    ForallExpr zedObject = new ForallExprImpl(this);
    return zedObject;
  }

  public ForallExpr createForallExpr( SchText  schText, Expr  expr)
  {
    ForallExpr zedObject = createForallExpr();
    zedObject.setSchText(schText);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public NarrPara createNarrPara()
  {
    NarrPara zedObject = new NarrParaImpl(this);
    return zedObject;
  }

  public NarrPara createNarrPara( java.util.List  content)
  {
    NarrPara zedObject = createNarrPara();
    zedObject.setContent(content);
    return zedObject;
  }

  public Directive createDirective()
  {
    Directive zedObject = new DirectiveImpl(this);
    return zedObject;
  }

  public Directive createDirective( String  command, String  unicode, DirectiveType  type)
  {
    Directive zedObject = createDirective();
    zedObject.setCommand(command);
    zedObject.setUnicode(unicode);
    zedObject.setType(type);
    return zedObject;
  }

  public TruePred createTruePred()
  {
    TruePred zedObject = new TruePredImpl(this);
    return zedObject;
  }

  public Operator createOperator()
  {
    Operator zedObject = new OperatorImpl(this);
    return zedObject;
  }

  public Operator createOperator( String  word)
  {
    Operator zedObject = createOperator();
    zedObject.setWord(word);
    return zedObject;
  }

  public NumExpr createNumExpr()
  {
    NumExpr zedObject = new NumExprImpl(this);
    return zedObject;
  }

  public NumExpr createNumExpr( Numeral  numeral)
  {
    NumExpr zedObject = createNumExpr();
    zedObject.setNumeral(numeral);
    return zedObject;
  }

  public TupleSelExpr createTupleSelExpr()
  {
    TupleSelExpr zedObject = new TupleSelExprImpl(this);
    return zedObject;
  }

  public TupleSelExpr createTupleSelExpr( Expr  expr, Numeral  numeral)
  {
    TupleSelExpr zedObject = createTupleSelExpr();
    zedObject.setExpr(expr);
    zedObject.setNumeral(numeral);
    return zedObject;
  }

  public ZStrokeList createZStrokeList()
  {
    ZStrokeList zedObject = new ZStrokeListImpl(this);
    return zedObject;
  }

  public ZStrokeList createZStrokeList(java.util.List<? extends Stroke>
 stroke)
  {
    ZStrokeList zedObject = createZStrokeList();
    if (stroke != null) {
      zedObject.getStroke().addAll(stroke);
    }
    return zedObject;
  }

  public LambdaExpr createLambdaExpr()
  {
    LambdaExpr zedObject = new LambdaExprImpl(this);
    return zedObject;
  }

  public LambdaExpr createLambdaExpr( SchText  schText, Expr  expr)
  {
    LambdaExpr zedObject = createLambdaExpr();
    zedObject.setSchText(schText);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public IffExpr createIffExpr()
  {
    IffExpr zedObject = new IffExprImpl(this);
    return zedObject;
  }

  public IffExpr createIffExpr( Expr  leftExpr, Expr  rightExpr)
  {
    IffExpr zedObject = createIffExpr();
    zedObject.setLeftExpr(leftExpr);
    zedObject.setRightExpr(rightExpr);
    return zedObject;
  }

  public IffPred createIffPred()
  {
    IffPred zedObject = new IffPredImpl(this);
    return zedObject;
  }

  public IffPred createIffPred( Pred  leftPred, Pred  rightPred)
  {
    IffPred zedObject = createIffPred();
    zedObject.setLeftPred(leftPred);
    zedObject.setRightPred(rightPred);
    return zedObject;
  }

  public FalsePred createFalsePred()
  {
    FalsePred zedObject = new FalsePredImpl(this);
    return zedObject;
  }

  public UnparsedZSect createUnparsedZSect()
  {
    UnparsedZSect zedObject = new UnparsedZSectImpl(this);
    return zedObject;
  }

  public UnparsedZSect createUnparsedZSect( java.util.List  content)
  {
    UnparsedZSect zedObject = createUnparsedZSect();
    zedObject.setContent(content);
    return zedObject;
  }

  public UnparsedPara createUnparsedPara()
  {
    UnparsedPara zedObject = new UnparsedParaImpl(this);
    return zedObject;
  }

  public UnparsedPara createUnparsedPara( java.util.List  content)
  {
    UnparsedPara zedObject = createUnparsedPara();
    zedObject.setContent(content);
    return zedObject;
  }

  public NameTypePair createNameTypePair()
  {
    NameTypePair zedObject = new NameTypePairImpl(this);
    return zedObject;
  }

  public NameTypePair createNameTypePair( DeclName  declName, Type  type)
  {
    NameTypePair zedObject = createNameTypePair();
    zedObject.setDeclName(declName);
    zedObject.setType(type);
    return zedObject;
  }

  public ImpliesPred createImpliesPred()
  {
    ImpliesPred zedObject = new ImpliesPredImpl(this);
    return zedObject;
  }

  public ImpliesPred createImpliesPred( Pred  leftPred, Pred  rightPred)
  {
    ImpliesPred zedObject = createImpliesPred();
    zedObject.setLeftPred(leftPred);
    zedObject.setRightPred(rightPred);
    return zedObject;
  }

  public ZRefNameList createZRefNameList()
  {
    ZRefNameList zedObject = new ZRefNameListImpl(this);
    return zedObject;
  }

  public ZRefNameList createZRefNameList(java.util.List<? extends RefName>
 refName)
  {
    ZRefNameList zedObject = createZRefNameList();
    if (refName != null) {
      zedObject.getRefName().addAll(refName);
    }
    return zedObject;
  }

  public GenericType createGenericType()
  {
    GenericType zedObject = new GenericTypeImpl(this);
    return zedObject;
  }

  public GenericType createGenericType(java.util.List<? extends ZDeclName>
 name, Type2  type, Type2  optionalType)
  {
    GenericType zedObject = createGenericType();
    if (name != null) {
      zedObject.getName().addAll(name);
    }
    zedObject.setType(type);
    zedObject.setOptionalType(optionalType);
    return zedObject;
  }

  public Operand createOperand()
  {
    Operand zedObject = new OperandImpl(this);
    return zedObject;
  }

  public Operand createOperand( Boolean  list)
  {
    Operand zedObject = createOperand();
    zedObject.setList(list);
    return zedObject;
  }

  public Branch createBranch()
  {
    Branch zedObject = new BranchImpl(this);
    return zedObject;
  }

  public Branch createBranch( DeclName  declName, Expr  expr)
  {
    Branch zedObject = createBranch();
    zedObject.setDeclName(declName);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public ProjExpr createProjExpr()
  {
    ProjExpr zedObject = new ProjExprImpl(this);
    return zedObject;
  }

  public ProjExpr createProjExpr( Expr  leftExpr, Expr  rightExpr)
  {
    ProjExpr zedObject = createProjExpr();
    zedObject.setLeftExpr(leftExpr);
    zedObject.setRightExpr(rightExpr);
    return zedObject;
  }

  public TypeAnn createTypeAnn()
  {
    TypeAnn zedObject = new TypeAnnImpl(this);
    return zedObject;
  }

  public TypeAnn createTypeAnn( Type  type)
  {
    TypeAnn zedObject = createTypeAnn();
    zedObject.setType(type);
    return zedObject;
  }

  public OptempPara createOptempPara()
  {
    OptempPara zedObject = new OptempParaImpl(this);
    return zedObject;
  }

  public OptempPara createOptempPara(java.util.List<? extends Oper>
 oper, Cat  cat, Assoc  assoc, java.math.BigInteger  prec)
  {
    OptempPara zedObject = createOptempPara();
    if (oper != null) {
      zedObject.getOper().addAll(oper);
    }
    zedObject.setCat(cat);
    zedObject.setAssoc(assoc);
    zedObject.setPrec(prec);
    return zedObject;
  }

  public NameSectTypeTriple createNameSectTypeTriple()
  {
    NameSectTypeTriple zedObject = new NameSectTypeTripleImpl(this);
    return zedObject;
  }

  public NameSectTypeTriple createNameSectTypeTriple( DeclName  declName, String  sect, Type  type)
  {
    NameSectTypeTriple zedObject = createNameSectTypeTriple();
    zedObject.setDeclName(declName);
    zedObject.setSect(sect);
    zedObject.setType(type);
    return zedObject;
  }

  public ExistsPred createExistsPred()
  {
    ExistsPred zedObject = new ExistsPredImpl(this);
    return zedObject;
  }

  public ExistsPred createExistsPred( SchText  schText, Pred  pred)
  {
    ExistsPred zedObject = createExistsPred();
    zedObject.setSchText(schText);
    zedObject.setPred(pred);
    return zedObject;
  }

  public NegPred createNegPred()
  {
    NegPred zedObject = new NegPredImpl(this);
    return zedObject;
  }

  public NegPred createNegPred( Pred  pred)
  {
    NegPred zedObject = createNegPred();
    zedObject.setPred(pred);
    return zedObject;
  }

  public SectTypeEnvAnn createSectTypeEnvAnn()
  {
    SectTypeEnvAnn zedObject = new SectTypeEnvAnnImpl(this);
    return zedObject;
  }

  public SectTypeEnvAnn createSectTypeEnvAnn(java.util.List<? extends NameSectTypeTriple>
 nameSectTypeTriple)
  {
    SectTypeEnvAnn zedObject = createSectTypeEnvAnn();
    if (nameSectTypeTriple != null) {
      zedObject.getNameSectTypeTriple().addAll(nameSectTypeTriple);
    }
    return zedObject;
  }

  public PreExpr createPreExpr()
  {
    PreExpr zedObject = new PreExprImpl(this);
    return zedObject;
  }

  public PreExpr createPreExpr( Expr  expr)
  {
    PreExpr zedObject = createPreExpr();
    zedObject.setExpr(expr);
    return zedObject;
  }

  public ExprPred createExprPred()
  {
    ExprPred zedObject = new ExprPredImpl(this);
    return zedObject;
  }

  public ExprPred createExprPred( Expr  expr)
  {
    ExprPred zedObject = createExprPred();
    zedObject.setExpr(expr);
    return zedObject;
  }

  public GivenType createGivenType()
  {
    GivenType zedObject = new GivenTypeImpl(this);
    return zedObject;
  }

  public GivenType createGivenType( ZDeclName  name)
  {
    GivenType zedObject = createGivenType();
    zedObject.setName(name);
    return zedObject;
  }

  public InclDecl createInclDecl()
  {
    InclDecl zedObject = new InclDeclImpl(this);
    return zedObject;
  }

  public InclDecl createInclDecl( Expr  expr)
  {
    InclDecl zedObject = createInclDecl();
    zedObject.setExpr(expr);
    return zedObject;
  }

  public SchemaType createSchemaType()
  {
    SchemaType zedObject = new SchemaTypeImpl(this);
    return zedObject;
  }

  public SchemaType createSchemaType( Signature  signature)
  {
    SchemaType zedObject = createSchemaType();
    zedObject.setSignature(signature);
    return zedObject;
  }

  public ForallPred createForallPred()
  {
    ForallPred zedObject = new ForallPredImpl(this);
    return zedObject;
  }

  public ForallPred createForallPred( SchText  schText, Pred  pred)
  {
    ForallPred zedObject = createForallPred();
    zedObject.setSchText(schText);
    zedObject.setPred(pred);
    return zedObject;
  }

  public BindSelExpr createBindSelExpr()
  {
    BindSelExpr zedObject = new BindSelExprImpl(this);
    return zedObject;
  }

  public BindSelExpr createBindSelExpr( Expr  expr, RefName  refName)
  {
    BindSelExpr zedObject = createBindSelExpr();
    zedObject.setExpr(expr);
    zedObject.setRefName(refName);
    return zedObject;
  }

  public OrExpr createOrExpr()
  {
    OrExpr zedObject = new OrExprImpl(this);
    return zedObject;
  }

  public OrExpr createOrExpr( Expr  leftExpr, Expr  rightExpr)
  {
    OrExpr zedObject = createOrExpr();
    zedObject.setLeftExpr(leftExpr);
    zedObject.setRightExpr(rightExpr);
    return zedObject;
  }

  public ZParaList createZParaList()
  {
    ZParaList zedObject = new ZParaListImpl(this);
    return zedObject;
  }

  public ZParaList createZParaList(java.util.List<? extends Para>
 para)
  {
    ZParaList zedObject = createZParaList();
    if (para != null) {
      zedObject.getPara().addAll(para);
    }
    return zedObject;
  }

  public Spec createSpec()
  {
    Spec zedObject = new SpecImpl(this);
    return zedObject;
  }

  public Spec createSpec(java.util.List<? extends Sect>
 sect, String  version, String  author, java.util.Calendar  modified, String  source)
  {
    Spec zedObject = createSpec();
    if (sect != null) {
      zedObject.getSect().addAll(sect);
    }
    zedObject.setVersion(version);
    zedObject.setAuthor(author);
    zedObject.setModified(modified);
    zedObject.setSource(source);
    return zedObject;
  }

  public ZDeclList createZDeclList()
  {
    ZDeclList zedObject = new ZDeclListImpl(this);
    return zedObject;
  }

  public ZDeclList createZDeclList(java.util.List<? extends Decl>
 decl)
  {
    ZDeclList zedObject = createZDeclList();
    if (decl != null) {
      zedObject.getDecl().addAll(decl);
    }
    return zedObject;
  }

  public GenParamType createGenParamType()
  {
    GenParamType zedObject = new GenParamTypeImpl(this);
    return zedObject;
  }

  public GenParamType createGenParamType( ZDeclName  name)
  {
    GenParamType zedObject = createGenParamType();
    zedObject.setName(name);
    return zedObject;
  }

  public LocAnn createLocAnn()
  {
    LocAnn zedObject = new LocAnnImpl(this);
    return zedObject;
  }

  public LocAnn createLocAnn( String  loc, java.math.BigInteger  line, java.math.BigInteger  col, java.math.BigInteger  start, java.math.BigInteger  length)
  {
    LocAnn zedObject = createLocAnn();
    zedObject.setLoc(loc);
    zedObject.setLine(line);
    zedObject.setCol(col);
    zedObject.setStart(start);
    zedObject.setLength(length);
    return zedObject;
  }

  public PowerExpr createPowerExpr()
  {
    PowerExpr zedObject = new PowerExprImpl(this);
    return zedObject;
  }

  public PowerExpr createPowerExpr( Expr  expr)
  {
    PowerExpr zedObject = createPowerExpr();
    zedObject.setExpr(expr);
    return zedObject;
  }

  public HideExpr createHideExpr()
  {
    HideExpr zedObject = new HideExprImpl(this);
    return zedObject;
  }

  public HideExpr createHideExpr( Expr  expr, RefNameList  refNameList)
  {
    HideExpr zedObject = createHideExpr();
    zedObject.setExpr(expr);
    zedObject.setRefNameList(refNameList);
    return zedObject;
  }

  public GivenPara createGivenPara()
  {
    GivenPara zedObject = new GivenParaImpl(this);
    return zedObject;
  }

  public GivenPara createGivenPara( DeclNameList  declNameList)
  {
    GivenPara zedObject = createGivenPara();
    zedObject.setDeclNameList(declNameList);
    return zedObject;
  }

  public PowerType createPowerType()
  {
    PowerType zedObject = new PowerTypeImpl(this);
    return zedObject;
  }

  public PowerType createPowerType( Type2  type)
  {
    PowerType zedObject = createPowerType();
    zedObject.setType(type);
    return zedObject;
  }

  public AndExpr createAndExpr()
  {
    AndExpr zedObject = new AndExprImpl(this);
    return zedObject;
  }

  public AndExpr createAndExpr( Expr  leftExpr, Expr  rightExpr)
  {
    AndExpr zedObject = createAndExpr();
    zedObject.setLeftExpr(leftExpr);
    zedObject.setRightExpr(rightExpr);
    return zedObject;
  }

  public ZBranchList createZBranchList()
  {
    ZBranchList zedObject = new ZBranchListImpl(this);
    return zedObject;
  }

  public ZBranchList createZBranchList(java.util.List<? extends Branch>
 branch)
  {
    ZBranchList zedObject = createZBranchList();
    if (branch != null) {
      zedObject.getBranch().addAll(branch);
    }
    return zedObject;
  }

  public RenameExpr createRenameExpr()
  {
    RenameExpr zedObject = new RenameExprImpl(this);
    return zedObject;
  }

  public RenameExpr createRenameExpr( Expr  expr, RenameList  renameList)
  {
    RenameExpr zedObject = createRenameExpr();
    zedObject.setExpr(expr);
    zedObject.setRenameList(renameList);
    return zedObject;
  }

  public AndPred createAndPred()
  {
    AndPred zedObject = new AndPredImpl(this);
    return zedObject;
  }

  public AndPred createAndPred( Pred  leftPred, Pred  rightPred, And  and)
  {
    AndPred zedObject = createAndPred();
    zedObject.setLeftPred(leftPred);
    zedObject.setRightPred(rightPred);
    zedObject.setAnd(and);
    return zedObject;
  }

  public ConjPara createConjPara()
  {
    ConjPara zedObject = new ConjParaImpl(this);
    return zedObject;
  }

  public ConjPara createConjPara( DeclNameList  declNameList, Pred  pred)
  {
    ConjPara zedObject = createConjPara();
    zedObject.setDeclNameList(declNameList);
    zedObject.setPred(pred);
    return zedObject;
  }

  public NumStroke createNumStroke()
  {
    NumStroke zedObject = new NumStrokeImpl(this);
    return zedObject;
  }

  public NumStroke createNumStroke( net.sourceforge.czt.base.ast.Digit  digit)
  {
    NumStroke zedObject = createNumStroke();
    zedObject.setDigit(digit);
    return zedObject;
  }

  public ZSect createZSect()
  {
    ZSect zedObject = new ZSectImpl(this);
    return zedObject;
  }

  public ZSect createZSect( String  name,java.util.List<? extends Parent>
 parent, ParaList  paraList)
  {
    ZSect zedObject = createZSect();
    zedObject.setName(name);
    if (parent != null) {
      zedObject.getParent().addAll(parent);
    }
    zedObject.setParaList(paraList);
    return zedObject;
  }

  public ThetaExpr createThetaExpr()
  {
    ThetaExpr zedObject = new ThetaExprImpl(this);
    return zedObject;
  }

  public ThetaExpr createThetaExpr( Expr  expr, StrokeList  strokeList)
  {
    ThetaExpr zedObject = createThetaExpr();
    zedObject.setExpr(expr);
    zedObject.setStrokeList(strokeList);
    return zedObject;
  }

  public SetExpr createSetExpr()
  {
    SetExpr zedObject = new SetExprImpl(this);
    return zedObject;
  }

  public SetExpr createSetExpr( ExprList  exprList)
  {
    SetExpr zedObject = createSetExpr();
    zedObject.setExprList(exprList);
    return zedObject;
  }

  public SetCompExpr createSetCompExpr()
  {
    SetCompExpr zedObject = new SetCompExprImpl(this);
    return zedObject;
  }

  public SetCompExpr createSetCompExpr( SchText  schText, Expr  expr)
  {
    SetCompExpr zedObject = createSetCompExpr();
    zedObject.setSchText(schText);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public PipeExpr createPipeExpr()
  {
    PipeExpr zedObject = new PipeExprImpl(this);
    return zedObject;
  }

  public PipeExpr createPipeExpr( Expr  leftExpr, Expr  rightExpr)
  {
    PipeExpr zedObject = createPipeExpr();
    zedObject.setLeftExpr(leftExpr);
    zedObject.setRightExpr(rightExpr);
    return zedObject;
  }

  public RefExpr createRefExpr()
  {
    RefExpr zedObject = new RefExprImpl(this);
    return zedObject;
  }

  public RefExpr createRefExpr( RefName  refName, ExprList  exprList, Boolean  mixfix, Boolean  explicit)
  {
    RefExpr zedObject = createRefExpr();
    zedObject.setRefName(refName);
    zedObject.setExprList(exprList);
    zedObject.setMixfix(mixfix);
    zedObject.setExplicit(explicit);
    return zedObject;
  }

  public NegExpr createNegExpr()
  {
    NegExpr zedObject = new NegExprImpl(this);
    return zedObject;
  }

  public NegExpr createNegExpr( Expr  expr)
  {
    NegExpr zedObject = createNegExpr();
    zedObject.setExpr(expr);
    return zedObject;
  }

  public ZDeclName createZDeclName()
  {
    ZDeclName zedObject = new ZDeclNameImpl(this);
    return zedObject;
  }

  public ZDeclName createZDeclName( String  word, StrokeList  strokeList, String  id)
  {
    ZDeclName zedObject = createZDeclName();
    zedObject.setWord(word);
    zedObject.setStrokeList(strokeList);
    zedObject.setId(id);
    return zedObject;
  }

  public ProdExpr createProdExpr()
  {
    ProdExpr zedObject = new ProdExprImpl(this);
    return zedObject;
  }

  public ProdExpr createProdExpr( ExprList  exprList)
  {
    ProdExpr zedObject = createProdExpr();
    zedObject.setExprList(exprList);
    return zedObject;
  }

  public DecorExpr createDecorExpr()
  {
    DecorExpr zedObject = new DecorExprImpl(this);
    return zedObject;
  }

  public DecorExpr createDecorExpr( Expr  expr, Stroke  stroke)
  {
    DecorExpr zedObject = createDecorExpr();
    zedObject.setExpr(expr);
    zedObject.setStroke(stroke);
    return zedObject;
  }

  public OutStroke createOutStroke()
  {
    OutStroke zedObject = new OutStrokeImpl(this);
    return zedObject;
  }

  public Parent createParent()
  {
    Parent zedObject = new ParentImpl(this);
    return zedObject;
  }

  public Parent createParent( String  word)
  {
    Parent zedObject = createParent();
    zedObject.setWord(word);
    return zedObject;
  }

  public Exists1Pred createExists1Pred()
  {
    Exists1Pred zedObject = new Exists1PredImpl(this);
    return zedObject;
  }

  public Exists1Pred createExists1Pred( SchText  schText, Pred  pred)
  {
    Exists1Pred zedObject = createExists1Pred();
    zedObject.setSchText(schText);
    zedObject.setPred(pred);
    return zedObject;
  }

  public AxPara createAxPara()
  {
    AxPara zedObject = new AxParaImpl(this);
    return zedObject;
  }

  public AxPara createAxPara( DeclNameList  declNameList, SchText  schText, Box  box)
  {
    AxPara zedObject = createAxPara();
    zedObject.setDeclNameList(declNameList);
    zedObject.setSchText(schText);
    zedObject.setBox(box);
    return zedObject;
  }

  public SchExpr createSchExpr()
  {
    SchExpr zedObject = new SchExprImpl(this);
    return zedObject;
  }

  public SchExpr createSchExpr( SchText  schText)
  {
    SchExpr zedObject = createSchExpr();
    zedObject.setSchText(schText);
    return zedObject;
  }

  public ZRefName createZRefName()
  {
    ZRefName zedObject = new ZRefNameImpl(this);
    return zedObject;
  }

  public ZRefName createZRefName( String  word, StrokeList  strokeList, ZDeclName  decl)
  {
    ZRefName zedObject = createZRefName();
    zedObject.setWord(word);
    zedObject.setStrokeList(strokeList);
    zedObject.setDecl(decl);
    return zedObject;
  }

  public SignatureAnn createSignatureAnn()
  {
    SignatureAnn zedObject = new SignatureAnnImpl(this);
    return zedObject;
  }

  public SignatureAnn createSignatureAnn( Signature  signature)
  {
    SignatureAnn zedObject = createSignatureAnn();
    zedObject.setSignature(signature);
    return zedObject;
  }

  public TupleExpr createTupleExpr()
  {
    TupleExpr zedObject = new TupleExprImpl(this);
    return zedObject;
  }

  public TupleExpr createTupleExpr( ExprList  exprList)
  {
    TupleExpr zedObject = createTupleExpr();
    zedObject.setExprList(exprList);
    return zedObject;
  }

}
