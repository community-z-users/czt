
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE JaxbToAst.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.tcoz.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.util.ReflectiveVisitor;
import net.sourceforge.czt.tcoz.ast.*;
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.oz.ast.*;

/**
 * The unmarshaller responsible for deserializing XML data.
 *
 * @author Gnast version 0.1
 */
public class JaxbToAst extends net.sourceforge.czt.oz.jaxb.JaxbToAst
{
  protected TcozFactory mTcozFactory_;

  public JaxbToAst()
  {
    mTcozFactory_ =
      new net.sourceforge.czt.tcoz.impl.TcozFactoryImpl();
  }

  public JaxbToAst(net.sourceforge.czt.z.ast.ZFactory vZFactory, net.sourceforge.czt.oz.ast.OzFactory vOzFactory, TcozFactory vTcozFactory)
  {
    super(vZFactory, vOzFactory);
    mTcozFactory_ = vTcozFactory;
  }

  private static Logger getLogger()
  {
    return Logger.getLogger("net.sourceforge.czt.tcoz.jaxb.JaxbToAst");
  }

  public Object visitObject(Object object)
  {
    getLogger().fine("Visit " + object.getClass().toString());
    if (object instanceof String
        || object instanceof Boolean
        || object instanceof List
        || object instanceof Integer
        || object instanceof java.math.BigInteger
        || object instanceof net.sourceforge.czt.base.ast.Digit) {
      return object;
    }
    throw new UnsupportedOperationException("Unexpected element "
                                            + object.getClass().getName());
  }

  public Object visitWaitUntilProExpr(net.sourceforge.czt.tcoz.jaxb.gen.WaitUntilProExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitWaitUntilProExpr", jaxbObject);
    net.sourceforge.czt.oz.ast.OpExpr opExpr =
      (net.sourceforge.czt.oz.ast.OpExpr) dispatch(jaxbObject.getOpExpr());
    net.sourceforge.czt.z.ast.Expr waitUntil =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getWaitUntil());
    WaitUntilProExpr erg = mTcozFactory_.createWaitUntilProExpr(opExpr, waitUntil);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitWaitUntilProExpr", erg);
    return erg;
  }

  public Object visitDistInChoiceProExpr(net.sourceforge.czt.tcoz.jaxb.gen.DistInChoiceProExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDistInChoiceProExpr", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    OpExpr opExpr =
      (OpExpr) dispatch(jaxbObject.getOpExpr());
    DistInChoiceProExpr erg = mTcozFactory_.createDistInChoiceProExpr(schText, opExpr);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitDistInChoiceProExpr", erg);
    return erg;
  }

  public Object visitChannelType(net.sourceforge.czt.tcoz.jaxb.gen.ChannelType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChannelType", jaxbObject);
    net.sourceforge.czt.z.ast.Type2 type =
      (net.sourceforge.czt.z.ast.Type2) dispatch(jaxbObject.getType());
    ChannelType erg = mTcozFactory_.createChannelType(type);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitChannelType", erg);
    return erg;
  }

  public Object visitDivergeProExpr(net.sourceforge.czt.tcoz.jaxb.gen.DivergeProExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDivergeProExpr", jaxbObject);
    DivergeProExpr erg = mTcozFactory_.createDivergeProExpr();

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitDivergeProExpr", erg);
    return erg;
  }

  public Object visitSynPllProExpr(net.sourceforge.czt.tcoz.jaxb.gen.SynPllProExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSynPllProExpr", jaxbObject);
    OpExpr leftOpExpr =
      (OpExpr) dispatch(jaxbObject.getLeftOpExpr());
    OpExpr rightOpExpr =
      (OpExpr) dispatch(jaxbObject.getRightOpExpr());
    EventSet events =
      (EventSet) dispatch(jaxbObject.getEvents());
    SynPllProExpr erg = mTcozFactory_.createSynPllProExpr(leftOpExpr, rightOpExpr, events);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSynPllProExpr", erg);
    return erg;
  }

  public Object visitAtProExpr(net.sourceforge.czt.tcoz.jaxb.gen.AtProExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAtProExpr", jaxbObject);
    Event event =
      (Event) dispatch(jaxbObject.getEvent());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.oz.ast.OpExpr opExpr =
      (net.sourceforge.czt.oz.ast.OpExpr) dispatch(jaxbObject.getOpExpr());
    AtProExpr erg = mTcozFactory_.createAtProExpr(event, expr, opExpr);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAtProExpr", erg);
    return erg;
  }

  public Object visitConnection(net.sourceforge.czt.tcoz.jaxb.gen.Connection jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitConnection", jaxbObject);
    List leftProcess = new Vector();
    for (Iterator iter = jaxbObject.getLeftProcess().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      leftProcess.add(o);
    }
    List rightProcess = new Vector();
    for (Iterator iter = jaxbObject.getRightProcess().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      rightProcess.add(o);
    }
    List channels = new Vector();
    for (Iterator iter = jaxbObject.getChannels().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      channels.add(o);
    }
    Connection erg = mTcozFactory_.createConnection(leftProcess, rightProcess, channels);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitConnection", erg);
    return erg;
  }

  public Object visitInterruptTimeOpExpr(net.sourceforge.czt.tcoz.jaxb.gen.InterruptTimeOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterruptTimeOpExpr", jaxbObject);
    net.sourceforge.czt.oz.ast.OpExpr normalOp =
      (net.sourceforge.czt.oz.ast.OpExpr) dispatch(jaxbObject.getNormalOp());
    net.sourceforge.czt.z.ast.Expr intOrTimeout =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getIntOrTimeout());
    net.sourceforge.czt.oz.ast.OpExpr handlerOp =
      (net.sourceforge.czt.oz.ast.OpExpr) dispatch(jaxbObject.getHandlerOp());
    InterruptTimeOpExpr erg = mTcozFactory_.createInterruptTimeOpExpr(normalOp, intOrTimeout, handlerOp);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInterruptTimeOpExpr", erg);
    return erg;
  }

  public Object visitInChoiceProExpr(net.sourceforge.czt.tcoz.jaxb.gen.InChoiceProExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInChoiceProExpr", jaxbObject);
    OpExpr leftOpExpr =
      (OpExpr) dispatch(jaxbObject.getLeftOpExpr());
    OpExpr rightOpExpr =
      (OpExpr) dispatch(jaxbObject.getRightOpExpr());
    InChoiceProExpr erg = mTcozFactory_.createInChoiceProExpr(leftOpExpr, rightOpExpr);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInChoiceProExpr", erg);
    return erg;
  }

  public Object visitEventSet(net.sourceforge.czt.tcoz.jaxb.gen.EventSet jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitEventSet", jaxbObject);
    List event = new Vector();
    for (Iterator iter = jaxbObject.getEvent().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      event.add(o);
    }
    EventSet erg = mTcozFactory_.createEventSet(event);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitEventSet", erg);
    return erg;
  }

  public Object visitEvent(net.sourceforge.czt.tcoz.jaxb.gen.Event jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitEvent", jaxbObject);
    net.sourceforge.czt.z.ast.RefName channelName =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getChannelName());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    Event erg = mTcozFactory_.createEvent(channelName, expr);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitEvent", erg);
    return erg;
  }

  public Object visitTimeoutEndProExpr(net.sourceforge.czt.tcoz.jaxb.gen.TimeoutEndProExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTimeoutEndProExpr", jaxbObject);
    net.sourceforge.czt.oz.ast.OpExpr normalOp =
      (net.sourceforge.czt.oz.ast.OpExpr) dispatch(jaxbObject.getNormalOp());
    net.sourceforge.czt.z.ast.Expr intOrTimeout =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getIntOrTimeout());
    net.sourceforge.czt.oz.ast.OpExpr handlerOp =
      (net.sourceforge.czt.oz.ast.OpExpr) dispatch(jaxbObject.getHandlerOp());
    TimeoutEndProExpr erg = mTcozFactory_.createTimeoutEndProExpr(normalOp, intOrTimeout, handlerOp);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitTimeoutEndProExpr", erg);
    return erg;
  }

  public Object visitSensorExpr(net.sourceforge.czt.tcoz.jaxb.gen.SensorExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSensorExpr", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    SensorExpr erg = mTcozFactory_.createSensorExpr(expr);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSensorExpr", erg);
    return erg;
  }

  public Object visitTopologyProExpr(net.sourceforge.czt.tcoz.jaxb.gen.TopologyProExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTopologyProExpr", jaxbObject);
    List connection = new Vector();
    for (Iterator iter = jaxbObject.getConnection().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      connection.add(o);
    }
    TopologyProExpr erg = mTcozFactory_.createTopologyProExpr(connection);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitTopologyProExpr", erg);
    return erg;
  }

  public Object visitTimeoutStartProExpr(net.sourceforge.czt.tcoz.jaxb.gen.TimeoutStartProExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTimeoutStartProExpr", jaxbObject);
    net.sourceforge.czt.oz.ast.OpExpr normalOp =
      (net.sourceforge.czt.oz.ast.OpExpr) dispatch(jaxbObject.getNormalOp());
    net.sourceforge.czt.z.ast.Expr intOrTimeout =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getIntOrTimeout());
    net.sourceforge.czt.oz.ast.OpExpr handlerOp =
      (net.sourceforge.czt.oz.ast.OpExpr) dispatch(jaxbObject.getHandlerOp());
    TimeoutStartProExpr erg = mTcozFactory_.createTimeoutStartProExpr(normalOp, intOrTimeout, handlerOp);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitTimeoutStartProExpr", erg);
    return erg;
  }

  public Object visitRecProExpr(net.sourceforge.czt.tcoz.jaxb.gen.RecProExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRecProExpr", jaxbObject);
    net.sourceforge.czt.z.ast.RefName opName =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getOpName());
    net.sourceforge.czt.oz.ast.OpExpr opExpr =
      (net.sourceforge.czt.oz.ast.OpExpr) dispatch(jaxbObject.getOpExpr());
    RecProExpr erg = mTcozFactory_.createRecProExpr(opName, opExpr);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitRecProExpr", erg);
    return erg;
  }

  public Object visitActuatorExpr(net.sourceforge.czt.tcoz.jaxb.gen.ActuatorExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitActuatorExpr", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    ActuatorExpr erg = mTcozFactory_.createActuatorExpr(expr);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitActuatorExpr", erg);
    return erg;
  }

  public Object visitDeadlineProExpr(net.sourceforge.czt.tcoz.jaxb.gen.DeadlineProExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDeadlineProExpr", jaxbObject);
    net.sourceforge.czt.oz.ast.OpExpr opExpr =
      (net.sourceforge.czt.oz.ast.OpExpr) dispatch(jaxbObject.getOpExpr());
    net.sourceforge.czt.z.ast.Expr deadline =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getDeadline());
    DeadlineProExpr erg = mTcozFactory_.createDeadlineProExpr(opExpr, deadline);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitDeadlineProExpr", erg);
    return erg;
  }

  public Object visitDistInterleaveProExpr(net.sourceforge.czt.tcoz.jaxb.gen.DistInterleaveProExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDistInterleaveProExpr", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    OpExpr opExpr =
      (OpExpr) dispatch(jaxbObject.getOpExpr());
    DistInterleaveProExpr erg = mTcozFactory_.createDistInterleaveProExpr(schText, opExpr);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitDistInterleaveProExpr", erg);
    return erg;
  }

  public Object visitWaitProExpr(net.sourceforge.czt.tcoz.jaxb.gen.WaitProExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitWaitProExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    WaitProExpr erg = mTcozFactory_.createWaitProExpr(expr);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitWaitProExpr", erg);
    return erg;
  }

  public Object visitInterruptProExpr(net.sourceforge.czt.tcoz.jaxb.gen.InterruptProExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterruptProExpr", jaxbObject);
    net.sourceforge.czt.oz.ast.OpExpr normalOp =
      (net.sourceforge.czt.oz.ast.OpExpr) dispatch(jaxbObject.getNormalOp());
    net.sourceforge.czt.z.ast.Expr intOrTimeout =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getIntOrTimeout());
    net.sourceforge.czt.oz.ast.OpExpr handlerOp =
      (net.sourceforge.czt.oz.ast.OpExpr) dispatch(jaxbObject.getHandlerOp());
    InterruptProExpr erg = mTcozFactory_.createInterruptProExpr(normalOp, intOrTimeout, handlerOp);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInterruptProExpr", erg);
    return erg;
  }

  public Object visitInterleaveProExpr(net.sourceforge.czt.tcoz.jaxb.gen.InterleaveProExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterleaveProExpr", jaxbObject);
    OpExpr leftOpExpr =
      (OpExpr) dispatch(jaxbObject.getLeftOpExpr());
    OpExpr rightOpExpr =
      (OpExpr) dispatch(jaxbObject.getRightOpExpr());
    InterleaveProExpr erg = mTcozFactory_.createInterleaveProExpr(leftOpExpr, rightOpExpr);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInterleaveProExpr", erg);
    return erg;
  }

  public Object visitStopProExpr(net.sourceforge.czt.tcoz.jaxb.gen.StopProExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitStopProExpr", jaxbObject);
    StopProExpr erg = mTcozFactory_.createStopProExpr();

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitStopProExpr", erg);
    return erg;
  }

  public Object visitChannelExpr(net.sourceforge.czt.tcoz.jaxb.gen.ChannelExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChannelExpr", jaxbObject);
    ChannelExpr erg = mTcozFactory_.createChannelExpr();

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitChannelExpr", erg);
    return erg;
  }

  public Object visitSkipProExpr(net.sourceforge.czt.tcoz.jaxb.gen.SkipProExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSkipProExpr", jaxbObject);
    SkipProExpr erg = mTcozFactory_.createSkipProExpr();

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSkipProExpr", erg);
    return erg;
  }
}
