
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstInterface.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.ast;

import net.sourceforge.czt.base.ast.*;

/**
 * A relation operator application (C.5.12).
        <ul>
        <li>Membership predicate.
            In this case, Mixfix=false, the first (left) expression is the
            element, and the second (right) expression is the set.
            For example, "n \in S" has left="n" and right="S".</li>
        <li>Equality.
            In this case, Mixfix=true, the first (left) expression is the
            left-hand side of the equality, and the second (right)
            expression is a singleton set containing the right-hand side
            of the equality.
            For example: "n = m" has left="n" and right="{m}".</li>
        <li>Other operator application.
            In this case, Mixfix=true, the first (left) expression is
            usually a tuple containing the corresponding number of arguments,
            and the second (right) expression is the operator name.
            However, for a unary operator, the left expression does not have
            to be a tuple.  
            For example, "n &lt; m" has left="(n,m)" and right=" _ &lt; _ ",
            "disjoint s" has left="s" and right="disjoint _ ", and
            if foo was declared as a unary postfix operator,
            then "(2,3) foo" would have left= "(2,3)" and right=" _ foo".  
            </li>
        </ul>
 *
 * @author Gnast version 0.1
 */
public interface MemPred extends Pred
{

  /**
   * Returns the LeftExpr element.
   *
   * @return the LeftExpr element.
   */
  Expr getLeftExpr();


  /**
   * Sets the LeftExpr element.
   *
   * @param leftExpr   the LeftExpr element.
   * @see #getLeftExpr
   */
  void setLeftExpr(Expr leftExpr);

  /**
   * Returns the RightExpr element.
   *
   * @return the RightExpr element.
   */
  Expr getRightExpr();


  /**
   * Sets the RightExpr element.
   *
   * @param rightExpr   the RightExpr element.
   * @see #getRightExpr
   */
  void setRightExpr(Expr rightExpr);

  /**
   * Returns the Mixfix element.
   *
   * @return the Mixfix element.
   */
  Boolean getMixfix();


  /**
   * Sets the Mixfix element.
   *
   * @param mixfix   the Mixfix element.
   * @see #getMixfix
   */
  void setMixfix(Boolean mixfix);
}
