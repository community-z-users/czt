
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstClass.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.oz.impl;

import java.util.*;
import java.util.logging.*;

import net.sourceforge.czt.base.ast.*;
import net.sourceforge.czt.base.impl.*;
import net.sourceforge.czt.base.visitor.*;
import net.sourceforge.czt.util.Visitor;
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.impl.*;
import net.sourceforge.czt.oz.ast.*;
import net.sourceforge.czt.oz.visitor.*;

import net.sourceforge.czt.oz.visitor.ClassRefTypeVisitor;

/**
 * An implementation of the interface
 * {@link ClassRefType}.
 *
 * @author Gnast version 0.1
 */
public class ClassRefTypeImpl
  extends ClassTypeImpl   implements ClassRefType
{
  /**
   * The default constructor.
   *
   * Do not use it explicitly, unless you are extending this class.
   * If you want to create an instance of this class, please use the
   * {@link net.sourceforge.czt.oz.ast.OzFactory object factory}.
   */
  protected ClassRefTypeImpl()
  {
  }

  protected ClassRefTypeImpl(BaseFactory factory)
  {
    super(factory);
  }

  /**
   * Compares the specified object with this ClassRefTypeImpl
   * for equality.  Returns true if and only if the specified object is
   * also a(n) ClassRefTypeImpl and all the getter methods except getAnns
   * return equal objects.
   */
  public boolean equals(Object obj)
  {
    if (obj != null) {
      if (this.getClass().equals(obj.getClass()) && super.equals(obj)) {
        ClassRefTypeImpl object = (ClassRefTypeImpl) obj;
        if (thisClass_ != null) {
          if (!thisClass_.equals(object.thisClass_)) {
            return false;
          }
        }
        else {
          if (object.thisClass_ != null) {
            return false;
          }
        }
        if (superClass_ != null) {
          if (!superClass_.equals(object.superClass_)) {
            return false;
          }
        }
        else {
          if (object.superClass_ != null) {
            return false;
          }
        }
        if (visibilityList_ != null) {
          if (!visibilityList_.equals(object.visibilityList_)) {
            return false;
          }
        }
        else {
          if (object.visibilityList_ != null) {
            return false;
          }
        }
        if (primary_ != null) {
          if (!primary_.equals(object.primary_)) {
            return false;
          }
        }
        else {
          if (object.primary_ != null) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }

  /**
   * Returns the hash code value for this ClassRefTypeImpl.
   */
  public int hashCode()
  {
    final int constant = 31;

    int hashCode = super.hashCode();
    hashCode += "ClassRefTypeImpl".hashCode();
    if (thisClass_ != null) {
      hashCode += constant * thisClass_.hashCode();
    }
    if (superClass_ != null) {
      hashCode += constant * superClass_.hashCode();
    }
    if (visibilityList_ != null) {
      hashCode += constant * visibilityList_.hashCode();
    }
    if (primary_ != null) {
      hashCode += constant * primary_.hashCode();
    }
    return hashCode;
  }

  /**
   * Accepts a visitor.
   */
  public <R> R accept(net.sourceforge.czt.util.Visitor<R> v)
  {
    if (v instanceof ClassRefTypeVisitor) {
      ClassRefTypeVisitor<R> visitor = (ClassRefTypeVisitor<R>) v;
      return visitor.visitClassRefType(this);
    }
    return super.accept(v);
  }

  /**
   * Returns a new object of this class.
   */
  public ClassRefTypeImpl create(Object[] args)
  {
    ClassRefTypeImpl zedObject = null;
    try {
      ClassSig classSig = (ClassSig) args[0];
      ClassRef thisClass = (ClassRef) args[1];
      java.util.List<ClassRef> superClass = (java.util.List<ClassRef>) args[2];
      VisibilityList visibilityList = (VisibilityList) args[3];
      java.util.List<DeclName> primary = (java.util.List<DeclName>) args[4];
      zedObject = new ClassRefTypeImpl(getFactory());
      zedObject.setClassSig(classSig);
      zedObject.setThisClass(thisClass);
      if (superClass != null) {
        zedObject.getSuperClass().addAll(superClass);
      }
      zedObject.setVisibilityList(visibilityList);
      if (primary != null) {
        zedObject.getPrimary().addAll(primary);
      }
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException();
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException();
    }
    return zedObject;
  }

  public Object[] getChildren()
  {
    Object[] erg = { getClassSig(), getThisClass(), getSuperClass(), getVisibilityList(), getPrimary() };
    return erg;
  }

  private ClassRef thisClass_;

  public ClassRef getThisClass()
  {
    return thisClass_;
  }

  public void setThisClass(ClassRef thisClass)
  {
    thisClass_ = thisClass;
  }


  private ListTerm<ClassRef> superClass_ =
    new ListTermImpl<ClassRef>();

  public ListTerm<ClassRef> getSuperClass()
  {
    return superClass_;
  }

  private VisibilityList visibilityList_;

  public VisibilityList getVisibilityList()
  {
    return visibilityList_;
  }

  public void setVisibilityList(VisibilityList visibilityList)
  {
    visibilityList_ = visibilityList;
  }


  private ListTerm<net.sourceforge.czt.z.ast.DeclName> primary_ =
    new ListTermImpl<net.sourceforge.czt.z.ast.DeclName>();

  public ListTerm<net.sourceforge.czt.z.ast.DeclName> getPrimary()
  {
    return primary_;
  }
}
