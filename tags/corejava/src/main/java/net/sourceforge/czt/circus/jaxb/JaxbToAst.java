
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE JaxbToAst.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.util.ReflectiveVisitor;
import net.sourceforge.czt.circus.ast.*;
import net.sourceforge.czt.z.ast.*;

/**
 * The unmarshaller responsible for deserializing XML data.
 *
 * @author Gnast version 0.1
 */
public class JaxbToAst extends net.sourceforge.czt.z.jaxb.JaxbToAst
{
  protected CircusFactory mCircusFactory_;

  public JaxbToAst()
  {
    mCircusFactory_ =
      new net.sourceforge.czt.circus.impl.CircusFactoryImpl();
  }

  public JaxbToAst(net.sourceforge.czt.z.ast.ZFactory vZFactory, CircusFactory vCircusFactory)
  {
    super(vZFactory);
    mCircusFactory_ = vCircusFactory;
  }

  private static Logger getLogger()
  {
    return Logger.getLogger("net.sourceforge.czt.circus.jaxb.JaxbToAst");
  }

  public Object visitObject(Object object)
  {
    getLogger().fine("Visit " + object.getClass().toString());
    if (object instanceof String
        || object instanceof Boolean
        || object instanceof List
        || object instanceof Integer
        || object instanceof java.math.BigInteger
        || object instanceof net.sourceforge.czt.base.ast.Digit) {
      return object;
    }
    throw new UnsupportedOperationException("Unexpected element "
                                            + object.getClass().getName());
  }

  public Object visitChannelSetType(net.sourceforge.czt.circus.jaxb.gen.ChannelSetType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChannelSetType", jaxbObject);
    net.sourceforge.czt.z.ast.Signature signature =
      (net.sourceforge.czt.z.ast.Signature) dispatch(jaxbObject.getSignature());
    ChannelSetType erg = mCircusFactory_.createChannelSetType(signature);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitChannelSetType", erg);
    return erg;
  }

  public Object visitGuardedAction(net.sourceforge.czt.circus.jaxb.gen.GuardedAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitGuardedAction", jaxbObject);
    CircusAction circusAction =
      (CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    GuardedAction erg = mCircusFactory_.createGuardedAction(circusAction, pred);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitGuardedAction", erg);
    return erg;
  }

  public Object visitParallelAction(net.sourceforge.czt.circus.jaxb.gen.ParallelAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParallelAction", jaxbObject);
    CircusAction leftAction =
      (CircusAction) dispatch(jaxbObject.getLeftAction());
    CircusAction rightAction =
      (CircusAction) dispatch(jaxbObject.getRightAction());
    NameSet leftNameSet =
      (NameSet) dispatch(jaxbObject.getLeftNameSet());
    NameSet rightNameSet =
      (NameSet) dispatch(jaxbObject.getRightNameSet());
    ChannelSet channelSet =
      (ChannelSet) dispatch(jaxbObject.getChannelSet());
    ParallelAction erg = mCircusFactory_.createParallelAction(leftAction, rightAction, leftNameSet, rightNameSet, channelSet);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitParallelAction", erg);
    return erg;
  }

  public Object visitChannelDecl(net.sourceforge.czt.circus.jaxb.gen.ChannelDecl jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChannelDecl", jaxbObject);
    net.sourceforge.czt.z.ast.DeclNameList genFormals =
      (net.sourceforge.czt.z.ast.DeclNameList) dispatch(jaxbObject.getGenFormals());
    net.sourceforge.czt.z.ast.DeclNameList declNameList =
      (net.sourceforge.czt.z.ast.DeclNameList) dispatch(jaxbObject.getDeclNameList());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    ChannelDecl erg = mCircusFactory_.createChannelDecl(genFormals, declNameList, expr);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitChannelDecl", erg);
    return erg;
  }

  public Object visitHideAction(net.sourceforge.czt.circus.jaxb.gen.HideAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitHideAction", jaxbObject);
    CircusAction circusAction =
      (CircusAction) dispatch(jaxbObject.getCircusAction());
    ChannelSet channelSet =
      (ChannelSet) dispatch(jaxbObject.getChannelSet());
    HideAction erg = mCircusFactory_.createHideAction(circusAction, channelSet);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitHideAction", erg);
    return erg;
  }

  public Object visitExtChoiceProcessIte(net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcessIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExtChoiceProcessIte", jaxbObject);
    CircusProcess circusProcess =
      (CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    ExtChoiceProcessIte erg = mCircusFactory_.createExtChoiceProcessIte(circusProcess, declList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitExtChoiceProcessIte", erg);
    return erg;
  }

  public Object visitChaosAction(net.sourceforge.czt.circus.jaxb.gen.ChaosAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChaosAction", jaxbObject);
    ChaosAction erg = mCircusFactory_.createChaosAction();

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitChaosAction", erg);
    return erg;
  }

  public Object visitCircusFieldList(net.sourceforge.czt.circus.jaxb.gen.CircusFieldList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCircusFieldList", jaxbObject);
    List field = new Vector();
    for (Iterator iter = jaxbObject.getField().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      field.add(o);
    }
    CircusFieldList erg = mCircusFactory_.createCircusFieldList(field);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCircusFieldList", erg);
    return erg;
  }

  public Object visitCircusStateAnn(net.sourceforge.czt.circus.jaxb.gen.CircusStateAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCircusStateAnn", jaxbObject);
    CircusStateAnn erg = mCircusFactory_.createCircusStateAnn();

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCircusStateAnn", erg);
    return erg;
  }

  public Object visitIntChoiceProcessIte(net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcessIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntChoiceProcessIte", jaxbObject);
    CircusProcess circusProcess =
      (CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    IntChoiceProcessIte erg = mCircusFactory_.createIntChoiceProcessIte(circusProcess, declList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitIntChoiceProcessIte", erg);
    return erg;
  }

  public Object visitAlphabetisedParallelAction(net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAlphabetisedParallelAction", jaxbObject);
    CircusAction leftAction =
      (CircusAction) dispatch(jaxbObject.getLeftAction());
    CircusAction rightAction =
      (CircusAction) dispatch(jaxbObject.getRightAction());
    NameSet leftNameSet =
      (NameSet) dispatch(jaxbObject.getLeftNameSet());
    NameSet rightNameSet =
      (NameSet) dispatch(jaxbObject.getRightNameSet());
    ChannelSet leftAlpha =
      (ChannelSet) dispatch(jaxbObject.getLeftAlpha());
    ChannelSet rightAlpha =
      (ChannelSet) dispatch(jaxbObject.getRightAlpha());
    AlphabetisedParallelAction erg = mCircusFactory_.createAlphabetisedParallelAction(leftAction, rightAction, leftNameSet, rightNameSet, leftAlpha, rightAlpha);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAlphabetisedParallelAction", erg);
    return erg;
  }

  public Object visitSkipAction(net.sourceforge.czt.circus.jaxb.gen.SkipAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSkipAction", jaxbObject);
    SkipAction erg = mCircusFactory_.createSkipAction();

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSkipAction", erg);
    return erg;
  }

  public Object visitProcessType(net.sourceforge.czt.circus.jaxb.gen.ProcessType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProcessType", jaxbObject);
    ProcessSignature processSignature =
      (ProcessSignature) dispatch(jaxbObject.getProcessSignature());
    ProcessType erg = mCircusFactory_.createProcessType(processSignature);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitProcessType", erg);
    return erg;
  }

  public Object visitSeqProcessIdx(net.sourceforge.czt.circus.jaxb.gen.SeqProcessIdx jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSeqProcessIdx", jaxbObject);
    CircusProcess circusProcess =
      (CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    SeqProcessIdx erg = mCircusFactory_.createSeqProcessIdx(circusProcess, declList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSeqProcessIdx", erg);
    return erg;
  }

  public Object visitExtChoiceActionIte(net.sourceforge.czt.circus.jaxb.gen.ExtChoiceActionIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExtChoiceActionIte", jaxbObject);
    CircusAction circusAction =
      (CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    ExtChoiceActionIte erg = mCircusFactory_.createExtChoiceActionIte(circusAction, declList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitExtChoiceActionIte", erg);
    return erg;
  }

  public Object visitQualifiedDecl(net.sourceforge.czt.circus.jaxb.gen.QualifiedDecl jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitQualifiedDecl", jaxbObject);
    net.sourceforge.czt.z.ast.DeclNameList declNameList =
      (net.sourceforge.czt.z.ast.DeclNameList) dispatch(jaxbObject.getDeclNameList());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    ParamQualifier paramQualifier = null;
    String paramQualifierJaxb = jaxbObject.getParamQualifier();
    if (paramQualifierJaxb != null) {
      paramQualifier =
        ParamQualifier.fromString(paramQualifierJaxb);
    }
    QualifiedDecl erg = mCircusFactory_.createQualifiedDecl(declNameList, expr, paramQualifier);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitQualifiedDecl", erg);
    return erg;
  }

  public Object visitAssignmentPairs(net.sourceforge.czt.circus.jaxb.gen.AssignmentPairs jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAssignmentPairs", jaxbObject);
    net.sourceforge.czt.z.ast.RefNameList lHS =
      (net.sourceforge.czt.z.ast.RefNameList) dispatch(jaxbObject.getLHS());
    net.sourceforge.czt.z.ast.ExprList rHS =
      (net.sourceforge.czt.z.ast.ExprList) dispatch(jaxbObject.getRHS());
    AssignmentPairs erg = mCircusFactory_.createAssignmentPairs(lHS, rHS);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAssignmentPairs", erg);
    return erg;
  }

  public Object visitIndexedProcess(net.sourceforge.czt.circus.jaxb.gen.IndexedProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIndexedProcess", jaxbObject);
    CircusProcess circusProcess =
      (CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    IndexedProcess erg = mCircusFactory_.createIndexedProcess(circusProcess, declList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitIndexedProcess", erg);
    return erg;
  }

  public Object visitLetMuAction(net.sourceforge.czt.circus.jaxb.gen.LetMuAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitLetMuAction", jaxbObject);
    CircusAction circusAction =
      (CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.ParaList paraList =
      (net.sourceforge.czt.z.ast.ParaList) dispatch(jaxbObject.getParaList());
    LetMuAction erg = mCircusFactory_.createLetMuAction(circusAction, paraList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitLetMuAction", erg);
    return erg;
  }

  public Object visitChannelType(net.sourceforge.czt.circus.jaxb.gen.ChannelType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChannelType", jaxbObject);
    net.sourceforge.czt.z.ast.DeclNameList genFormals =
      (net.sourceforge.czt.z.ast.DeclNameList) dispatch(jaxbObject.getGenFormals());
    net.sourceforge.czt.z.ast.Type2 declaredType =
      (net.sourceforge.czt.z.ast.Type2) dispatch(jaxbObject.getDeclaredType());
    net.sourceforge.czt.z.ast.Type2 resolvedType =
      (net.sourceforge.czt.z.ast.Type2) dispatch(jaxbObject.getResolvedType());
    ChannelType erg = mCircusFactory_.createChannelType(genFormals, declaredType, resolvedType);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitChannelType", erg);
    return erg;
  }

  public Object visitInterleaveAction(net.sourceforge.czt.circus.jaxb.gen.InterleaveAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterleaveAction", jaxbObject);
    CircusAction leftAction =
      (CircusAction) dispatch(jaxbObject.getLeftAction());
    CircusAction rightAction =
      (CircusAction) dispatch(jaxbObject.getRightAction());
    NameSet leftNameSet =
      (NameSet) dispatch(jaxbObject.getLeftNameSet());
    NameSet rightNameSet =
      (NameSet) dispatch(jaxbObject.getRightNameSet());
    InterleaveAction erg = mCircusFactory_.createInterleaveAction(leftAction, rightAction, leftNameSet, rightNameSet);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInterleaveAction", erg);
    return erg;
  }

  public Object visitIntChoiceProcess(net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntChoiceProcess", jaxbObject);
    CircusProcess leftProc =
      (CircusProcess) dispatch(jaxbObject.getLeftProc());
    CircusProcess rightProc =
      (CircusProcess) dispatch(jaxbObject.getRightProc());
    IntChoiceProcess erg = mCircusFactory_.createIntChoiceProcess(leftProc, rightProc);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitIntChoiceProcess", erg);
    return erg;
  }

  public Object visitSchExprAction(net.sourceforge.czt.circus.jaxb.gen.SchExprAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSchExprAction", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    SchExprAction erg = mCircusFactory_.createSchExprAction(expr);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSchExprAction", erg);
    return erg;
  }

  public Object visitIfGuardedCommand(net.sourceforge.czt.circus.jaxb.gen.IfGuardedCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIfGuardedCommand", jaxbObject);
    List guardedAction = new Vector();
    for (Iterator iter = jaxbObject.getGuardedAction().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      guardedAction.add(o);
    }
    IfGuardedCommand erg = mCircusFactory_.createIfGuardedCommand(guardedAction);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitIfGuardedCommand", erg);
    return erg;
  }

  public Object visitParallelProcessIte(net.sourceforge.czt.circus.jaxb.gen.ParallelProcessIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParallelProcessIte", jaxbObject);
    CircusProcess circusProcess =
      (CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    ChannelSet channelSet =
      (ChannelSet) dispatch(jaxbObject.getChannelSet());
    ParallelProcessIte erg = mCircusFactory_.createParallelProcessIte(circusProcess, declList, channelSet);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitParallelProcessIte", erg);
    return erg;
  }

  public Object visitExtChoiceProcess(net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExtChoiceProcess", jaxbObject);
    CircusProcess leftProc =
      (CircusProcess) dispatch(jaxbObject.getLeftProc());
    CircusProcess rightProc =
      (CircusProcess) dispatch(jaxbObject.getRightProc());
    ExtChoiceProcess erg = mCircusFactory_.createExtChoiceProcess(leftProc, rightProc);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitExtChoiceProcess", erg);
    return erg;
  }

  public Object visitStopAction(net.sourceforge.czt.circus.jaxb.gen.StopAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitStopAction", jaxbObject);
    StopAction erg = mCircusFactory_.createStopAction();

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitStopAction", erg);
    return erg;
  }

  public Object visitExtChoiceAction(net.sourceforge.czt.circus.jaxb.gen.ExtChoiceAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExtChoiceAction", jaxbObject);
    CircusAction leftAction =
      (CircusAction) dispatch(jaxbObject.getLeftAction());
    CircusAction rightAction =
      (CircusAction) dispatch(jaxbObject.getRightAction());
    ExtChoiceAction erg = mCircusFactory_.createExtChoiceAction(leftAction, rightAction);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitExtChoiceAction", erg);
    return erg;
  }

  public Object visitInterleaveProcessIdx(net.sourceforge.czt.circus.jaxb.gen.InterleaveProcessIdx jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterleaveProcessIdx", jaxbObject);
    CircusProcess circusProcess =
      (CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    InterleaveProcessIdx erg = mCircusFactory_.createInterleaveProcessIdx(circusProcess, declList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInterleaveProcessIdx", erg);
    return erg;
  }

  public Object visitAlphabetisedParallelProcessIte(net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcessIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAlphabetisedParallelProcessIte", jaxbObject);
    CircusProcess circusProcess =
      (CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    ChannelSet channelSet =
      (ChannelSet) dispatch(jaxbObject.getChannelSet());
    AlphabetisedParallelProcessIte erg = mCircusFactory_.createAlphabetisedParallelProcessIte(circusProcess, declList, channelSet);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAlphabetisedParallelProcessIte", erg);
    return erg;
  }

  public Object visitAlphabetisedParallelProcessIdx(net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcessIdx jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAlphabetisedParallelProcessIdx", jaxbObject);
    CircusProcess circusProcess =
      (CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    ChannelSet channelSet =
      (ChannelSet) dispatch(jaxbObject.getChannelSet());
    AlphabetisedParallelProcessIdx erg = mCircusFactory_.createAlphabetisedParallelProcessIdx(circusProcess, declList, channelSet);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAlphabetisedParallelProcessIdx", erg);
    return erg;
  }

  public Object visitPrefixingAction(net.sourceforge.czt.circus.jaxb.gen.PrefixingAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPrefixingAction", jaxbObject);
    CircusAction circusAction =
      (CircusAction) dispatch(jaxbObject.getCircusAction());
    Communication communication =
      (Communication) dispatch(jaxbObject.getCommunication());
    PrefixingAction erg = mCircusFactory_.createPrefixingAction(circusAction, communication);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitPrefixingAction", erg);
    return erg;
  }

  public Object visitNameSetType(net.sourceforge.czt.circus.jaxb.gen.NameSetType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNameSetType", jaxbObject);
    net.sourceforge.czt.z.ast.Signature signature =
      (net.sourceforge.czt.z.ast.Signature) dispatch(jaxbObject.getSignature());
    NameSetType erg = mCircusFactory_.createNameSetType(signature);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitNameSetType", erg);
    return erg;
  }

  public Object visitOnTheFlyDefAnn(net.sourceforge.czt.circus.jaxb.gen.OnTheFlyDefAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOnTheFlyDefAnn", jaxbObject);
    OnTheFlyDefAnn erg = mCircusFactory_.createOnTheFlyDefAnn();

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitOnTheFlyDefAnn", erg);
    return erg;
  }

  public Object visitChannelSet(net.sourceforge.czt.circus.jaxb.gen.ChannelSet jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChannelSet", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    ChannelSet erg = mCircusFactory_.createChannelSet(expr);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitChannelSet", erg);
    return erg;
  }

  public Object visitAssignmentCommand(net.sourceforge.czt.circus.jaxb.gen.AssignmentCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAssignmentCommand", jaxbObject);
    AssignmentPairs assignmentPairs =
      (AssignmentPairs) dispatch(jaxbObject.getAssignmentPairs());
    AssignmentCommand erg = mCircusFactory_.createAssignmentCommand(assignmentPairs);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAssignmentCommand", erg);
    return erg;
  }

  public Object visitSeqProcessIte(net.sourceforge.czt.circus.jaxb.gen.SeqProcessIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSeqProcessIte", jaxbObject);
    CircusProcess circusProcess =
      (CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    SeqProcessIte erg = mCircusFactory_.createSeqProcessIte(circusProcess, declList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSeqProcessIte", erg);
    return erg;
  }

  public Object visitIntChoiceProcessIdx(net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcessIdx jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntChoiceProcessIdx", jaxbObject);
    CircusProcess circusProcess =
      (CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    IntChoiceProcessIdx erg = mCircusFactory_.createIntChoiceProcessIdx(circusProcess, declList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitIntChoiceProcessIdx", erg);
    return erg;
  }

  public Object visitBasicProcessSignature(net.sourceforge.czt.circus.jaxb.gen.BasicProcessSignature jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitBasicProcessSignature", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName processName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getProcessName());
    net.sourceforge.czt.z.ast.DeclNameList genFormals =
      (net.sourceforge.czt.z.ast.DeclNameList) dispatch(jaxbObject.getGenFormals());
    net.sourceforge.czt.z.ast.Signature paramOrIndexes =
      (net.sourceforge.czt.z.ast.Signature) dispatch(jaxbObject.getParamOrIndexes());
    ProcessKind kind = null;
    String kindJaxb = jaxbObject.getKind();
    if (kindJaxb != null) {
      kind =
        ProcessKind.fromString(kindJaxb);
    }
    net.sourceforge.czt.z.ast.SchemaType stateType =
      (net.sourceforge.czt.z.ast.SchemaType) dispatch(jaxbObject.getStateType());
    List zSignature = new Vector();
    for (Iterator iter = jaxbObject.getZSignature().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      zSignature.add(o);
    }
    List actionSignature = new Vector();
    for (Iterator iter = jaxbObject.getActionSignature().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      actionSignature.add(o);
    }
    net.sourceforge.czt.z.ast.ZRefNameList nameSet =
      (net.sourceforge.czt.z.ast.ZRefNameList) dispatch(jaxbObject.getNameSet());
    BasicProcessSignature erg = mCircusFactory_.createBasicProcessSignature(processName, genFormals, paramOrIndexes, kind, stateType, zSignature, actionSignature, nameSet);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitBasicProcessSignature", erg);
    return erg;
  }

  public Object visitParamProcess(net.sourceforge.czt.circus.jaxb.gen.ParamProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParamProcess", jaxbObject);
    CircusProcess circusProcess =
      (CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    ParamProcess erg = mCircusFactory_.createParamProcess(circusProcess, declList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitParamProcess", erg);
    return erg;
  }

  public Object visitSigmaExpr(net.sourceforge.czt.circus.jaxb.gen.SigmaExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSigmaExpr", jaxbObject);
    net.sourceforge.czt.z.ast.RefExpr channel =
      (net.sourceforge.czt.z.ast.RefExpr) dispatch(jaxbObject.getChannel());
    net.sourceforge.czt.z.ast.Expr value =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getValue());
    SigmaExpr erg = mCircusFactory_.createSigmaExpr(channel, value);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSigmaExpr", erg);
    return erg;
  }

  public Object visitSubstitutionAction(net.sourceforge.czt.circus.jaxb.gen.SubstitutionAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSubstitutionAction", jaxbObject);
    CircusAction circusAction =
      (CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.RenameList renameList =
      (net.sourceforge.czt.z.ast.RenameList) dispatch(jaxbObject.getRenameList());
    SubstitutionAction erg = mCircusFactory_.createSubstitutionAction(circusAction, renameList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSubstitutionAction", erg);
    return erg;
  }

  public Object visitSpecStmtCommand(net.sourceforge.czt.circus.jaxb.gen.SpecStmtCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSpecStmtCommand", jaxbObject);
    net.sourceforge.czt.z.ast.RefNameList frame =
      (net.sourceforge.czt.z.ast.RefNameList) dispatch(jaxbObject.getFrame());
    net.sourceforge.czt.z.ast.Pred pre =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPre());
    net.sourceforge.czt.z.ast.Pred post =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPost());
    SpecStmtCommand erg = mCircusFactory_.createSpecStmtCommand(frame, pre, post);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSpecStmtCommand", erg);
    return erg;
  }

  public Object visitMuAction(net.sourceforge.czt.circus.jaxb.gen.MuAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitMuAction", jaxbObject);
    CircusAction circusAction =
      (CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.DeclName declName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getDeclName());
    MuAction erg = mCircusFactory_.createMuAction(circusAction, declName);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitMuAction", erg);
    return erg;
  }

  public Object visitProcessSignature(net.sourceforge.czt.circus.jaxb.gen.ProcessSignature jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProcessSignature", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName processName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getProcessName());
    net.sourceforge.czt.z.ast.DeclNameList genFormals =
      (net.sourceforge.czt.z.ast.DeclNameList) dispatch(jaxbObject.getGenFormals());
    net.sourceforge.czt.z.ast.Signature paramOrIndexes =
      (net.sourceforge.czt.z.ast.Signature) dispatch(jaxbObject.getParamOrIndexes());
    ProcessKind kind = null;
    String kindJaxb = jaxbObject.getKind();
    if (kindJaxb != null) {
      kind =
        ProcessKind.fromString(kindJaxb);
    }
    ProcessSignature erg = mCircusFactory_.createProcessSignature(processName, genFormals, paramOrIndexes, kind);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitProcessSignature", erg);
    return erg;
  }

  public Object visitAlphabetisedParallelProcess(net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAlphabetisedParallelProcess", jaxbObject);
    CircusProcess leftProc =
      (CircusProcess) dispatch(jaxbObject.getLeftProc());
    CircusProcess rightProc =
      (CircusProcess) dispatch(jaxbObject.getRightProc());
    ChannelSet leftAlpha =
      (ChannelSet) dispatch(jaxbObject.getLeftAlpha());
    ChannelSet rightAlpha =
      (ChannelSet) dispatch(jaxbObject.getRightAlpha());
    AlphabetisedParallelProcess erg = mCircusFactory_.createAlphabetisedParallelProcess(leftProc, rightProc, leftAlpha, rightAlpha);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAlphabetisedParallelProcess", erg);
    return erg;
  }

  public Object visitProcessPara(net.sourceforge.czt.circus.jaxb.gen.ProcessPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProcessPara", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName processName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getProcessName());
    net.sourceforge.czt.z.ast.DeclNameList genFormals =
      (net.sourceforge.czt.z.ast.DeclNameList) dispatch(jaxbObject.getGenFormals());
    CircusProcess circusProcess =
      (CircusProcess) dispatch(jaxbObject.getCircusProcess());
    ProcessPara erg = mCircusFactory_.createProcessPara(processName, genFormals, circusProcess);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitProcessPara", erg);
    return erg;
  }

  public Object visitSeqAction(net.sourceforge.czt.circus.jaxb.gen.SeqAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSeqAction", jaxbObject);
    CircusAction leftAction =
      (CircusAction) dispatch(jaxbObject.getLeftAction());
    CircusAction rightAction =
      (CircusAction) dispatch(jaxbObject.getRightAction());
    SeqAction erg = mCircusFactory_.createSeqAction(leftAction, rightAction);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSeqAction", erg);
    return erg;
  }

  public Object visitBasicChannelSetExpr(net.sourceforge.czt.circus.jaxb.gen.BasicChannelSetExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitBasicChannelSetExpr", jaxbObject);
    ExprList exprList =
      (ExprList) dispatch(jaxbObject.getExprList());
    BasicChannelSetExpr erg = mCircusFactory_.createBasicChannelSetExpr(exprList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitBasicChannelSetExpr", erg);
    return erg;
  }

  public Object visitSeqActionIte(net.sourceforge.czt.circus.jaxb.gen.SeqActionIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSeqActionIte", jaxbObject);
    CircusAction circusAction =
      (CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    SeqActionIte erg = mCircusFactory_.createSeqActionIte(circusAction, declList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSeqActionIte", erg);
    return erg;
  }

  public Object visitParamAction(net.sourceforge.czt.circus.jaxb.gen.ParamAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParamAction", jaxbObject);
    CircusAction circusAction =
      (CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    ParamAction erg = mCircusFactory_.createParamAction(circusAction, declList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitParamAction", erg);
    return erg;
  }

  public Object visitDotField(net.sourceforge.czt.circus.jaxb.gen.DotField jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDotField", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    DotField erg = mCircusFactory_.createDotField(expr);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitDotField", erg);
    return erg;
  }

  public Object visitChannelSetPara(net.sourceforge.czt.circus.jaxb.gen.ChannelSetPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChannelSetPara", jaxbObject);
    net.sourceforge.czt.z.ast.DeclNameList genFormals =
      (net.sourceforge.czt.z.ast.DeclNameList) dispatch(jaxbObject.getGenFormals());
    net.sourceforge.czt.z.ast.DeclName name =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getName());
    ChannelSet channelSet =
      (ChannelSet) dispatch(jaxbObject.getChannelSet());
    ChannelSetPara erg = mCircusFactory_.createChannelSetPara(genFormals, name, channelSet);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitChannelSetPara", erg);
    return erg;
  }

  public Object visitCallAction(net.sourceforge.czt.circus.jaxb.gen.CallAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCallAction", jaxbObject);
    net.sourceforge.czt.z.ast.RefName refName =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getRefName());
    net.sourceforge.czt.z.ast.ExprList exprList =
      (net.sourceforge.czt.z.ast.ExprList) dispatch(jaxbObject.getExprList());
    CallAction erg = mCircusFactory_.createCallAction(refName, exprList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCallAction", erg);
    return erg;
  }

  public Object visitExtChoiceProcessIdx(net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcessIdx jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExtChoiceProcessIdx", jaxbObject);
    CircusProcess circusProcess =
      (CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    ExtChoiceProcessIdx erg = mCircusFactory_.createExtChoiceProcessIdx(circusProcess, declList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitExtChoiceProcessIdx", erg);
    return erg;
  }

  public Object visitNameSet(net.sourceforge.czt.circus.jaxb.gen.NameSet jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNameSet", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    NameSet erg = mCircusFactory_.createNameSet(expr);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitNameSet", erg);
    return erg;
  }

  public Object visitParallelActionIte(net.sourceforge.czt.circus.jaxb.gen.ParallelActionIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParallelActionIte", jaxbObject);
    CircusAction circusAction =
      (CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    NameSet nameSet =
      (NameSet) dispatch(jaxbObject.getNameSet());
    ChannelSet channelSet =
      (ChannelSet) dispatch(jaxbObject.getChannelSet());
    ParallelActionIte erg = mCircusFactory_.createParallelActionIte(circusAction, declList, nameSet, channelSet);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitParallelActionIte", erg);
    return erg;
  }

  public Object visitCommunication(net.sourceforge.czt.circus.jaxb.gen.Communication jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCommunication", jaxbObject);
    net.sourceforge.czt.z.ast.RefExpr channelExpr =
      (net.sourceforge.czt.z.ast.RefExpr) dispatch(jaxbObject.getChannelExpr());
    CircusFieldList chanFields =
      (CircusFieldList) dispatch(jaxbObject.getChanFields());
    CommKind commKind = null;
    String commKindJaxb = jaxbObject.getCommKind();
    if (commKindJaxb != null) {
      commKind =
        CommKind.fromString(commKindJaxb);
    }
    java.math.BigInteger multiSych =
      (java.math.BigInteger) dispatch(jaxbObject.getMultiSych());
    Communication erg = mCircusFactory_.createCommunication(channelExpr, chanFields, commKind, multiSych);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCommunication", erg);
    return erg;
  }

  public Object visitOutputField(net.sourceforge.czt.circus.jaxb.gen.OutputField jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOutputField", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    OutputField erg = mCircusFactory_.createOutputField(expr);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitOutputField", erg);
    return erg;
  }

  public Object visitActionPara(net.sourceforge.czt.circus.jaxb.gen.ActionPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitActionPara", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName declName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getDeclName());
    CircusAction circusAction =
      (CircusAction) dispatch(jaxbObject.getCircusAction());
    ActionPara erg = mCircusFactory_.createActionPara(declName, circusAction);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitActionPara", erg);
    return erg;
  }

  public Object visitHideProcess(net.sourceforge.czt.circus.jaxb.gen.HideProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitHideProcess", jaxbObject);
    CircusProcess circusProcess =
      (CircusProcess) dispatch(jaxbObject.getCircusProcess());
    ChannelSet channelSet =
      (ChannelSet) dispatch(jaxbObject.getChannelSet());
    HideProcess erg = mCircusFactory_.createHideProcess(circusProcess, channelSet);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitHideProcess", erg);
    return erg;
  }

  public Object visitParallelProcess(net.sourceforge.czt.circus.jaxb.gen.ParallelProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParallelProcess", jaxbObject);
    CircusProcess leftProc =
      (CircusProcess) dispatch(jaxbObject.getLeftProc());
    CircusProcess rightProc =
      (CircusProcess) dispatch(jaxbObject.getRightProc());
    ChannelSet channelSet =
      (ChannelSet) dispatch(jaxbObject.getChannelSet());
    ParallelProcess erg = mCircusFactory_.createParallelProcess(leftProc, rightProc, channelSet);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitParallelProcess", erg);
    return erg;
  }

  public Object visitLetVarAction(net.sourceforge.czt.circus.jaxb.gen.LetVarAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitLetVarAction", jaxbObject);
    CircusAction circusAction =
      (CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.z.ast.ExprList exprList =
      (net.sourceforge.czt.z.ast.ExprList) dispatch(jaxbObject.getExprList());
    LetVarAction erg = mCircusFactory_.createLetVarAction(circusAction, declList, exprList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitLetVarAction", erg);
    return erg;
  }

  public Object visitActionType(net.sourceforge.czt.circus.jaxb.gen.ActionType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitActionType", jaxbObject);
    ActionSignature actionSignature =
      (ActionSignature) dispatch(jaxbObject.getActionSignature());
    ActionType erg = mCircusFactory_.createActionType(actionSignature);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitActionType", erg);
    return erg;
  }

  public Object visitIntChoiceAction(net.sourceforge.czt.circus.jaxb.gen.IntChoiceAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntChoiceAction", jaxbObject);
    CircusAction leftAction =
      (CircusAction) dispatch(jaxbObject.getLeftAction());
    CircusAction rightAction =
      (CircusAction) dispatch(jaxbObject.getRightAction());
    IntChoiceAction erg = mCircusFactory_.createIntChoiceAction(leftAction, rightAction);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitIntChoiceAction", erg);
    return erg;
  }

  public Object visitParallelProcessIdx(net.sourceforge.czt.circus.jaxb.gen.ParallelProcessIdx jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParallelProcessIdx", jaxbObject);
    CircusProcess circusProcess =
      (CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    ChannelSet channelSet =
      (ChannelSet) dispatch(jaxbObject.getChannelSet());
    ParallelProcessIdx erg = mCircusFactory_.createParallelProcessIdx(circusProcess, declList, channelSet);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitParallelProcessIdx", erg);
    return erg;
  }

  public Object visitRenameProcess(net.sourceforge.czt.circus.jaxb.gen.RenameProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRenameProcess", jaxbObject);
    CircusProcess circusProcess =
      (CircusProcess) dispatch(jaxbObject.getCircusProcess());
    AssignmentPairs assignmentPairs =
      (AssignmentPairs) dispatch(jaxbObject.getAssignmentPairs());
    RenameProcess erg = mCircusFactory_.createRenameProcess(circusProcess, assignmentPairs);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitRenameProcess", erg);
    return erg;
  }

  public Object visitChannelPara(net.sourceforge.czt.circus.jaxb.gen.ChannelPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChannelPara", jaxbObject);
    net.sourceforge.czt.z.ast.DeclList channelDecl =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getChannelDecl());
    ChannelPara erg = mCircusFactory_.createChannelPara(channelDecl);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitChannelPara", erg);
    return erg;
  }

  public Object visitCallProcess(net.sourceforge.czt.circus.jaxb.gen.CallProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCallProcess", jaxbObject);
    net.sourceforge.czt.z.ast.RefExpr callExpr =
      (net.sourceforge.czt.z.ast.RefExpr) dispatch(jaxbObject.getCallExpr());
    net.sourceforge.czt.z.ast.ExprList actuals =
      (net.sourceforge.czt.z.ast.ExprList) dispatch(jaxbObject.getActuals());
    CallKind callKind = null;
    String callKindJaxb = jaxbObject.getCallKind();
    if (callKindJaxb != null) {
      callKind =
        CallKind.fromString(callKindJaxb);
    }
    CallProcess erg = mCircusFactory_.createCallProcess(callExpr, actuals, callKind);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCallProcess", erg);
    return erg;
  }

  public Object visitIntChoiceActionIte(net.sourceforge.czt.circus.jaxb.gen.IntChoiceActionIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntChoiceActionIte", jaxbObject);
    CircusAction circusAction =
      (CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    IntChoiceActionIte erg = mCircusFactory_.createIntChoiceActionIte(circusAction, declList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitIntChoiceActionIte", erg);
    return erg;
  }

  public Object visitAlphabetisedParallelActionIte(net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelActionIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAlphabetisedParallelActionIte", jaxbObject);
    CircusAction circusAction =
      (CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    NameSet nameSet =
      (NameSet) dispatch(jaxbObject.getNameSet());
    ChannelSet channelSet =
      (ChannelSet) dispatch(jaxbObject.getChannelSet());
    AlphabetisedParallelActionIte erg = mCircusFactory_.createAlphabetisedParallelActionIte(circusAction, declList, nameSet, channelSet);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAlphabetisedParallelActionIte", erg);
    return erg;
  }

  public Object visitNameSetPara(net.sourceforge.czt.circus.jaxb.gen.NameSetPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNameSetPara", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName declName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getDeclName());
    NameSet nameSet =
      (NameSet) dispatch(jaxbObject.getNameSet());
    NameSetPara erg = mCircusFactory_.createNameSetPara(declName, nameSet);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitNameSetPara", erg);
    return erg;
  }

  public Object visitInterleaveProcess(net.sourceforge.czt.circus.jaxb.gen.InterleaveProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterleaveProcess", jaxbObject);
    CircusProcess leftProc =
      (CircusProcess) dispatch(jaxbObject.getLeftProc());
    CircusProcess rightProc =
      (CircusProcess) dispatch(jaxbObject.getRightProc());
    InterleaveProcess erg = mCircusFactory_.createInterleaveProcess(leftProc, rightProc);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInterleaveProcess", erg);
    return erg;
  }

  public Object visitSeqProcess(net.sourceforge.czt.circus.jaxb.gen.SeqProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSeqProcess", jaxbObject);
    CircusProcess leftProc =
      (CircusProcess) dispatch(jaxbObject.getLeftProc());
    CircusProcess rightProc =
      (CircusProcess) dispatch(jaxbObject.getRightProc());
    SeqProcess erg = mCircusFactory_.createSeqProcess(leftProc, rightProc);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSeqProcess", erg);
    return erg;
  }

  public Object visitInterleaveActionIte(net.sourceforge.czt.circus.jaxb.gen.InterleaveActionIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterleaveActionIte", jaxbObject);
    CircusAction circusAction =
      (CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    NameSet nameSet =
      (NameSet) dispatch(jaxbObject.getNameSet());
    InterleaveActionIte erg = mCircusFactory_.createInterleaveActionIte(circusAction, declList, nameSet);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInterleaveActionIte", erg);
    return erg;
  }

  public Object visitBasicProcess(net.sourceforge.czt.circus.jaxb.gen.BasicProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitBasicProcess", jaxbObject);
    net.sourceforge.czt.z.ast.Para statePara =
      (net.sourceforge.czt.z.ast.Para) dispatch(jaxbObject.getStatePara());
    net.sourceforge.czt.z.ast.ParaList localPara =
      (net.sourceforge.czt.z.ast.ParaList) dispatch(jaxbObject.getLocalPara());
    net.sourceforge.czt.z.ast.ParaList onTheFlyPara =
      (net.sourceforge.czt.z.ast.ParaList) dispatch(jaxbObject.getOnTheFlyPara());
    CircusAction mainAction =
      (CircusAction) dispatch(jaxbObject.getMainAction());
    BasicProcess erg = mCircusFactory_.createBasicProcess(statePara, localPara, onTheFlyPara, mainAction);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitBasicProcess", erg);
    return erg;
  }

  public Object visitInterleaveProcessIte(net.sourceforge.czt.circus.jaxb.gen.InterleaveProcessIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterleaveProcessIte", jaxbObject);
    CircusProcess circusProcess =
      (CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    InterleaveProcessIte erg = mCircusFactory_.createInterleaveProcessIte(circusProcess, declList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInterleaveProcessIte", erg);
    return erg;
  }

  public Object visitVarDeclCommand(net.sourceforge.czt.circus.jaxb.gen.VarDeclCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitVarDeclCommand", jaxbObject);
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    CircusAction circusAction =
      (CircusAction) dispatch(jaxbObject.getCircusAction());
    VarDeclCommand erg = mCircusFactory_.createVarDeclCommand(declList, circusAction);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitVarDeclCommand", erg);
    return erg;
  }

  public Object visitInputField(net.sourceforge.czt.circus.jaxb.gen.InputField jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInputField", jaxbObject);
    net.sourceforge.czt.z.ast.RefName variable =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getVariable());
    net.sourceforge.czt.z.ast.Pred restriction =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getRestriction());
    InputField erg = mCircusFactory_.createInputField(variable, restriction);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInputField", erg);
    return erg;
  }

  public Object visitRefinementConjPara(net.sourceforge.czt.circus.jaxb.gen.RefinementConjPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRefinementConjPara", jaxbObject);
    CircusAction specification =
      (CircusAction) dispatch(jaxbObject.getSpecification());
    CircusAction implementation =
      (CircusAction) dispatch(jaxbObject.getImplementation());
    Model model = null;
    String modelJaxb = jaxbObject.getModel();
    if (modelJaxb != null) {
      model =
        Model.fromString(modelJaxb);
    }
    RefinementConjPara erg = mCircusFactory_.createRefinementConjPara(specification, implementation, model);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitRefinementConjPara", erg);
    return erg;
  }

  public Object visitActionSignature(net.sourceforge.czt.circus.jaxb.gen.ActionSignature jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitActionSignature", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName actionName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getActionName());
    net.sourceforge.czt.z.ast.Signature formalParams =
      (net.sourceforge.czt.z.ast.Signature) dispatch(jaxbObject.getFormalParams());
    net.sourceforge.czt.z.ast.Signature localVars =
      (net.sourceforge.czt.z.ast.Signature) dispatch(jaxbObject.getLocalVars());
    net.sourceforge.czt.z.ast.Signature usedChannels =
      (net.sourceforge.czt.z.ast.Signature) dispatch(jaxbObject.getUsedChannels());
    ActionSignature erg = mCircusFactory_.createActionSignature(actionName, formalParams, localVars, usedChannels);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitActionSignature", erg);
    return erg;
  }
}
