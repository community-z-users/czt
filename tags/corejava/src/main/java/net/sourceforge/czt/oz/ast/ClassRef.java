
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstInterface.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.oz.ast;

import net.sourceforge.czt.base.ast.*;
import net.sourceforge.czt.z.ast.*;

/**
 * A reference to a class.
 *
 * @author Gnast version 0.1
 */
public interface ClassRef extends Term
{

  /**
   * Returns the RefName element.
   *
   * @return the RefName element.
   */
  net.sourceforge.czt.z.ast.RefName getRefName();


  /**
   * Sets the RefName element.
   *
   * @param refName   the RefName element.
   * @see #getRefName
   */
  void setRefName(net.sourceforge.czt.z.ast.RefName refName);

  /**
   * <p>Returns the Type elements.</p>
   * <p>To add or remove elements, use the methods provided by
   * the List interface (that's why there is no need for a setter
   * method).</p>
   *
   * @return a list of Type2 elements.
   */
  net.sourceforge.czt.base.ast.ListTerm<net.sourceforge.czt.z.ast.Type2> getType();

  /**
   * <p>Returns the NewOldPair elements.</p>
   * <p>To add or remove elements, use the methods provided by
   * the List interface (that's why there is no need for a setter
   * method).</p>
   *
   * @return a list of NewOldPair elements.
   */
  net.sourceforge.czt.base.ast.ListTerm<net.sourceforge.czt.z.ast.NewOldPair> getNewOldPair();
  /**
   * This is a convenience method.
   * It returns the ZRefName if RefName is an instance of
   * ZRefName and throws an UnsupportedAstClassException otherwise.
   */
  ZRefName getZRefName();

}
