
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactoryImpl.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.zpatt.impl;

import net.sourceforge.czt.base.util.VisitorImpl;

import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.zpatt.ast.*;
import net.sourceforge.czt.zpatt.util.PrintVisitor;

/**
 * <p>An implementation of the object factory for constructing
 * concrete Z terms.  Each factory method returns an instance
 * of the corresponding class provided in this package.</p>
 *
 * @author Gnast version 0.1
 */
public class ZpattFactoryImpl
  extends net.sourceforge.czt.z.impl.ZFactoryImpl
  implements net.sourceforge.czt.zpatt.ast.ZpattFactory
{
  protected ZpattFactoryImpl(VisitorImpl<String> toStringVisitor)
  {
    super(toStringVisitor);
  }

  public ZpattFactoryImpl()
  {
    super(new PrintVisitor());
  }

  public PredSequent createPredSequent()
  {
    PredSequent zedObject = new PredSequentImpl(this);
    return zedObject;
  }

  public PredSequent createPredSequent( SequentContext  sequentContext, net.sourceforge.czt.z.ast.Pred  pred, Deduction  deduction)
  {
    PredSequent zedObject = createPredSequent();
    zedObject.setSequentContext(sequentContext);
    zedObject.setPred(pred);
    zedObject.setDeduction(deduction);
    return zedObject;
  }

  public JokerExprListBinding createJokerExprListBinding()
  {
    JokerExprListBinding zedObject = new JokerExprListBindingImpl(this);
    return zedObject;
  }

  public JokerExprListBinding createJokerExprListBinding( JokerExprList  jokerExprList, net.sourceforge.czt.z.ast.ExprList  exprList)
  {
    JokerExprListBinding zedObject = createJokerExprListBinding();
    zedObject.setJokerExprList(jokerExprList);
    zedObject.setExprList(exprList);
    return zedObject;
  }

  public JokerExprBinding createJokerExprBinding()
  {
    JokerExprBinding zedObject = new JokerExprBindingImpl(this);
    return zedObject;
  }

  public JokerExprBinding createJokerExprBinding( JokerExpr  jokerExpr, net.sourceforge.czt.z.ast.Expr  expr)
  {
    JokerExprBinding zedObject = createJokerExprBinding();
    zedObject.setJokerExpr(jokerExpr);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public JokerDeclNameBinding createJokerDeclNameBinding()
  {
    JokerDeclNameBinding zedObject = new JokerDeclNameBindingImpl(this);
    return zedObject;
  }

  public JokerDeclNameBinding createJokerDeclNameBinding( JokerDeclName  jokerDeclName, net.sourceforge.czt.z.ast.DeclName  declName)
  {
    JokerDeclNameBinding zedObject = createJokerDeclNameBinding();
    zedObject.setJokerDeclName(jokerDeclName);
    zedObject.setDeclName(declName);
    return zedObject;
  }

  public LookupPredProviso createLookupPredProviso()
  {
    LookupPredProviso zedObject = new LookupPredProvisoImpl(this);
    return zedObject;
  }

  public LookupPredProviso createLookupPredProviso( SequentContext  sequentContext, net.sourceforge.czt.z.ast.Pred  pred)
  {
    LookupPredProviso zedObject = createLookupPredProviso();
    zedObject.setSequentContext(sequentContext);
    zedObject.setPred(pred);
    return zedObject;
  }

  public CalculateProviso createCalculateProviso()
  {
    CalculateProviso zedObject = new CalculateProvisoImpl(this);
    return zedObject;
  }

  public CalculateProviso createCalculateProviso( SequentContext  sequentContext, net.sourceforge.czt.z.ast.Expr  leftExpr, net.sourceforge.czt.z.ast.Expr  rightExpr)
  {
    CalculateProviso zedObject = createCalculateProviso();
    zedObject.setSequentContext(sequentContext);
    zedObject.setLeftExpr(leftExpr);
    zedObject.setRightExpr(rightExpr);
    return zedObject;
  }

  public JokerRefNameBinding createJokerRefNameBinding()
  {
    JokerRefNameBinding zedObject = new JokerRefNameBindingImpl(this);
    return zedObject;
  }

  public JokerRefNameBinding createJokerRefNameBinding( JokerRefName  jokerRefName, net.sourceforge.czt.z.ast.RefName  refName)
  {
    JokerRefNameBinding zedObject = createJokerRefNameBinding();
    zedObject.setJokerRefName(jokerRefName);
    zedObject.setRefName(refName);
    return zedObject;
  }

  public Rule createRule()
  {
    Rule zedObject = new RuleImpl(this);
    return zedObject;
  }

  public Rule createRule(java.util.List<? extends Sequent>
 sequent, String  name)
  {
    Rule zedObject = createRule();
    if (sequent != null) {
      zedObject.getSequent().addAll(sequent);
    }
    zedObject.setName(name);
    return zedObject;
  }

  public CheckProviso createCheckProviso()
  {
    CheckProviso zedObject = new CheckProvisoImpl(this);
    return zedObject;
  }

  public CheckProviso createCheckProviso( SequentContext  sequentContext, net.sourceforge.czt.z.ast.Pred  pred)
  {
    CheckProviso zedObject = createCheckProviso();
    zedObject.setSequentContext(sequentContext);
    zedObject.setPred(pred);
    return zedObject;
  }

  public TypeProviso createTypeProviso()
  {
    TypeProviso zedObject = new TypeProvisoImpl(this);
    return zedObject;
  }

  public TypeProviso createTypeProviso( SequentContext  sequentContext, net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.Expr  type)
  {
    TypeProviso zedObject = createTypeProviso();
    zedObject.setSequentContext(sequentContext);
    zedObject.setExpr(expr);
    zedObject.setType(type);
    return zedObject;
  }

  public JokerRefName createJokerRefName()
  {
    JokerRefName zedObject = new JokerRefNameImpl(this);
    return zedObject;
  }

  public JokerRefName createJokerRefName( String  name)
  {
    JokerRefName zedObject = createJokerRefName();
    zedObject.setName(name);
    return zedObject;
  }

  public Jokers createJokers()
  {
    Jokers zedObject = new JokersImpl(this);
    return zedObject;
  }

  public Jokers createJokers(java.util.List<? extends String>
 name, JokerType  kind)
  {
    Jokers zedObject = createJokers();
    if (name != null) {
      zedObject.getName().addAll(name);
    }
    zedObject.setKind(kind);
    return zedObject;
  }

  public JokerPred createJokerPred()
  {
    JokerPred zedObject = new JokerPredImpl(this);
    return zedObject;
  }

  public JokerPred createJokerPred( String  name)
  {
    JokerPred zedObject = createJokerPred();
    zedObject.setName(name);
    return zedObject;
  }

  public JokerPredBinding createJokerPredBinding()
  {
    JokerPredBinding zedObject = new JokerPredBindingImpl(this);
    return zedObject;
  }

  public JokerPredBinding createJokerPredBinding( JokerPred  jokerPred, net.sourceforge.czt.z.ast.Pred  pred)
  {
    JokerPredBinding zedObject = createJokerPredBinding();
    zedObject.setJokerPred(jokerPred);
    zedObject.setPred(pred);
    return zedObject;
  }

  public JokerExpr createJokerExpr()
  {
    JokerExpr zedObject = new JokerExprImpl(this);
    return zedObject;
  }

  public JokerExpr createJokerExpr( String  name)
  {
    JokerExpr zedObject = createJokerExpr();
    zedObject.setName(name);
    return zedObject;
  }

  public JokerExprList createJokerExprList()
  {
    JokerExprList zedObject = new JokerExprListImpl(this);
    return zedObject;
  }

  public JokerExprList createJokerExprList( net.sourceforge.czt.z.ast.ZExprList  zExprList, String  name)
  {
    JokerExprList zedObject = createJokerExprList();
    zedObject.setZExprList(zExprList);
    zedObject.setName(name);
    return zedObject;
  }

  public LookupConstDeclProviso createLookupConstDeclProviso()
  {
    LookupConstDeclProviso zedObject = new LookupConstDeclProvisoImpl(this);
    return zedObject;
  }

  public LookupConstDeclProviso createLookupConstDeclProviso( SequentContext  sequentContext, net.sourceforge.czt.z.ast.Expr  leftExpr, net.sourceforge.czt.z.ast.Expr  rightExpr)
  {
    LookupConstDeclProviso zedObject = createLookupConstDeclProviso();
    zedObject.setSequentContext(sequentContext);
    zedObject.setLeftExpr(leftExpr);
    zedObject.setRightExpr(rightExpr);
    return zedObject;
  }

  public SequentContext createSequentContext()
  {
    SequentContext zedObject = new SequentContextImpl(this);
    return zedObject;
  }

  public Deduction createDeduction()
  {
    Deduction zedObject = new DeductionImpl(this);
    return zedObject;
  }

  public Deduction createDeduction(java.util.List<? extends Binding>
 binding,java.util.List<? extends Sequent>
 sequent, String  name)
  {
    Deduction zedObject = createDeduction();
    if (binding != null) {
      zedObject.getBinding().addAll(binding);
    }
    if (sequent != null) {
      zedObject.getSequent().addAll(sequent);
    }
    zedObject.setName(name);
    return zedObject;
  }

  public HeadDeclList createHeadDeclList()
  {
    HeadDeclList zedObject = new HeadDeclListImpl(this);
    return zedObject;
  }

  public HeadDeclList createHeadDeclList( net.sourceforge.czt.z.ast.ZDeclList  zDeclList, JokerDeclList  jokerDeclList)
  {
    HeadDeclList zedObject = createHeadDeclList();
    zedObject.setZDeclList(zDeclList);
    zedObject.setJokerDeclList(jokerDeclList);
    return zedObject;
  }

  public JokerDeclList createJokerDeclList()
  {
    JokerDeclList zedObject = new JokerDeclListImpl(this);
    return zedObject;
  }

  public JokerDeclList createJokerDeclList( String  name)
  {
    JokerDeclList zedObject = createJokerDeclList();
    zedObject.setName(name);
    return zedObject;
  }

  public JokerDeclListBinding createJokerDeclListBinding()
  {
    JokerDeclListBinding zedObject = new JokerDeclListBindingImpl(this);
    return zedObject;
  }

  public JokerDeclListBinding createJokerDeclListBinding( JokerDeclList  jokerDeclList, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    JokerDeclListBinding zedObject = createJokerDeclListBinding();
    zedObject.setJokerDeclList(jokerDeclList);
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public JokerDeclName createJokerDeclName()
  {
    JokerDeclName zedObject = new JokerDeclNameImpl(this);
    return zedObject;
  }

  public JokerDeclName createJokerDeclName( String  name)
  {
    JokerDeclName zedObject = createJokerDeclName();
    zedObject.setName(name);
    return zedObject;
  }

}
