
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE JaxbToAst.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.zpatt.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.util.ReflectiveVisitor;
import net.sourceforge.czt.zpatt.ast.*;
import net.sourceforge.czt.z.ast.*;

/**
 * The unmarshaller responsible for deserializing XML data.
 *
 * @author Gnast version 0.1
 */
public class JaxbToAst extends net.sourceforge.czt.z.jaxb.JaxbToAst
{
  protected ZpattFactory mZpattFactory_;

  public JaxbToAst()
  {
    mZpattFactory_ =
      new net.sourceforge.czt.zpatt.impl.ZpattFactoryImpl();
  }

  public JaxbToAst(net.sourceforge.czt.z.ast.ZFactory vZFactory, ZpattFactory vZpattFactory)
  {
    super(vZFactory);
    mZpattFactory_ = vZpattFactory;
  }

  private static Logger getLogger()
  {
    return Logger.getLogger("net.sourceforge.czt.zpatt.jaxb.JaxbToAst");
  }

  public Object visitObject(Object object)
  {
    getLogger().fine("Visit " + object.getClass().toString());
    if (object instanceof String
        || object instanceof Boolean
        || object instanceof List
        || object instanceof Integer
        || object instanceof java.math.BigInteger
        || object instanceof net.sourceforge.czt.base.ast.Digit) {
      return object;
    }
    throw new UnsupportedOperationException("Unexpected element "
                                            + object.getClass().getName());
  }

  public Object visitPredSequent(net.sourceforge.czt.zpatt.jaxb.gen.PredSequent jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPredSequent", jaxbObject);
    SequentContext sequentContext =
      (SequentContext) dispatch(jaxbObject.getSequentContext());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    Deduction deduction =
      (Deduction) dispatch(jaxbObject.getDeduction());
    PredSequent erg = mZpattFactory_.createPredSequent(sequentContext, pred, deduction);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitPredSequent", erg);
    return erg;
  }

  public Object visitJokerExprListBinding(net.sourceforge.czt.zpatt.jaxb.gen.JokerExprListBinding jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerExprListBinding", jaxbObject);
    JokerExprList jokerExprList =
      (JokerExprList) dispatch(jaxbObject.getJokerExprList());
    net.sourceforge.czt.z.ast.ExprList exprList =
      (net.sourceforge.czt.z.ast.ExprList) dispatch(jaxbObject.getExprList());
    JokerExprListBinding erg = mZpattFactory_.createJokerExprListBinding(jokerExprList, exprList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerExprListBinding", erg);
    return erg;
  }

  public Object visitJokerExprBinding(net.sourceforge.czt.zpatt.jaxb.gen.JokerExprBinding jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerExprBinding", jaxbObject);
    JokerExpr jokerExpr =
      (JokerExpr) dispatch(jaxbObject.getJokerExpr());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    JokerExprBinding erg = mZpattFactory_.createJokerExprBinding(jokerExpr, expr);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerExprBinding", erg);
    return erg;
  }

  public Object visitJokerDeclNameBinding(net.sourceforge.czt.zpatt.jaxb.gen.JokerDeclNameBinding jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerDeclNameBinding", jaxbObject);
    JokerDeclName jokerDeclName =
      (JokerDeclName) dispatch(jaxbObject.getJokerDeclName());
    net.sourceforge.czt.z.ast.DeclName declName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getDeclName());
    JokerDeclNameBinding erg = mZpattFactory_.createJokerDeclNameBinding(jokerDeclName, declName);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerDeclNameBinding", erg);
    return erg;
  }

  public Object visitLookupPredProviso(net.sourceforge.czt.zpatt.jaxb.gen.LookupPredProviso jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitLookupPredProviso", jaxbObject);
    SequentContext sequentContext =
      (SequentContext) dispatch(jaxbObject.getSequentContext());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    LookupPredProviso erg = mZpattFactory_.createLookupPredProviso(sequentContext, pred);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitLookupPredProviso", erg);
    return erg;
  }

  public Object visitCalculateProviso(net.sourceforge.czt.zpatt.jaxb.gen.CalculateProviso jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCalculateProviso", jaxbObject);
    SequentContext sequentContext =
      (SequentContext) dispatch(jaxbObject.getSequentContext());
    net.sourceforge.czt.z.ast.Expr leftExpr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getLeftExpr());
    net.sourceforge.czt.z.ast.Expr rightExpr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getRightExpr());
    CalculateProviso erg = mZpattFactory_.createCalculateProviso(sequentContext, leftExpr, rightExpr);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCalculateProviso", erg);
    return erg;
  }

  public Object visitJokerRefNameBinding(net.sourceforge.czt.zpatt.jaxb.gen.JokerRefNameBinding jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerRefNameBinding", jaxbObject);
    JokerRefName jokerRefName =
      (JokerRefName) dispatch(jaxbObject.getJokerRefName());
    net.sourceforge.czt.z.ast.RefName refName =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getRefName());
    JokerRefNameBinding erg = mZpattFactory_.createJokerRefNameBinding(jokerRefName, refName);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerRefNameBinding", erg);
    return erg;
  }

  public Object visitRule(net.sourceforge.czt.zpatt.jaxb.gen.Rule jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRule", jaxbObject);
    List sequent = new Vector();
    for (Iterator iter = jaxbObject.getSequent().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      sequent.add(o);
    }
    String name =
      (String) dispatch(jaxbObject.getName());
    Rule erg = mZpattFactory_.createRule(sequent, name);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitRule", erg);
    return erg;
  }

  public Object visitCheckProviso(net.sourceforge.czt.zpatt.jaxb.gen.CheckProviso jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCheckProviso", jaxbObject);
    SequentContext sequentContext =
      (SequentContext) dispatch(jaxbObject.getSequentContext());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    CheckProviso erg = mZpattFactory_.createCheckProviso(sequentContext, pred);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCheckProviso", erg);
    return erg;
  }

  public Object visitTypeProviso(net.sourceforge.czt.zpatt.jaxb.gen.TypeProviso jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTypeProviso", jaxbObject);
    SequentContext sequentContext =
      (SequentContext) dispatch(jaxbObject.getSequentContext());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.Expr type =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getType());
    TypeProviso erg = mZpattFactory_.createTypeProviso(sequentContext, expr, type);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitTypeProviso", erg);
    return erg;
  }

  public Object visitJokerRefName(net.sourceforge.czt.zpatt.jaxb.gen.JokerRefName jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerRefName", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    JokerRefName erg = mZpattFactory_.createJokerRefName(name);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerRefName", erg);
    return erg;
  }

  public Object visitJokers(net.sourceforge.czt.zpatt.jaxb.gen.Jokers jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokers", jaxbObject);
    List name = new Vector();
    for (Iterator iter = jaxbObject.getName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      name.add(o);
    }
    JokerType kind = null;
    String kindJaxb = jaxbObject.getKind();
    if (kindJaxb != null) {
      kind =
        JokerType.fromString(kindJaxb);
    }
    Jokers erg = mZpattFactory_.createJokers(name, kind);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokers", erg);
    return erg;
  }

  public Object visitJokerPred(net.sourceforge.czt.zpatt.jaxb.gen.JokerPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerPred", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    JokerPred erg = mZpattFactory_.createJokerPred(name);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerPred", erg);
    return erg;
  }

  public Object visitJokerPredBinding(net.sourceforge.czt.zpatt.jaxb.gen.JokerPredBinding jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerPredBinding", jaxbObject);
    JokerPred jokerPred =
      (JokerPred) dispatch(jaxbObject.getJokerPred());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    JokerPredBinding erg = mZpattFactory_.createJokerPredBinding(jokerPred, pred);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerPredBinding", erg);
    return erg;
  }

  public Object visitJokerExpr(net.sourceforge.czt.zpatt.jaxb.gen.JokerExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerExpr", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    JokerExpr erg = mZpattFactory_.createJokerExpr(name);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerExpr", erg);
    return erg;
  }

  public Object visitJokerExprList(net.sourceforge.czt.zpatt.jaxb.gen.JokerExprList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerExprList", jaxbObject);
    net.sourceforge.czt.z.ast.ZExprList zExprList =
      (net.sourceforge.czt.z.ast.ZExprList) dispatch(jaxbObject.getZExprList());
    String name =
      (String) dispatch(jaxbObject.getName());
    JokerExprList erg = mZpattFactory_.createJokerExprList(zExprList, name);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerExprList", erg);
    return erg;
  }

  public Object visitLookupConstDeclProviso(net.sourceforge.czt.zpatt.jaxb.gen.LookupConstDeclProviso jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitLookupConstDeclProviso", jaxbObject);
    SequentContext sequentContext =
      (SequentContext) dispatch(jaxbObject.getSequentContext());
    net.sourceforge.czt.z.ast.Expr leftExpr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getLeftExpr());
    net.sourceforge.czt.z.ast.Expr rightExpr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getRightExpr());
    LookupConstDeclProviso erg = mZpattFactory_.createLookupConstDeclProviso(sequentContext, leftExpr, rightExpr);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitLookupConstDeclProviso", erg);
    return erg;
  }

  public Object visitSequentContext(net.sourceforge.czt.zpatt.jaxb.gen.SequentContext jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSequentContext", jaxbObject);
    SequentContext erg = mZpattFactory_.createSequentContext();

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSequentContext", erg);
    return erg;
  }

  public Object visitDeduction(net.sourceforge.czt.zpatt.jaxb.gen.Deduction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDeduction", jaxbObject);
    List binding = new Vector();
    for (Iterator iter = jaxbObject.getBinding().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      binding.add(o);
    }
    List sequent = new Vector();
    for (Iterator iter = jaxbObject.getSequent().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      sequent.add(o);
    }
    String name =
      (String) dispatch(jaxbObject.getName());
    Deduction erg = mZpattFactory_.createDeduction(binding, sequent, name);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitDeduction", erg);
    return erg;
  }

  public Object visitHeadDeclList(net.sourceforge.czt.zpatt.jaxb.gen.HeadDeclList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitHeadDeclList", jaxbObject);
    net.sourceforge.czt.z.ast.ZDeclList zDeclList =
      (net.sourceforge.czt.z.ast.ZDeclList) dispatch(jaxbObject.getZDeclList());
    JokerDeclList jokerDeclList =
      (JokerDeclList) dispatch(jaxbObject.getJokerDeclList());
    HeadDeclList erg = mZpattFactory_.createHeadDeclList(zDeclList, jokerDeclList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitHeadDeclList", erg);
    return erg;
  }

  public Object visitJokerDeclList(net.sourceforge.czt.zpatt.jaxb.gen.JokerDeclList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerDeclList", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    JokerDeclList erg = mZpattFactory_.createJokerDeclList(name);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerDeclList", erg);
    return erg;
  }

  public Object visitJokerDeclListBinding(net.sourceforge.czt.zpatt.jaxb.gen.JokerDeclListBinding jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerDeclListBinding", jaxbObject);
    JokerDeclList jokerDeclList =
      (JokerDeclList) dispatch(jaxbObject.getJokerDeclList());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    JokerDeclListBinding erg = mZpattFactory_.createJokerDeclListBinding(jokerDeclList, declList);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerDeclListBinding", erg);
    return erg;
  }

  public Object visitJokerDeclName(net.sourceforge.czt.zpatt.jaxb.gen.JokerDeclName jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerDeclName", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    JokerDeclName erg = mZpattFactory_.createJokerDeclName(name);

    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerDeclName", erg);
    return erg;
  }
}
