
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstInterface.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.ast;

import net.sourceforge.czt.base.ast.*;
import net.sourceforge.czt.z.ast.*;

/**
 * <p>
        A channel declaration is a Z declaration that accepts generic types.
        It represents the <b>SimpleCDeclaration</b> grammar rule.
        </p>
        <p>
        Channels can be declared either as typed or synchronisation. 
        They can als have generic types or come from a previously declared schema.
        </p>
        <p>
        The structure of the complex type associated with this class is a follows:
        <ul>
          <li>Typed  channels = optional generics, nonempty list of declnames, no null Expr. </li>
          <li>Synch. channels = empty generics, nonempty list of declnames, null Expr. </li>
          <li>Schema channels = optional generics, null list of declnames, no null RefExpr. </li>          
        </ul>
        This invariant is to be enforced by the parser, and further unfolded by the typechecker.
        That is, channels declared through schemas must be expanded to their typed declaration form.
        Such unfolding must take into account both sets of generic formals comming from the channel 
        declaration as well as the schema generic formals. In this sense, the user is allowed to
        change the pattern of generic formals inside the schema through the generic formals of the
        channel declaration (see <code>./parser/tests/cirus/channels.tex</code> for an example).
        </p>
 *
 * @author Gnast version 0.1
 */
public interface ChannelDecl extends Decl
{

  /**
   * Returns the GenFormals element.
   *
   * @return the GenFormals element.
   */
  net.sourceforge.czt.z.ast.DeclNameList getGenFormals();


  /**
   * Sets the GenFormals element.
   *
   * @param genFormals   the GenFormals element.
   * @see #getGenFormals
   */
  void setGenFormals(net.sourceforge.czt.z.ast.DeclNameList genFormals);

  /**
   * Returns the DeclNameList element.
   *
   * @return the DeclNameList element.
   */
  net.sourceforge.czt.z.ast.DeclNameList getDeclNameList();


  /**
   * Sets the DeclNameList element.
   *
   * @param declNameList   the DeclNameList element.
   * @see #getDeclNameList
   */
  void setDeclNameList(net.sourceforge.czt.z.ast.DeclNameList declNameList);

  /**
   * Returns the Expr element.
   *
   * @return the Expr element.
   */
  net.sourceforge.czt.z.ast.Expr getExpr();


  /**
   * Sets the Expr element.
   *
   * @param expr   the Expr element.
   * @see #getExpr
   */
  void setExpr(net.sourceforge.czt.z.ast.Expr expr);
}
