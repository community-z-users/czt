
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.oz.util;

import net.sourceforge.czt.oz.ast.*;
import net.sourceforge.czt.z.ast.*;

/**
 * <p>An object factory for the AST.
 *
 * <p>This object factory allows the programmer
 * to programatically construct new instances of concrete Z terms.
 * </p>
 *
 * @author Gnast version 0.1
 */
public class Factory
  extends net.sourceforge.czt.z.util.Factory
{
  private net.sourceforge.czt.oz.ast.OzFactory factory_ =
    new net.sourceforge.czt.oz.impl.OzFactoryImpl();

  /**
   * Creates a new convenience factory that uses the standard factory
   * implementation for creating AST terms.
   */
  public Factory()
  {
    super();
  }

  /**
   * Creates a new convenience factory that uses the given base factory
   * for creating AST terms.
   */
  public Factory(net.sourceforge.czt.oz.ast.OzFactory factory)
  {
    super(factory);
    factory_ = factory;
  }

  /**
   * Creates an instance of {@link SecondaryDecl}.
   *
   * @return the new instance of SecondaryDecl.
   */
  public SecondaryDecl createSecondaryDecl()
  {
    return factory_.createSecondaryDecl();
  }

  /**
   * Creates an instance of {@link SecondaryDecl} with the given children.
   *
   * @return the new instance of SecondaryDecl.
   */
  public SecondaryDecl createSecondaryDecl( net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createSecondaryDecl(declList);
  }

  /**
   * Creates an instance of {@link ClassRefType}.
   *
   * @return the new instance of ClassRefType.
   */
  public ClassRefType createClassRefType()
  {
    return factory_.createClassRefType();
  }

  /**
   * Creates an instance of {@link ClassRefType} with the given children.
   *
   * @return the new instance of ClassRefType.
   */
  public ClassRefType createClassRefType( ClassSig  classSig, ClassRef  thisClass,java.util.List<? extends ClassRef>
 superClass, VisibilityList  visibilityList,java.util.List<? extends net.sourceforge.czt.z.ast.DeclName>
 primary)
  {
    return factory_.createClassRefType(classSig, thisClass, superClass, visibilityList, primary);
  }

  /**
   * Creates an instance of {@link ClassRef}.
   *
   * @return the new instance of ClassRef.
   */
  public ClassRef createClassRef()
  {
    return factory_.createClassRef();
  }

  /**
   * Creates an instance of {@link ClassRef} with the given children.
   *
   * @return the new instance of ClassRef.
   */
  public ClassRef createClassRef( net.sourceforge.czt.z.ast.RefName  refName,java.util.List<? extends net.sourceforge.czt.z.ast.Type2>
 type,java.util.List<? extends net.sourceforge.czt.z.ast.NewOldPair>
 newOldPair)
  {
    return factory_.createClassRef(refName, type, newOldPair);
  }

  /**
   * Creates an instance of {@link DistConjOpExpr}.
   *
   * @return the new instance of DistConjOpExpr.
   */
  public DistConjOpExpr createDistConjOpExpr()
  {
    return factory_.createDistConjOpExpr();
  }

  /**
   * Creates an instance of {@link DistConjOpExpr} with the given children.
   *
   * @return the new instance of DistConjOpExpr.
   */
  public DistConjOpExpr createDistConjOpExpr( net.sourceforge.czt.z.ast.SchText  schText, OpExpr  opExpr)
  {
    return factory_.createDistConjOpExpr(schText, opExpr);
  }

  /**
   * Creates an instance of {@link VisibilityList}.
   *
   * @return the new instance of VisibilityList.
   */
  public VisibilityList createVisibilityList()
  {
    return factory_.createVisibilityList();
  }

  /**
   * Creates an instance of {@link VisibilityList} with the given children.
   *
   * @return the new instance of VisibilityList.
   */
  public VisibilityList createVisibilityList(java.util.List<? extends net.sourceforge.czt.z.ast.ZRefName>
 zRefName)
  {
    return factory_.createVisibilityList(zRefName);
  }

  /**
   * Creates an instance of {@link PolyExpr}.
   *
   * @return the new instance of PolyExpr.
   */
  public PolyExpr createPolyExpr()
  {
    return factory_.createPolyExpr();
  }

  /**
   * Creates an instance of {@link PolyExpr} with the given children.
   *
   * @return the new instance of PolyExpr.
   */
  public PolyExpr createPolyExpr( Expr  expr)
  {
    return factory_.createPolyExpr(expr);
  }

  /**
   * Creates an instance of {@link HideOpExpr}.
   *
   * @return the new instance of HideOpExpr.
   */
  public HideOpExpr createHideOpExpr()
  {
    return factory_.createHideOpExpr();
  }

  /**
   * Creates an instance of {@link HideOpExpr} with the given children.
   *
   * @return the new instance of HideOpExpr.
   */
  public HideOpExpr createHideOpExpr( OpExpr  opExpr, net.sourceforge.czt.z.ast.RefNameList  refNameList)
  {
    return factory_.createHideOpExpr(opExpr, refNameList);
  }

  /**
   * Creates an instance of {@link SeqOpExpr}.
   *
   * @return the new instance of SeqOpExpr.
   */
  public SeqOpExpr createSeqOpExpr()
  {
    return factory_.createSeqOpExpr();
  }

  /**
   * Creates an instance of {@link SeqOpExpr} with the given children.
   *
   * @return the new instance of SeqOpExpr.
   */
  public SeqOpExpr createSeqOpExpr( OpExpr  leftOpExpr, OpExpr  rightOpExpr)
  {
    return factory_.createSeqOpExpr(leftOpExpr, rightOpExpr);
  }

  /**
   * Creates an instance of {@link NameSignaturePair}.
   *
   * @return the new instance of NameSignaturePair.
   */
  public NameSignaturePair createNameSignaturePair()
  {
    return factory_.createNameSignaturePair();
  }

  /**
   * Creates an instance of {@link NameSignaturePair} with the given children.
   *
   * @return the new instance of NameSignaturePair.
   */
  public NameSignaturePair createNameSignaturePair( net.sourceforge.czt.z.ast.DeclName  declName, net.sourceforge.czt.z.ast.Signature  signature)
  {
    return factory_.createNameSignaturePair(declName, signature);
  }

  /**
   * Creates an instance of {@link ClassSig}.
   *
   * @return the new instance of ClassSig.
   */
  public ClassSig createClassSig()
  {
    return factory_.createClassSig();
  }

  /**
   * Creates an instance of {@link ClassSig} with the given children.
   *
   * @return the new instance of ClassSig.
   */
  public ClassSig createClassSig(java.util.List<? extends ClassRef>
 classes, net.sourceforge.czt.z.ast.Signature  state,java.util.List<? extends net.sourceforge.czt.z.ast.NameTypePair>
 attribute,java.util.List<? extends NameSignaturePair>
 operation)
  {
    return factory_.createClassSig(classes, state, attribute, operation);
  }

  /**
   * Creates an instance of {@link OpText}.
   *
   * @return the new instance of OpText.
   */
  public OpText createOpText()
  {
    return factory_.createOpText();
  }

  /**
   * Creates an instance of {@link OpText} with the given children.
   *
   * @return the new instance of OpText.
   */
  public OpText createOpText( DeltaList  deltaList, net.sourceforge.czt.z.ast.SchText  schText)
  {
    return factory_.createOpText(deltaList, schText);
  }

  /**
   * Creates an instance of {@link DistChoiceOpExpr}.
   *
   * @return the new instance of DistChoiceOpExpr.
   */
  public DistChoiceOpExpr createDistChoiceOpExpr()
  {
    return factory_.createDistChoiceOpExpr();
  }

  /**
   * Creates an instance of {@link DistChoiceOpExpr} with the given children.
   *
   * @return the new instance of DistChoiceOpExpr.
   */
  public DistChoiceOpExpr createDistChoiceOpExpr( net.sourceforge.czt.z.ast.SchText  schText, OpExpr  opExpr)
  {
    return factory_.createDistChoiceOpExpr(schText, opExpr);
  }

  /**
   * Creates an instance of {@link AssoParallelOpExpr}.
   *
   * @return the new instance of AssoParallelOpExpr.
   */
  public AssoParallelOpExpr createAssoParallelOpExpr()
  {
    return factory_.createAssoParallelOpExpr();
  }

  /**
   * Creates an instance of {@link AssoParallelOpExpr} with the given children.
   *
   * @return the new instance of AssoParallelOpExpr.
   */
  public AssoParallelOpExpr createAssoParallelOpExpr( OpExpr  leftOpExpr, OpExpr  rightOpExpr)
  {
    return factory_.createAssoParallelOpExpr(leftOpExpr, rightOpExpr);
  }

  /**
   * Creates an instance of {@link DeltaList}.
   *
   * @return the new instance of DeltaList.
   */
  public DeltaList createDeltaList()
  {
    return factory_.createDeltaList();
  }

  /**
   * Creates an instance of {@link DeltaList} with the given children.
   *
   * @return the new instance of DeltaList.
   */
  public DeltaList createDeltaList(java.util.List<? extends net.sourceforge.czt.z.ast.RefName>
 refName)
  {
    return factory_.createDeltaList(refName);
  }

  /**
   * Creates an instance of {@link State}.
   *
   * @return the new instance of State.
   */
  public State createState()
  {
    return factory_.createState();
  }

  /**
   * Creates an instance of {@link State} with the given children.
   *
   * @return the new instance of State.
   */
  public State createState( PrimaryDecl  primaryDecl, SecondaryDecl  secondaryDecl, net.sourceforge.czt.z.ast.Pred  pred, net.sourceforge.czt.z.ast.Box  box)
  {
    return factory_.createState(primaryDecl, secondaryDecl, pred, box);
  }

  /**
   * Creates an instance of {@link OpPromotionExpr}.
   *
   * @return the new instance of OpPromotionExpr.
   */
  public OpPromotionExpr createOpPromotionExpr()
  {
    return factory_.createOpPromotionExpr();
  }

  /**
   * Creates an instance of {@link OpPromotionExpr} with the given children.
   *
   * @return the new instance of OpPromotionExpr.
   */
  public OpPromotionExpr createOpPromotionExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.RefName  refName)
  {
    return factory_.createOpPromotionExpr(expr, refName);
  }

  /**
   * Creates an instance of {@link ConjOpExpr}.
   *
   * @return the new instance of ConjOpExpr.
   */
  public ConjOpExpr createConjOpExpr()
  {
    return factory_.createConjOpExpr();
  }

  /**
   * Creates an instance of {@link ConjOpExpr} with the given children.
   *
   * @return the new instance of ConjOpExpr.
   */
  public ConjOpExpr createConjOpExpr( OpExpr  leftOpExpr, OpExpr  rightOpExpr)
  {
    return factory_.createConjOpExpr(leftOpExpr, rightOpExpr);
  }

  /**
   * Creates an instance of {@link ClassPara}.
   *
   * @return the new instance of ClassPara.
   */
  public ClassPara createClassPara()
  {
    return factory_.createClassPara();
  }

  /**
   * Creates an instance of {@link ClassPara} with the given children.
   *
   * @return the new instance of ClassPara.
   */
  public ClassPara createClassPara( net.sourceforge.czt.z.ast.DeclName  declName,java.util.List<? extends net.sourceforge.czt.z.ast.DeclName>
 formalParameters, VisibilityList  visibilityList, net.sourceforge.czt.z.ast.ExprList  inheritedClass,java.util.List<? extends net.sourceforge.czt.z.ast.Para>
 localDef, State  state, InitialState  initialState,java.util.List<? extends Operation>
 operation)
  {
    return factory_.createClassPara(declName, formalParameters, visibilityList, inheritedClass, localDef, state, initialState, operation);
  }

  /**
   * Creates an instance of {@link Operation}.
   *
   * @return the new instance of Operation.
   */
  public Operation createOperation()
  {
    return factory_.createOperation();
  }

  /**
   * Creates an instance of {@link Operation} with the given children.
   *
   * @return the new instance of Operation.
   */
  public Operation createOperation( net.sourceforge.czt.z.ast.DeclName  opName, OpExpr  opExpr, net.sourceforge.czt.z.ast.Box  box)
  {
    return factory_.createOperation(opName, opExpr, box);
  }

  /**
   * Creates an instance of {@link ClassPolyType}.
   *
   * @return the new instance of ClassPolyType.
   */
  public ClassPolyType createClassPolyType()
  {
    return factory_.createClassPolyType();
  }

  /**
   * Creates an instance of {@link ClassPolyType} with the given children.
   *
   * @return the new instance of ClassPolyType.
   */
  public ClassPolyType createClassPolyType( ClassSig  classSig, ClassRef  rootClass)
  {
    return factory_.createClassPolyType(classSig, rootClass);
  }

  /**
   * Creates an instance of {@link ContainmentExpr}.
   *
   * @return the new instance of ContainmentExpr.
   */
  public ContainmentExpr createContainmentExpr()
  {
    return factory_.createContainmentExpr();
  }

  /**
   * Creates an instance of {@link ContainmentExpr} with the given children.
   *
   * @return the new instance of ContainmentExpr.
   */
  public ContainmentExpr createContainmentExpr( Expr  expr)
  {
    return factory_.createContainmentExpr(expr);
  }

  /**
   * Creates an instance of {@link InitialState}.
   *
   * @return the new instance of InitialState.
   */
  public InitialState createInitialState()
  {
    return factory_.createInitialState();
  }

  /**
   * Creates an instance of {@link InitialState} with the given children.
   *
   * @return the new instance of InitialState.
   */
  public InitialState createInitialState( net.sourceforge.czt.z.ast.Pred  pred, net.sourceforge.czt.z.ast.Box  box)
  {
    return factory_.createInitialState(pred, box);
  }

  /**
   * Creates an instance of {@link ClassUnionExpr}.
   *
   * @return the new instance of ClassUnionExpr.
   */
  public ClassUnionExpr createClassUnionExpr()
  {
    return factory_.createClassUnionExpr();
  }

  /**
   * Creates an instance of {@link ClassUnionExpr} with the given children.
   *
   * @return the new instance of ClassUnionExpr.
   */
  public ClassUnionExpr createClassUnionExpr( Expr  leftExpr, Expr  rightExpr)
  {
    return factory_.createClassUnionExpr(leftExpr, rightExpr);
  }

  /**
   * Creates an instance of {@link DistSeqOpExpr}.
   *
   * @return the new instance of DistSeqOpExpr.
   */
  public DistSeqOpExpr createDistSeqOpExpr()
  {
    return factory_.createDistSeqOpExpr();
  }

  /**
   * Creates an instance of {@link DistSeqOpExpr} with the given children.
   *
   * @return the new instance of DistSeqOpExpr.
   */
  public DistSeqOpExpr createDistSeqOpExpr( net.sourceforge.czt.z.ast.SchText  schText, OpExpr  opExpr)
  {
    return factory_.createDistSeqOpExpr(schText, opExpr);
  }

  /**
   * Creates an instance of {@link ScopeEnrichOpExpr}.
   *
   * @return the new instance of ScopeEnrichOpExpr.
   */
  public ScopeEnrichOpExpr createScopeEnrichOpExpr()
  {
    return factory_.createScopeEnrichOpExpr();
  }

  /**
   * Creates an instance of {@link ScopeEnrichOpExpr} with the given children.
   *
   * @return the new instance of ScopeEnrichOpExpr.
   */
  public ScopeEnrichOpExpr createScopeEnrichOpExpr( OpExpr  leftOpExpr, OpExpr  rightOpExpr)
  {
    return factory_.createScopeEnrichOpExpr(leftOpExpr, rightOpExpr);
  }

  /**
   * Creates an instance of {@link PredExpr}.
   *
   * @return the new instance of PredExpr.
   */
  public PredExpr createPredExpr()
  {
    return factory_.createPredExpr();
  }

  /**
   * Creates an instance of {@link PredExpr} with the given children.
   *
   * @return the new instance of PredExpr.
   */
  public PredExpr createPredExpr( net.sourceforge.czt.z.ast.Pred  pred)
  {
    return factory_.createPredExpr(pred);
  }

  /**
   * Creates an instance of {@link PrimaryDecl}.
   *
   * @return the new instance of PrimaryDecl.
   */
  public PrimaryDecl createPrimaryDecl()
  {
    return factory_.createPrimaryDecl();
  }

  /**
   * Creates an instance of {@link PrimaryDecl} with the given children.
   *
   * @return the new instance of PrimaryDecl.
   */
  public PrimaryDecl createPrimaryDecl( net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createPrimaryDecl(declList);
  }

  /**
   * Creates an instance of {@link ExChoiceOpExpr}.
   *
   * @return the new instance of ExChoiceOpExpr.
   */
  public ExChoiceOpExpr createExChoiceOpExpr()
  {
    return factory_.createExChoiceOpExpr();
  }

  /**
   * Creates an instance of {@link ExChoiceOpExpr} with the given children.
   *
   * @return the new instance of ExChoiceOpExpr.
   */
  public ExChoiceOpExpr createExChoiceOpExpr( OpExpr  leftOpExpr, OpExpr  rightOpExpr)
  {
    return factory_.createExChoiceOpExpr(leftOpExpr, rightOpExpr);
  }

  /**
   * Creates an instance of {@link RenameOpExpr}.
   *
   * @return the new instance of RenameOpExpr.
   */
  public RenameOpExpr createRenameOpExpr()
  {
    return factory_.createRenameOpExpr();
  }

  /**
   * Creates an instance of {@link RenameOpExpr} with the given children.
   *
   * @return the new instance of RenameOpExpr.
   */
  public RenameOpExpr createRenameOpExpr( OpExpr  opExpr, net.sourceforge.czt.z.ast.RenameList  renameList)
  {
    return factory_.createRenameOpExpr(opExpr, renameList);
  }

  /**
   * Creates an instance of {@link ParallelOpExpr}.
   *
   * @return the new instance of ParallelOpExpr.
   */
  public ParallelOpExpr createParallelOpExpr()
  {
    return factory_.createParallelOpExpr();
  }

  /**
   * Creates an instance of {@link ParallelOpExpr} with the given children.
   *
   * @return the new instance of ParallelOpExpr.
   */
  public ParallelOpExpr createParallelOpExpr( OpExpr  leftOpExpr, OpExpr  rightOpExpr)
  {
    return factory_.createParallelOpExpr(leftOpExpr, rightOpExpr);
  }

  /**
   * Creates an instance of {@link ClassUnionType}.
   *
   * @return the new instance of ClassUnionType.
   */
  public ClassUnionType createClassUnionType()
  {
    return factory_.createClassUnionType();
  }

  /**
   * Creates an instance of {@link ClassUnionType} with the given children.
   *
   * @return the new instance of ClassUnionType.
   */
  public ClassUnionType createClassUnionType( ClassSig  classSig)
  {
    return factory_.createClassUnionType(classSig);
  }

  /**
   * Creates an instance of {@link AnonOpExpr}.
   *
   * @return the new instance of AnonOpExpr.
   */
  public AnonOpExpr createAnonOpExpr()
  {
    return factory_.createAnonOpExpr();
  }

  /**
   * Creates an instance of {@link AnonOpExpr} with the given children.
   *
   * @return the new instance of AnonOpExpr.
   */
  public AnonOpExpr createAnonOpExpr( OpText  opText)
  {
    return factory_.createAnonOpExpr(opText);
  }

  /**
   * Creates an empty list of the given element type.
   * This is a convenience method.
   */
  public <E> java.util.List<E> list()
  {
    java.util.List<E> result = new java.util.ArrayList<E>();
    return result;
  }
  

  /**
   * Creates a list with the given elements.
   * This is a convenience method.
   */
  public <E> java.util.List<E> list(E... elems)
  {
    java.util.List<E> result = new java.util.ArrayList<E>();
    result.addAll(java.util.Arrays.asList(elems));
    return result;
  }

  /**
   * Creates an application (Expr followed by Expr in the syntax),
   * that is an ApplExpr with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public ApplExpr createApplication(RefName refName, Expr expr)
  {
    return createApplExpr(createRefExpr(refName), expr, Boolean.FALSE);
  }

  /**
   * Creates a ZDeclName with the given word and strokes and
   * id set to <code>null</code>.
   * This is a convenience method.
   */
  public ZDeclName createZDeclName(String word,
                                   StrokeList strokes)
  {
    return createZDeclName(word, strokes, null);
  }

  /**
   * Creates a ZDeclName from a decorword, that is a string that
   * may contain strokes at the end.
   * The strokes are extracted from the end and the resulting
   * name is returned.
   * This is a convenience method.
   */
  public ZDeclName createZDeclName(String decorword)
  {
    ZStrokeList strokes = createZStrokeList();
    final String word = getWordAndStrokes(decorword, strokes);
    return createZDeclName(word, strokes, null);
  }

  public String getWordAndStrokes(String decorword,
                                  ZStrokeList strokes)
  {
    net.sourceforge.czt.z.util.ZChar[] zchars =
      net.sourceforge.czt.z.util.ZChar.toZChars(decorword);
    int i;
    for (i = zchars.length - 1; i >= 0; i--) {
      net.sourceforge.czt.z.util.ZChar zchar = zchars[i];
      if (net.sourceforge.czt.z.util.ZChar.INSTROKE.equals(zchar)) {
        strokes.add(0, createInStroke());
      }
      else if (net.sourceforge.czt.z.util.ZChar.OUTSTROKE.equals(zchar)) {
        strokes.add(0, createOutStroke());
      }
      else if (net.sourceforge.czt.z.util.ZChar.PRIME.equals(zchar)) {
        strokes.add(0, createNextStroke());
      }
      else if (i >= 2 &&
          net.sourceforge.czt.z.util.ZChar.NW.equals(zchar) &&
          net.sourceforge.czt.z.util.ZChar.isDigit(zchars[i - 1]) &&
          net.sourceforge.czt.z.util.ZChar.SE.equals(zchars[i - 2])) {
        net.sourceforge.czt.base.ast.Digit digit =
          net.sourceforge.czt.base.util.CztDatatypeConverter.parseDigit(zchars[i - 1].toString());
        strokes.add(0, createNumStroke(digit));
        i = i - 2;
      }
      else {
        break;
      }
    }
    StringBuffer result = new StringBuffer();
    for (int j = 0; j <= i; j++) {
      result.append(zchars[j].toString());
    }
    return result.toString();
  }

  /**
   * Creates a member predicate that represents equality
   * between the two given expressions.
   * This is a convenience method.
   */
  public MemPred createEquality(Expr left, Expr right)
  {
    ZExprList zExprList = createZExprList();
    zExprList.add(right);
    return createMemPred(left, createSetExpr(zExprList), Boolean.TRUE);
  }

  /**
   * Creates a function operator application, that is an ApplExpr
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public ApplExpr createFunOpAppl(RefName refName, Expr expr)
  {
    return createApplExpr(createRefExpr(refName), expr, Boolean.TRUE);
  }

  /**
   * Creates a generic instantiation expression, that is a RefExpr
   * with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public RefExpr createGenInst(RefName refName,
                               java.util.List<? extends Expr> exprs)
  {
    ZExprList zExprList = createZExprList(exprs);
    return createRefExpr(refName, zExprList, Boolean.FALSE);
  }

  /**
   * Creates a generic operator application, that is a RefExpr
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public RefExpr createGenOpApp(RefName refName,
                                java.util.List<? extends Expr> exprs)
  {
    ZExprList zExprList = createZExprList(exprs);
    return createRefExpr(refName, zExprList, Boolean.TRUE);
  }

  /**
   * Creates a horizontal definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * expression and with Box set to OmitBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param expr an expression.
   */
  public AxPara createHorizontalDef(DeclName declName, Expr expr)
  {
    return createHorizontalDef(declName, null, expr);
  }

  /**
   * Creates a generic horizontal definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * expression and with Box set to OmitBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param formals a list of DeclName, the formal parameters.
   * @param expr an expression.
   */
  public AxPara createHorizontalDef(DeclName declName,
                                    java.util.List<? extends DeclName> formals,
                                    Expr expr)
  {
    ZDeclNameList zdnl = createZDeclNameList();
    if (formals != null) {
      zdnl.addAll(formals);
    }
    Decl decl = createConstDecl(declName, expr);
    SchText schText = createZSchText(createZDeclList(list(decl)), null);
    return createAxPara(zdnl, schText, Box.OmitBox);
  }

  /**
   * Creates a member predicate for a given referencing name and
   * an expression, that is a MemPred with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public MemPred createMemPred(RefName refName, Expr expr)
  {
    return createMemPred(createRefExpr(refName), expr, Boolean.FALSE);
  }

  /**
   * Creates a number expression with the given value.
   * This is a convenience method.
   */
  public NumExpr createNumExpr(int value)
  {
    return factory_.createNumExpr(createZNumeral(value));
  }

  /**
   * Creates a number expression with the given value.
   * This is a convenience method.
   */
  public NumExpr createNumExpr(java.math.BigInteger bigInt)
  {
    return createNumExpr(bigInt.intValue());
  }

  public ZNumeral createZNumeral(int value)
  {
    return factory_.createZNumeral(java.math.BigInteger.valueOf(value));
  }

  /**
   * Creates a binary product expression.
   * This is a convenience method.
   */
  public ProdExpr createProdExpr(Expr left, Expr right)
  {
    return createProdExpr(createZExprList(list(left, right)));
  }

  public RefExpr createRefExpr(RefName refName,
                               ZExprList zExprList,
                               Boolean mixfix)
  {
    return factory_.createRefExpr(refName, zExprList, mixfix, false);
  }

  /**
   * Creates a reference (expression) to the given name.
   * The mixfix child of the returned reference expression
   * is <code>false</code> and the list of expressions is empty.
   * This is a convenience method.
   */
  public RefExpr createRefExpr(RefName refName)
  {
    return createRefExpr(refName, createZExprList(), Boolean.FALSE);
  }

  /**
   * Creates a ZRefName with the given word and strokes and
   * decl set to <code>null</code>.
   * This is a convenience method.
   */
  public ZRefName createZRefName(String word,
                                 StrokeList strokes)
  {
    return createZRefName(word, strokes, null);
  }

  /**
   * Creates a ZRefName from a decorword, that is a string that
   * may contain strokes at the end.
   * The strokes are extracted from the end and the resulting
   * name is returned.
   * This is a convenience method.
   */
  public ZRefName createZRefName(String decorword)
  {
    ZStrokeList strokes = createZStrokeList();
    final String word = getWordAndStrokes(decorword, strokes);
    return createZRefName(word, strokes, null);
  }

  /**
   * Creates a referencing name that refers to the given
   * declaring name.
   * This is a convenience method.
   */
  public ZRefName createZRefName(ZDeclName declName)
  {
    return createZRefName(declName.getWord(),
			  declName.getStrokeList(),
			  declName);
  }

  /**
   * Creates a relation operator application, that is a MemPred
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public MemPred createRelOpAppl(Expr expr, RefName refName)
  {
    return createMemPred(expr, createRefExpr(refName), Boolean.TRUE);
  }

  /**
   * Creates a schema definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * schema text and with Box set to SchBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param schemaText the schema text.
   */
  public AxPara createSchema(DeclName declName, SchText schemaText)
  {
    return createSchema(declName, null, schemaText);
  }

  /**
   * Creates a generic schema definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * schema text and with Box set to SchBox.
   * This is a convenience method.
   *
   * @param formals a list of DeclName, the formal parameters.
   * @param declName name of the schema.
   * @param schemaText the schema text.
   */
  public AxPara createSchema(DeclName declName,
                             java.util.List<? extends DeclName> formals,
                             SchText schemaText)
  {
    ZDeclNameList zdnl = createZDeclNameList();
    if (formals != null) {
      zdnl.addAll(formals);
    }
    Decl decl = createConstDecl(declName, createSchExpr(schemaText));
    SchText schText = createZSchText(createZDeclList(list(decl)), null);
    return createAxPara(zdnl, schText, Box.SchBox);
  }

  /**
   * <p>Creates a sequence, that is a set of pairs of position
   * (starting from 1) and corresponding component expression.
   * This applies rule 12.2.12 of the Z standard to a list of
   * expressions.</p>
   *
   * <p>More formally, a list
   * <code>e_1, ..., e_n</code> of expressions is transformed into
   * the set <code>\{ (1, e_1), ... , (n, e_n) \}</code>.
   * </p>
   *
   * <p>This is a convenience method.</p>
   *
   * @param exprList a list of expressions (Expr).
   */
  public SetExpr createSequence(java.util.List<? extends Expr> exprList)
  {
    ZExprList zExprList = createZExprList();
    int count = 1;
    for (java.util.Iterator<? extends Expr> i = exprList.iterator();
         i.hasNext(); count++) {
      zExprList.add(createTupleExpr(createNumExpr(count), i.next()));
    }
    return createSetExpr(zExprList);
  }

  /**
   * Creates a pair, that is a tuple expression with two elements.
   * This is a convenience method.
   */
  public TupleExpr createTupleExpr(Expr left, Expr right)
  {
    return createTupleExpr(createZExprList(list(left, right)));
  }

  public java.math.BigInteger toBig(Integer i)
  {
    if (i != null) {
      return java.math.BigInteger.valueOf(i.intValue());
    }
    return null;
  }

  public NumStroke createNumStroke(int value)
  {
    net.sourceforge.czt.base.ast.Digit digit =
      net.sourceforge.czt.base.ast.Digit.fromValue(value);
    return createNumStroke(digit);
  }

  public LocAnn createLocAnn(String source, Integer line, Integer col)
  {
    return createLocAnn(source, line, col, null, null);
  }

  public LocAnn createLocAnn(String source,
                             Integer line, Integer col,
                             Integer start, Integer length)
  {
    return createLocAnn(source,
                        toBig(line), toBig(col),
                        toBig(start), toBig(length));
  }
}
