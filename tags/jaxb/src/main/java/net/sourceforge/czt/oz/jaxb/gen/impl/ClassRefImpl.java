//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.06.26 at 02:10:37 PM NZST 
//


package net.sourceforge.czt.oz.jaxb.gen.impl;

public class ClassRefImpl
    extends net.sourceforge.czt.z.jaxb.gen.impl.TermImpl
    implements net.sourceforge.czt.oz.jaxb.gen.ClassRef, com.sun.xml.bind.JAXBObject, net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallableObject, net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializable, net.sourceforge.czt.circus.jaxb.gen.impl.runtime.ValidatableObject
{

    protected com.sun.xml.bind.util.ListImpl _Type;
    protected com.sun.xml.bind.util.ListImpl _NewOldPair;
    protected net.sourceforge.czt.z.jaxb.gen.RefName _RefName;
    public final static java.lang.Class version = (net.sourceforge.czt.oz.jaxb.gen.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (net.sourceforge.czt.oz.jaxb.gen.ClassRef.class);
    }

    protected com.sun.xml.bind.util.ListImpl _getType() {
        if (_Type == null) {
            _Type = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _Type;
    }

    public java.util.List getType() {
        return _getType();
    }

    protected com.sun.xml.bind.util.ListImpl _getNewOldPair() {
        if (_NewOldPair == null) {
            _NewOldPair = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _NewOldPair;
    }

    public java.util.List getNewOldPair() {
        return _getNewOldPair();
    }

    public net.sourceforge.czt.z.jaxb.gen.RefName getRefName() {
        return _RefName;
    }

    public void setRefName(net.sourceforge.czt.z.jaxb.gen.RefName value) {
        _RefName = value;
    }

    public net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingEventHandler createUnmarshaller(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingContext context) {
        return new net.sourceforge.czt.oz.jaxb.gen.impl.ClassRefImpl.Unmarshaller(context);
    }

    public void serializeBody(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Type == null)? 0 :_Type.size());
        int idx2 = 0;
        final int len2 = ((_NewOldPair == null)? 0 :_NewOldPair.size());
        super.serializeBody(context);
        if (_RefName instanceof javax.xml.bind.Element) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _RefName), "RefName");
        } else {
            context.startElement("http://czt.sourceforge.net/zml", "RefName");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _RefName), "RefName");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _RefName), "RefName");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _RefName), "RefName");
            context.endElement();
        }
        while (idx1 != len1) {
            if (_Type.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Type.get(idx1 ++)), "Type");
            } else {
                context.startElement("http://czt.sourceforge.net/zml", "Type2");
                int idx_2 = idx1;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Type.get(idx_2 ++)), "Type");
                context.endNamespaceDecls();
                int idx_3 = idx1;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Type.get(idx_3 ++)), "Type");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Type.get(idx1 ++)), "Type");
                context.endElement();
            }
        }
        while (idx2 != len2) {
            if (_NewOldPair.get(idx2) instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _NewOldPair.get(idx2 ++)), "NewOldPair");
            } else {
                context.startElement("http://czt.sourceforge.net/zml", "NewOldPair");
                int idx_4 = idx2;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _NewOldPair.get(idx_4 ++)), "NewOldPair");
                context.endNamespaceDecls();
                int idx_5 = idx2;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _NewOldPair.get(idx_5 ++)), "NewOldPair");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _NewOldPair.get(idx2 ++)), "NewOldPair");
                context.endElement();
            }
        }
    }

    public void serializeAttributes(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Type == null)? 0 :_Type.size());
        int idx2 = 0;
        final int len2 = ((_NewOldPair == null)? 0 :_NewOldPair.size());
        super.serializeAttributes(context);
        if (_RefName instanceof javax.xml.bind.Element) {
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _RefName), "RefName");
        }
        while (idx1 != len1) {
            if (_Type.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Type.get(idx1 ++)), "Type");
            } else {
                idx1 += 1;
            }
        }
        while (idx2 != len2) {
            if (_NewOldPair.get(idx2) instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _NewOldPair.get(idx2 ++)), "NewOldPair");
            } else {
                idx2 += 1;
            }
        }
    }

    public void serializeURIs(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Type == null)? 0 :_Type.size());
        int idx2 = 0;
        final int len2 = ((_NewOldPair == null)? 0 :_NewOldPair.size());
        super.serializeURIs(context);
        if (_RefName instanceof javax.xml.bind.Element) {
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _RefName), "RefName");
        }
        while (idx1 != len1) {
            if (_Type.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Type.get(idx1 ++)), "Type");
            } else {
                idx1 += 1;
            }
        }
        while (idx2 != len2) {
            if (_NewOldPair.get(idx2) instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _NewOldPair.get(idx2 ++)), "NewOldPair");
            } else {
                idx2 += 1;
            }
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (net.sourceforge.czt.oz.jaxb.gen.ClassRef.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv.grammar."
+"ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000\'com.sun.msv.grammar.trex.Ele"
+"mentPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/Na"
+"meClass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aigno"
+"reUndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003sr\u0000\u0011java.lan"
+"g.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\npp\u0000sq\u0000~\u0000\bppsr"
+"\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv"
+".grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u000fpsr\u0000 com.s"
+"un.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClas"
+"sq\u0000~\u0000\u000bxq\u0000~\u0000\u0003q\u0000~\u0000\u000fpsr\u00002com.sun.msv.grammar.Expression$AnyStri"
+"ngExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u000e\u0001q\u0000~\u0000\u0019sr\u0000 com.sun.msv.gra"
+"mmar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClas"
+"s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExpr"
+"ession\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u001aq\u0000~\u0000\u001fsr\u0000#com.sun.msv.grammar.Sim"
+"pleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fn"
+"amespaceURIq\u0000~\u0000!xq\u0000~\u0000\u001ct\u0000,net.sourceforge.czt.z.jaxb.gen.Term"
+".AnnsTypet\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000"
+"\bppsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002"
+"dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001d"
+"Lcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.datatyp"
+"e.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.Built"
+"inAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.Concrete"
+"Type\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000!L\u0000\btypeNameq\u0000~\u0000!L\u0000\nwhiteSpacet\u0000"
+".Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://w"
+"ww.w3.org/2001/XMLSchemat\u0000\u0005QNamesr\u00005com.sun.msv.datatype.xsd"
+".WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.data"
+"type.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.gra"
+"mmar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u000fpsr\u0000\u001b"
+"com.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000!L\u0000\fna"
+"mespaceURIq\u0000~\u0000!xpq\u0000~\u00002q\u0000~\u00001sq\u0000~\u0000 t\u0000\u0004typet\u0000)http://www.w3.org"
+"/2001/XMLSchema-instanceq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000\u0004Annst\u0000\u001ehttp://czt.sour"
+"ceforge.net/zmlq\u0000~\u0000\u001fsq\u0000~\u0000\bppsq\u0000~\u0000\npp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000"
+"~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00006net.sourceforge.czt.zpatt.j"
+"axb.gen.JokerRefNameElementq\u0000~\u0000$sq\u0000~\u0000\npp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000f"
+"psq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000.net.sourceforge.czt.z.j"
+"axb.gen.ZRefNameElementq\u0000~\u0000$sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\bq\u0000~\u0000\u000fp"
+"sq\u0000~\u0000\bq\u0000~\u0000\u000fpsq\u0000~\u0000\bq\u0000~\u0000\u000fpsq\u0000~\u0000\bq\u0000~\u0000\u000fpsq\u0000~\u0000\bq\u0000~\u0000\u000fpsq\u0000~\u0000\bq\u0000~\u0000\u000fp"
+"sq\u0000~\u0000\bq\u0000~\u0000\u000fpsq\u0000~\u0000\bq\u0000~\u0000\u000fpsq\u0000~\u0000\bq\u0000~\u0000\u000fpsq\u0000~\u0000\bq\u0000~\u0000\u000fpsq\u0000~\u0000\bq\u0000~\u0000\u000fp"
+"sq\u0000~\u0000\bq\u0000~\u0000\u000fpsq\u0000~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~"
+"\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00004net.sourceforge.czt.oz.jaxb.gen.ClassPo"
+"lyTypeElementq\u0000~\u0000$sq\u0000~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~"
+"\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00004net.sourceforge.czt.tcoz.jaxb.gen"
+".ChannelTypeElementq\u0000~\u0000$sq\u0000~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000"
+"~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00006net.sourceforge.czt.circus."
+"jaxb.gen.NameSetTypeElementq\u0000~\u0000$sq\u0000~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q"
+"\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000/net.sourceforge.czt"
+".z.jaxb.gen.PowerTypeElementq\u0000~\u0000$sq\u0000~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013"
+"q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00000net.sourceforge.cz"
+"t.z.jaxb.gen.SchemaTypeElementq\u0000~\u0000$sq\u0000~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~"
+"\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000/net.sourceforge."
+"czt.z.jaxb.gen.GivenTypeElementq\u0000~\u0000$sq\u0000~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000"
+"~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00005net.sourceforge"
+".czt.circus.jaxb.gen.ActionTypeElementq\u0000~\u0000$sq\u0000~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~"
+"\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00003net.sour"
+"ceforge.czt.oz.jaxb.gen.ClassRefTypeElementq\u0000~\u0000$sq\u0000~\u0000\nq\u0000~\u0000\u000fp"
+"\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00006net"
+".sourceforge.czt.circus.jaxb.gen.ProcessTypeElementq\u0000~\u0000$sq\u0000~"
+"\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~"
+"\u0000 t\u0000.net.sourceforge.czt.z.jaxb.gen.ProdTypeElementq\u0000~\u0000$sq\u0000~"
+"\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~"
+"\u0000 t\u00009net.sourceforge.czt.circus.jaxb.gen.ChannelSetTypeEleme"
+"ntq\u0000~\u0000$sq\u0000~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~"
+"\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00002net.sourceforge.czt.z.jaxb.gen.GenParamTypeE"
+"lementq\u0000~\u0000$sq\u0000~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000"
+"\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00005net.sourceforge.czt.oz.jaxb.gen.ClassUni"
+"onTypeElementq\u0000~\u0000$q\u0000~\u0000\u001fsq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\bq\u0000~\u0000\u000fpsq\u0000~\u0000"
+"\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000"
+" t\u00000net.sourceforge.czt.z.jaxb.gen.NewOldPairElementq\u0000~\u0000$sq\u0000"
+"~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\npp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq"
+"\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000)net.sourceforge.czt.z.jaxb.gen.NewOld"
+"Pairq\u0000~\u0000$sq\u0000~\u0000\bppsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000*q\u0000~\u0000:q\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000\nNewOldP"
+"airq\u0000~\u0000?q\u0000~\u0000\u001fsr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHa"
+"sh;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8"
+"\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/gramma"
+"r/ExpressionPool;xp\u0000\u0000\u0000>\u0001pq\u0000~\u0000Nq\u0000~\u0000Oq\u0000~\u0000Sq\u0000~\u0000Mq\u0000~\u0000\u00baq\u0000~\u0000%q\u0000~\u0000\u00a9"
+"q\u0000~\u0000Qq\u0000~\u0000Uq\u0000~\u0000\u0005q\u0000~\u0000\u00b6q\u0000~\u0000\u00aeq\u0000~\u0000\u00a5q\u0000~\u0000\u009fq\u0000~\u0000\u0099q\u0000~\u0000\u0093q\u0000~\u0000\u008dq\u0000~\u0000\u0087q\u0000~\u0000\u0081"
+"q\u0000~\u0000{q\u0000~\u0000uq\u0000~\u0000oq\u0000~\u0000iq\u0000~\u0000cq\u0000~\u0000]q\u0000~\u0000Iq\u0000~\u0000Cq\u0000~\u0000\u0015q\u0000~\u0000Wq\u0000~\u0000Xq\u0000~\u0000\u0007"
+"q\u0000~\u0000\tq\u0000~\u0000Pq\u0000~\u0000Yq\u0000~\u0000\u00b5q\u0000~\u0000\u00adq\u0000~\u0000\u00a4q\u0000~\u0000\u009eq\u0000~\u0000\u0098q\u0000~\u0000\u0092q\u0000~\u0000\u008cq\u0000~\u0000\u0086q\u0000~\u0000\u0080"
+"q\u0000~\u0000zq\u0000~\u0000tq\u0000~\u0000nq\u0000~\u0000hq\u0000~\u0000bq\u0000~\u0000Vq\u0000~\u0000\\q\u0000~\u0000Hq\u0000~\u0000Bq\u0000~\u0000\u0012q\u0000~\u0000\u0010q\u0000~\u0000Z"
+"q\u0000~\u0000@q\u0000~\u0000\u0006q\u0000~\u0000\u00b3q\u0000~\u0000Rq\u0000~\u0000\u00abq\u0000~\u0000Tq\u0000~\u0000\u00aax"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends net.sourceforge.czt.circus.jaxb.gen.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingContext context) {
            super(context, "-----------");
        }

        protected Unmarshaller(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return net.sourceforge.czt.oz.jaxb.gen.impl.ClassRefImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        if (("ClassPolyType" == ___local)&&("http://czt.sourceforge.net/object-z" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.oz.jaxb.gen.impl.ClassPolyTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.oz.jaxb.gen.impl.ClassPolyTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ChannelType" == ___local)&&("http://czt.sourceforge.net/tcoz" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.tcoz.jaxb.gen.impl.ChannelTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.tcoz.jaxb.gen.impl.ChannelTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("NameSetType" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.circus.jaxb.gen.impl.NameSetTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.NameSetTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("PowerType" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.z.jaxb.gen.impl.PowerTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.PowerTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SchemaType" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("GivenType" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.z.jaxb.gen.impl.GivenTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.GivenTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ActionType" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.circus.jaxb.gen.impl.ActionTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.ActionTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ClassRefType" == ___local)&&("http://czt.sourceforge.net/object-z" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.oz.jaxb.gen.impl.ClassRefTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.oz.jaxb.gen.impl.ClassRefTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ProcessType" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.circus.jaxb.gen.impl.ProcessTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.ProcessTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ProdType" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.z.jaxb.gen.impl.ProdTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ProdTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ChannelSetType" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.circus.jaxb.gen.impl.ChannelSetTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.ChannelSetTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("GenParamType" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.z.jaxb.gen.impl.GenParamTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.GenParamTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ClassUnionType" == ___local)&&("http://czt.sourceforge.net/object-z" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.oz.jaxb.gen.impl.ClassUnionTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.oz.jaxb.gen.impl.ClassUnionTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Type2" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 7;
                            return ;
                        }
                        if (("Type2" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.z.jaxb.gen.impl.Type2ElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.Type2ElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("NewOldPair" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 4;
                            return ;
                        }
                        if (("NewOldPair" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getNewOldPair().add(((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  9 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _RefName = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 10, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _RefName = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 10, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  0 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.TermImpl)net.sourceforge.czt.oz.jaxb.gen.impl.ClassRefImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.TermImpl)net.sourceforge.czt.oz.jaxb.gen.impl.ClassRefImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                        return ;
                    case  4 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getNewOldPair().add(((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ZDeclName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getNewOldPair().add(((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("JokerDeclName" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getNewOldPair().add(((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("DeclName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getNewOldPair().add(((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("DeclName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getNewOldPair().add(((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        _getNewOldPair().add(((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                        return ;
                    case  2 :
                        if (("ClassPolyType" == ___local)&&("http://czt.sourceforge.net/object-z" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.oz.jaxb.gen.impl.ClassPolyTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.oz.jaxb.gen.impl.ClassPolyTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ChannelType" == ___local)&&("http://czt.sourceforge.net/tcoz" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.tcoz.jaxb.gen.impl.ChannelTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.tcoz.jaxb.gen.impl.ChannelTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("NameSetType" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.circus.jaxb.gen.impl.NameSetTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.NameSetTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("PowerType" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.z.jaxb.gen.impl.PowerTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.PowerTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SchemaType" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("GivenType" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.z.jaxb.gen.impl.GivenTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.GivenTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ActionType" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.circus.jaxb.gen.impl.ActionTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.ActionTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ClassRefType" == ___local)&&("http://czt.sourceforge.net/object-z" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.oz.jaxb.gen.impl.ClassRefTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.oz.jaxb.gen.impl.ClassRefTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ProcessType" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.circus.jaxb.gen.impl.ProcessTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.ProcessTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ProdType" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.z.jaxb.gen.impl.ProdTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ProdTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ChannelSetType" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.circus.jaxb.gen.impl.ChannelSetTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.ChannelSetTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("GenParamType" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.z.jaxb.gen.impl.GenParamTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.GenParamTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ClassUnionType" == ___local)&&("http://czt.sourceforge.net/object-z" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.oz.jaxb.gen.impl.ClassUnionTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.oz.jaxb.gen.impl.ClassUnionTypeElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Type2" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 7;
                            return ;
                        }
                        if (("Type2" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.z.jaxb.gen.impl.Type2ElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.Type2ElementImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  1 :
                        if (("JokerRefName" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _RefName = ((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerRefNameElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerRefNameElementImpl.class), 2, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("ZRefName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _RefName = ((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameElementImpl.class), 2, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("RefName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 9;
                            return ;
                        }
                        if (("RefName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _RefName = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RefNameElementImpl.class), 2, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  7 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getType().add(((net.sourceforge.czt.z.jaxb.gen.impl.Type2Impl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.Type2Impl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        _getType().add(((net.sourceforge.czt.z.jaxb.gen.impl.Type2Impl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.Type2Impl.class), 8, ___uri, ___local, ___qname, __atts)));
                        return ;
                    case  6 :
                        if (("NewOldPair" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 4;
                            return ;
                        }
                        if (("NewOldPair" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getNewOldPair().add(((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        state = 6;
                        continue outer;
                    case  10 :
                        if (("RefName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 2;
                            return ;
                        }
                        break;
                    case  5 :
                        if (("NewOldPair" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 6;
                            return ;
                        }
                        break;
                    case  9 :
                        _RefName = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromLeaveElement((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 10, ___uri, ___local, ___qname));
                        return ;
                    case  0 :
                        spawnHandlerFromLeaveElement((((net.sourceforge.czt.z.jaxb.gen.impl.TermImpl)net.sourceforge.czt.oz.jaxb.gen.impl.ClassRefImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  4 :
                        _getNewOldPair().add(((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl) spawnChildFromLeaveElement((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl.class), 5, ___uri, ___local, ___qname)));
                        return ;
                    case  2 :
                        state = 3;
                        continue outer;
                    case  8 :
                        if (("Type2" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 3;
                            return ;
                        }
                        break;
                    case  7 :
                        _getType().add(((net.sourceforge.czt.z.jaxb.gen.impl.Type2Impl) spawnChildFromLeaveElement((net.sourceforge.czt.z.jaxb.gen.impl.Type2Impl.class), 8, ___uri, ___local, ___qname)));
                        return ;
                    case  6 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        state = 6;
                        continue outer;
                    case  9 :
                        _RefName = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 10, ___uri, ___local, ___qname));
                        return ;
                    case  0 :
                        spawnHandlerFromEnterAttribute((((net.sourceforge.czt.z.jaxb.gen.impl.TermImpl)net.sourceforge.czt.oz.jaxb.gen.impl.ClassRefImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  4 :
                        _getNewOldPair().add(((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl.class), 5, ___uri, ___local, ___qname)));
                        return ;
                    case  2 :
                        state = 3;
                        continue outer;
                    case  7 :
                        _getType().add(((net.sourceforge.czt.z.jaxb.gen.impl.Type2Impl) spawnChildFromEnterAttribute((net.sourceforge.czt.z.jaxb.gen.impl.Type2Impl.class), 8, ___uri, ___local, ___qname)));
                        return ;
                    case  6 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        state = 6;
                        continue outer;
                    case  9 :
                        _RefName = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 10, ___uri, ___local, ___qname));
                        return ;
                    case  0 :
                        spawnHandlerFromLeaveAttribute((((net.sourceforge.czt.z.jaxb.gen.impl.TermImpl)net.sourceforge.czt.oz.jaxb.gen.impl.ClassRefImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  4 :
                        _getNewOldPair().add(((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl.class), 5, ___uri, ___local, ___qname)));
                        return ;
                    case  2 :
                        state = 3;
                        continue outer;
                    case  7 :
                        _getType().add(((net.sourceforge.czt.z.jaxb.gen.impl.Type2Impl) spawnChildFromLeaveAttribute((net.sourceforge.czt.z.jaxb.gen.impl.Type2Impl.class), 8, ___uri, ___local, ___qname)));
                        return ;
                    case  6 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  3 :
                            state = 6;
                            continue outer;
                        case  9 :
                            _RefName = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromText((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 10, value));
                            return ;
                        case  0 :
                            spawnHandlerFromText((((net.sourceforge.czt.z.jaxb.gen.impl.TermImpl)net.sourceforge.czt.oz.jaxb.gen.impl.ClassRefImpl.this).new Unmarshaller(context)), 1, value);
                            return ;
                        case  4 :
                            _getNewOldPair().add(((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl) spawnChildFromText((net.sourceforge.czt.z.jaxb.gen.impl.NewOldPairImpl.class), 5, value)));
                            return ;
                        case  2 :
                            state = 3;
                            continue outer;
                        case  7 :
                            _getType().add(((net.sourceforge.czt.z.jaxb.gen.impl.Type2Impl) spawnChildFromText((net.sourceforge.czt.z.jaxb.gen.impl.Type2Impl.class), 8, value)));
                            return ;
                        case  6 :
                            revertToParentFromText(value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
