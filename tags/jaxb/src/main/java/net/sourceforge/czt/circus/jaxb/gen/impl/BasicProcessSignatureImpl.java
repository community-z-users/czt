//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.06.26 at 02:10:37 PM NZST 
//


package net.sourceforge.czt.circus.jaxb.gen.impl;

public class BasicProcessSignatureImpl
    extends net.sourceforge.czt.circus.jaxb.gen.impl.ProcessSignatureImpl
    implements net.sourceforge.czt.circus.jaxb.gen.BasicProcessSignature, com.sun.xml.bind.JAXBObject, net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallableObject, net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializable, net.sourceforge.czt.circus.jaxb.gen.impl.runtime.ValidatableObject
{

    protected com.sun.xml.bind.util.ListImpl _ActionSignature;
    protected net.sourceforge.czt.z.jaxb.gen.SchemaType _StateType;
    protected net.sourceforge.czt.z.jaxb.gen.ZRefNameList _NameSet;
    protected com.sun.xml.bind.util.ListImpl _ZSignature;
    public final static java.lang.Class version = (net.sourceforge.czt.circus.jaxb.gen.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (net.sourceforge.czt.circus.jaxb.gen.BasicProcessSignature.class);
    }

    protected com.sun.xml.bind.util.ListImpl _getActionSignature() {
        if (_ActionSignature == null) {
            _ActionSignature = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _ActionSignature;
    }

    public java.util.List getActionSignature() {
        return _getActionSignature();
    }

    public net.sourceforge.czt.z.jaxb.gen.SchemaType getStateType() {
        return _StateType;
    }

    public void setStateType(net.sourceforge.czt.z.jaxb.gen.SchemaType value) {
        _StateType = value;
    }

    public net.sourceforge.czt.z.jaxb.gen.ZRefNameList getNameSet() {
        return _NameSet;
    }

    public void setNameSet(net.sourceforge.czt.z.jaxb.gen.ZRefNameList value) {
        _NameSet = value;
    }

    protected com.sun.xml.bind.util.ListImpl _getZSignature() {
        if (_ZSignature == null) {
            _ZSignature = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _ZSignature;
    }

    public java.util.List getZSignature() {
        return _getZSignature();
    }

    public net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingEventHandler createUnmarshaller(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingContext context) {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessSignatureImpl.Unmarshaller(context);
    }

    public void serializeBody(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_ActionSignature == null)? 0 :_ActionSignature.size());
        int idx4 = 0;
        final int len4 = ((_ZSignature == null)? 0 :_ZSignature.size());
        super.serializeBody(context);
        context.startElement("http://czt.sourceforge.net/circus", "StateType");
        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _StateType), "StateType");
        context.endNamespaceDecls();
        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _StateType), "StateType");
        context.endAttributes();
        context.childAsBody(((com.sun.xml.bind.JAXBObject) _StateType), "StateType");
        context.endElement();
        while (idx4 != len4) {
            if (_ZSignature.get(idx4) instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _ZSignature.get(idx4 ++)), "ZSignature");
            } else {
                context.startElement("http://czt.sourceforge.net/zml", "Signature");
                int idx_2 = idx4;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _ZSignature.get(idx_2 ++)), "ZSignature");
                context.endNamespaceDecls();
                int idx_3 = idx4;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _ZSignature.get(idx_3 ++)), "ZSignature");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _ZSignature.get(idx4 ++)), "ZSignature");
                context.endElement();
            }
        }
        while (idx1 != len1) {
            if (_ActionSignature.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _ActionSignature.get(idx1 ++)), "ActionSignature");
            } else {
                context.startElement("http://czt.sourceforge.net/circus", "ActionSignature");
                int idx_4 = idx1;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _ActionSignature.get(idx_4 ++)), "ActionSignature");
                context.endNamespaceDecls();
                int idx_5 = idx1;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _ActionSignature.get(idx_5 ++)), "ActionSignature");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _ActionSignature.get(idx1 ++)), "ActionSignature");
                context.endElement();
            }
        }
        context.startElement("http://czt.sourceforge.net/circus", "NameSet");
        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _NameSet), "NameSet");
        context.endNamespaceDecls();
        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _NameSet), "NameSet");
        context.endAttributes();
        context.childAsBody(((com.sun.xml.bind.JAXBObject) _NameSet), "NameSet");
        context.endElement();
    }

    public void serializeAttributes(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_ActionSignature == null)? 0 :_ActionSignature.size());
        int idx4 = 0;
        final int len4 = ((_ZSignature == null)? 0 :_ZSignature.size());
        super.serializeAttributes(context);
        while (idx4 != len4) {
            if (_ZSignature.get(idx4) instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _ZSignature.get(idx4 ++)), "ZSignature");
            } else {
                idx4 += 1;
            }
        }
        while (idx1 != len1) {
            if (_ActionSignature.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _ActionSignature.get(idx1 ++)), "ActionSignature");
            } else {
                idx1 += 1;
            }
        }
    }

    public void serializeURIs(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_ActionSignature == null)? 0 :_ActionSignature.size());
        int idx4 = 0;
        final int len4 = ((_ZSignature == null)? 0 :_ZSignature.size());
        super.serializeURIs(context);
        while (idx4 != len4) {
            if (_ZSignature.get(idx4) instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _ZSignature.get(idx4 ++)), "ZSignature");
            } else {
                idx4 += 1;
            }
        }
        while (idx1 != len1) {
            if (_ActionSignature.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _ActionSignature.get(idx1 ++)), "ActionSignature");
            } else {
                idx1 += 1;
            }
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (net.sourceforge.czt.circus.jaxb.gen.BasicProcessSignature.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000"
+"xq\u0000~\u0000\u0001ppsr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun."
+"msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttribut"
+"esL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001"
+"Z\u0000\u0005valuexp\u0000p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\rppsr\u0000 com.sun.msv.gramma"
+"r.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u0014psr\u0000 com.sun.msv.grammar.Attri"
+"buteExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u0010xq\u0000~\u0000\u0003q\u0000~\u0000\u0014psr"
+"\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u0013\u0001q\u0000~\u0000\u001esr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000co"
+"m.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000"
+"~\u0000\u0003q\u0000~\u0000\u001fq\u0000~\u0000$sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000&xq\u0000~"
+"\u0000!t\u0000,net.sourceforge.czt.z.jaxb.gen.Term.AnnsTypet\u0000+http://j"
+"ava.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\rppsq\u0000~\u0000\u001bq\u0000~\u0000\u0014psr\u0000\u001bc"
+"om.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/da"
+"tatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/St"
+"ringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'c"
+"om.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespac"
+"eUriq\u0000~\u0000&L\u0000\btypeNameq\u0000~\u0000&L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/dataty"
+"pe/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSc"
+"hemat\u0000\u0005QNamesr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor"
+"$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceP"
+"rocessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$Null"
+"SetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u0014psr\u0000\u001bcom.sun.msv.util.Str"
+"ingPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000&L\u0000\fnamespaceURIq\u0000~\u0000&xpq\u0000~"
+"\u00007q\u0000~\u00006sq\u0000~\u0000%t\u0000\u0004typet\u0000)http://www.w3.org/2001/XMLSchema-inst"
+"anceq\u0000~\u0000$sq\u0000~\u0000%t\u0000\u0004Annst\u0000\u001ehttp://czt.sourceforge.net/zmlq\u0000~\u0000$"
+"sq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0018q\u0000~\u0000\u0014psq\u0000~\u0000\u001bq\u0000~\u0000\u0014pq\u0000"
+"~\u0000\u001eq\u0000~\u0000\"q\u0000~\u0000$sq\u0000~\u0000%t\u0000\'net.sourceforge.czt.z.jaxb.gen.DeclNam"
+"eq\u0000~\u0000)sq\u0000~\u0000\rppsq\u0000~\u0000\u001bq\u0000~\u0000\u0014pq\u0000~\u0000/q\u0000~\u0000?q\u0000~\u0000$sq\u0000~\u0000%t\u0000\u000bProcessNam"
+"et\u0000!http://czt.sourceforge.net/circussq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000f"
+"pp\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0018q\u0000~\u0000\u0014psq\u0000~\u0000\u001bq\u0000~\u0000\u0014pq\u0000~\u0000\u001eq\u0000~\u0000\"q\u0000~\u0000$sq\u0000~\u0000%t\u0000+n"
+"et.sourceforge.czt.z.jaxb.gen.DeclNameListq\u0000~\u0000)sq\u0000~\u0000\rppsq\u0000~\u0000"
+"\u001bq\u0000~\u0000\u0014pq\u0000~\u0000/q\u0000~\u0000?q\u0000~\u0000$sq\u0000~\u0000%t\u0000\nGenFormalsq\u0000~\u0000Qsq\u0000~\u0000\rppsq\u0000~\u0000\u000f"
+"q\u0000~\u0000\u0014p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0018q\u0000~\u0000\u0014psq\u0000~\u0000\u001bq\u0000~\u0000\u0014pq\u0000~\u0000"
+"\u001eq\u0000~\u0000\"q\u0000~\u0000$sq\u0000~\u0000%t\u0000(net.sourceforge.czt.z.jaxb.gen.Signature"
+"q\u0000~\u0000)sq\u0000~\u0000\rppsq\u0000~\u0000\u001bq\u0000~\u0000\u0014pq\u0000~\u0000/q\u0000~\u0000?q\u0000~\u0000$sq\u0000~\u0000%t\u0000\u000eParamOrInde"
+"xesq\u0000~\u0000Qq\u0000~\u0000$sq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0018q\u0000~\u0000\u0014ps"
+"q\u0000~\u0000\u001bq\u0000~\u0000\u0014pq\u0000~\u0000\u001eq\u0000~\u0000\"q\u0000~\u0000$sq\u0000~\u0000%t\u0000)net.sourceforge.czt.z.jax"
+"b.gen.SchemaTypeq\u0000~\u0000)sq\u0000~\u0000\rppsq\u0000~\u0000\u001bq\u0000~\u0000\u0014pq\u0000~\u0000/q\u0000~\u0000?q\u0000~\u0000$sq\u0000~"
+"\u0000%t\u0000\tStateTypeq\u0000~\u0000Qsq\u0000~\u0000\rppsq\u0000~\u0000\u0018q\u0000~\u0000\u0014psq\u0000~\u0000\rq\u0000~\u0000\u0014psq\u0000~\u0000\u000fq\u0000~"
+"\u0000\u0014p\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0018q\u0000~\u0000\u0014psq\u0000~\u0000\u001bq\u0000~\u0000\u0014pq\u0000~\u0000\u001eq\u0000~\u0000\"q\u0000~\u0000$sq\u0000~\u0000%t\u0000/"
+"net.sourceforge.czt.z.jaxb.gen.SignatureElementq\u0000~\u0000)sq\u0000~\u0000\u000fq\u0000"
+"~\u0000\u0014p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0018q\u0000~\u0000\u0014psq\u0000~\u0000\u001bq\u0000~\u0000\u0014pq\u0000~\u0000\u001eq"
+"\u0000~\u0000\"q\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000fq\u0000~\u0000)sq\u0000~\u0000\rppsq\u0000~\u0000\u001bq\u0000~\u0000\u0014pq\u0000~\u0000/q\u0000~\u0000?q\u0000~\u0000$"
+"sq\u0000~\u0000%t\u0000\tSignatureq\u0000~\u0000Dq\u0000~\u0000$sq\u0000~\u0000\rppsq\u0000~\u0000\u0018q\u0000~\u0000\u0014psq\u0000~\u0000\rq\u0000~\u0000\u0014p"
+"sq\u0000~\u0000\u000fq\u0000~\u0000\u0014p\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0018q\u0000~\u0000\u0014psq\u0000~\u0000\u001bq\u0000~\u0000\u0014pq\u0000~\u0000\u001eq\u0000~\u0000\"q\u0000~\u0000$"
+"sq\u0000~\u0000%t\u0000:net.sourceforge.czt.circus.jaxb.gen.ActionSignature"
+"Elementq\u0000~\u0000)sq\u0000~\u0000\u000fq\u0000~\u0000\u0014p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0018q\u0000~\u0000"
+"\u0014psq\u0000~\u0000\u001bq\u0000~\u0000\u0014pq\u0000~\u0000\u001eq\u0000~\u0000\"q\u0000~\u0000$sq\u0000~\u0000%t\u00003net.sourceforge.czt.ci"
+"rcus.jaxb.gen.ActionSignatureq\u0000~\u0000)sq\u0000~\u0000\rppsq\u0000~\u0000\u001bq\u0000~\u0000\u0014pq\u0000~\u0000/q"
+"\u0000~\u0000?q\u0000~\u0000$sq\u0000~\u0000%t\u0000\u000fActionSignatureq\u0000~\u0000Qq\u0000~\u0000$sq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0018q\u0000~\u0000\u0014psq\u0000~\u0000\u001bq\u0000~\u0000\u0014pq\u0000~\u0000\u001eq\u0000~\u0000\"q\u0000~\u0000$sq\u0000~"
+"\u0000%t\u0000+net.sourceforge.czt.z.jaxb.gen.ZRefNameListq\u0000~\u0000)sq\u0000~\u0000\rp"
+"psq\u0000~\u0000\u001bq\u0000~\u0000\u0014pq\u0000~\u0000/q\u0000~\u0000?q\u0000~\u0000$sq\u0000~\u0000%t\u0000\u0007NameSetq\u0000~\u0000Qsq\u0000~\u0000\rppsq\u0000"
+"~\u0000\u001bq\u0000~\u0000\u0014psq\u0000~\u0000,ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFac"
+"et\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.data"
+"type.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com."
+"sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetF"
+"ixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype"
+"/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/"
+"xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000&xq\u0000~\u00003q\u0000~\u0000Qt\u0000\u000bProcessKinds"
+"r\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Preserve\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u00009\u0000\u0000sr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxq\u0000~\u00001q\u0000~\u00006t\u0000\u0006stringq\u0000~\u0000\u00b8\u0001q\u0000~\u0000\u00bat\u0000\u000benume"
+"rationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002t\u0000\u0007Ind"
+"exedt\u0000\rParameterisedxq\u0000~\u0000<sq\u0000~\u0000=q\u0000~\u0000\u00b6q\u0000~\u0000Qsq\u0000~\u0000%t\u0000\u0004Kindt\u0000\u0000q\u0000"
+"~\u0000$sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTa"
+"blet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-c"
+"om.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005co"
+"untB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Expressi"
+"onPool;xp\u0000\u0000\u00005\u0001pq\u0000~\u0000\nq\u0000~\u0000\u001aq\u0000~\u0000Iq\u0000~\u0000Vq\u0000~\u0000cq\u0000~\u0000oq\u0000~\u0000|q\u0000~\u0000\u0084q\u0000~\u0000\u0090"
+"q\u0000~\u0000\u0098q\u0000~\u0000\u00a4q\u0000~\u0000\u0006q\u0000~\u0000xq\u0000~\u0000\u008cq\u0000~\u0000\tq\u0000~\u0000*q\u0000~\u0000Mq\u0000~\u0000Zq\u0000~\u0000gq\u0000~\u0000sq\u0000~\u0000\u0087"
+"q\u0000~\u0000\u009cq\u0000~\u0000\u00a8q\u0000~\u0000\u0005q\u0000~\u0000\bq\u0000~\u0000yq\u0000~\u0000\u008dq\u0000~\u0000\fq\u0000~\u0000\u0015q\u0000~\u0000Fq\u0000~\u0000Sq\u0000~\u0000`q\u0000~\u0000\u000e"
+"q\u0000~\u0000^q\u0000~\u0000lq\u0000~\u0000\u0081q\u0000~\u0000\u0095q\u0000~\u0000\u00a1q\u0000~\u0000\u0007q\u0000~\u0000\u00acq\u0000~\u0000\u0017q\u0000~\u0000Hq\u0000~\u0000Uq\u0000~\u0000bq\u0000~\u0000n"
+"q\u0000~\u0000{q\u0000~\u0000\u0083q\u0000~\u0000\u008fq\u0000~\u0000\u0097q\u0000~\u0000\u00a3q\u0000~\u0000wq\u0000~\u0000\u008bq\u0000~\u0000\u000bx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends net.sourceforge.czt.circus.jaxb.gen.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingContext context) {
            super(context, "--------------");
        }

        protected Unmarshaller(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessSignatureImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        attIdx = context.getAttribute("", "Kind");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.circus.jaxb.gen.impl.ProcessSignatureImpl)net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessSignatureImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ProcessName" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.circus.jaxb.gen.impl.ProcessSignatureImpl)net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessSignatureImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        spawnHandlerFromEnterElement((((net.sourceforge.czt.circus.jaxb.gen.impl.ProcessSignatureImpl)net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessSignatureImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                        return ;
                    case  2 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _StateType = ((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Signature" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _StateType = ((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Signature" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _StateType = ((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _StateType = ((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeImpl.class), 3, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  8 :
                        if (("ActionSignature" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 6;
                            return ;
                        }
                        if (("ActionSignature" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            _getActionSignature().add(((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("NameSet" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 9;
                            return ;
                        }
                        break;
                    case  6 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getActionSignature().add(((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureImpl.class), 7, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ActionName" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            _getActionSignature().add(((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureImpl.class), 7, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        _getActionSignature().add(((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureImpl.class), 7, ___uri, ___local, ___qname, __atts)));
                        return ;
                    case  4 :
                        if (("Signature" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 12;
                            return ;
                        }
                        if (("Signature" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getZSignature().add(((net.sourceforge.czt.z.jaxb.gen.impl.SignatureElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SignatureElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 5;
                        continue outer;
                    case  11 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  12 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getZSignature().add(((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 13, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("NameTypePair" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getZSignature().add(((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 13, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("NameTypePair" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getZSignature().add(((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 13, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        _getZSignature().add(((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 13, ___uri, ___local, ___qname, __atts)));
                        return ;
                    case  5 :
                        if (("Signature" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 12;
                            return ;
                        }
                        if (("Signature" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getZSignature().add(((net.sourceforge.czt.z.jaxb.gen.impl.SignatureElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SignatureElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ActionSignature" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 6;
                            return ;
                        }
                        if (("ActionSignature" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            _getActionSignature().add(((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 8;
                        continue outer;
                    case  9 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _NameSet = ((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl.class), 10, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("JokerRefName" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _NameSet = ((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl.class), 10, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("ZRefName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _NameSet = ((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl.class), 10, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("RefName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _NameSet = ((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl.class), 10, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("RefName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _NameSet = ((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl.class), 10, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _NameSet = ((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl.class), 10, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  1 :
                        if (("StateType" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 2;
                            return ;
                        }
                        break;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        attIdx = context.getAttribute("", "Kind");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        spawnHandlerFromLeaveElement((((net.sourceforge.czt.circus.jaxb.gen.impl.ProcessSignatureImpl)net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessSignatureImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  2 :
                        _StateType = ((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeImpl) spawnChildFromLeaveElement((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeImpl.class), 3, ___uri, ___local, ___qname));
                        return ;
                    case  6 :
                        _getActionSignature().add(((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureImpl) spawnChildFromLeaveElement((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureImpl.class), 7, ___uri, ___local, ___qname)));
                        return ;
                    case  4 :
                        state = 5;
                        continue outer;
                    case  11 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  7 :
                        if (("ActionSignature" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            context.popAttributes();
                            state = 8;
                            return ;
                        }
                        break;
                    case  3 :
                        if (("StateType" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            context.popAttributes();
                            state = 4;
                            return ;
                        }
                        break;
                    case  10 :
                        if (("NameSet" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            context.popAttributes();
                            state = 11;
                            return ;
                        }
                        break;
                    case  13 :
                        if (("Signature" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 5;
                            return ;
                        }
                        break;
                    case  12 :
                        _getZSignature().add(((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromLeaveElement((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 13, ___uri, ___local, ___qname)));
                        return ;
                    case  5 :
                        state = 8;
                        continue outer;
                    case  9 :
                        _NameSet = ((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl) spawnChildFromLeaveElement((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl.class), 10, ___uri, ___local, ___qname));
                        return ;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        if (("Kind" == ___local)&&("" == ___uri)) {
                            spawnHandlerFromEnterAttribute((((net.sourceforge.czt.circus.jaxb.gen.impl.ProcessSignatureImpl)net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessSignatureImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                            return ;
                        }
                        spawnHandlerFromEnterAttribute((((net.sourceforge.czt.circus.jaxb.gen.impl.ProcessSignatureImpl)net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessSignatureImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  2 :
                        _StateType = ((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeImpl.class), 3, ___uri, ___local, ___qname));
                        return ;
                    case  6 :
                        _getActionSignature().add(((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureImpl.class), 7, ___uri, ___local, ___qname)));
                        return ;
                    case  4 :
                        state = 5;
                        continue outer;
                    case  11 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  12 :
                        _getZSignature().add(((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 13, ___uri, ___local, ___qname)));
                        return ;
                    case  5 :
                        state = 8;
                        continue outer;
                    case  9 :
                        _NameSet = ((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl.class), 10, ___uri, ___local, ___qname));
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        attIdx = context.getAttribute("", "Kind");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        spawnHandlerFromLeaveAttribute((((net.sourceforge.czt.circus.jaxb.gen.impl.ProcessSignatureImpl)net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessSignatureImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  2 :
                        _StateType = ((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeImpl.class), 3, ___uri, ___local, ___qname));
                        return ;
                    case  6 :
                        _getActionSignature().add(((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureImpl.class), 7, ___uri, ___local, ___qname)));
                        return ;
                    case  4 :
                        state = 5;
                        continue outer;
                    case  11 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  12 :
                        _getZSignature().add(((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 13, ___uri, ___local, ___qname)));
                        return ;
                    case  5 :
                        state = 8;
                        continue outer;
                    case  9 :
                        _NameSet = ((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl.class), 10, ___uri, ___local, ___qname));
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  0 :
                            attIdx = context.getAttribute("", "Kind");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            spawnHandlerFromText((((net.sourceforge.czt.circus.jaxb.gen.impl.ProcessSignatureImpl)net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessSignatureImpl.this).new Unmarshaller(context)), 1, value);
                            return ;
                        case  2 :
                            _StateType = ((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeImpl) spawnChildFromText((net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeImpl.class), 3, value));
                            return ;
                        case  6 :
                            _getActionSignature().add(((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureImpl) spawnChildFromText((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureImpl.class), 7, value)));
                            return ;
                        case  4 :
                            state = 5;
                            continue outer;
                        case  11 :
                            revertToParentFromText(value);
                            return ;
                        case  12 :
                            _getZSignature().add(((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromText((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 13, value)));
                            return ;
                        case  5 :
                            state = 8;
                            continue outer;
                        case  9 :
                            _NameSet = ((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl) spawnChildFromText((net.sourceforge.czt.z.jaxb.gen.impl.ZRefNameListImpl.class), 10, value));
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
