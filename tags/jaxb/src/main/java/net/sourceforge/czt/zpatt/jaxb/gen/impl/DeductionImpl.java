//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.06.26 at 02:10:37 PM NZST 
//


package net.sourceforge.czt.zpatt.jaxb.gen.impl;

public class DeductionImpl
    extends net.sourceforge.czt.z.jaxb.gen.impl.TermImpl
    implements net.sourceforge.czt.zpatt.jaxb.gen.Deduction, com.sun.xml.bind.JAXBObject, net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallableObject, net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializable, net.sourceforge.czt.circus.jaxb.gen.impl.runtime.ValidatableObject
{

    protected com.sun.xml.bind.util.ListImpl _Binding;
    protected com.sun.xml.bind.util.ListImpl _Sequent;
    protected java.lang.String _Name;
    public final static java.lang.Class version = (net.sourceforge.czt.zpatt.jaxb.gen.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (net.sourceforge.czt.zpatt.jaxb.gen.Deduction.class);
    }

    protected com.sun.xml.bind.util.ListImpl _getBinding() {
        if (_Binding == null) {
            _Binding = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _Binding;
    }

    public java.util.List getBinding() {
        return _getBinding();
    }

    protected com.sun.xml.bind.util.ListImpl _getSequent() {
        if (_Sequent == null) {
            _Sequent = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _Sequent;
    }

    public java.util.List getSequent() {
        return _getSequent();
    }

    public java.lang.String getName() {
        return _Name;
    }

    public void setName(java.lang.String value) {
        _Name = value;
    }

    public net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingEventHandler createUnmarshaller(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingContext context) {
        return new net.sourceforge.czt.zpatt.jaxb.gen.impl.DeductionImpl.Unmarshaller(context);
    }

    public void serializeBody(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Binding == null)? 0 :_Binding.size());
        int idx2 = 0;
        final int len2 = ((_Sequent == null)? 0 :_Sequent.size());
        super.serializeBody(context);
        while (idx1 != len1) {
            if (_Binding.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Binding.get(idx1 ++)), "Binding");
            } else {
                context.startElement("http://czt.sourceforge.net/zpatt", "Binding");
                int idx_0 = idx1;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Binding.get(idx_0 ++)), "Binding");
                context.endNamespaceDecls();
                int idx_1 = idx1;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Binding.get(idx_1 ++)), "Binding");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Binding.get(idx1 ++)), "Binding");
                context.endElement();
            }
        }
        while (idx2 != len2) {
            if (_Sequent.get(idx2) instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Sequent.get(idx2 ++)), "Sequent");
            } else {
                context.startElement("http://czt.sourceforge.net/zpatt", "Sequent");
                int idx_2 = idx2;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Sequent.get(idx_2 ++)), "Sequent");
                context.endNamespaceDecls();
                int idx_3 = idx2;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Sequent.get(idx_3 ++)), "Sequent");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Sequent.get(idx2 ++)), "Sequent");
                context.endElement();
            }
        }
    }

    public void serializeAttributes(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Binding == null)? 0 :_Binding.size());
        int idx2 = 0;
        final int len2 = ((_Sequent == null)? 0 :_Sequent.size());
        if (_Name!= null) {
            context.startAttribute("", "Name");
            try {
                context.text(((java.lang.String) _Name), "Name");
            } catch (java.lang.Exception e) {
                net.sourceforge.czt.circus.jaxb.gen.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        super.serializeAttributes(context);
        while (idx1 != len1) {
            if (_Binding.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Binding.get(idx1 ++)), "Binding");
            } else {
                idx1 += 1;
            }
        }
        while (idx2 != len2) {
            if (_Sequent.get(idx2) instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Sequent.get(idx2 ++)), "Sequent");
            } else {
                idx2 += 1;
            }
        }
    }

    public void serializeURIs(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Binding == null)? 0 :_Binding.size());
        int idx2 = 0;
        final int len2 = ((_Sequent == null)? 0 :_Sequent.size());
        super.serializeURIs(context);
        while (idx1 != len1) {
            if (_Binding.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Binding.get(idx1 ++)), "Binding");
            } else {
                idx1 += 1;
            }
        }
        while (idx2 != len2) {
            if (_Sequent.get(idx2) instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Sequent.get(idx2 ++)), "Sequent");
            } else {
                idx2 += 1;
            }
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (net.sourceforge.czt.zpatt.jaxb.gen.Deduction.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv.grammar."
+"ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000\'com.sun.msv.grammar.trex.Ele"
+"mentPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/Na"
+"meClass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aigno"
+"reUndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003sr\u0000\u0011java.lan"
+"g.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\npp\u0000sq\u0000~\u0000\bppsr"
+"\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv"
+".grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u000fpsr\u0000 com.s"
+"un.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClas"
+"sq\u0000~\u0000\u000bxq\u0000~\u0000\u0003q\u0000~\u0000\u000fpsr\u00002com.sun.msv.grammar.Expression$AnyStri"
+"ngExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u000e\u0001q\u0000~\u0000\u0019sr\u0000 com.sun.msv.gra"
+"mmar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClas"
+"s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExpr"
+"ession\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u001aq\u0000~\u0000\u001fsr\u0000#com.sun.msv.grammar.Sim"
+"pleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fn"
+"amespaceURIq\u0000~\u0000!xq\u0000~\u0000\u001ct\u0000,net.sourceforge.czt.z.jaxb.gen.Term"
+".AnnsTypet\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000"
+"\bppsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002"
+"dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001d"
+"Lcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.datatyp"
+"e.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.Built"
+"inAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.Concrete"
+"Type\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000!L\u0000\btypeNameq\u0000~\u0000!L\u0000\nwhiteSpacet\u0000"
+".Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://w"
+"ww.w3.org/2001/XMLSchemat\u0000\u0005QNamesr\u00005com.sun.msv.datatype.xsd"
+".WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.data"
+"type.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.gra"
+"mmar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u000fpsr\u0000\u001b"
+"com.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000!L\u0000\fna"
+"mespaceURIq\u0000~\u0000!xpq\u0000~\u00002q\u0000~\u00001sq\u0000~\u0000 t\u0000\u0004typet\u0000)http://www.w3.org"
+"/2001/XMLSchema-instanceq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000\u0004Annst\u0000\u001ehttp://czt.sour"
+"ceforge.net/zmlq\u0000~\u0000\u001fsq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\bq\u0000~\u0000\u000fpsq\u0000~\u0000\bq\u0000"
+"~\u0000\u000fpsq\u0000~\u0000\bq\u0000~\u0000\u000fpsq\u0000~\u0000\bq\u0000~\u0000\u000fpsq\u0000~\u0000\bq\u0000~\u0000\u000fpsq\u0000~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bp"
+"psq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000>net.sourcef"
+"orge.czt.zpatt.jaxb.gen.JokerExprListBindingElementq\u0000~\u0000$sq\u0000~"
+"\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~"
+"\u0000 t\u0000=net.sourceforge.czt.zpatt.jaxb.gen.JokerRefNameBindingE"
+"lementq\u0000~\u0000$sq\u0000~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000"
+"\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000>net.sourceforge.czt.zpatt.jaxb.gen.Joker"
+"DeclListBindingElementq\u0000~\u0000$sq\u0000~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fp"
+"sq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000>net.sourceforge.czt.zpat"
+"t.jaxb.gen.JokerDeclNameBindingElementq\u0000~\u0000$sq\u0000~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~"
+"\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000:net.sour"
+"ceforge.czt.zpatt.jaxb.gen.JokerPredBindingElementq\u0000~\u0000$sq\u0000~\u0000"
+"\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000"
+" t\u0000:net.sourceforge.czt.zpatt.jaxb.gen.JokerExprBindingEleme"
+"ntq\u0000~\u0000$q\u0000~\u0000\u001fsq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\bq\u0000~\u0000\u000fpsq\u0000~\u0000\bq\u0000~\u0000\u000fpsq\u0000~"
+"\u0000\bq\u0000~\u0000\u000fpsq\u0000~\u0000\bq\u0000~\u0000\u000fpsq\u0000~\u0000\bq\u0000~\u0000\u000fpsq\u0000~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q"
+"\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000:net.sourceforge.czt"
+".zpatt.jaxb.gen.CalculateProvisoElementq\u0000~\u0000$sq\u0000~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000"
+"~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00005net.sou"
+"rceforge.czt.zpatt.jaxb.gen.PredSequentElementq\u0000~\u0000$sq\u0000~\u0000\nq\u0000~"
+"\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00005"
+"net.sourceforge.czt.zpatt.jaxb.gen.TypeProvisoElementq\u0000~\u0000$sq"
+"\u0000~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq"
+"\u0000~\u0000 t\u00006net.sourceforge.czt.zpatt.jaxb.gen.CheckProvisoElemen"
+"tq\u0000~\u0000$sq\u0000~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000"
+"\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000@net.sourceforge.czt.zpatt.jaxb.gen.LookupCons"
+"tDeclProvisoElementq\u0000~\u0000$sq\u0000~\u0000\nq\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\u0013q\u0000~\u0000\u000fpsq\u0000"
+"~\u0000\u0016q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000;net.sourceforge.czt.zpatt.j"
+"axb.gen.LookupPredProvisoElementq\u0000~\u0000$q\u0000~\u0000\u001fsq\u0000~\u0000\bppsq\u0000~\u0000\u0016q\u0000~\u0000"
+"\u000fpsq\u0000~\u0000\'q\u0000~\u0000\u000fpsr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxq\u0000~\u0000,q\u0000~\u00001t\u0000\u0006stringsr\u00005com.sun.msv.data"
+"type.xsd.WhiteSpaceProcessor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u00004\u0001q\u0000~\u00007"
+"sq\u0000~\u00008q\u0000~\u0000\u009bq\u0000~\u00001sq\u0000~\u0000 t\u0000\u0004Namet\u0000\u0000q\u0000~\u0000\u001fsr\u0000\"com.sun.msv.grammar"
+".ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar"
+"/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.Express"
+"ionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006pare"
+"ntt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000/\u0001pq\u0000~\u0000\u0015q\u0000~\u0000Iq"
+"\u0000~\u0000Oq\u0000~\u0000Uq\u0000~\u0000[q\u0000~\u0000aq\u0000~\u0000Cq\u0000~\u0000gq\u0000~\u0000tq\u0000~\u0000zq\u0000~\u0000\u0080q\u0000~\u0000\u0086q\u0000~\u0000\u008cq\u0000~\u0000nq"
+"\u0000~\u0000Aq\u0000~\u0000\u0092q\u0000~\u0000lq\u0000~\u0000\u0005q\u0000~\u0000%q\u0000~\u0000\u0007q\u0000~\u0000\u0006q\u0000~\u0000Dq\u0000~\u0000oq\u0000~\u0000Fq\u0000~\u0000qq\u0000~\u0000\u0010q"
+"\u0000~\u0000\u0096q\u0000~\u0000\tq\u0000~\u0000Eq\u0000~\u0000pq\u0000~\u0000\u0012q\u0000~\u0000Hq\u0000~\u0000Nq\u0000~\u0000Tq\u0000~\u0000Zq\u0000~\u0000`q\u0000~\u0000fq\u0000~\u0000Bq"
+"\u0000~\u0000sq\u0000~\u0000yq\u0000~\u0000\u007fq\u0000~\u0000\u0085q\u0000~\u0000\u008bq\u0000~\u0000\u0091q\u0000~\u0000mq\u0000~\u0000@q\u0000~\u0000kx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends net.sourceforge.czt.circus.jaxb.gen.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingContext context) {
            super(context, "-----------");
        }

        protected Unmarshaller(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return net.sourceforge.czt.zpatt.jaxb.gen.impl.DeductionImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.BindingImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.BindingImpl.class), 7, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.BindingImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.BindingImpl.class), 7, ___uri, ___local, ___qname, __atts)));
                        return ;
                    case  5 :
                        if (("JokerExprListBinding" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerExprListBindingElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerExprListBindingElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("JokerRefNameBinding" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerRefNameBindingElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerRefNameBindingElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("JokerDeclListBinding" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerDeclListBindingElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerDeclListBindingElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("JokerDeclNameBinding" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerDeclNameBindingElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerDeclNameBindingElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("JokerPredBinding" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerPredBindingElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerPredBindingElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("JokerExprBinding" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerExprBindingElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerExprBindingElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Binding" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 6;
                            return ;
                        }
                        if (("Binding" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.BindingElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.BindingElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("CalculateProviso" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.CalculateProvisoElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.CalculateProvisoElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("PredSequent" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredSequentElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredSequentElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("TypeProviso" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.TypeProvisoElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.TypeProvisoElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("CheckProviso" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.CheckProvisoElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.CheckProvisoElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("LookupConstDeclProviso" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.LookupConstDeclProvisoElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.LookupConstDeclProvisoElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("LookupPredProviso" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.LookupPredProvisoElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.LookupPredProvisoElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Sequent" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 9;
                            return ;
                        }
                        if (("Sequent" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 8;
                        continue outer;
                    case  4 :
                        if (("JokerExprListBinding" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerExprListBindingElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerExprListBindingElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("JokerRefNameBinding" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerRefNameBindingElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerRefNameBindingElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("JokerDeclListBinding" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerDeclListBindingElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerDeclListBindingElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("JokerDeclNameBinding" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerDeclNameBindingElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerDeclNameBindingElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("JokerPredBinding" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerPredBindingElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerPredBindingElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("JokerExprBinding" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerExprBindingElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerExprBindingElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Binding" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 6;
                            return ;
                        }
                        if (("Binding" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.BindingElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.BindingElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 5;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "Name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText1(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  3 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.TermImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.DeductionImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.TermImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.DeductionImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                        return ;
                    case  8 :
                        if (("CalculateProviso" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.CalculateProvisoElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.CalculateProvisoElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("PredSequent" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredSequentElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredSequentElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("TypeProviso" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.TypeProvisoElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.TypeProvisoElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("CheckProviso" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.CheckProvisoElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.CheckProvisoElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("LookupConstDeclProviso" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.LookupConstDeclProvisoElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.LookupConstDeclProvisoElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("LookupPredProviso" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.LookupPredProvisoElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.LookupPredProvisoElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Sequent" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 9;
                            return ;
                        }
                        if (("Sequent" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  9 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentImpl.class), 10, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SequentContext" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentImpl.class), 10, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SequentContext" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentImpl.class), 10, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentImpl.class), 10, ___uri, ___local, ___qname, __atts)));
                        return ;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Name = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  7 :
                        if (("Binding" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            context.popAttributes();
                            state = 5;
                            return ;
                        }
                        break;
                    case  6 :
                        _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.BindingImpl) spawnChildFromLeaveElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.BindingImpl.class), 7, ___uri, ___local, ___qname)));
                        return ;
                    case  10 :
                        if (("Sequent" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            context.popAttributes();
                            state = 8;
                            return ;
                        }
                        break;
                    case  5 :
                        state = 8;
                        continue outer;
                    case  4 :
                        state = 5;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "Name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText1(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  3 :
                        spawnHandlerFromLeaveElement((((net.sourceforge.czt.z.jaxb.gen.impl.TermImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.DeductionImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname);
                        return ;
                    case  8 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  9 :
                        _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentImpl) spawnChildFromLeaveElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentImpl.class), 10, ___uri, ___local, ___qname)));
                        return ;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.BindingImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.zpatt.jaxb.gen.impl.BindingImpl.class), 7, ___uri, ___local, ___qname)));
                        return ;
                    case  5 :
                        state = 8;
                        continue outer;
                    case  4 :
                        state = 5;
                        continue outer;
                    case  0 :
                        if (("Name" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  3 :
                        spawnHandlerFromEnterAttribute((((net.sourceforge.czt.z.jaxb.gen.impl.TermImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.DeductionImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname);
                        return ;
                    case  8 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  9 :
                        _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentImpl.class), 10, ___uri, ___local, ___qname)));
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.BindingImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.zpatt.jaxb.gen.impl.BindingImpl.class), 7, ___uri, ___local, ___qname)));
                        return ;
                    case  5 :
                        state = 8;
                        continue outer;
                    case  4 :
                        state = 5;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "Name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText1(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  3 :
                        spawnHandlerFromLeaveAttribute((((net.sourceforge.czt.z.jaxb.gen.impl.TermImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.DeductionImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname);
                        return ;
                    case  8 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  2 :
                        if (("Name" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  9 :
                        _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentImpl.class), 10, ___uri, ___local, ___qname)));
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  6 :
                            _getBinding().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.BindingImpl) spawnChildFromText((net.sourceforge.czt.zpatt.jaxb.gen.impl.BindingImpl.class), 7, value)));
                            return ;
                        case  1 :
                            state = 2;
                            eatText1(value);
                            return ;
                        case  5 :
                            state = 8;
                            continue outer;
                        case  4 :
                            state = 5;
                            continue outer;
                        case  0 :
                            attIdx = context.getAttribute("", "Name");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 3;
                                eatText1(v);
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                        case  3 :
                            spawnHandlerFromText((((net.sourceforge.czt.z.jaxb.gen.impl.TermImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.DeductionImpl.this).new Unmarshaller(context)), 4, value);
                            return ;
                        case  8 :
                            revertToParentFromText(value);
                            return ;
                        case  9 :
                            _getSequent().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentImpl) spawnChildFromText((net.sourceforge.czt.zpatt.jaxb.gen.impl.SequentImpl.class), 10, value)));
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
