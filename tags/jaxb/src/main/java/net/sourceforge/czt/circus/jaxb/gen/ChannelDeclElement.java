//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.06.26 at 02:10:37 PM NZST 
//


package net.sourceforge.czt.circus.jaxb.gen;


/**
 * Java content class for ChannelDecl element declaration.
 * <p>The following schema fragment specifies the expected content contained within this java content object. (defined at file:/research/czt/trunk/jaxb/build/xsd/Circus.xsd line 161)
 * <pre>&lt;p xmlns:Z="http://czt.sourceforge.net/zml" xmlns:CIRCUS="http://czt.sourceforge.net/circus" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:gnast="http://czt.sourceforge.net/gnast" xmlns:xml="http://www.w3.org/XML/1998/namespace" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb">
 * A channel declaration is a Z declaration that accepts generic types.
 * It represents the
 * &lt;b>SimpleCDeclaration&lt;/b> grammar rule.&lt;/p></pre>
 * 
 * <pre>&lt;p xmlns:Z="http://czt.sourceforge.net/zml" xmlns:CIRCUS="http://czt.sourceforge.net/circus" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:gnast="http://czt.sourceforge.net/gnast" xmlns:xml="http://www.w3.org/XML/1998/namespace" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb">
 * Channels can be declared either as typed or synchronisation.
 * They can als have generic types or come from a previously declared schema.
 * &lt;/p></pre>
 * 
 * <pre>&lt;p xmlns:Z="http://czt.sourceforge.net/zml" xmlns:CIRCUS="http://czt.sourceforge.net/circus" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:gnast="http://czt.sourceforge.net/gnast" xmlns:xml="http://www.w3.org/XML/1998/namespace" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb">
 * The structure of the complex type associated with this class is a follows:
 * 
 * &lt;ul>
 * &lt;li>Typed  channels = optional generics, nonempty list of declnames, no null Expr. &lt;/li>
 * &lt;li>Synch. channels = empty generics, nonempty list of declnames, null Expr. &lt;/li>
 * &lt;li>Schema channels = optional generics, null list of declnames, no null RefExpr. &lt;/li>
 * &lt;/ul>
 * This invariant is to be enforced by the parser, and further unfolded by the typechecker.
 * That is, channels declared through schemas must be expanded to their typed declaration form.
 * Such unfolding must take into account both sets of generic formals comming from the channel
 * declaration as well as the schema generic formals. In this sense, the user is allowed to
 * change the pattern of generic formals inside the schema through the generic formals of the
 * channel declaration (see
 * &lt;code>./parser/tests/cirus/channels.tex&lt;/code> for an example).&lt;/p></pre>
 * 
 * 
 * 
 * <p>
 * <pre>
 * &lt;element name="ChannelDecl" type="{http://czt.sourceforge.net/circus}ChannelDecl"/>
 * </pre>
 * 
 */
public interface ChannelDeclElement
    extends javax.xml.bind.Element, net.sourceforge.czt.circus.jaxb.gen.ChannelDecl
{


}
