//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.06.26 at 02:10:37 PM NZST 
//


package net.sourceforge.czt.circus.jaxb.gen.impl;

public class CommunicationImpl
    extends net.sourceforge.czt.z.jaxb.gen.impl.TermImpl
    implements net.sourceforge.czt.circus.jaxb.gen.Communication, com.sun.xml.bind.JAXBObject, net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallableObject, net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializable, net.sourceforge.czt.circus.jaxb.gen.impl.runtime.ValidatableObject
{

    protected net.sourceforge.czt.circus.jaxb.gen.CircusFieldList _ChanFields;
    protected java.math.BigInteger _MultiSych;
    protected net.sourceforge.czt.z.jaxb.gen.RefExpr _ChannelExpr;
    protected java.lang.String _CommKind;
    public final static java.lang.Class version = (net.sourceforge.czt.circus.jaxb.gen.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (net.sourceforge.czt.circus.jaxb.gen.Communication.class);
    }

    public net.sourceforge.czt.circus.jaxb.gen.CircusFieldList getChanFields() {
        return _ChanFields;
    }

    public void setChanFields(net.sourceforge.czt.circus.jaxb.gen.CircusFieldList value) {
        _ChanFields = value;
    }

    public java.math.BigInteger getMultiSych() {
        if (_MultiSych == null) {
            return javax.xml.bind.DatatypeConverter.parseInteger(com.sun.xml.bind.DatatypeConverterImpl.installHook("0"));
        } else {
            return _MultiSych;
        }
    }

    public void setMultiSych(java.math.BigInteger value) {
        _MultiSych = value;
    }

    public net.sourceforge.czt.z.jaxb.gen.RefExpr getChannelExpr() {
        return _ChannelExpr;
    }

    public void setChannelExpr(net.sourceforge.czt.z.jaxb.gen.RefExpr value) {
        _ChannelExpr = value;
    }

    public java.lang.String getCommKind() {
        if (_CommKind == null) {
            return "Synch";
        } else {
            return _CommKind;
        }
    }

    public void setCommKind(java.lang.String value) {
        _CommKind = value;
    }

    public net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingEventHandler createUnmarshaller(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingContext context) {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.CommunicationImpl.Unmarshaller(context);
    }

    public void serializeBody(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeBody(context);
        context.startElement("http://czt.sourceforge.net/circus", "ChannelExpr");
        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _ChannelExpr), "ChannelExpr");
        context.endNamespaceDecls();
        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _ChannelExpr), "ChannelExpr");
        context.endAttributes();
        context.childAsBody(((com.sun.xml.bind.JAXBObject) _ChannelExpr), "ChannelExpr");
        context.endElement();
        context.startElement("http://czt.sourceforge.net/circus", "ChanFields");
        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _ChanFields), "ChanFields");
        context.endNamespaceDecls();
        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _ChanFields), "ChanFields");
        context.endAttributes();
        context.childAsBody(((com.sun.xml.bind.JAXBObject) _ChanFields), "ChanFields");
        context.endElement();
    }

    public void serializeAttributes(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (_CommKind!= null) {
            context.startAttribute("", "CommKind");
            try {
                context.text(((java.lang.String) _CommKind), "CommKind");
            } catch (java.lang.Exception e) {
                net.sourceforge.czt.circus.jaxb.gen.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_MultiSych!= null) {
            context.startAttribute("", "MultiSych");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInteger(((java.math.BigInteger) _MultiSych)), "MultiSych");
            } catch (java.lang.Exception e) {
                net.sourceforge.czt.circus.jaxb.gen.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        super.serializeAttributes(context);
    }

    public void serializeURIs(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeURIs(context);
    }

    public java.lang.Class getPrimaryInterface() {
        return (net.sourceforge.czt.circus.jaxb.gen.Communication.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv."
+"grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000\'com.sun.msv.grammar."
+"trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/gr"
+"ammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003sr\u0000\u0011"
+"java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000bpp\u0000sq"
+"\u0000~\u0000\tppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom"
+".sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u0010ps"
+"r\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\t"
+"nameClassq\u0000~\u0000\fxq\u0000~\u0000\u0003q\u0000~\u0000\u0010psr\u00002com.sun.msv.grammar.Expression"
+"$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u000f\u0001q\u0000~\u0000\u001asr\u0000 com.sun"
+".msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar."
+"NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$Eps"
+"ilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u001bq\u0000~\u0000 sr\u0000#com.sun.msv.gra"
+"mmar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/Str"
+"ing;L\u0000\fnamespaceURIq\u0000~\u0000\"xq\u0000~\u0000\u001dt\u0000,net.sourceforge.czt.z.jaxb."
+"gen.Term.AnnsTypet\u0000+http://java.sun.com/jaxb/xjc/dummy-eleme"
+"ntssq\u0000~\u0000\tppsq\u0000~\u0000\u0017q\u0000~\u0000\u0010psr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000"
+"\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv"
+".datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.x"
+"sd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd."
+"ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDataty"
+"peImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000\"L\u0000\btypeNameq\u0000~\u0000\"L\u0000\nwhit"
+"eSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 "
+"http://www.w3.org/2001/XMLSchemat\u0000\u0005QNamesr\u00005com.sun.msv.data"
+"type.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun."
+"msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun"
+".msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000"
+"~\u0000\u0010psr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000"
+"~\u0000\"L\u0000\fnamespaceURIq\u0000~\u0000\"xpq\u0000~\u00003q\u0000~\u00002sq\u0000~\u0000!t\u0000\u0004typet\u0000)http://ww"
+"w.w3.org/2001/XMLSchema-instanceq\u0000~\u0000 sq\u0000~\u0000!t\u0000\u0004Annst\u0000\u001ehttp://"
+"czt.sourceforge.net/zmlq\u0000~\u0000 sq\u0000~\u0000\u000bpp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000bpp\u0000sq\u0000~\u0000\t"
+"ppsq\u0000~\u0000\u0014q\u0000~\u0000\u0010psq\u0000~\u0000\u0017q\u0000~\u0000\u0010pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u0000&net.source"
+"forge.czt.z.jaxb.gen.RefExprq\u0000~\u0000%sq\u0000~\u0000\tppsq\u0000~\u0000\u0017q\u0000~\u0000\u0010pq\u0000~\u0000+q\u0000"
+"~\u0000;q\u0000~\u0000 sq\u0000~\u0000!t\u0000\u000bChannelExprt\u0000!http://czt.sourceforge.net/ci"
+"rcussq\u0000~\u0000\u000bpp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000bpp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000\u0014q\u0000~\u0000\u0010psq\u0000~\u0000\u0017q\u0000~\u0000"
+"\u0010pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u00003net.sourceforge.czt.circus.jaxb.ge"
+"n.CircusFieldListq\u0000~\u0000%sq\u0000~\u0000\tppsq\u0000~\u0000\u0017q\u0000~\u0000\u0010pq\u0000~\u0000+q\u0000~\u0000;q\u0000~\u0000 sq\u0000"
+"~\u0000!t\u0000\nChanFieldsq\u0000~\u0000Msq\u0000~\u0000\tppsq\u0000~\u0000\u0017q\u0000~\u0000\u0010psq\u0000~\u0000(ppsr\u0000)com.sun"
+".msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLja"
+"va/util/Set;xr\u00009com.sun.msv.datatype.xsd.DataTypeWithValueCo"
+"nstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTyp"
+"eWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\b"
+"baseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fconcr"
+"eteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;L\u0000\tfacetNam"
+"eq\u0000~\u0000\"xq\u0000~\u0000/q\u0000~\u0000Mt\u0000\bCommKindsr\u00005com.sun.msv.datatype.xsd.Whi"
+"teSpaceProcessor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u00005\u0000\u0000sr\u0000#com.sun.msv."
+"datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxq\u0000~\u0000-q\u0000~\u0000"
+"2t\u0000\u0006stringq\u0000~\u0000f\u0001q\u0000~\u0000ht\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095"
+"\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0005Syncht\u0000\u0006Outputt\u0000\u0005Mixedt\u0000\u0005Inputxq\u0000~"
+"\u00008sq\u0000~\u00009q\u0000~\u0000dq\u0000~\u0000Msq\u0000~\u0000!t\u0000\bCommKindt\u0000\u0000q\u0000~\u0000 sq\u0000~\u0000\tppsq\u0000~\u0000\u0017q\u0000~"
+"\u0000\u0010psq\u0000~\u0000(ppsr\u0000/com.sun.msv.datatype.xsd.NonNegativeIntegerTy"
+"pe\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000$com.sun.msv.datatype.xsd.IntegerType\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0000xr\u0000+com.sun.msv.datatype.xsd.IntegerDerivedType\u0099\u00f1]\u0090&6k\u00be\u0002"
+"\u0000\u0001L\u0000\nbaseFacetsq\u0000~\u0000axq\u0000~\u0000-q\u0000~\u00002t\u0000\u0012nonNegativeIntegerq\u0000~\u00006sr\u0000"
+"*com.sun.msv.datatype.xsd.MinInclusiveFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#co"
+"m.sun.msv.datatype.xsd.RangeFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\nlimitValuet\u0000\u0012"
+"Ljava/lang/Object;xq\u0000~\u0000_ppq\u0000~\u00006\u0000\u0000sq\u0000~\u0000yq\u0000~\u00002t\u0000\u0007integerq\u0000~\u00006s"
+"r\u0000,com.sun.msv.datatype.xsd.FractionDigitsFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001I\u0000"
+"\u0005scalexr\u0000;com.sun.msv.datatype.xsd.DataTypeWithLexicalConstr"
+"aintFacetT\u0090\u001c>\u001azb\u00ea\u0002\u0000\u0000xq\u0000~\u0000`ppq\u0000~\u00006\u0001\u0000sr\u0000#com.sun.msv.datatype."
+"xsd.NumberType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000-q\u0000~\u00002t\u0000\u0007decimalq\u0000~\u00006q\u0000~\u0000\u0087t\u0000\u000ef"
+"ractionDigits\u0000\u0000\u0000\u0000q\u0000~\u0000\u0081t\u0000\fminInclusivesr\u0000)com.sun.msv.datatyp"
+"e.xsd.IntegerValueType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0005valueq\u0000~\u0000\"xr\u0000\u0010java.lang."
+"Number\u0086\u00ac\u0095\u001d\u000b\u0094\u00e0\u008b\u0002\u0000\u0000xpt\u0000\u00010q\u0000~\u00008sq\u0000~\u00009q\u0000~\u0000|q\u0000~\u00002sq\u0000~\u0000!t\u0000\tMultiSy"
+"chq\u0000~\u0000tq\u0000~\u0000 sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHas"
+"h;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed"
+"\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar"
+"/ExpressionPool;xp\u0000\u0000\u0000\u0013\u0001pq\u0000~\u0000\u0016q\u0000~\u0000Eq\u0000~\u0000Rq\u0000~\u0000&q\u0000~\u0000Iq\u0000~\u0000Vq\u0000~\u0000uq"
+"\u0000~\u0000\bq\u0000~\u0000\u0011q\u0000~\u0000Bq\u0000~\u0000Oq\u0000~\u0000\nq\u0000~\u0000\u0013q\u0000~\u0000Dq\u0000~\u0000Qq\u0000~\u0000\u0005q\u0000~\u0000\u0006q\u0000~\u0000Zq\u0000~\u0000\u0007x"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends net.sourceforge.czt.circus.jaxb.gen.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingContext context) {
            super(context, "--------------");
        }

        protected Unmarshaller(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return net.sourceforge.czt.circus.jaxb.gen.impl.CommunicationImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  13 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  3 :
                        attIdx = context.getAttribute("", "MultiSych");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText1(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  11 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _ChanFields = ((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl.class), 12, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("InputField" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            _ChanFields = ((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl.class), 12, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("OutputField" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            _ChanFields = ((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl.class), 12, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("DotField" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            _ChanFields = ((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl.class), 12, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Field" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            _ChanFields = ((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl.class), 12, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Field" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            _ChanFields = ((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl.class), 12, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _ChanFields = ((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl.class), 12, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  7 :
                        if (("ChannelExpr" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 8;
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "CommKind");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText2(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  10 :
                        if (("ChanFields" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 11;
                            return ;
                        }
                        break;
                    case  8 :
                        attIdx = context.getAttribute("", "Explicit");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "Mixfix");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _ChannelExpr = ((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.class), 9, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("JokerRefName" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _ChannelExpr = ((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.class), 9, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("ZRefName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _ChannelExpr = ((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.class), 9, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("RefName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _ChannelExpr = ((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.class), 9, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("RefName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _ChannelExpr = ((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.class), 9, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _ChannelExpr = ((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.class), 9, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  6 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.TermImpl)net.sourceforge.czt.circus.jaxb.gen.impl.CommunicationImpl.this).new Unmarshaller(context)), 7, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.TermImpl)net.sourceforge.czt.circus.jaxb.gen.impl.CommunicationImpl.this).new Unmarshaller(context)), 7, ___uri, ___local, ___qname, __atts);
                        return ;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _MultiSych = javax.xml.bind.DatatypeConverter.parseInteger(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _CommKind = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  13 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  3 :
                        attIdx = context.getAttribute("", "MultiSych");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText1(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  11 :
                        _ChanFields = ((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl) spawnChildFromLeaveElement((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl.class), 12, ___uri, ___local, ___qname));
                        return ;
                    case  12 :
                        if (("ChanFields" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            context.popAttributes();
                            state = 13;
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "CommKind");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText2(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  8 :
                        attIdx = context.getAttribute("", "Explicit");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "Mixfix");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _ChannelExpr = ((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl) spawnChildFromLeaveElement((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.class), 9, ___uri, ___local, ___qname));
                        return ;
                    case  9 :
                        if (("ChannelExpr" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            context.popAttributes();
                            state = 10;
                            return ;
                        }
                        break;
                    case  6 :
                        spawnHandlerFromLeaveElement((((net.sourceforge.czt.z.jaxb.gen.impl.TermImpl)net.sourceforge.czt.circus.jaxb.gen.impl.CommunicationImpl.this).new Unmarshaller(context)), 7, ___uri, ___local, ___qname);
                        return ;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  13 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  3 :
                        if (("MultiSych" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  11 :
                        _ChanFields = ((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl.class), 12, ___uri, ___local, ___qname));
                        return ;
                    case  0 :
                        if (("CommKind" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  8 :
                        if (("Explicit" == ___local)&&("" == ___uri)) {
                            _ChannelExpr = ((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.class), 9, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("Mixfix" == ___local)&&("" == ___uri)) {
                            _ChannelExpr = ((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.class), 9, ___uri, ___local, ___qname));
                            return ;
                        }
                        _ChannelExpr = ((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.class), 9, ___uri, ___local, ___qname));
                        return ;
                    case  6 :
                        spawnHandlerFromEnterAttribute((((net.sourceforge.czt.z.jaxb.gen.impl.TermImpl)net.sourceforge.czt.circus.jaxb.gen.impl.CommunicationImpl.this).new Unmarshaller(context)), 7, ___uri, ___local, ___qname);
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  13 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  3 :
                        attIdx = context.getAttribute("", "MultiSych");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText1(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  2 :
                        if (("CommKind" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  11 :
                        _ChanFields = ((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl.class), 12, ___uri, ___local, ___qname));
                        return ;
                    case  5 :
                        if (("MultiSych" == ___local)&&("" == ___uri)) {
                            state = 6;
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "CommKind");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText2(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  8 :
                        attIdx = context.getAttribute("", "Explicit");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "Mixfix");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _ChannelExpr = ((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.class), 9, ___uri, ___local, ___qname));
                        return ;
                    case  6 :
                        spawnHandlerFromLeaveAttribute((((net.sourceforge.czt.z.jaxb.gen.impl.TermImpl)net.sourceforge.czt.circus.jaxb.gen.impl.CommunicationImpl.this).new Unmarshaller(context)), 7, ___uri, ___local, ___qname);
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  13 :
                            revertToParentFromText(value);
                            return ;
                        case  3 :
                            attIdx = context.getAttribute("", "MultiSych");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 6;
                                eatText1(v);
                                continue outer;
                            }
                            state = 6;
                            continue outer;
                        case  4 :
                            state = 5;
                            eatText1(value);
                            return ;
                        case  11 :
                            _ChanFields = ((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl) spawnChildFromText((net.sourceforge.czt.circus.jaxb.gen.impl.CircusFieldListImpl.class), 12, value));
                            return ;
                        case  0 :
                            attIdx = context.getAttribute("", "CommKind");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 3;
                                eatText2(v);
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                        case  1 :
                            state = 2;
                            eatText2(value);
                            return ;
                        case  8 :
                            attIdx = context.getAttribute("", "Explicit");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "Mixfix");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _ChannelExpr = ((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl) spawnChildFromText((net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.class), 9, value));
                            return ;
                        case  6 :
                            spawnHandlerFromText((((net.sourceforge.czt.z.jaxb.gen.impl.TermImpl)net.sourceforge.czt.circus.jaxb.gen.impl.CommunicationImpl.this).new Unmarshaller(context)), 7, value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
