/*
  Copyright (C) 2005, 2006, 2007 Petra Malik
  This file is part of the czt project.

  The czt project contains free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  The czt project is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with czt; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.rules.ast;

import java.util.HashMap;
import java.util.Map;

import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.zpatt.ast.*;
import net.sourceforge.czt.zpatt.impl.ZpattFactoryImpl;

/**
 * Makes sure that Joker are only created once.
 *
 * @author Petra Malik
 */
public class ProverFactory
  extends ZpattFactoryImpl
{
  private static int id_ = 0;
#foreach ($j in $jokers)
  private Map<String, ${j.ClassName}> m${j.Name}s_ =
    new HashMap<String, ${j.ClassName}>();
#end

#foreach ($j in $jokers)
  /**
   * Throws an UnsupportedOperationException.
   */
  public ${j.Name} create${j.Name}()
  {
    throw new UnsupportedOperationException();
  }

  public ${j.Name} create${j.Name}(String name, String id)
  {
    ${j.ClassName} result = m${j.Name}s_.get(name);
    if (result == null) {
      String newId = "" + id_++;
      result = new  ${j.ClassName}(name, newId);
      m${j.Name}s_.put(name, result);
    }
    return result;
  }

  public ${j.BindingName} create${j.BindingName}()
  {
    String message =
      "The ${j.Name} for the new ${j.BindingName} must be given";
    throw new UnsupportedOperationException(message);
  }

  public ${j.BindingName} create${j.BindingName}(${j.Name} binding,
    ${j.TypeName} v${j.TypeName})
  {
    String name = binding.getName();
    ${j.ClassName} joker = m${j.Name}s_.get(name);
    if (joker == null) {
      throw new IllegalArgumentException("Unknown joker " + name);
    }
    return joker.getBinding();
  }

#end

  public LookupConstDeclProviso
  createLookupConstDeclProviso(SequentContext sequentContext,
                               Expr leftExpr,
                               Expr rightExpr)
  {
    LookupConstDeclProviso proviso = new ProverLookupConstDeclProviso();
    proviso.setSequentContext(sequentContext);
    proviso.setLeftExpr(leftExpr);
    proviso.setRightExpr(rightExpr);
    return proviso;
  }

  public CalculateProviso
  createCalculateProviso(SequentContext sequentContext,
                         Expr leftExpr,
                         Expr rightExpr)
  {
    CalculateProviso proviso = new ProverCalculateProviso();
    proviso.setSequentContext(sequentContext);
    proviso.setLeftExpr(leftExpr);
    proviso.setRightExpr(rightExpr);
    return proviso;
  }
}
