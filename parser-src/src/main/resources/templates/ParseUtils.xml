<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (C) 2003, 2004, 2005, 2006, 2007 Petra Malik
     Copyright (C) 2003, 2004, 2005 Tim Miller
     This file is part of the czt project.
     
     The czt project contains free software;
     you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     
     The czt project is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with czt; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     -->

<utils xmlns:add="http://czt.sourceforge.net/templates/additional">
package <package/>;

import java.io.*;
import java.net.URL;
import java.util.Properties;
import java.util.logging.Logger;
import org.xml.sax.InputSource;

import net.sourceforge.czt.base.ast.Term;
import net.sourceforge.czt.base.util.UnmarshalException;
import net.sourceforge.czt.parser.util.ParseException;
import net.sourceforge.czt.session.*;
import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.util.CztLogger;
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.util.ZString;
import net.sourceforge.czt.z.util.ZUtils;

import java.util.Set;
import java.util.HashSet;
import net.sourceforge.czt.parser.util.OpTable;
import net.sourceforge.czt.parser.util.ThmTable;

<add:z>
import net.sourceforge.czt.z.jaxb.JaxbXmlReader;
</add:z>
<add:zpatt>
import net.sourceforge.czt.zpatt.jaxb.JaxbXmlReader;
</add:zpatt>
<add:circuspatt>
import net.sourceforge.czt.circuspatt.jaxb.JaxbXmlReader;
</add:circuspatt>
<add:circus>
import net.sourceforge.czt.circus.jaxb.JaxbXmlReader;
</add:circus>
<add:oz>
import net.sourceforge.czt.oz.jaxb.JaxbXmlReader;
</add:oz>
<add:tcoz>
import net.sourceforge.czt.tcoz.jaxb.JaxbXmlReader;
</add:tcoz>
<add:zeves>
import net.sourceforge.czt.z.jaxb.JaxbXmlReader;
</add:zeves>

/**
 * Utilities for parsing specifications.
 *
 * @author Petra Malik, Tim Miller, Leo Freitas
 */
public class <class/> extends AbstractCommand
{

  public static Term parse(Source source,
                           SectionInfo sectInfo,
                           Properties properties)
    throws ParseException, IOException, UnmarshalException
  {
    traceLog("PU-parse-source = " + source);
    Term result = null;
    if (source.getMarkup() == Markup.LATEX) {
      LatexParser parser = new LatexParser(source, sectInfo, properties);
      result = parser.parse();
    }
    else if (source.getMarkup() == Markup.UNICODE) {
      UnicodeParser parser = new UnicodeParser(source, sectInfo, properties);
      result = parser.parse();
    }
    else if (source.getMarkup() == Markup.ZML) {
      JaxbXmlReader reader = new JaxbXmlReader();
      result = reader.read(new InputSource(source.getReader()));
      if (result instanceof Spec) {
        Spec spec = (Spec) result;
        for (Sect sect : spec.getSect()) {
          if (sect instanceof ZSect) {
            ZSect zSect = (ZSect) sect;
            sectInfo.put(new Key&lt;ZSect&gt;(zSect.getName(), ZSect.class), zSect, null);
          }
        }
      }
      else if (result instanceof ZSect) {
        ZSect zSect =  (ZSect) result;
        sectInfo.put(new Key&lt;ZSect&gt;(zSect.getName(), ZSect.class), zSect, null);
      }
    }
    else {
      throw new UnsupportedOperationException();
    }
    assert result != null;
    traceLog("PU-parse-result = " + result.getClass().getSimpleName());
    return result;
  }

  public static Term parse(Source source, SectionInfo sectInfo)
    throws ParseException, IOException, UnmarshalException
  {
    return parse(source, sectInfo, new Properties());
  }

  /** Parse a Source string/file as a Z Predicate.
   *  @param src The String or File etc. to be parsed.
   *  @param section The Z section name (in Unicode)
   *                 to parse within (null=standard_toolkit).
   *  @param sectman A section manager to use.  Must be non-null.
   *
   * @throws IOException if there are errors reading file/url inputs
   * @throws CommandException if the predicate cannot be parsed.
   */
  public static Pred parsePred(Source src, String section,
			       /*@non_null@*/SectionManager sectman) 
    throws IOException, CommandException
  {
    // TODO: Add backslash in front of underscores
    String parent = section;
    String name = "CZT_parsePred_tmp1433589372849";
    StringBuffer buf = new StringBuffer();
    if (src.getMarkup() == Markup.LATEX) {
      if (parent == null)
        parent = "standard_toolkit";
      buf.append("\\begin{zsection}\\SECTION ");
      buf.append(name);
      buf.append(" \\parents ");
      buf.append(parent.replaceAll("_", "\\\\_"));
      buf.append("\\end{zsection} ");
      buf.append("\\begin{axdef} \\where\n");
      Reader reader = src.getReader();
      int ch = reader.read();
      while (ch != -1) {
        buf.appendCodePoint(ch);
        ch = reader.read();
      }
      buf.append("\n\\end{axdef}\n");
    }
    else {
      if (parent == null)
        parent = "standard_toolkit";
      buf.append(ZString.ZED);
      buf.append(" section ");
      buf.append(name);
      buf.append(" parents ");
      buf.append(parent);
      buf.append(ZString.END);
      buf.append(ZString.AX);
      buf.append(ZString.BAR);
      buf.append(ZString.NL);
      Reader reader = src.getReader();
      int ch = reader.read();
      while (ch != -1) {
        buf.appendCodePoint(ch);
        ch = reader.read();
      }
      buf.append(ZString.NL);
      buf.append(ZString.END);
    }
    // we create a temporary sectman so that this temp section does not
    //  clutter up the original section manager.
    SectionManager tmpsectman = (SectionManager) sectman.clone();
    Source input = new StringSource(buf.toString());
    input.setMarkup(src.getMarkup());
    input.setEncoding(src.getEncoding());
    tmpsectman.put(new Key&lt;Source&gt;(name, Source.class), input);
    // use the parser itself to create objects - makes easier section management.
    Spec spec = tmpsectman.get(new Key&lt;Spec&gt;(name, Spec.class));
    AxPara axPara = firstAxPara(spec);
    assert axPara != null;
    return axPara.getZSchText().getPred();
  }

  private static AxPara firstAxPara(Spec spec)
  {
    ZSect sect = (ZSect) spec.getSect().get(0);
    for (Object p : ZUtils.assertZParaList(sect.getParaList())) {
      if (p instanceof AxPara) {
        return (AxPara) p;
      }
    }
    return null;
  }

  /** Parse a Source string/file as a Z Expression.
   *  @param src The String or File etc. to be parsed.
   *  @param section The Z section (in Unicode)
   *                 to parse within (null=standard_toolkit).
   *  @param sectman A section manager to use.  Must be non-null.
   *
   * @throws IOException if there are errors reading file/url inputs
   * @throws CommandException if the expression cannot be parsed.
   */
  public static Expr parseExpr(Source src, String section,
			       /*@non_null@*/SectionManager sectman) 
    throws IOException, CommandException
  {
    String parent = section;
    String name = "CZT_parseExpr_tmp1433589372849";
    StringBuffer buf = new StringBuffer();
    if (src.getMarkup() == Markup.LATEX) {
      if (parent == null)
        parent = "standard_toolkit";
      buf.append("\\begin{zsection}\\SECTION ");
      buf.append(name);
      buf.append(" \\parents ");
      buf.append(parent.replaceAll("_", "\\\\_"));
      buf.append("\\end{zsection} ");
      buf.append("\\begin{axdef} result == \n");
      Reader reader = src.getReader();
      int ch = reader.read();
      while (ch != -1) {
        buf.appendCodePoint(ch);
        ch = reader.read();
      }
      buf.append("\n\\end{axdef}\n");
    }
    else {
      String message = "Unicode inputs not implemented yet";
      throw new UnsupportedOperationException(message);
    }
    // we create a temporary sectman so that this temp section does not
    //  clutter up the original section manager.
    SectionManager tmpsectman = (SectionManager)sectman.clone();
    Source input = new StringSource(buf.toString());
    input.setMarkup(src.getMarkup());
    input.setEncoding(src.getEncoding());
    tmpsectman.put(new Key&lt;Source&gt;(name, Source.class), input);
    // Use the parser itself to create the objects - this makes section management easier
    Spec spec = tmpsectman.get(new Key&lt;Spec&gt;(name, Spec.class));
    AxPara axPara = firstAxPara(spec);
    assert axPara != null;
    ConstDecl cdecl = (ConstDecl) axPara.getZSchText().getZDeclList().get(0);
    return cdecl.getExpr();
  }

  /**
   * Determine the markup of a file.
   */
  public static Markup getMarkup(String filename)
  {
    Markup result = null;
    if (filename.endsWith(".tex") || filename.endsWith(".TEX") ||
        filename.endsWith(".zed") || filename.endsWith(".ZED")) {
      result = Markup.LATEX;
    }
    else if (filename.endsWith("8") || filename.endsWith("16")) {
      result = Markup.UNICODE;
    }
    return result;
  }

  /**
   * Get a &lt;code&gt;Command&lt;/code&gt; object for use 
   * in &lt;code&gt;SectionManager&lt;/code&gt;
   *
   * @return A command for parsing specifications.
   */
  public static Command getCommand()
  {
    return new ParseUtils();
  }

  // SECTION MANAGEMENT METHODS


  /**
   * Given a ZSection, it calculates the dependency keys from all parents, for
   * the given Key information type T
   * @param &lt;T&gt;
   * @param term the ZSection to calculate parents from
   * @param type the Key type
   * @return set of keys with given type
   */
  public static /* &lt;T&gt; */ Set/* &lt;Key&lt;T&gt;&gt; */ calculateDependencies(ZSect term, Class/* &lt;T&gt; */ type)
  {
    Set/* &lt;Key&lt;T&gt;&gt; */ dependencies = new HashSet/* &lt;Key&lt;T&gt;&gt; */();
    for (Parent parent : term.getParent())
    {
      dependencies.add(new Key/* &lt;T&gt; */(parent.getWord(), type));
    }
    return dependencies;
  }

  /**
   * For non-parsed ZSect (e.g., created on-the-fly by tools), one needs to update
   * a given section manager in a particular order. This method produces a similar
   * effect as does the parser when processing Source(s). see DomainChecker for use.
   * @param sectInfo section manager to update
   * @param nonParsedZSect on-the-fly ZSect to add
   * @throws CommandException in case some command fails
   */
  @SuppressWarnings("unchecked")
  public static void updateSectManager(net.sourceforge.czt.session.SectionInfo sectInfo, ZSect nonParsedZSect) throws CommandException
  {
    assert sectInfo != null &amp;&amp; nonParsedZSect != null;

    // get info + log data
    final String sectName = nonParsedZSect.getName();
    traceLog("PU-SMUPD-ZSECT = " + sectName);

    // tell the section manager about the presence of this new Z section
    // no need to parse, we know it is okay - it's been constructed.
    sectInfo.put(new Key&lt;ZSect&gt;(sectName, ZSect.class), nonParsedZSect,
            calculateDependencies(nonParsedZSect, ThmTable.class));

    // ONLY AFTER ADDING ZSect: calculate a OpTable for it (see Op/ThmTableCommand protocols).
    try
    {
      sectInfo.get(new Key&lt;OpTable&gt;(sectName, OpTable.class));
      sectInfo.get(new Key&lt;ThmTable&gt;(sectName, ThmTable.class));
    }
    catch (CommandException e)
    {
      final String msg = "PU-CMDEXP-TBL = " + e.getCause();
      traceLog(msg);
      throw e;
    }
  }

  // Command METHODS

  /**
   * &lt;p&gt;
   * This command parses the given ZSection or Specification with associated named source.
   * There are two cases: manager update of Z sections of cached Spec added on the fly, and
   * parsing of a named Source, most commonly FileSources.
   * &lt;/p&gt;
   * &lt;p&gt;
   * For the latter, the parser updates manager with ZSect and other resources, whereas
   * the command updates the manager in case the resource is a Spec (e.g., it could be
   * just a ZSect or even Term like Expr or Pred). If the Source resource cannot be found,
   * or if a parsing error occurs, a CommandException is raised with appropriate underlying cause.
   * &lt;/p&gt;
   *
   * -pre name.equals(ZSect.name) or name.equals(Spec.filename) or manager.isCached(Key(name,Spec))
   * -pre !manager.isCached(Key(name, Spec))    implies Okay(manager.get(Key(name, Source))
   * -post  manager.isCached(Key(name, Spec))   implies forall z: ZSect in Spec : manager.put(Key(z.name, ZSect))
   * -post !manager.isCached(Key(name, Spec))
   *       Okay(manager.get(Key(name, Source))) implies Parse(Key(name,Source)) and manager.put(Key(name, Spec))
   * @param name ZSect or Spec resource Source name
   * @param manager section manager database
   * @return irrelevant (!)
   * @throws CommandException if named Source resource cannot be found (SourceLocatorException) or
   *  if a parsing exception occurs, which can be for various reasons (ParseException, IOException, etc).
   */
  @Override
  public boolean compute(String name, SectionManager manager)
    throws CommandException
  {
    // create a Spec key for the given name and check if it's cached,
    // in which case, all of its ZSect are put to the manager. This
    // happens when a Spec is created manually (e.g., does not come
    // from parsing). Parsed ZSects are added by Parser.xml@updateZSect
    traceLog("PU-compute-name = " + name);
    Key&lt;Spec&gt; key = new Key&lt;Spec&gt;(name, Spec.class);
    if (manager.isCached(key)) {
      Spec spec = manager.get(key);
      for (Sect sect : spec.getSect()) {
        if (sect instanceof ZSect) {
          ZSect zsect = (ZSect) sect;
          manager.put(new Key&lt;ZSect&gt;(zsect.getName(), ZSect.class),
                      zsect);

        }
      }
      final String msg = "PU-SPEC-ONFLY-ZSECT = put ZSect for on-the-fly Spec " + name;
      traceLog(msg);
      return true;
    }
    try {
      // the usual case, Spec comes from some Source and is parsed.
      boolean result = false;
      Source source = manager.get(new Key&lt;Source&gt;(name, Source.class));
      // If we find the source, parse it and add Spec to the manager
      // The Parser.xml adds all ZSects (e.g., see updateZSect).
      if (source != null) {
        Term term = ParseUtils.parse(source, manager, manager.getProperties());
        if (term instanceof Spec) {
          manager.put(new Key&lt;Spec&gt;(name, Spec.class), (Spec) term);
        }
        result = term != null;
        final String msg = "PU-PARSED = parse " + (result ? "okay. Put " + term.getClass().getSimpleName() + " to SM." : "failed!");
        traceLog(msg);
      }
      // What if result is false? The SM protocol does not use this flag! Why keep it? [Leo]
      return result;
    }
    catch (ParseException exception) {
      throw new CommandException(exception);
    }
    catch (IOException exception) {
      throw new CommandException(exception);
    }
    catch (UnmarshalException exception) {
      throw new CommandException(exception);
    }    
  }
}
</utils>
