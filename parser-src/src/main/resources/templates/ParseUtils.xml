<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (C) 2003, 2004, 2005, 2006, 2007 Petra Malik
     Copyright (C) 2003, 2004, 2005 Tim Miller
     This file is part of the czt project.
     
     The czt project contains free software;
     you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     
     The czt project is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with czt; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     -->

<utils xmlns:add="http://czt.sourceforge.net/templates/additional">
package <package/>;

import java.io.IOException;
import java.io.Reader;
import java.util.Properties;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.xml.sax.InputSource;

import net.sourceforge.czt.base.ast.Term;
import net.sourceforge.czt.base.util.UnmarshalException;
import net.sourceforge.czt.parser.util.ParseException;
import net.sourceforge.czt.z.util.Factory;
import net.sourceforge.czt.z.util.Version;
import net.sourceforge.czt.z.util.ZString;
import net.sourceforge.czt.z.util.ZUtils;

import net.sourceforge.czt.parser.util.DependenciesBuilder;
import net.sourceforge.czt.parser.util.LatexMarkupFunction;
import net.sourceforge.czt.parser.util.OpTable;
import net.sourceforge.czt.parser.util.ThmTable;
import net.sourceforge.czt.session.AbstractCommand;
import net.sourceforge.czt.session.Command;
import net.sourceforge.czt.session.CommandException;
import net.sourceforge.czt.session.Key;
import net.sourceforge.czt.session.Markup;
import net.sourceforge.czt.session.SectionInfo;
import net.sourceforge.czt.session.SectionManager;
import net.sourceforge.czt.session.Source;
import net.sourceforge.czt.session.StringSource;
import net.sourceforge.czt.z.ast.AxPara;
import net.sourceforge.czt.z.ast.ConstDecl;
import net.sourceforge.czt.z.ast.Expr;
import net.sourceforge.czt.z.ast.Para;
import net.sourceforge.czt.z.ast.Parent;
import net.sourceforge.czt.z.ast.Pred;
import net.sourceforge.czt.z.ast.Sect;
import net.sourceforge.czt.z.ast.Spec;
import net.sourceforge.czt.z.ast.ZSect;

<add:z>
import net.sourceforge.czt.z.jaxb.JaxbXmlReader;
</add:z>
<add:zpatt>
import net.sourceforge.czt.zpatt.jaxb.JaxbXmlReader;
</add:zpatt>
<add:pattern>
import net.sourceforge.czt.parser.zpatt.JokerTable;
</add:pattern>
<add:circuspatt>
import net.sourceforge.czt.circuspatt.jaxb.JaxbXmlReader;
</add:circuspatt>
<add:circus>
import net.sourceforge.czt.circus.jaxb.JaxbXmlReader;
</add:circus>
<add:oz>
import net.sourceforge.czt.oz.jaxb.JaxbXmlReader;
</add:oz>
<add:tcoz>
import net.sourceforge.czt.tcoz.jaxb.JaxbXmlReader;
</add:tcoz>
<add:zeves>
import net.sourceforge.czt.zeves.jaxb.JaxbXmlReader;
</add:zeves>

/**
 * Utilities for parsing specifications.
 *
 * @author Petra Malik, Tim Miller, Leo Freitas
 */
public class <class/> extends AbstractCommand
{

  public static Term parse(Source source, SectionInfo sectInfo)
    throws ParseException, IOException, UnmarshalException
  {
    return parse(source, sectInfo, new Properties());
  }

  public static Term parse(Source source,
                           SectionInfo sectInfo,
                           Properties properties)
    throws ParseException, IOException, UnmarshalException
  {
    return parse0(source, sectInfo, properties, Collections.&lt;Key&lt;?&gt;&gt;emptySet());
  }


  private static Term parse0(Source source,
                           SectionInfo sectInfo,
                           Properties properties,
                           Set&lt;Key&lt;?&gt;&gt; explicitDeps)
    throws ParseException, IOException, UnmarshalException
  {
    traceLog("PU-parse-source = " + source);
    Term result = null;
    if (source.getMarkup() == Markup.LATEX) {
      LatexParser parser = new LatexParser(source, sectInfo, properties, explicitDeps);
      result = parser.parse();
      parser = null;
    }
    else if (source.getMarkup() == Markup.UNICODE) {
      UnicodeParser parser = new UnicodeParser(source, sectInfo, properties, explicitDeps);
      result = parser.parse();
      parser = null;
    }
    else if (source.getMarkup() == Markup.ZML)
    {
      JaxbXmlReader reader = new JaxbXmlReader();
      result = reader.read(new InputSource(source.getReader()));
      if (result instanceof Spec) {
        Spec spec = (Spec) result;
        for (Sect sect : spec.getSect()) {
          if (sect instanceof ZSect)
          {
            ZSect zSect = (ZSect) sect;

            // no need for section manager transaction since section management is not used here.
            // however, we need to add explicit dependencies such as source and spec. the InfoTables
            // or LMF won't be needed (???? TODO ???)
            sectInfo.put(new Key&lt;ZSect&gt;(zSect.getName(), ZSect.class), zSect, explicitDeps);
          }
        }
      }
      else if (result instanceof ZSect) {
        ZSect zSect =  (ZSect) result;
        // add the section directly to the manager
        sectInfo.put(new Key&lt;ZSect&gt;(zSect.getName(), ZSect.class), zSect, explicitDeps);
      }
      reader = null;
    }
    else {
      throw new UnsupportedOperationException();
    }
    assert result != null;
    traceLog("PU-parse-result = " + result.getClass().getSimpleName());
    return result;
  }

  /** Parse a Source string/file as a Z Predicate.
   *  @param src The String or File etc. to be parsed.
   *  @param section The Z section name (in Unicode)
   *                 to parse within (null=standard_toolkit).
   *  @param sectman A section manager to use.  Must be non-null.
   *
   * @return 
   * @throws IOException if there are errors reading file/url inputs
   * @throws CommandException if the predicate cannot be parsed.
   */
  public static Pred parsePred(Source src, String section,
			       /*@non_null@*/SectionManager sectman) 
    throws IOException, CommandException
  {
    // TODO: Add backslash in front of underscores
    String parent = section;
    String name = "CZT_parsePred_tmp1433589372849";
    StringBuilder buf = new StringBuilder();
    if (src.getMarkup() == Markup.LATEX) {
      if (parent == null)
        parent = "standard_toolkit";
      buf.append("\\begin{zsection}\\SECTION ");
      buf.append(name);
      buf.append(" \\parents ");
      buf.append(parent.replaceAll("_", "\\\\_"));
      buf.append("\\end{zsection} ");
      buf.append("\\begin{axdef} \\where\n");
      Reader reader = src.getReader();
      int ch = reader.read();
      while (ch != -1) {
        buf.appendCodePoint(ch);
        ch = reader.read();
      }
      buf.append("\n\\end{axdef}\n");
    }
    else {
      if (parent == null)
        parent = "standard_toolkit";
      buf.append(ZString.ZED);
      buf.append(" section ");
      buf.append(name);
      buf.append(" parents ");
      buf.append(parent);
      buf.append(ZString.END);
      buf.append(ZString.AX);
      buf.append(ZString.BAR);
      buf.append(ZString.NL);
      Reader reader = src.getReader();
      int ch = reader.read();
      while (ch != -1) {
        buf.appendCodePoint(ch);
        ch = reader.read();
      }
      buf.append(ZString.NL);
      buf.append(ZString.END);
    }
    // we create a temporary sectman so that this temp section does not
    //  clutter up the original section manager.
    SectionManager tmpsectman = sectman.clone();
    Source input = new StringSource(buf.toString());
    input.setMarkup(src.getMarkup());
    input.setEncoding(src.getEncoding());
    tmpsectman.put(new Key&lt;Source&gt;(name, Source.class), input);
    // use the parser itself to create objects - makes easier section management.
    Spec spec = tmpsectman.get(new Key&lt;Spec&gt;(name, Spec.class));
    AxPara axPara = firstAxPara(spec);
    assert axPara != null;
    tmpsectman = null;
    return axPara.getZSchText().getPred();
  }

  private static AxPara firstAxPara(Spec spec)
  {
    ZSect sect = (ZSect) spec.getSect().get(0);
    for (Object p : ZUtils.assertZParaList(sect.getParaList())) {
      if (p instanceof AxPara) {
        return (AxPara) p;
      }
    }
    return null;
  }

  /** Parse a Source string/file as a Z Expression.
   *  @param src The String or File etc. to be parsed.
   *  @param section The Z section (in Unicode)
   *                 to parse within (null=standard_toolkit).
   *  @param sectman A section manager to use.  Must be non-null.
   *
   * @return
   * @throws IOException if there are errors reading file/url inputs
   * @throws CommandException if the expression cannot be parsed.
   */
  public static Expr parseExpr(Source src, String section,
			       /*@non_null@*/SectionManager sectman) 
    throws IOException, CommandException
  {
    String parent = section;
    String name = "CZT_parseExpr_tmp1433589372849";
    StringBuilder buf = new StringBuilder();
    if (src.getMarkup() == Markup.LATEX) {
      if (parent == null)
        parent = "standard_toolkit";
      buf.append("\\begin{zsection}\\SECTION ");
      buf.append(name);
      buf.append(" \\parents ");
      buf.append(parent.replaceAll("_", "\\\\_"));
      buf.append("\\end{zsection} ");
      buf.append("\\begin{axdef} result == \n");
      Reader reader = src.getReader();
      int ch = reader.read();
      while (ch != -1) {
        buf.appendCodePoint(ch);
        ch = reader.read();
      }
      buf.append("\n\\end{axdef}\n");
    }
    else {
      if (parent == null)
        parent = "standard_toolkit";
      buf.append(ZString.ZED);
      buf.append(" section ");
      buf.append(name);
      buf.append(" parents ");
      buf.append(parent);
      buf.append(ZString.END);
      buf.append(ZString.AX);
      buf.append("result");
      buf.append(" ");
      buf.append(ZString.DEFEQUAL);
      buf.append(" ");
      buf.append(ZString.NL);
      Reader reader = src.getReader();
      int ch = reader.read();
      while (ch != -1) {
        buf.appendCodePoint(ch);
        ch = reader.read();
      }
      buf.append(ZString.NL);
      buf.append(ZString.END);
    }
    // we create a temporary sectman so that this temp section does not
    //  clutter up the original section manager.
    SectionManager tmpsectman = sectman.clone();
    Source input = new StringSource(buf.toString());
    input.setMarkup(src.getMarkup());
    input.setEncoding(src.getEncoding());
    tmpsectman.put(new Key&lt;Source&gt;(name, Source.class), input);
    // Use the parser itself to create the objects - this makes section management easier
    Spec spec = tmpsectman.get(new Key&lt;Spec&gt;(name, Spec.class));
    AxPara axPara = firstAxPara(spec);
    assert axPara != null;
    ConstDecl cdecl = (ConstDecl) axPara.getZSchText().getZDeclList().get(0);
    tmpsectman = null;
    return cdecl.getExpr();
  }
  
  /** Parse a Source string/file as Z Paragraphs.
   *  @param src The String or File etc. to be parsed.
   *  @param section The Z section (in Unicode)
   *                 to parse within (null=standard_toolkit).
   *  @param sectman A section manager to use.  Must be non-null.
   *
   * @return
   * @throws IOException if there are errors reading file/url inputs
   * @throws CommandException if the content cannot be parsed.
   */
  public static List&lt;Para&gt; parseParas(Source src, String section,
                               /*@non_null@*/SectionManager sectman) 
    throws IOException, CommandException
  {
    String parent = section;
    String name = "CZT_parseParas_tmp1433589372849";
    StringBuilder buf = new StringBuilder();
    if (src.getMarkup() == Markup.LATEX) {
      if (parent == null)
        parent = "standard_toolkit";
      buf.append("\\begin{zsection}\\SECTION ");
      buf.append(name);
      buf.append(" \\parents ");
      buf.append(parent.replaceAll("_", "\\\\_"));
      buf.append("\\end{zsection} \n");
      Reader reader = src.getReader();
      int ch = reader.read();
      while (ch != -1) {
        buf.appendCodePoint(ch);
        ch = reader.read();
      }
    }
    else {
      if (parent == null)
        parent = "standard_toolkit";
      buf.append(ZString.ZED);
      buf.append(" section ");
      buf.append(name);
      buf.append(" parents ");
      buf.append(parent);
      buf.append(ZString.END);
      Reader reader = src.getReader();
      int ch = reader.read();
      while (ch != -1) {
        buf.appendCodePoint(ch);
        ch = reader.read();
      }
    }
    // we create a temporary sectman so that this temp section does not
    //  clutter up the original section manager.
    SectionManager tmpsectman = sectman.clone();
    Source input = new StringSource(buf.toString());
    input.setMarkup(src.getMarkup());
    input.setEncoding(src.getEncoding());
    tmpsectman.put(new Key&lt;Source&gt;(name, Source.class), input);
    // Use the parser itself to create the objects - this makes section management easier
    Spec spec = tmpsectman.get(new Key&lt;Spec&gt;(name, Spec.class));
    
    ZSect sect = (ZSect) spec.getSect().get(0);
    tmpsectman = null;
    return ZUtils.assertZParaList(sect.getParaList());
  }

  /**
   * Determine the markup of a file.
   * @return
   * @param filename
   */
  public static Markup getMarkup(String filename)
  {
    Markup result = null;
    if (filename.endsWith(".tex") || filename.endsWith(".TEX") ||
        filename.endsWith(".zed") || filename.endsWith(".ZED")) {
      result = Markup.LATEX;
    }
    else if (filename.endsWith("8") || filename.endsWith("16")) {
      result = Markup.UNICODE;
    }
    else if (filename.endsWith("ml")) {
      result = Markup.ZML;
    }
    return result;
  }

  /**
   * Get a &lt;code&gt;Command&lt;/code&gt; object for use 
   * in &lt;code&gt;SectionManager&lt;/code&gt;
   *
   * @return A command for parsing specifications.
   */
  public static Command getCommand()
  {
    return new ParseUtils();
  }

  // SECTION MANAGEMENT METHODS

  public static Class&lt;?&gt;[] dependencyClassesOfInterest()
  {
    return new Class&lt;?&gt;[] {
      // source locator
      Source.class,
      // latex markup function
      LatexMarkupFunction.class,
      // section parents
      ZSect.class,
      // thm tables
      ThmTable.class,
      // opt template tables
      OpTable.class
      <add:pattern>
      // joker tables
      , JokerTable.class
      </add:pattern>
      <add:zeves>
      // proof script tables
      , ProofTable.class 
      </add:zeves>
     };
  }

  /**
   * Calculate the dependencies as all dependencies of all ZSect of the given spec
   *
   * @param term spec
   * @return complete set of depenendcy keys
   */
  public static Set&lt;Key&lt;?&gt;&gt; calculateDependencies(Spec term)
  {
    Set&lt;Key&lt;?&gt;&gt; dependencies = new HashSet&lt;Key&lt;?&gt;&gt;();
    for (Sect s : term.getSect())
    {
      if (s instanceof ZSect)
      {
        dependencies.addAll(calculateDependencies((ZSect)s));
      }
    }
    return dependencies;
  }

  /**
   * Calculates the dependency keys for all dependencyClassesOfInterest().
   */
  public static Set&lt;Key&lt;?&gt;&gt; calculateDependencies(ZSect term)
  {
    return calculateDependencies(term, dependencyClassesOfInterest());
  }

  /**
   * Given a ZSection, it calculates the dependency keys from all parents, for
   * the given Key information type T
   * @param term the ZSection to calculate parents from
   * @param types
   * @return set of keys with given type
   */
  @SuppressWarnings("unchecked")
  public static Set&lt;Key&lt;?&gt;&gt; calculateDependencies(ZSect term, Class&lt;?&gt;... types)
  {
    Set&lt;Key&lt;?&gt;&gt; dependencies = new HashSet&lt;Key&lt;?&gt;&gt;();
    for (Parent parent : term.getParent())
    {
      for (Class&lt;?&gt; type : types)
      {
        // adds dependencies for all parents on all class types of interest
        dependencies.add(new Key(parent.getWord(), type));
      }
    }
    // adds a final dependency on the source for this given section
    dependencies.add(new Key&lt;Source&gt;(term.getName(), Source.class));
    return dependencies;
  }

  /**
   * For non-parsed ZSect (e.g., created on-the-fly by tools), one needs to update
   * a given section manager in a particular order. This method produces a similar
   * effect as does the parser when processing Source(s). see DomainChecker for use.
   * @param sectInfo section manager to update
   * @param nonParsedZSect on-the-fly ZSect to add
   * @throws CommandException in case some command fails
   */
  public static void updateSectManager(net.sourceforge.czt.session.SectionInfo sectInfo, ZSect nonParsedZSect) throws CommandException
  {
    // TODO: when handling VCG, check if this is still right with new protocol...

    assert sectInfo != null &amp;&amp; nonParsedZSect != null;

    // get info + log data
    final String sectName = nonParsedZSect.getName();
    traceLog("PU-SMUPD-ZSECT = " + sectName);

    // tell the section manager about the presence of this new Z section
    // no need to parse, we know it is okay - it's been constructed.
    sectInfo.put(new Key&lt;ZSect&gt;(sectName, ZSect.class), nonParsedZSect,
            calculateDependencies(nonParsedZSect));

    // ONLY AFTER ADDING ZSect: calculate a OpTable for it (see Op/ThmTableCommand protocols).
    try
    {
      sectInfo.get(new Key&lt;OpTable&gt;(sectName, OpTable.class));
      sectInfo.get(new Key&lt;ThmTable&gt;(sectName, ThmTable.class));
    }
    catch (CommandException e)
    {
      final String msg = "PU-CMDEXP-TBL = " + e.getCause();
      traceLog(msg);
      throw e;
    }
  }

  // Command METHODS

  /**
   * &lt;p&gt;
   * This command parses the given ZSection or Specification with associated named source.
   * There are two cases: manager update of Z sections of cached Spec added on the fly, and
   * parsing of a named Source, most commonly FileSources.
   * &lt;/p&gt;
   * &lt;p&gt;
   * For the latter, the parser updates manager with ZSect and other resources, whereas
   * the command updates the manager in case the resource is a Spec (e.g., it could be
   * just a ZSect or even Term like Expr or Pred). If the Source resource cannot be found,
   * or if a parsing error occurs, a CommandException is raised with appropriate underlying cause.
   * &lt;/p&gt;
   *
   * -pre name.equals(ZSect.name) or name.equals(Spec.filename) or manager.isCached(Key(name,Spec))
   * -pre !manager.isCached(Key(name, Spec))    implies Okay(manager.get(Key(name, Source))
   * -post  manager.isCached(Key(name, Spec))   implies forall z: ZSect in Spec : manager.put(Key(z.name, ZSect))
   * -post !manager.isCached(Key(name, Spec))
   *       Okay(manager.get(Key(name, Source))) implies Parse(Key(name,Source)) and manager.put(Key(name, Spec))
   * @param name ZSect or Spec resource Source name
   * @param manager section manager database
   * @return irrelevant (!)
   * @throws CommandException if named Source resource cannot be found (SourceLocatorException) or
   *  if a parsing exception occurs, which can be for various reasons (ParseException, IOException, etc).
   */
  @Override
  protected boolean doCompute(String name, SectionManager manager)
    throws CommandException
  {
    // create a Spec key for the given name and check if it's cached,
    // in which case, all of its ZSect are put to the manager. This
    // happens when a Spec is created manually (e.g., does not come
    // from parsing). Parsed ZSects are added by Parser.xml@updateZSect
    traceLog("PU-compute-name = " + name);
    Key&lt;Spec&gt; specKey = new Key&lt;Spec&gt;(name, Spec.class);
    if (manager.isCached(specKey)) {
      Spec spec = manager.get(specKey);
      for (Sect sect : spec.getSect()) {
        if (sect instanceof ZSect) {
          ZSect zsect = (ZSect) sect;
          // if an annonymous ZSect, also add the file name for/to it?
          if (zsect.getName().equals(net.sourceforge.czt.util.Section.ANONYMOUS.getName()))
          {
            // TODO: solve these
            manager.put(new Key&lt;ZSect&gt;(name, ZSect.class), zsect, calculateDependencies(zsect));
          }
          manager.put(new Key&lt;ZSect&gt;(zsect.getName(), ZSect.class),
                      zsect, calculateDependencies(zsect));

        }
      }
      final String msg = "PU-SPEC-ONFLY-ZSECT = put ZSect for on-the-fly Spec " + name;
      traceLog(msg);
      return true;
    }
    
    // the usual case, Spec comes from some Source and is parsed.
    // note that for ZML sources can contain any term as the root
    // so Spec would not come from there, but at the moment we do not support
    // parsing non-Specs using the command approach.
    // We do handle singleton ZSect in ZML file though.
    boolean result = false;
    Key&lt;Source&gt; sourceKey = new Key&lt;Source&gt;(name, Source.class);
    Source source = manager.get(sourceKey);
    // If we find the source, parse it and add Spec to the manager
    // The Parser.xml adds all ZSects (e.g., see updateZSect).
    if (source != null)
    {
      // cancel the ZSect started by the get(ZSect): the parser does a startTransaction for us
      // given parsing parents or Spec would need it
      Key&lt;ZSect&gt; zsKey = new Key&lt;ZSect&gt;(name, ZSect.class);
      if (manager.hasTransaction(zsKey))
      {
        manager.cancelTransaction(zsKey);
      }

      // unless we do a get(Spec), we need to have its transaction implicitly started here
      // in case we have a get(ZSect) or when any parent Spec is parsed.
      manager.ensureTransaction(specKey);
      
      Term term;
      try {
      
        term = ParseUtils.parse0(source,
               manager, manager.getProperties(),
               // pass in explicit dependencies on the Source and the current Spec
               new DependenciesBuilder().add(sourceKey).add(specKey).build());
              
      }
      catch (ParseException exception) {
        // in case of exceptions during parsing, cancel the manually started Spec transaction
        // (same for other exceptions)
        manager.cancelTransaction(specKey);
        throw new CommandException(exception);
      }
      catch (IOException exception) {
        manager.cancelTransaction(specKey);
        throw new CommandException(exception);
      }
      catch (UnmarshalException exception) {
        manager.cancelTransaction(specKey);
        throw new CommandException(exception);
      }
      
      if (term instanceof ZSect) {
        // only parsed the ZSect, so wrap it into a Spec to be consistent
        // the ZSect should have been added to the section manager during the parsing
        term = new Factory().createSpec(
            Collections.singletonList((ZSect) term), Version.ZML_VERSION);
      }
              
      if (term instanceof Spec) {
        // add explicit dependencies on the source and its sections (which may 
        // have not been caught via SectionInfo.get())
        manager.endTransaction(specKey, (Spec) term, 
            new DependenciesBuilder().add(sourceKey).add(getSectionKeys((Spec) term)).build());
      }
      else {
        // If we are parsing ZML files, we can get any term via parsing. However, we do not add it
        // to the section manager at the moment - this is likely to be caught by the command
        // checks later.
        // Cancel the Spec transaction, since we do not know how the term relates to the Spec
        manager.cancelTransaction(specKey);
      }


      result = term != null;
      final String msg = "PU-PARSED = parse " + (result ? "okay. Put " + term.getClass().getSimpleName() + " to SM." : "failed!");
      traceLog(msg);
    }
    // What if result is false? The SM protocol does not use this flag! Why keep it? [Leo]
    return result;
  }
  
  private static Set&lt;Key&lt;ZSect&gt;&gt; getSectionKeys(Spec spec) {
    
    Set&lt;Key&lt;ZSect&gt;&gt; sectKeys = new HashSet&lt;Key&lt;ZSect&gt;&gt;();
    
    for (Sect sect : spec.getSect()) {
      if (sect instanceof ZSect) {
        sectKeys.add(new Key&lt;ZSect&gt;(((ZSect) sect).getName(), ZSect.class));
      }
    }
    
    return sectKeys;
  }
  
}
</utils>
