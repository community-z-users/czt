<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (C) 2003, 2004, 2005, 2006, 2007 Petra Malik
     Copyright (C) 2003, 2004, 2005 Tim Miller
     This file is part of the czt project.
     
     The czt project contains free software;
     you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     
     The czt project is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with czt; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     -->

<utils xmlns:add="http://czt.sourceforge.net/templates/additional">
package <package/>;

import java.io.*;
import java.net.URL;
import java.util.Properties;
import java.util.logging.Logger;
import org.xml.sax.InputSource;

import net.sourceforge.czt.base.ast.Term;
import net.sourceforge.czt.base.util.UnmarshalException;
import net.sourceforge.czt.parser.util.ParseException;
import net.sourceforge.czt.session.*;
import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.util.CztLogger;
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.util.ZString;
import net.sourceforge.czt.z.util.ZUtils;

<add:z>
import net.sourceforge.czt.z.jaxb.JaxbXmlReader;
</add:z>
<add:zpatt>
import net.sourceforge.czt.zpatt.jaxb.JaxbXmlReader;
</add:zpatt>
<add:circuspatt>
import net.sourceforge.czt.circuspatt.jaxb.JaxbXmlReader;
</add:circuspatt>
<add:circus>
import net.sourceforge.czt.circus.jaxb.JaxbXmlReader;
</add:circus>
<add:oz>
import net.sourceforge.czt.oz.jaxb.JaxbXmlReader;
</add:oz>
<add:tcoz>
import net.sourceforge.czt.tcoz.jaxb.JaxbXmlReader;
</add:tcoz>

/**
 * Utilities for parsing specifications.
 *
 * @author Petra Malik, Tim Miller
 */
public class <class/>
  implements Command
{
  public static Term parse(Source source,
                           SectionInfo sectInfo,
                           Properties properties)
    throws ParseException, IOException, UnmarshalException
  {
    if (source.getMarkup() == Markup.LATEX) {
      LatexParser parser = new LatexParser(source, sectInfo, properties);
      return parser.parse();
    }
    else if (source.getMarkup() == Markup.UNICODE) {
      UnicodeParser parser = new UnicodeParser(source, sectInfo, properties);
      return parser.parse();
    }
    else if (source.getMarkup() == Markup.ZML) {
      JaxbXmlReader reader = new JaxbXmlReader();
      Term result = reader.read(new InputSource(source.getReader()));
      if (result instanceof Spec) {
	Spec spec = (Spec) result;
	for (Sect sect : spec.getSect()) {
	  if (sect instanceof ZSect) {
	    ZSect zSect = (ZSect) sect;
	    sectInfo.put(new Key(zSect.getName(), ZSect.class), zSect, null);
	  }
	}
      }
      else if (result instanceof ZSect) {
	ZSect zSect = (ZSect) result;
	sectInfo.put(new Key(zSect.getName(), ZSect.class), zSect, null);
      }
      return result;
    }
    else {
      throw new UnsupportedOperationException();
    }
  }

  public static Term parse(Source source, SectionInfo sectInfo)
    throws ParseException, IOException, UnmarshalException
  {
    return parse(source, sectInfo, new Properties());
  }

  /** Parse a Source string/file as a Z Predicate.
   *  @param src The String or File etc. to be parsed.
   *  @param section The Z section name (in Unicode)
   *                 to parse within (null=standard_toolkit).
   *  @param sectman A section manager to use.  Must be non-null.
   *
   * @throws IOException if there are errors reading file/url inputs
   * @throws CommandException if the predicate cannot be parsed.
   */
  public static Pred parsePred(Source src, String section,
			       /*@non_null@*/SectionManager sectman) 
    throws IOException, CommandException
  {
    // TODO: Add backslash in front of underscores
    String parent = section;
    String name = "CZT_parsePred_tmp1433589372849";
    StringBuffer buf = new StringBuffer();
    if (src.getMarkup() == Markup.LATEX) {
      if (parent == null)
        parent = "standard\\_toolkit";
      buf.append("\\begin{zsection}\\SECTION ");
      buf.append(name);
      buf.append(" \\parents ");
      buf.append(parent);
      buf.append("\\end{zsection} ");
      buf.append("\\begin{axdef} \\where\n");
      Reader reader = src.getReader();
      int ch = reader.read();
      while (ch != -1) {
        buf.appendCodePoint(ch);
        ch = reader.read();
      }
      buf.append("\n\\end{axdef}\n");
    }
    else {
      if (parent == null)
        parent = "standard_toolkit";
      buf.append(ZString.ZED);
      buf.append(" section ");
      buf.append(name);
      buf.append(" parents ");
      buf.append(parent);
      buf.append(ZString.END);
      buf.append(ZString.AX);
      buf.append(ZString.BAR);
      buf.append(ZString.NL);
      Reader reader = src.getReader();
      int ch = reader.read();
      while (ch != -1) {
        buf.appendCodePoint(ch);
        ch = reader.read();
      }
      buf.append(ZString.NL);
      buf.append(ZString.END);
    }
    // we create a temporary sectman so that this temp section does not
    //  clutter up the original section manager.
    SectionManager tmpsectman = (SectionManager) sectman.clone();
    Source input = new StringSource(buf.toString());
    input.setMarkup(src.getMarkup());
    input.setEncoding(src.getEncoding());
    tmpsectman.put(new Key(name, Source.class), input);
    Spec spec = (Spec) tmpsectman.get(new Key(name, Spec.class));
    AxPara axPara = firstAxPara(spec);
    assert axPara != null;
    return axPara.getZSchText().getPred();
  }

  private static AxPara firstAxPara(Spec spec)
  {
    ZSect sect = (ZSect) spec.getSect().get(0);
    for (Object p : ZUtils.assertZParaList(sect.getParaList())) {
      if (p instanceof AxPara) {
        return (AxPara) p;
      }
    }
    return null;
  }

  /** Parse a Source string/file as a Z Expression.
   *  @param src The String or File etc. to be parsed.
   *  @param section The Z section to parse within (null=standard_toolkit).
   *  @param sectman A section manager to use.  Must be non-null.
   *
   * @throws IOException if there are errors reading file/url inputs
   * @throws CommandException if the expression cannot be parsed.
   */
  public static Expr parseExpr(Source src, String section,
			       /*@non_null@*/SectionManager sectman) 
    throws IOException, CommandException
  {
    String parent = section;
    String name = "CZT_parseExpr_tmp1433589372849";
    StringBuffer buf = new StringBuffer();
    if (src.getMarkup() == Markup.LATEX) {
      if (parent == null)
        parent = "standard\\_toolkit";
      buf.append("\\begin{zsection}\\SECTION ");
      buf.append(name);
      buf.append(" \\parents ");
      buf.append(parent);
      buf.append("\\end{zsection} ");
      buf.append("\\begin{axdef} result == \n");
      Reader reader = src.getReader();
      int ch = reader.read();
      while (ch != -1) {
        buf.appendCodePoint(ch);
        ch = reader.read();
      }
      buf.append("\n\\end{axdef}\n");
    }
    else {
      String message = "Unicode inputs not implemented yet";
      throw new UnsupportedOperationException(message);
    }
    // we create a temporary sectman so that this temp section does not
    //  clutter up the original section manager.
    SectionManager tmpsectman = (SectionManager)sectman.clone();
    Source input = new StringSource(buf.toString());
    input.setMarkup(src.getMarkup());
    input.setEncoding(src.getEncoding());
    tmpsectman.put(new Key(name, Source.class), input);
    Spec spec = (Spec) tmpsectman.get(new Key(name, Spec.class));
    AxPara axPara = firstAxPara(spec);
    assert axPara != null;
    ConstDecl cdecl = (ConstDecl) axPara.getZSchText().getZDeclList().get(0);
    return cdecl.getExpr();
  }

  /**
   * Determine the markup of a file.
   */
  public static Markup getMarkup(String filename)
  {
    Markup result = null;
    if (filename.endsWith(".tex") || filename.endsWith(".TEX")) {
      result = Markup.LATEX;
    }
    else if (filename.endsWith(".utf8") || filename.endsWith(".UTF8") ||
             filename.endsWith(".utf16") || filename.endsWith(".UTF16")) {
      result = Markup.UNICODE;
    }
    return result;
  }

  /**
   * Get a &lt;code&gt;Command&lt;/code&gt; object for use 
   * in &lt;code&gt;SectionManager&lt;/code&gt;
   *
   * @return A command for parsing specifications.
   */
  public static Command getCommand()
  {
    return new ParseUtils();
  }

  public boolean compute(String name, SectionManager manager)
    throws CommandException
  {
    try {
      Source source = (Source) manager.get(new Key(name, Source.class));
      if (source != null) {
        Term term = ParseUtils.parse(source, manager, manager.getProperties());
        if (term instanceof Spec) {
          manager.put(new Key(name, Spec.class), (Spec) term);
        }
      }
    }
    catch (ParseException exception) {
      throw new CommandException(exception);
    }
    catch (IOException exception) {
      throw new CommandException(exception);
    }
    catch (UnmarshalException exception) {
      throw new CommandException(exception);
    }
    return true;
  }
}
</utils>
