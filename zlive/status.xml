<?xml version="1.0"?>
<status>

  <developers>
    <person name="Mark Utting" email="marku@cs.waikato.ac.nz" id="Mark"/>
    <person name="Rohit Bansal" email="rohit@sourceforge.net" id="Rohit"/>
    <person name="Petra Malik" email="PetraMalik@sourceforge.net" id="Petra"/>
  </developers>

  <changes>
    <!-- Add new releases here
         Some action types have associated images. By default, images are
         defined for 'add', 'fix', 'remove', 'update' and 'hack'. If you add
         src/documentation/resources/images/<foo>.jpg images, these will
         automatically be used for entries of type <foo>.
         Sample action:
         <action dev="JB" type="fix" due-to="Joe Contributor"
           due-to-email="joec@apache.org" fixes-bug="123">
           Fixed a bug in the Foo class.
         </action>
    -->
    <release version="0.1" date="unreleased">
      <action dev="Mark, Rohit" type="add">
        Designed the EvalSet interface.  Rohit wrote the first implementation
        of it (RangeSet for a..b sets), plus the FlatMember predicate
        which uses it.
      </action>
      <action dev="Mark" type="add">
        Designed basic architecture of ZLive (unfolding, flattening, 
        mode analysis, reordering, then evaluation), and the FlatPred
        interface (abstract class actually).  With Rohit, developed
        several FlatPred implementations for plus, times, negate etc.
        plus a basic left-to-right, deterministic-only evaluation engine.
      </action>
      <action dev="Mark, Rohit" type="add">
        Translated the 500+ Jaza tests into standard Z conjectures and 
        wrote a JUnit harness which calls evalPred on each one (but
        conjectures of the form E=undefnum pass E to evalExpr and expect
        an exception to be raised).
        The resulting 'usertests' give a good measure of how much 
        progress we are making towards a useful animator.
      </action>
    </release>
  </changes>

  <todo>
    <actions priority="high">
      <action context="code" dev="open">
      	Better reporting from the usertests.  Make each animate*.tex file
      	into a separate JUnit test suite so that we can see which groups
      	of tests are mostly passing/failing, and show line numbers for each
      	test that fails. 
      </action>
      <action context="code" dev="Rohit">
      	Implement a simple textual user interface which provides eval Expr
      	and evalp Pred commands.
      </action>
      <action context="code" dev="open">
      	Unfold definitions and rewrite some complex constructs into
      	simpler constructs.
      </action>
      <action context="code" dev="open">
       	Implement the A* path-finding algorithm to reorder lists of FlatPreds,
       	based on the estimated number of solutions for each mode.
      </action>
    </actions>
    <actions priority="medium">
      <action context="code" dev="open">
      	Extend all FlatPred implementations so that they correctly
      	implement the Pred methods like getChildren.  Then write a
      	print command which uses the standard AST-to-Unicode visitor
      	to print out a list of FlatPreds.  This will help during
      	debugging and also allow users to see what transformations
      	have been done.
      </action>
      <action context="code" dev="open">
      	Design and implement a bounds analysis feature for numeric variables,
      	so that <code>x&lt;=10</code> and <code>x&gt;=y</code> are combined
      	into the (finite) constraint <code>x \in y..10</code>.
      	This could be done in at least three ways: (1) associate
      	a static lower and upper bound constant with each variable; 
      	(2) associate a set of lower/upper bound expressions with each
      	variable; (3) merge several complementary FlatPred constraints into
      	single FlatPred constraint which is more efficient.  The first or
      	third approaches seem more in keeping with the ZLive philosophy
      	of static analysis/transformation.
      </action>
      <action context="code" dev="open">
      	Design and implement a 'FlatOr' class to handle disjunctions.
      	All branches of the disjunct must have the same mode. 
      	Other complex predicates should probably be unfolded into disjunctions.
      </action>
      <action context="code" dev="open">
      	Integrate ZLive with the Gaffe animator interface generator/editor.
      	This will allow users to generate and customise interfaces for
      	each Z specification.
      </action>
    </actions>
    <actions priority="low">
      <action context="docs" dev="open">
        Design a ZLive logo.
      </action>
      <action context="code" dev="open">
        Design a simple ZLive GUI which allows expressions to be
        entered and evaluated.
      </action>
    </actions>
    <!-- Add todo items. @context is an arbitrary string. Eg:
    <actions priority="high">
      <action context="code" dev="SN">
      </action>
    </actions>
    <actions priority="medium">
      <action context="docs" dev="open">
      </action>
    </actions>
    -->
  </todo>
</status>
