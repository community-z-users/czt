#*
Copyright (C) 2003, 2004, 2005, 2006, 2007 Petra Malik
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*#
#parse("variables.vm")
#set($jaxbPackage = "${project.JaxbGenPackage}")
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToJaxb.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

#if($copyright)#include($copyright)#end
******************************************************************************/

package ${project.BasePackage}.${class.Package};

##// --------------------------------------
##// ALL PROPERTIES
##// class 				= ${class}
##// class.getName		= ${class.getName()}
##// class.getClass       = ${class.getClass()}
##// class.getPackage     = ${class.getPackage()}
##// class.getImplPackage = ${class.getImplPackage()}
##// class.getVisitorPack = ${class.getVisitorPackage()}
##// class.getAllProps    = ${class.getAllProperties()}
##// --------------------------------------
##// forall(prop in class getAllProperties) 
##// #foreach($prop in ${class.getAllProperties()})
##//		prop 									  = ${prop}
##//		prop.getName							  = ${prop.getName()}
##//		#if(${prop.isList()})
##//		prop.getListType.getFullName 			  = ${prop.getListType().getFullName()}
##//		prop.getListType.getPackage  			  = ${prop.getListType().getPackage()}
##//
##//		prop.getListType.getProject  			  = ${prop.getListType().getProject().getClass()}
##//		prop.getListType.getProject.getAstPackage = ${prop.getListType().getProject().getAstPackage()}
##//		prop.getListType.getProject.getImplPackage= ${prop.getListType().getProject().getImplPackage()}
##//		#else
##//		prop.getType.getFullName 			  = ${prop.getType().getFullName()}
##//		prop.getType.getPackage  			  = ${prop.getType().getPackage()}
##//
##//		prop.getType.getProject  			  = ${prop.getType().getProject().getClass()}
##//		prop.getType.getProject.getAstPackage = ${prop.getType().getProject().getAstPackage()}
##//		prop.getType.getProject.getImplPackage= ${prop.getType().getProject().getImplPackage()}
##//		#end
##// --------------------------------------
##// #end
##// class.getProps       =${class.getProperties()}
##// --------------------------------------
##// forall(prop in class getProperties) 
##// #foreach($prop in ${class.getProperties()})
##//		prop 		       = ${prop}
##//		prop.getName	   = ${prop.getName()}
##//		prop.getClass      = ${prop.getClass()}
##//		prop.getVarName    = ${prop.VarName}
##//		prop.getMemVarName = ${prop.MemVarName}
##//		prop.getGetterName = ${prop.GetterName}
##//		prop.SetterName    = ${prop.SetterName}
##//		prop.getType	   = ${prop.getType().getClass()}
##//
##//		prop.Type.FullName       			  = ${prop.Type.FullName}
##//		prop.getType.getFullName 			  = ${prop.getType().getFullName()}
##//		prop.getType.getPackage  			  = ${prop.getType().getPackage()}
##//
##//		prop.getType.getProject  			  = ${prop.getType().getProject().getClass()}
##//		prop.getType.getProject.getAstPackage = ${prop.getType().getProject().getAstPackage()}
##//		prop.getType.getProject.getImplPackage= ${prop.getType().getProject().getImplPackage()}
##// --------------------------------------
##// #end
##// #if(${ImportProject})
##// ImportProject             = ${ImportProject}
##// ImportProject.BasePackage = ${ImportProject.BasePackage}
##// #end
##// --------------------------------------
##//
##// #foreach($c in $classes)
##// #if(!$c.Abstract)
	##// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	##// ALL PROPERTIES
	##// c 				= ${c}
	##// c.getName		= ${c.getName()}
	##// c.getClass       = ${c.getClass()}
	##// c.getPackage     = ${c.getPackage()}
	##// c.getImplPackage = ${c.getImplPackage()}
	##// c.getVisitorPack = ${c.getVisitorPackage()}
	##// c.getAllProps    = ${c.getAllProperties()}
	##// --------------------------------------
	##// forall(prop in c getAllProperties) 
	##// #foreach($prop in ${c.getAllProperties()})
	##//		prop 									  = ${prop}
	##//		prop.getName  							  = ${prop.getName()}
	##//		#if(${prop.isList()})
	##//		prop.getListType.getFullName 			  = ${prop.getListType().getFullName()}
	##//		prop.getListType.getPackage  			  = ${prop.getListType().getPackage()}
	##//
	##//		prop.getListType.getProject  			  = ${prop.getListType().getProject().getClass()}
	##//		prop.getListType.getProject.getAstPackage = ${prop.getListType().getProject().getAstPackage()}
	##//		prop.getListType.getProject.getImplPackage= ${prop.getListType().getProject().getImplPackage()}
	##//		#else
	##//		prop.getType.getFullName 			  = ${prop.getType().getFullName()}
	##//		prop.getType.getPackage  			  = ${prop.getType().getPackage()}
	##//
	##//		prop.getType.getProject  			  = ${prop.getType().getProject().getClass()}
	##//		prop.getType.getProject.getAstPackage = ${prop.getType().getProject().getAstPackage()}
	##//		prop.getType.getProject.getImplPackage= ${prop.getType().getProject().getImplPackage()}
	##//		#end
	##// --------------------------------------
	##// #end
	##// c.getProps       =${c.getProperties()}
	##// --------------------------------------
	##// forall(prop in c getProperties) 
	##// #foreach($prop in ${c.getProperties()})
	##//		prop 		       = ${prop}
	##//		prop.getName	   = ${prop.getName()}
	##//		prop.getClass      = ${prop.getClass()}
	##//		prop.getVarName    = ${prop.VarName}
	##//		prop.getMemVarName = ${prop.MemVarName}
	##//		prop.getGetterName = ${prop.GetterName}
	##//		prop.SetterName    = ${prop.SetterName}
	##//		prop.getType	   = ${prop.getType().getClass()}
	##//
	##//		prop.Type.FullName       			  = ${prop.Type.FullName}
	##//		prop.getType.getFullName 			  = ${prop.getType().getFullName()}
	##//		prop.getType.getPackage  			  = ${prop.getType().getPackage()}
	##//
	##//		prop.getType.getProject  			  = ${prop.getType().getProject().getClass()}
	##//		prop.getType.getProject.getAstPackage = ${prop.getType().getProject().getAstPackage()}
	##//		prop.getType.getProject.getImplPackage= ${prop.getType().getProject().getImplPackage()}
	##// #end
##// #end
##// #end
##// --------------------------------------


#foreach($p in $projects)
import ${p.JaxbGenPackage}.*;
#end

/**
 * The marshaller responsible for serializing XML data.
 *
#if($author) * @author ${author}
#end
 */
public class $class.Name
#if($ImportPackage)
#set($object = ${ImportProject.getObject("AstToJaxb")})
  extends ${object.Package}.${object.Name}
  implements ${visitor.FullName}<javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term>>
  
##// --------------------------------------
##// ALL PROPERTIES
##// class 				= ${class}
##// class.getName		= ${class.getName()}
##// class.getClass       = ${class.getClass()}
##// class.getPackage     = ${class.getPackage()}
##// class.getImplPackage = ${class.getImplPackage()}
##// class.getVisitorPack = ${class.getVisitorPackage()}
##// class.getAllProps    = ${class.getAllProperties()}
##// --------------------------------------
##// forall(prop in class getAllProperties) 
##// #foreach($prop in ${class.getAllProperties()})
##//		prop 									  = ${prop}
##//		prop.getName							  = ${prop.getName()}
##//		#if(${prop.isList()})
##//		prop.getListType.getFullName 			  = ${prop.getListType().getFullName()}
##//		prop.getListType.getPackage  			  = ${prop.getListType().getPackage()}
##//
##//		prop.getListType.getProject  			  = ${prop.getListType().getProject().getClass()}
##//		prop.getListType.getProject.getAstPackage = ${prop.getListType().getProject().getAstPackage()}
##//		prop.getListType.getProject.getImplPackage= ${prop.getListType().getProject().getImplPackage()}
##//		#else
##//		prop.getType.getFullName 			  = ${prop.getType().getFullName()}
##//		prop.getType.getPackage  			  = ${prop.getType().getPackage()}
##//
##//		prop.getType.getProject  			  = ${prop.getType().getProject().getClass()}
##//		prop.getType.getProject.getAstPackage = ${prop.getType().getProject().getAstPackage()}
##//		prop.getType.getProject.getImplPackage= ${prop.getType().getProject().getImplPackage()}
##//		#end
##// --------------------------------------
##// #end
##// class.getProps       =${class.getProperties()}
##// --------------------------------------
##// forall(prop in class getProperties) 
##// #foreach($prop in ${class.getProperties()})
##//		prop 		       = ${prop}
##//		prop.getName	   = ${prop.getName()}
##//		prop.getClass      = ${prop.getClass()}
##//		prop.getVarName    = ${prop.VarName}
##//		prop.getMemVarName = ${prop.MemVarName}
##//		prop.getGetterName = ${prop.GetterName}
##//		prop.SetterName    = ${prop.SetterName}
##//		prop.getType	   = ${prop.getType().getClass()}
##//
##//		prop.Type.FullName       			  = ${prop.Type.FullName}
##//		prop.getType.getFullName 			  = ${prop.getType().getFullName()}
##//		prop.getType.getPackage  			  = ${prop.getType().getPackage()}
##//
##//		prop.getType.getProject  			  = ${prop.getType().getProject().getClass()}
##//		prop.getType.getProject.getAstPackage = ${prop.getType().getProject().getAstPackage()}
##//		prop.getType.getProject.getImplPackage= ${prop.getType().getProject().getImplPackage()}
##// --------------------------------------
##// #end
##// #if(${ImportProject})
##// ImportProject             = ${ImportProject}
##// ImportProject.BasePackage = ${ImportProject.BasePackage}
##// #end
##// --------------------------------------
##//
##// #foreach($c in $classes)
##// #if(!$c.Abstract)
	##// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	##// ALL PROPERTIES
	##// c 				= ${c}
	##// c.getName		= ${c.getName()}
	##// c.getClass       = ${c.getClass()}
	##// c.getPackage     = ${c.getPackage()}
	##// c.getImplPackage = ${c.getImplPackage()}
	##// c.getVisitorPack = ${c.getVisitorPackage()}
	##// c.getAllProps    = ${c.getAllProperties()}
	##// --------------------------------------
	##// forall(prop in c getAllProperties) 
	##// #foreach($prop in ${c.getAllProperties()})
	##//		prop 									  = ${prop}
	##//		prop.getName  							  = ${prop.getName()}
	##//		#if(${prop.isList()})
	##//		prop.getListType.getFullName 			  = ${prop.getListType().getFullName()}
	##//		prop.getListType.getPackage  			  = ${prop.getListType().getPackage()}
	##//
	##//		prop.getListType.getProject  			  = ${prop.getListType().getProject().getClass()}
	##//		prop.getListType.getProject.getAstPackage = ${prop.getListType().getProject().getAstPackage()}
	##//		prop.getListType.getProject.getImplPackage= ${prop.getListType().getProject().getImplPackage()}
	##//		#else
	##//		prop.getType.getFullName 			  = ${prop.getType().getFullName()}
	##//		prop.getType.getPackage  			  = ${prop.getType().getPackage()}
	##//
	##//		prop.getType.getProject  			  = ${prop.getType().getProject().getClass()}
	##//		prop.getType.getProject.getAstPackage = ${prop.getType().getProject().getAstPackage()}
	##//		prop.getType.getProject.getImplPackage= ${prop.getType().getProject().getImplPackage()}
	##//		#end
	##// --------------------------------------
	##// #end
	##// c.getProps       =${c.getProperties()}
	##// --------------------------------------
	##// forall(prop in c getProperties) 
	##// #foreach($prop in ${c.getProperties()})
	##//		prop 		       = ${prop}
	##//		prop.getName	   = ${prop.getName()}
	##//		prop.getClass      = ${prop.getClass()}
	##//		prop.getVarName    = ${prop.VarName}
	##//		prop.getMemVarName = ${prop.MemVarName}
	##//		prop.getGetterName = ${prop.GetterName}
	##//		prop.SetterName    = ${prop.SetterName}
	##//		prop.getType	   = ${prop.getType().getClass()}
	##//
	##//		prop.Type.FullName       			  = ${prop.Type.FullName}
	##//		prop.getType.getFullName 			  = ${prop.getType().getFullName()}
	##//		prop.getType.getPackage  			  = ${prop.getType().getPackage()}
	##//
	##//		prop.getType.getProject  			  = ${prop.getType().getProject().getClass()}
	##//		prop.getType.getProject.getAstPackage = ${prop.getType().getProject().getAstPackage()}
	##//		prop.getType.getProject.getImplPackage= ${prop.getType().getProject().getImplPackage()}
	##// #end
##// #end
##// #end
##// --------------------------------------

  
  
#else
  implements ${visitor.FullName}<javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term>>,
             net.sourceforge.czt.base.visitor.TermVisitor<javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term>>
#end
{
  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  private ${jaxbPackage}.ObjectFactory
    objectFactory_ = new ${jaxbPackage}.ObjectFactory();
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    annsObjectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();

  private String getClassName()
  {
    return "#package(${class.Package}).${class.Name}";
  }

  private java.util.logging.Logger getLogger()
  {
    return java.util.logging.Logger.getLogger(getClassName());
  }

  private net.sourceforge.czt.z.jaxb.gen.Term.Anns visitAnnotations(java.util.List<Object> list)
    throws javax.xml.bind.JAXBException
  {
      net.sourceforge.czt.z.jaxb.gen.Term.Anns anns =
        annsObjectFactory_.createTermAnns();
    java.util.List<Object> newlist = anns.getAny();
    for (Object obj : list) {
      if (obj instanceof net.sourceforge.czt.base.ast.Term) {
        net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) obj;
        try {
          Object visitedTerm = term.accept(this);
          newlist.add(visitedTerm);
        }
        catch (Exception e) {
          String message = "Annotation " + term + " cannot be handled; " +
            "drop it.";
          getLogger().warning(message);
          throw new net.sourceforge.czt.util.CztException(message, e);
        }
      }
    }
    return anns;
  }


  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTerm(net.sourceforge.czt.base.ast.Term zedObject)
  {
    String message = "Unexpected element " + zedObject.getClass().getName();
    throw(new UnsupportedOperationException(message));
  }

#foreach($c in $classes)
#if(! ${c.Abstract})
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visit${c.Name}(${project.AstPackage}.${c.Name} zedObject)
  {
    getLogger().entering(getClassName(), "visit${c.Name}", zedObject);
    try {
      ${project.JaxbGenPackage}.$c.Name jaxbObject = objectFactory_.create${c.Name}();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
#foreach($prop in $c.AllProperties)
#if($prop.Name == 'Content')
      {
        java.util.List<? extends Object> list = zedObject.getContent();
        if (list.size() == 1) {
          Object o = list.get(0);
          if (o instanceof net.sourceforge.czt.base.ast.Term) {
            o = ((net.sourceforge.czt.base.ast.Term) o).accept(this);
          }
          jaxbObject.setContent(o);
        }
        else if (list.size() > 1) {
          java.util.List<Object> newlist = new java.util.ArrayList<Object>();
          for (Object o : list) {
            if (o instanceof net.sourceforge.czt.base.ast.Term) {
              o = ((net.sourceforge.czt.base.ast.Term) o).accept(this);
            }
            newlist.add(o);
          }
          jaxbObject.setContent(newlist);
        }
      }
#elseif($prop.isList())
      {
    	##// TODO: Fix this. Needs to be raw types because there is a mix-up of types here still... 
        ##//@SuppressWarnings("rawtypes")
        ##//java.util.List newlist = jaxbObject.${prop.GetterName}();
        ##//for (Object o : zedObject.${prop.GetterName}()) {
        ##//  if (o instanceof net.sourceforge.czt.base.ast.Term) {
        ##//    o = ((net.sourceforge.czt.base.ast.Term) o).accept(this);
        ##//  }
        ##//  newlist.add(o);
        ##//  // TODO: this will still give a warning I won't be able to get rid of. Okay. argh...
        ##//}
        
        for (${prop.getListType().getFullName()} o : zedObject.${prop.GetterName}()) 
        {
		  javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
          if (r instanceof javax.xml.bind.JAXBElement<?>) 
        	  try {
        	  	  // NOTE:
        	  	  // although this cast should always be safe, I am  playing defensively by having 
        	  	  // the try/catch. This may make transformation slightly slower. Perhaps remove it
        	  	  // if exception never happens. Still to fully understand the hierarchy of JAXB well.
        	  	  // This is better than the previous solution with rawtypes and confused generic types. 
        		  @SuppressWarnings("unchecked")
        		  javax.xml.bind.JAXBElement<${project.JaxbGenPackage}.${prop.getListType().getName()}> t = 
        		  	(javax.xml.bind.JAXBElement<${project.JaxbGenPackage}.${prop.getListType().getName()}>)r;
        		  jaxbObject.${prop.GetterName}().add(t);
        	  } 
          	  catch (ClassCastException e)
        	  {
          		throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term to ${project.JaxbGenPackage}.${prop.getName()}");
        	  }
          else
        	  throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term to ${project.JaxbGenPackage}.${prop.getName()}");
        }
      }
#else
      if (zedObject.${prop.GetterName}() != null) {
#if($prop.Type.FullName == 'net.sourceforge.czt.base.ast.Digit' || $prop.Type.FullName == 'String' || $prop.Type.FullName == 'java.lang.String' || $prop.Type.FullName == 'java.math.BigInteger' || $prop.Type.FullName == 'java.lang.Integer' || $prop.Type.FullName == 'Integer' || $prop.Type.FullName == 'java.lang.Boolean' || $prop.Type.FullName == 'Boolean' || $prop.Type.FullName == 'Calendar' || $prop.Type.FullName == 'javax.xml.datatype.XMLGregorianCalendar')
        jaxbObject.${prop.SetterName}(zedObject.${prop.GetterName}());
#elseif($prop.Type.Name == 'Box' || $prop.Type.Name == 'Cat' || $prop.Type.Name == 'Assoc' || $prop.Type.Name == 'DirectiveType' || $prop.Type.Name == 'And' || $prop.Type.Name == 'CommUsage' || $prop.Type.Name == 'CommPattern' || $prop.Type.Name == 'CallUsage' || $prop.Type.Name == 'Model' || $prop.Type.Name == 'Transformation' || $prop.Type.Name == 'CircusJokerType' || $prop.Type.Name == 'ParamQualifier' || $prop.Type.Name == 'JokerType' || $prop.Type.Name == 'RewriteKind' || $prop.Type.Name == 'NormalizationKind' || $prop.Type.Name == 'CaseAnalysisKind' || $prop.Type.Name == 'SubstitutionKind' || $prop.Type.Name == 'RewritePower' || $prop.Type.Name == 'InstantiationKind' || $prop.Type.Name == 'ProofStepKind' || $prop.Type.Name == 'ProofStepScope' || $prop.Type.Name == 'LabelAbility' || $prop.Type.Name == 'LabelUsage')
        jaxbObject.${prop.SetterName}(${project.JaxbGenPackage}.${prop.Type.Name}.fromValue(zedObject.${prop.GetterName}().toString()));
#else
        net.sourceforge.czt.base.ast.Term term = zedObject.${prop.GetterName}();
        ##// (project.JaxbGenPackage).(prop.Type.Name) = ${project.JaxbGenPackage}.${prop.Type.Name}
        ##// @SuppressWarnings("unchecked")
        ##// (prop.Type.FullName)						 = ${prop.Type.FullName}
        javax.xml.bind.JAXBElement<${project.JaxbGenPackage}.${prop.Type.Name}> newValue = 
        	(javax.xml.bind.JAXBElement<${project.JaxbGenPackage}.${prop.Type.Name}>)term.accept(this);
        jaxbObject.${prop.SetterName}(newValue);
#end
      }
#end
#end
      getLogger().exiting(getClassName(), "visit${c.Name}", jaxbObject);
      return objectFactory_.create${c.Name}(jaxbObject);
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ${c.Name} to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
#end
#end
}
