#*
Copyright 2006 Petra Malik
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*#
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

#if($copyright)#include($copyright)#end
******************************************************************************/

package ${project.BasePackage}.${class.Package};

import java.util.*;

import net.sourceforge.czt.base.ast.Term;

import ${project.AstPackage}.*;
#foreach($p in $projects)
import ${p.AstPackage}.*;
#end

/**
 * <p>A flyweight object factory for the AST.</p>
 *
 * <p>This object factory maintains a set of terms that have been
 * created with this factory and returns those instead of creating a new
 * one when asked to create a Term that is equal to an already existing
 * one.</p>
 *
 * <p>This implementation is based on hash maps over Terms and is
 * therefore only applicable to Terms that are never modified.</p>
 *
#if($author) * @author ${author}
#end
 */
public class ${class.Name}
#if($ImportProject)
  extends ${ImportProject.getObject("flyFactory")}
#end
  implements  ${project.getObject("factory")}
{
  private ${project.getObject("factory")} factory_ =
    new ${project.getObject("factoryImpl")}();
    
    // TODO: couldn't this be ? extends Term? + String... ergh.
  private Map<List<Object>,Term> terms_ = new HashMap<List<Object>,Term>();
  private int nCreates_ = 0;

  /**
   * Creates a new flyweight factory that uses the given base factory
   * for creating AST terms.
   */
  public ${class.Name}(${project.getObject("factory")} factory)
  {
#if($ImportProject)
    super(factory);
#end
    factory_ = factory;
  }

#foreach($c in $classes)
#if(!$c.Abstract)
#set($head = "${c.Name} create${c.Name}")
  /**
   * Creates an instance of {@link ${c.Name}}.
   *
   * @return the new instance of ${c.Name}.
   */
  public ${head}()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("${c.Name}");
    ${c.Name} result = (${c.Name}) terms_.get(argList);
    if (result == null) {
      result = factory_.create${c.Name}();
      terms_.put(argList, result);
    }
    return result;
  }

#if($c.AllProperties.size() > 0)
  /**
   * Creates an instance of {@link ${c.Name}} with the given children.
   *
   * @return the new instance of ${c.Name}.
   */
  public ${head}(#factoryTypeVarList(${c.AllProperties}))
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>($c.AllProperties.size());
    argList.add("${c.Name}");
#foreach($prop in $c.AllProperties)
    argList.add(${prop.VarName});
#end
    ${c.Name} result = (${c.Name}) terms_.get(argList);
    if (result == null) {
      result = factory_.create${c.Name}(#varList(${c.AllProperties}));
      terms_.put(argList, result);
    }
    return result;
  }

#end
#end
#end

  /**
   * Returns the number of hashed Terms.
   */
  public int numberOfTerms()
  {
    return terms_.size();
  }

  /**
   * Returns the number of create calls to this factory so far.
   */
  public int numberOfCreates()
  {
    return nCreates_;
  }

#if($class.AdditionalCodeFilename)
#include($class.AdditionalCodeFilename)
#end
}
