#*
Copyright 2003, 2004, 2005, 2006 Petra Malik
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*#
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstInterface.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

#if($copyright)#include($copyright)#end
******************************************************************************/

package ${class.Package};

##// --------------------------------------
##// ALL PROPERTIES
##// class 				= ${class}
##// class.getName		= ${class.getName()}
##// class.getClass       = ${class.getClass()}
##// class.getPackage     = ${class.getPackage()}
##// class.getImplPackage = ${class.getImplPackage()}
##// class.getVisitorPack = ${class.getVisitorPackage()}
##// class.getAllProps    = ${class.getAllProperties()}
##// --------------------------------------
##// forall(prop in class getAllProperties) 
##// #foreach($prop in ${class.getAllProperties()})
##//		prop 									  = ${prop}
##//		prop.getName							  = ${prop.getName()}
##//		#if(${prop.isList()})
##//		prop.getListType.getFullName 			  = ${prop.getListType().getFullName()}
##//		prop.getListType.getPackage  			  = ${prop.getListType().getPackage()}
##//
##//		prop.getListType.getProject  			  = ${prop.getListType().getProject().getClass()}
##//		prop.getListType.getProject.getAstPackage = ${prop.getListType().getProject().getAstPackage()}
##//		prop.getListType.getProject.getImplPackage= ${prop.getListType().getProject().getImplPackage()}
##//		#else
##//		prop.getType.getFullName 			  = ${prop.getType().getFullName()}
##//		prop.getType.getPackage  			  = ${prop.getType().getPackage()}
##//
##//		prop.getType.getProject  			  = ${prop.getType().getProject().getClass()}
##//		prop.getType.getProject.getAstPackage = ${prop.getType().getProject().getAstPackage()}
##//		prop.getType.getProject.getImplPackage= ${prop.getType().getProject().getImplPackage()}
##//		#end
##// --------------------------------------
##// #end
##// class.getProps       =${class.getProperties()}
##// --------------------------------------
##// forall(prop in class getProperties) 
##// #foreach($prop in ${class.getProperties()})
##//		prop 		       = ${prop}
##//		prop.getName	   = ${prop.getName()}
##//		prop.getClass      = ${prop.getClass()}
##//		prop.getVarName    = ${prop.VarName}
##//		prop.getMemVarName = ${prop.MemVarName}
##//		prop.getGetterName = ${prop.GetterName}
##//		prop.SetterName    = ${prop.SetterName}
##//		prop.getType	   = ${prop.getType().getClass()}
##//
##//		prop.Type.FullName       			  = ${prop.Type.FullName}
##//		prop.getType.getFullName 			  = ${prop.getType().getFullName()}
##//		prop.getType.getPackage  			  = ${prop.getType().getPackage()}
##//
##//		prop.getType.getProject  			  = ${prop.getType().getProject().getClass()}
##//		prop.getType.getProject.getAstPackage = ${prop.getType().getProject().getAstPackage()}
##//		prop.getType.getProject.getImplPackage= ${prop.getType().getProject().getImplPackage()}
##// --------------------------------------
##// #end
##// #if(${ImportProject})
##// ImportProject             = ${ImportProject}
##// ImportProject.Name		 = ${ImportProject.getName()}	
##// ImportProject.BasePackage = ${ImportProject.BasePackage}
##// #end
##// --------------------------------------
##//
##// #foreach($c in $classes)
##// #if(!$c.Abstract)
	##// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	##// ALL PROPERTIES
	##// c 				= ${c}
	##// c.getName		= ${c.getName()}
	##// c.getClass       = ${c.getClass()}
	##// c.getPackage     = ${c.getPackage()}
	##// c.getImplPackage = ${c.getImplPackage()}
	##// c.getVisitorPack = ${c.getVisitorPackage()}
	##// c.getAllProps    = ${c.getAllProperties()}
	##// --------------------------------------
	##// forall(prop in c getAllProperties) 
	##// #foreach($prop in ${c.getAllProperties()})
	##//		prop 									  = ${prop}
	##//		prop.getName  							  = ${prop.getName()}
	##//		#if(${prop.isList()})
	##//		prop.getListType.getFullName 			  = ${prop.getListType().getFullName()}
	##//		prop.getListType.getPackage  			  = ${prop.getListType().getPackage()}
	##//
	##//		prop.getListType.getProject  			  = ${prop.getListType().getProject().getClass()}
	##//		prop.getListType.getProject.getAstPackage = ${prop.getListType().getProject().getAstPackage()}
	##//		prop.getListType.getProject.getImplPackage= ${prop.getListType().getProject().getImplPackage()}
	##//		#else
	##//		prop.getType.getFullName 			  = ${prop.getType().getFullName()}
	##//		prop.getType.getPackage  			  = ${prop.getType().getPackage()}
	##//
	##//		prop.getType.getProject  			  = ${prop.getType().getProject().getClass()}
	##//		prop.getType.getProject.getAstPackage = ${prop.getType().getProject().getAstPackage()}
	##//		prop.getType.getProject.getImplPackage= ${prop.getType().getProject().getImplPackage()}
	##//		#end
	##// --------------------------------------
	##// #end
	##// c.getProps       =${c.getProperties()}
	##// --------------------------------------
	##// forall(prop in c getProperties) 
	##// #foreach($prop in ${c.getProperties()})
	##//		prop 		       = ${prop}
	##//		prop.getName	   = ${prop.getName()}
	##//		prop.getClass      = ${prop.getClass()}
	##//		prop.getVarName    = ${prop.VarName}
	##//		prop.getMemVarName = ${prop.MemVarName}
	##//		prop.getGetterName = ${prop.GetterName}
	##//		prop.SetterName    = ${prop.SetterName}
	##//		prop.getType	   = ${prop.getType().getClass()}
	##//
	##//		prop.Type.FullName       			  = ${prop.Type.FullName}
	##//		prop.getType.getFullName 			  = ${prop.getType().getFullName()}
	##//		prop.getType.getPackage  			  = ${prop.getType().getPackage()}
	##//
	##//		prop.getType.getProject  			  = ${prop.getType().getProject().getClass()}
	##//		prop.getType.getProject.getAstPackage = ${prop.getType().getProject().getAstPackage()}
	##//		prop.getType.getProject.getImplPackage= ${prop.getType().getProject().getImplPackage()}
	##// #end
##// #end
##// #end
##// --------------------------------------


/**
#if(${class.Javadoc}) * ${class.Javadoc}
#end
 *
#if($author) * @author ${author}
#end
 */ 
 
## // class						= ${class}
##// class.Extends				= ${class.getExtends()}
##// class.getProject 			= ${class.getProject()}
##// class.getProject.getNameSpace= ${class.getProject().getNameSpace()}
##// class.getProject.getObject(e)= ${class.getProject().getObject(${class.getExtends()})} 

##// class.getProject.getAstClass(e)			      = ${class.getProject().getAstClass(${class.getExtends()})}
##// class.getProject.getAstClass(e).getPackage     = ${class.getProject().getAstClass(${class.getExtends()}).getPackage()}
##// class.getProject.getAstClass(e).getImplPackage = ${class.getProject().getAstClass(${class.getExtends()}).getImplPackage()}
##// class.getProject.getInheritedProps = ${class.getProject().getInheritedProperties()}

##// #if(${ImportProject})
##// ImportProject             = ${ImportProject}
##// ImportProject.Name		 = ${ImportProject.getName()}	
##// ImportProject.BasePackage = ${ImportProject.BasePackage}
##// IP.getAstClasses().containsKey(e) = ${ImportProject.getAstClasses().containsKey(${class.getExtends()})}
##// #if(!${ImportProject.getAstClasses().containsKey(e)} && ${ImportProject.getImportProject()})
##//	  IP.IP.Name     =  ${ImportProject.getImportProject().getName()}
##//	  IP.IP.Base     =  ${ImportProject.getImportProject().getBasePackage()}
##//    IP.IP.contains = ${ImportProject.getImportProject().getAstClasses().containsKey(${class.getExtends()})}
##// #end 
##// #end

public interface ${class.Name} #if($class.Extends)extends #if(${class.Extends.endsWith("Term")}) 
  		net.sourceforge.czt.base.ast.${class.Extends}
	#else
		#findRightAncestorPackageExtends($projects, $class)
	#end
	#if(${class.isList()}), java.util.List<${class.getAllProperties().get(0).getListType()}>#end
	#if(${class.Name} == 'HeadDeclList'),  net.sourceforge.czt.zpatt.util.HeadList#end
#end
{
#if(${class.isList()})
  ${class.Name} ${class.getAllProperties().get(0).GetterName}();
#else
#foreach($prop in $class.Properties)

#set($doc="${class.Name}.${prop.Name}")
#if(${prop.isList()})
  /**
   * <p>Returns the ${prop.Name} elements.</p>
#if(${javadoc.get(${doc})})   * <p>${javadoc.get(${doc})}</p>
#end
   * <p>To add or remove elements, use the methods provided by
   * the List interface (that's why there is no need for a setter
   * method).</p>
   *
   * @return a list of ${prop.ListType.Name} elements.
   */
  net.sourceforge.czt.base.ast.ListTerm<${prop.ListType.FullName}> ${prop.GetterName}();
#else
  /**
   * Returns the ${prop.Name} element.
#if(${javadoc.get(${doc})})   * ${javadoc.get(${doc})}
#end
   *
   * @return the ${prop.Name} element.
   */
  ${prop.Type.FullName} ${prop.GetterName}();

#if(${prop.Type.Name} == 'ExprList' || ${prop.Type.Name} == 'RenameList' || ${prop.Type.Name} == 'NameList' || ${prop.Type.Name} == 'DeclList')
#if(${prop.GetterName} == "get${prop.Type.Name}")

  /**
   * This is a convenience method.
   * It returns a Z${prop.Type.Name} if #${prop.GetterName}
   * returns an instance of Z${prop.Type.Name}
   * and throws an UnsupportedAstClassException otherwise.
   */
  ${prop.Type.Package}.Z${prop.Type.Name} getZ${prop.Type.Name}();
#end
#end
#end
#if(! (${prop.isList()}))

  /**
   * Sets the ${prop.Name} element.
   *
   * @param ${prop.VarName}   the ${prop.Name} element.
   * @see #${prop.GetterName}
   */
  void ${prop.SetterName}(${prop.Type.FullName} ${prop.VarName});
#end
#end
#if($class.AdditionalCodeFilename)
#include($class.AdditionalCodeFilename)
#end
#end
}
