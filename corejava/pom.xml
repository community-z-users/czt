<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!-- jhr, see https://maven.apache.org/pom.html#Inheritance
       This pom inherits from its parent artifact -->
  <parent>
    <groupId>net.sourceforge.czt</groupId>
    <artifactId>czt-parent</artifactId>
    <version>1.6-SNAPSHOT</version>
  </parent>

  <artifactId>corejava-parent</artifactId>
  <packaging>pom</packaging>  

  <name>CZT Corejava</name>
  <description>
    Provides AST classes for Z and Z extensions.
  </description>

  <dependencies>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>util</artifactId>
      <version>${project.version}</version>
    </dependency>
    <!-- jhr, modules (corejava-z etc.) are built against JAXB which is bundled 
         with jdk-8 but not with jdk-11. Dependencies to solve JAXB need to be 
         added to each module for:
                <artifactId>maven-jaxb2-plugin</artifactId>,
                <artifactId>maven-surefire-plugin</artifactId>
         and (some of) the same dependencies need to be added here to be 
         included on the javac classpath, for build and test :  -->
    <dependency>
      <groupId>jakarta.xml.bind</groupId>
      <artifactId>jakarta.xml.bind-api</artifactId>  <!-- required for builds -->
      <version>${jaxb.api.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jaxb</groupId>
      <artifactId>jaxb-runtime</artifactId>   <!-- jaxb-impl required for tests -->
      <version>${jaxb.api.version}</version>
    </dependency>
  </dependencies>

  <properties>
    <build.xml.dir>${project.basedir}/target/generated-sources/xml/xslt</build.xml.dir>
    <xml.dir>${project.basedir}/src/main/resources/xml</xml.dir>
    <xsl.dir>${project.basedir}/src/main/resources/xsl</xsl.dir>
    <jaxb.xsd.dir>${project.basedir}/target/generated-resources/xml/xslt</jaxb.xsd.dir>
    <jaxb.dir>${project.basedir}/target/generated-sources/jaxb</jaxb.dir>
    <!-- jhr, for JDK 11 and later, choose the version of jaxb to bind with: 
         CZT is built with a javax xml binding, and this has been superceded by 
         the Jakarta xml binding after JDK 9.
         Jakarta EE 8 (version 2.3.x) uses previous javax interface;
         whereas EE 9 (version 3.0.0) uses new jakarta api requiring source 
         changes: import javax.xml.bind becomes import jakarta.xml.bind -->
    <jaxb.api.version>2.3.3</jaxb.api.version>
    <jaxb.core.version>2.3.0</jaxb.core.version>
    <javax.activation.version>1.1.1</javax.activation.version>
  </properties>

  <!-- jhr, This pom is itself a parent (has modules);
       see https://maven.apache.org/pom.html#aggregation-or-multi-module -->
  <modules>
    <module>corejava-src</module>
    <module>corejava-z</module>
    <module>corejava-zpatt</module>
    <module>corejava-zeves</module>
    <module>corejava-oz</module>
    <module>corejava-circus</module>
    <module>corejava-circuspatt</module>
    <module>corejava-circustime</module>
    <module>corejava-circusconf</module>
  </modules>

  <build>
    <pluginManagement> <!-- jhr, see https://maven.apache.org/pom.html#plugin-management -->
    <plugins> <!-- jhr, see https://maven.apache.org/pom.html#plugins -->

      <!-- Put GnAST plugin first since xml generation ought to generate to ./gnast as well -->
      <!-- jhr, The order of execution (as per log file versus mvn help:
           effective-pom) follows the order of pluginManagement (i.e. the parent 
           pom order), with other steps (like clean, compile) inserted, and not 
           the local (child) plugin order. 
           
           We want generate-sources phase Goal gnast-maven-plugin to generate 
           the AST and visitor class sources before the compile phase Goal 
           maven-compiler-plugin:compile and after Goal 
           maven-jaxb2-plugin:generate (generate-jaxb) execute. 
           But Goal gnast-maven-plugin:generate in the generate-sources phase is 
           missed - we see gnast-maven-plugin is the only <execution> that has 
           no <Goals> associated in mvn help:effective-pom. This is resolved by
           naming gnast-maven-plugin within pluginManagement in the child module 
           poms, after which the parent Goal is added seen in help:effective-pom. 
           See https://stackoverflow.com/questions/13250377/how-to-override-default-binding-to-phase-of-a-maven-plugin
      -->
      <plugin>
        <groupId>${czt.dev.groupId}</groupId>
        <artifactId>gnast-maven-plugin</artifactId>
        <version>1.6-SNAPSHOT</version>
        <executions>
          <execution>
            <!-- jhr, gnast-maven-plugin has only one goal, but we give it an 
                 id for tracing in the log file -->
            <id>generate-ast-and-visitors</id>  
            <!-- jhr, Mojo goal bound to phase, see default in
                 dev\gnast-maven-plugin\src\main\java/net/sourceforge/czt/gnast/maven/GnastGenerateMojo.java:64 -->
            <phase>generate-sources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <!-- Additional project-specific GnAST templates in every (module) project. -->
              <templates>
                <!-- jhr, default value is: ${project.basedir}/src/main/resources/vm/gnast/ 
                     dev\gnast-maven-plugin\src\main\java\net\sourceforge\czt\gnast\maven\GnastGenerateMojo.java:87;184 -->
                <!-- jhr, gnast does not merge the content from src/main/resources/vm/gnast/*.java 
                     into those files in target\generated-sources\gnast\net\sourceforge\czt\z\*\;
                     i think it must have in the past, so something in maven/plugin/velocity has 
                     changed; so we modified gnast with "check overrides" to recover that function -->
                <templateDirectory>${project.basedir}/src/main/resources/vm/gnast</templateDirectory>
                <!-- the common /vm/gnast directory is a classpath resource, 
                     in which templates may be placed to override base templates.
                     jhr see corejava-z\[src/main/resources/|target]\classes\vm\gnast\ 
                         and corejava-src\[src/main/resources/|target]\classes\vm\gnast\ -->
                <templateDirectory>/vm/gnast</templateDirectory> 
              </templates>
              <!-- gnast-mapping.properties as classpath resource (in corejava-src module) -->
              <!-- jhr, corejava-src\target\classes\gnast-mapping.properties -->
              <mappingFileLocation>/gnast-mapping.properties</mappingFileLocation>
              <sourceSchemas>
                <!-- Couldn't these be inferred from the context? -->
                <!-- jhr, see corejava-src\target\classes\xsl\annotateJaxBindings.xsl -->
                <schemaLocation>net/sourceforge/czt/zml/xsd/CircusConf.xsd</schemaLocation>
                <schemaLocation>net/sourceforge/czt/zml/xsd/CircusTime.xsd</schemaLocation>
                <schemaLocation>net/sourceforge/czt/zml/xsd/Circus.xsd</schemaLocation>
                <schemaLocation>net/sourceforge/czt/zml/xsd/CircusPattern.xsd</schemaLocation>
                <schemaLocation>net/sourceforge/czt/zml/xsd/Object-Z.xsd</schemaLocation>
                <schemaLocation>net/sourceforge/czt/zml/xsd/Z.xsd</schemaLocation>
                <schemaLocation>net/sourceforge/czt/zml/xsd/ZEves.xsd</schemaLocation>
                <schemaLocation>net/sourceforge/czt/zml/xsd/ZPattern.xsd</schemaLocation>
                <!-- jhr, each module (eg. corejava-z) pom to supply targetNamespace, as in:
                <configuration>
                  <targetNamespace>${zml.schema.namespace}</targetNamespace>
                </configuration>
                -->
              </sourceSchemas>
              <addAstFinaliser>false</addAstFinaliser>
              <verbose>true</verbose>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <!-- Depend on ZML to locate the ZML schema files -->
            <groupId>${project.groupId}</groupId>
            <artifactId>zml</artifactId>
            <version>${project.version}</version>
          </dependency>
          <dependency>
            <!-- Depend on corejava-src to locate template files and mapping.properties -->
            <groupId>${project.groupId}</groupId>
            <artifactId>corejava-src</artifactId>
            <version>${project.version}</version>
          </dependency>
          <dependency>
             <!-- Depend on specific version of velocity (mvnrepository.com) 
                  v1.5 dates from 2010, v1.7 from 2016, making it more likely CZT used 1.5 previously -->
            <groupId>org.apache.velocity</groupId>
            <artifactId>velocity</artifactId>
            <version>1.5</version>
          </dependency>
        </dependencies>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>xml-maven-plugin</artifactId>
        <version>1.0</version>
        <executions>
          <execution>
            <id>generate-chars</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>transform</goal>
            </goals>
            <configuration>
              <transformationSets>
                <transformationSet>
                  <dir>${xml.dir}</dir>
                  <!-- each module shall specify the files in $xml.dir to be 
                  included for transformation, such as:
                  <includes>
                    <include>zchar.xml</include>
                  </includes>
                  -->
                  <outputDir>${build.xml.dir}/</outputDir>
                  <fileMappers>
                    <fileMapper implementation="org.codehaus.plexus.components.io.filemappers.MergeFileMapper">
                      <!-- each module shall specify the target file to be 
                      generated in the zchar style, such as:
                      <targetName>net/sourceforge/czt/z/util/ZChar.java</targetName>
                      -->
                    </fileMapper>
                  </fileMappers>
                  <!-- 
                  <stylesheet>${xsl.dir}/zchar2class.xsl</stylesheet>
                  -->
                </transformationSet>
                <transformationSet>
                  <dir>${xml.dir}</dir>
                  <!-- 
                  <includes>
                    <include>zchar.xml</include>
                  </includes>
                  -->
                  <outputDir>${build.xml.dir}/</outputDir>
                  <fileMappers>
                    <fileMapper implementation="org.codehaus.plexus.components.io.filemappers.MergeFileMapper">
                      <!-- each module shall specify the target file to be 
                      generated in the zstring style, such as:
                      <targetName>net/sourceforge/czt/z/util/ZString.java</targetName>
                      -->
                    </fileMapper>
                  </fileMappers>
                  <!-- 
                  <stylesheet>${xsl.dir}/zchar2stringclass.xsl</stylesheet>
                   -->
                </transformationSet>
              </transformationSets>
            </configuration>
          </execution>

          <execution>
            <!-- Annotates ZML schema with missing JAXB annotations, e.g. adds specific complex types
                 for elements sharing some type. -->
            <id>annotate-jaxb</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>transform</goal>
            </goals>
            <configuration>
              <transformationSets>
                <transformationSet>
                  <dir>${project.basedir}/../../zml/src/main/resources/net/sourceforge/czt/zml/xsd</dir>
                  <includes>
                    <include>*.xsd</include>
                  </includes>
                  <outputDir>${jaxb.xsd.dir}</outputDir>
                  <!-- Stylesheet is in classpath, `corejava-src` project -->
                  <stylesheet>/xsl/annotateJaxbBindings.xsl</stylesheet>
                  <addedToClasspath>false</addedToClasspath>
                </transformationSet>
              </transformationSets>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <!-- Depend on corejava-src to locate stylesheet -->
            <groupId>${project.groupId}</groupId>
            <artifactId>corejava-src</artifactId>
            <version>${project.version}</version>
          </dependency>
        </dependencies>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>1.7</version>
        <executions>
          <execution>
            <id>add-source</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${build.xml.dir}</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.jvnet.jaxb2.maven2</groupId>
        <artifactId>maven-jaxb2-plugin</artifactId>
        <version>0.8.2</version>
        <executions>
          <execution>
            <id>generate-jaxb</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <schemaDirectory>${jaxb.xsd.dir}</schemaDirectory>
              <!-- Each corejava module must supply their XSD schema include 
                   so that only the required schema JAXB is generated, by:
              <schemaIncludes>
                <include>Z.xsd</include>
              </schemaIncludes>
              -->
              <generateDirectory>${jaxb.dir}</generateDirectory>
              <!-- Could not get Episode to work - see comments on `maven-clean-plugin:clean-extra-jaxb`.
              <episode>true</episode> 
              <extension>true</extension>
              -->
              <!-- jhr, it is here that the JAXB generated sources are located, 
                   including classes that need the visitor pattern construction from gnast in
                   ...\corejava\corejava-xxx\target\generated-sources\jaxb\net\sourceforge\czt\z\jaxb\gen
              -->
            </configuration>
          </execution>
        </executions>
      </plugin>
      
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <version>2.5</version>
        <executions>
          <execution>
            <!-- A workaround to split JAXB generation between projects.
            
                 The "proper" way to do separate compilation with JAXB is to use .episode files, which
                 indicate the bindings for each separate compilation. Unfortunately, I could not get it
                 working properly because of several things:
                 
                   - XJC (JAXB generator) does not allow using <jaxb:schemaBindings> in XSD files when
                     used together with .episode files. It complains about multiple schemaBindings definitions.
                     As a workaround, all jaxb:* elements should be cleaned from all schemas that have
                     .episode files defined for them. (Currently all ZML XSDs have jaxb:* elements).
                     This can be done using additional XSL tranformation to remove all jaxb:* elements. 
                   - Even with the above fixed, XJC generated additional ObjectFactory for parent schemas,
                     which I did not find how to suppress. This would result in too many ObjectFactories
                     around, and compilation errors arising from them.
                     
                 Because of these issues, I opted for another way to split the JAXB generation. In every
                 project, JAXB for a specific XSD is generated (which generates JAXB for all its parents
                 as well - so for ZPatt, there are both `z` and `zpatt` packages). Then `clean` plugin is
                 used to delete these extra parent packages manually. This way only the required package
                 is left (`zpatt` in this case - `z` is deleted and referenced from dependency instead).
                 
                 This workaround has been suggested in a number of queries on JAXB, when XJC is too strict
                 for a certain problem. 
             
             	 LF: I think I follow. One question: how to remove the long delay in rebuilding corejava
             	 	 everytime one starts the IDE? In the past we had some flag (or even file) somewhere
             	 	 to say that files were old hence no need for re-generation.     
             -->
            <id>clean-extra-jaxb</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>clean</goal>
            </goals>
            <configuration>
              <excludeDefaultDirectories>true</excludeDefaultDirectories>
              <filesets>
                <fileset>
                  <directory>${jaxb.dir}</directory>
                  <!-- By default, delete the whole output dir of JAXB generation. Each Corejava project
                       must indicate which package to exclude from deletion, e.g.:
                  <excludes>
                    <exclude>net/sourceforge/czt/z/jaxb/gen/*</exclude>
                  </excludes>
                  -->
                  <followSymlinks>false</followSymlinks>
                </fileset>
              </filesets>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <configuration>
          <instructions>
            <!-- Exclude the internal package from being added to `Import-Package`, otherwise
                 it breaks the build since the internal package cannot be resolved from
                 system.bundle in Tycho. -->
            <Import-Package>!com.sun.org.apache.xerces.internal.dom,*</Import-Package>
          </instructions>
        </configuration>
      </plugin>

      <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
      <plugin>
        <groupId>org.eclipse.m2e</groupId>
        <artifactId>lifecycle-mapping</artifactId>
        <version>1.0.0</version>
        <configuration>
          <lifecycleMappingMetadata>
            <pluginExecutions>
              <pluginExecution>
                <pluginExecutionFilter>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-clean-plugin</artifactId>
                  <versionRange>[2.0,)</versionRange>
                  <goals>
                    <goal>clean</goal>
                  </goals>
                </pluginExecutionFilter>
                <action>
                  <execute>
                    <!-- Run clean on incremental - if the extra generated files are added during incremental
                         build, remove them every time. -->
                    <runOnIncremental>true</runOnIncremental>
                  </execute>
                </action>
              </pluginExecution>
            </pluginExecutions>
          </lifecycleMappingMetadata>
        </configuration>
      </plugin>
    </plugins>
    </pluginManagement>
  </build>


  <!-- Put site under /corejava -->
  <url>${site.url}/corejava</url>

  <distributionManagement>
    <site>
      <id>${site.deploy.id}</id>
      <url>${site.deploy.url}/corejava</url>
    </site>
  </distributionManagement>

</project>
