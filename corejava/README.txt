-------------------
Welcome to corejava
-------------------

Corejava is part of the CZT project that aims at providing a framework
for building formal methods tools, especially for the Z specification
language.

For more information, please have a look in the doc/ directory, as
well as the CZT web site
http://czt.sourceforge.net/

Here is a description of what each of the top level directories
contains:

build/      This is a temporary build directory.
doc/        This is where the documentation lives.
examples/   This is where the examples live.
lib/	    This is where the jar files live.
src/        This is where all of the source code lives.
tests/      This is where all of the tests live.
            
Requirements
************

- Java 2 SDK 1.4
  http://java.sun.com/j2se/
- Ant
  http://ant.apache.org/
- Java Web Services Developer Pack (JWSDP) 1.3
  http://java.sun.com/webservices/downloads/webservicespack.html
- Junit (only needed for running the tests)
  http://www.junit.org
are required to build and run corejava.

If you don't have one of these installed on your system,
you must download and install it to compile and run the software.

Make sure that ant is in your search path, and set the property
jwsdp.home in the file build.properties to the home directory of your
JWSDP installation.

Compile
*******
Change to the directory where this file is in, customise the build
properties contained in the file build.properties, and call ant.  By
default, ant will build a jar file containing all corejava classes
and the API documentation located in doc/api.
Optionally, you can pass one of the following build targets as an
argument to Ant:

	all		- builds the jar file and the API documentation
	api		- builds the API documentation
	clean		- removes all files generated by build targets
	examples	- builds the example programs and runs them
	jar		- builds the jar
	test		- builds the test cases and runs them

What next?
**********
Have a look in the examples directory.  Here is a short overview:

	marshal			- marshalling to XML (into a file
				  or to stdout)
	substitutionVisitor 	- an example of a visitor;
		learn how you can write your own visitor for the AST
		classes and perform some kind of substitution
	unmarshal		- unmarshalling an XML file

Read the API documentation in doc/api (you have to build it by calling
'ant' or 'ant api' before you can read it).

Questions, Feedback, Bug Reports
********************************
Please visit our web-site at
http://sourceforge.net/projects/czt/
There you can file bugs, ask for help, provide patches, ...
