
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstClass.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.impl;

import java.util.*;
import java.util.logging.*;

import net.sourceforge.czt.base.ast.*;
import net.sourceforge.czt.base.impl.*;
import net.sourceforge.czt.base.visitor.*;
import net.sourceforge.czt.util.Visitor;
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.visitor.*;

import net.sourceforge.czt.z.visitor.ZDeclNameVisitor;

/**
 * An implementation of the interface
 * {@link ZDeclName}.
 *
 * @author Gnast version 0.1
 */
public class ZDeclNameImpl
  extends DeclNameImpl   implements ZDeclName
{
  /**
   * The default constructor.
   *
   * Do not use it explicitly, unless you are extending this class.
   * If you want to create an instance of this class, please use the
   * {@link net.sourceforge.czt.z.ast.ZFactory object factory}.
   */
  protected ZDeclNameImpl()
  {
  }

  protected ZDeclNameImpl(BaseFactory factory)
  {
    super(factory);
  }

  /**
   * Compares the specified object with this ZDeclNameImpl
   * for equality.  Returns true if and only if the specified object is
   * also a(n) ZDeclNameImpl and all the getter methods except getAnns
   * return equal objects.
   */
  public boolean equals(Object obj)
  {
    if (obj != null) {
      if (this.getClass().equals(obj.getClass()) && super.equals(obj)) {
        ZDeclNameImpl object = (ZDeclNameImpl) obj;
        if (word_ != null) {
          if (!word_.equals(object.word_)) {
            return false;
          }
        }
        else {
          if (object.word_ != null) {
            return false;
          }
        }
        if (strokeList_ != null) {
          if (!strokeList_.equals(object.strokeList_)) {
            return false;
          }
        }
        else {
          if (object.strokeList_ != null) {
            return false;
          }
        }
        if (id_ != null) {
          if (!id_.equals(object.id_)) {
            return false;
          }
        }
        else {
          if (object.id_ != null) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }

  /**
   * Returns the hash code value for this ZDeclNameImpl.
   */
  public int hashCode()
  {
    final int constant = 31;

    int hashCode = super.hashCode();
    hashCode += "ZDeclNameImpl".hashCode();
    if (word_ != null) {
      hashCode += constant * word_.hashCode();
    }
    if (strokeList_ != null) {
      hashCode += constant * strokeList_.hashCode();
    }
    if (id_ != null) {
      hashCode += constant * id_.hashCode();
    }
    return hashCode;
  }

  /**
   * Accepts a visitor.
   */
  public <R> R accept(net.sourceforge.czt.util.Visitor<R> v)
  {
    if (v instanceof ZDeclNameVisitor) {
      ZDeclNameVisitor<R> visitor = (ZDeclNameVisitor<R>) v;
      return visitor.visitZDeclName(this);
    }
    return super.accept(v);
  }

  /**
   * Returns a new object of this class.
   */
  public ZDeclNameImpl create(Object[] args)
  {
    ZDeclNameImpl zedObject = null;
    try {
      String word = (String) args[0];
      StrokeList strokeList = (StrokeList) args[1];
      String id = (String) args[2];
      zedObject = new ZDeclNameImpl(getFactory());
      zedObject.setWord(word);
      zedObject.setStrokeList(strokeList);
      zedObject.setId(id);
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException();
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException();
    }
    return zedObject;
  }

  public Object[] getChildren()
  {
    Object[] erg = { getWord(), getStrokeList(), getId() };
    return erg;
  }

  private String word_;

  public String getWord()
  {
    return word_;
  }

  public void setWord(String word)
  {
    word_ = word;
  }

  private StrokeList strokeList_;

  public StrokeList getStrokeList()
  {
    return strokeList_;
  }

  public void setStrokeList(StrokeList strokeList)
  {
    strokeList_ = strokeList;
  }

  private String id_;

  public String getId()
  {
    return id_;
  }

  public void setId(String id)
  {
    id_ = id;
  }

  public net.sourceforge.czt.z.util.OperatorName getOperatorName()
  {
    try {
      return new net.sourceforge.czt.z.util.OperatorName(this);
    }
    catch(net.sourceforge.czt.z.util.OperatorName.OperatorNameException e) {
      return null;
    }
  }

  public ZStrokeList getZStrokeList()
  {
    StrokeList strokeList = getStrokeList();
    if (strokeList instanceof ZStrokeList) {
      return (ZStrokeList) strokeList;
    }
    throw new net.sourceforge.czt.base.util.UnsupportedAstClassException();
  }
}
