
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactoryImpl.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.oz.impl;

import net.sourceforge.czt.base.util.VisitorImpl;

import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.oz.ast.*;
import net.sourceforge.czt.oz.util.PrintVisitor;

/**
 * <p>An implementation of the object factory for constructing
 * concrete Z terms.  Each factory method returns an instance
 * of the corresponding class provided in this package.</p>
 *
 * @author Gnast version 0.1
 */
public class OzFactoryImpl
  extends net.sourceforge.czt.z.impl.ZFactoryImpl
  implements net.sourceforge.czt.oz.ast.OzFactory
{
  protected OzFactoryImpl(VisitorImpl<String> toStringVisitor)
  {
    super(toStringVisitor);
  }

  public OzFactoryImpl()
  {
    super(new PrintVisitor());
  }

  public SecondaryDecl createSecondaryDecl()
  {
    SecondaryDecl zedObject = new SecondaryDeclImpl(this);
    return zedObject;
  }

  public SecondaryDecl createSecondaryDecl( net.sourceforge.czt.z.ast.DeclList  declList)
  {
    SecondaryDecl zedObject = createSecondaryDecl();
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public ClassRefType createClassRefType()
  {
    ClassRefType zedObject = new ClassRefTypeImpl(this);
    return zedObject;
  }

  public ClassRefType createClassRefType( ClassSig  classSig, ClassRef  thisClass,java.util.List<? extends ClassRef>
 superClass, VisibilityList  visibilityList,java.util.List<? extends net.sourceforge.czt.z.ast.DeclName>
 primary)
  {
    ClassRefType zedObject = createClassRefType();
    zedObject.setClassSig(classSig);
    zedObject.setThisClass(thisClass);
    if (superClass != null) {
      zedObject.getSuperClass().addAll(superClass);
    }
    zedObject.setVisibilityList(visibilityList);
    if (primary != null) {
      zedObject.getPrimary().addAll(primary);
    }
    return zedObject;
  }

  public ClassRef createClassRef()
  {
    ClassRef zedObject = new ClassRefImpl(this);
    return zedObject;
  }

  public ClassRef createClassRef( net.sourceforge.czt.z.ast.RefName  refName,java.util.List<? extends net.sourceforge.czt.z.ast.Type2>
 type,java.util.List<? extends net.sourceforge.czt.z.ast.NewOldPair>
 newOldPair)
  {
    ClassRef zedObject = createClassRef();
    zedObject.setRefName(refName);
    if (type != null) {
      zedObject.getType().addAll(type);
    }
    if (newOldPair != null) {
      zedObject.getNewOldPair().addAll(newOldPair);
    }
    return zedObject;
  }

  public DistConjOpExpr createDistConjOpExpr()
  {
    DistConjOpExpr zedObject = new DistConjOpExprImpl(this);
    return zedObject;
  }

  public DistConjOpExpr createDistConjOpExpr( net.sourceforge.czt.z.ast.SchText  schText, OpExpr  opExpr)
  {
    DistConjOpExpr zedObject = createDistConjOpExpr();
    zedObject.setSchText(schText);
    zedObject.setOpExpr(opExpr);
    return zedObject;
  }

  public VisibilityList createVisibilityList()
  {
    VisibilityList zedObject = new VisibilityListImpl(this);
    return zedObject;
  }

  public VisibilityList createVisibilityList(java.util.List<? extends net.sourceforge.czt.z.ast.ZRefName>
 zRefName)
  {
    VisibilityList zedObject = createVisibilityList();
    if (zRefName != null) {
      zedObject.getZRefName().addAll(zRefName);
    }
    return zedObject;
  }

  public PolyExpr createPolyExpr()
  {
    PolyExpr zedObject = new PolyExprImpl(this);
    return zedObject;
  }

  public PolyExpr createPolyExpr( Expr  expr)
  {
    PolyExpr zedObject = createPolyExpr();
    zedObject.setExpr(expr);
    return zedObject;
  }

  public HideOpExpr createHideOpExpr()
  {
    HideOpExpr zedObject = new HideOpExprImpl(this);
    return zedObject;
  }

  public HideOpExpr createHideOpExpr( OpExpr  opExpr, net.sourceforge.czt.z.ast.RefNameList  refNameList)
  {
    HideOpExpr zedObject = createHideOpExpr();
    zedObject.setOpExpr(opExpr);
    zedObject.setRefNameList(refNameList);
    return zedObject;
  }

  public SeqOpExpr createSeqOpExpr()
  {
    SeqOpExpr zedObject = new SeqOpExprImpl(this);
    return zedObject;
  }

  public SeqOpExpr createSeqOpExpr( OpExpr  leftOpExpr, OpExpr  rightOpExpr)
  {
    SeqOpExpr zedObject = createSeqOpExpr();
    zedObject.setLeftOpExpr(leftOpExpr);
    zedObject.setRightOpExpr(rightOpExpr);
    return zedObject;
  }

  public NameSignaturePair createNameSignaturePair()
  {
    NameSignaturePair zedObject = new NameSignaturePairImpl(this);
    return zedObject;
  }

  public NameSignaturePair createNameSignaturePair( net.sourceforge.czt.z.ast.DeclName  declName, net.sourceforge.czt.z.ast.Signature  signature)
  {
    NameSignaturePair zedObject = createNameSignaturePair();
    zedObject.setDeclName(declName);
    zedObject.setSignature(signature);
    return zedObject;
  }

  public ClassSig createClassSig()
  {
    ClassSig zedObject = new ClassSigImpl(this);
    return zedObject;
  }

  public ClassSig createClassSig(java.util.List<? extends ClassRef>
 classes, net.sourceforge.czt.z.ast.Signature  state,java.util.List<? extends net.sourceforge.czt.z.ast.NameTypePair>
 attribute,java.util.List<? extends NameSignaturePair>
 operation)
  {
    ClassSig zedObject = createClassSig();
    if (classes != null) {
      zedObject.getClasses().addAll(classes);
    }
    zedObject.setState(state);
    if (attribute != null) {
      zedObject.getAttribute().addAll(attribute);
    }
    if (operation != null) {
      zedObject.getOperation().addAll(operation);
    }
    return zedObject;
  }

  public OpText createOpText()
  {
    OpText zedObject = new OpTextImpl(this);
    return zedObject;
  }

  public OpText createOpText( DeltaList  deltaList, net.sourceforge.czt.z.ast.SchText  schText)
  {
    OpText zedObject = createOpText();
    zedObject.setDeltaList(deltaList);
    zedObject.setSchText(schText);
    return zedObject;
  }

  public DistChoiceOpExpr createDistChoiceOpExpr()
  {
    DistChoiceOpExpr zedObject = new DistChoiceOpExprImpl(this);
    return zedObject;
  }

  public DistChoiceOpExpr createDistChoiceOpExpr( net.sourceforge.czt.z.ast.SchText  schText, OpExpr  opExpr)
  {
    DistChoiceOpExpr zedObject = createDistChoiceOpExpr();
    zedObject.setSchText(schText);
    zedObject.setOpExpr(opExpr);
    return zedObject;
  }

  public AssoParallelOpExpr createAssoParallelOpExpr()
  {
    AssoParallelOpExpr zedObject = new AssoParallelOpExprImpl(this);
    return zedObject;
  }

  public AssoParallelOpExpr createAssoParallelOpExpr( OpExpr  leftOpExpr, OpExpr  rightOpExpr)
  {
    AssoParallelOpExpr zedObject = createAssoParallelOpExpr();
    zedObject.setLeftOpExpr(leftOpExpr);
    zedObject.setRightOpExpr(rightOpExpr);
    return zedObject;
  }

  public DeltaList createDeltaList()
  {
    DeltaList zedObject = new DeltaListImpl(this);
    return zedObject;
  }

  public DeltaList createDeltaList(java.util.List<? extends net.sourceforge.czt.z.ast.RefName>
 refName)
  {
    DeltaList zedObject = createDeltaList();
    if (refName != null) {
      zedObject.getRefName().addAll(refName);
    }
    return zedObject;
  }

  public State createState()
  {
    State zedObject = new StateImpl(this);
    return zedObject;
  }

  public State createState( PrimaryDecl  primaryDecl, SecondaryDecl  secondaryDecl, net.sourceforge.czt.z.ast.Pred  pred, net.sourceforge.czt.z.ast.Box  box)
  {
    State zedObject = createState();
    zedObject.setPrimaryDecl(primaryDecl);
    zedObject.setSecondaryDecl(secondaryDecl);
    zedObject.setPred(pred);
    zedObject.setBox(box);
    return zedObject;
  }

  public OpPromotionExpr createOpPromotionExpr()
  {
    OpPromotionExpr zedObject = new OpPromotionExprImpl(this);
    return zedObject;
  }

  public OpPromotionExpr createOpPromotionExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.RefName  refName)
  {
    OpPromotionExpr zedObject = createOpPromotionExpr();
    zedObject.setExpr(expr);
    zedObject.setRefName(refName);
    return zedObject;
  }

  public ConjOpExpr createConjOpExpr()
  {
    ConjOpExpr zedObject = new ConjOpExprImpl(this);
    return zedObject;
  }

  public ConjOpExpr createConjOpExpr( OpExpr  leftOpExpr, OpExpr  rightOpExpr)
  {
    ConjOpExpr zedObject = createConjOpExpr();
    zedObject.setLeftOpExpr(leftOpExpr);
    zedObject.setRightOpExpr(rightOpExpr);
    return zedObject;
  }

  public ClassPara createClassPara()
  {
    ClassPara zedObject = new ClassParaImpl(this);
    return zedObject;
  }

  public ClassPara createClassPara( net.sourceforge.czt.z.ast.DeclName  declName,java.util.List<? extends net.sourceforge.czt.z.ast.DeclName>
 formalParameters, VisibilityList  visibilityList, net.sourceforge.czt.z.ast.ExprList  inheritedClass,java.util.List<? extends net.sourceforge.czt.z.ast.Para>
 localDef, State  state, InitialState  initialState,java.util.List<? extends Operation>
 operation)
  {
    ClassPara zedObject = createClassPara();
    zedObject.setDeclName(declName);
    if (formalParameters != null) {
      zedObject.getFormalParameters().addAll(formalParameters);
    }
    zedObject.setVisibilityList(visibilityList);
    zedObject.setInheritedClass(inheritedClass);
    if (localDef != null) {
      zedObject.getLocalDef().addAll(localDef);
    }
    zedObject.setState(state);
    zedObject.setInitialState(initialState);
    if (operation != null) {
      zedObject.getOperation().addAll(operation);
    }
    return zedObject;
  }

  public Operation createOperation()
  {
    Operation zedObject = new OperationImpl(this);
    return zedObject;
  }

  public Operation createOperation( net.sourceforge.czt.z.ast.DeclName  opName, OpExpr  opExpr, net.sourceforge.czt.z.ast.Box  box)
  {
    Operation zedObject = createOperation();
    zedObject.setOpName(opName);
    zedObject.setOpExpr(opExpr);
    zedObject.setBox(box);
    return zedObject;
  }

  public ClassPolyType createClassPolyType()
  {
    ClassPolyType zedObject = new ClassPolyTypeImpl(this);
    return zedObject;
  }

  public ClassPolyType createClassPolyType( ClassSig  classSig, ClassRef  rootClass)
  {
    ClassPolyType zedObject = createClassPolyType();
    zedObject.setClassSig(classSig);
    zedObject.setRootClass(rootClass);
    return zedObject;
  }

  public ContainmentExpr createContainmentExpr()
  {
    ContainmentExpr zedObject = new ContainmentExprImpl(this);
    return zedObject;
  }

  public ContainmentExpr createContainmentExpr( Expr  expr)
  {
    ContainmentExpr zedObject = createContainmentExpr();
    zedObject.setExpr(expr);
    return zedObject;
  }

  public InitialState createInitialState()
  {
    InitialState zedObject = new InitialStateImpl(this);
    return zedObject;
  }

  public InitialState createInitialState( net.sourceforge.czt.z.ast.Pred  pred, net.sourceforge.czt.z.ast.Box  box)
  {
    InitialState zedObject = createInitialState();
    zedObject.setPred(pred);
    zedObject.setBox(box);
    return zedObject;
  }

  public ClassUnionExpr createClassUnionExpr()
  {
    ClassUnionExpr zedObject = new ClassUnionExprImpl(this);
    return zedObject;
  }

  public ClassUnionExpr createClassUnionExpr( Expr  leftExpr, Expr  rightExpr)
  {
    ClassUnionExpr zedObject = createClassUnionExpr();
    zedObject.setLeftExpr(leftExpr);
    zedObject.setRightExpr(rightExpr);
    return zedObject;
  }

  public DistSeqOpExpr createDistSeqOpExpr()
  {
    DistSeqOpExpr zedObject = new DistSeqOpExprImpl(this);
    return zedObject;
  }

  public DistSeqOpExpr createDistSeqOpExpr( net.sourceforge.czt.z.ast.SchText  schText, OpExpr  opExpr)
  {
    DistSeqOpExpr zedObject = createDistSeqOpExpr();
    zedObject.setSchText(schText);
    zedObject.setOpExpr(opExpr);
    return zedObject;
  }

  public ScopeEnrichOpExpr createScopeEnrichOpExpr()
  {
    ScopeEnrichOpExpr zedObject = new ScopeEnrichOpExprImpl(this);
    return zedObject;
  }

  public ScopeEnrichOpExpr createScopeEnrichOpExpr( OpExpr  leftOpExpr, OpExpr  rightOpExpr)
  {
    ScopeEnrichOpExpr zedObject = createScopeEnrichOpExpr();
    zedObject.setLeftOpExpr(leftOpExpr);
    zedObject.setRightOpExpr(rightOpExpr);
    return zedObject;
  }

  public PredExpr createPredExpr()
  {
    PredExpr zedObject = new PredExprImpl(this);
    return zedObject;
  }

  public PredExpr createPredExpr( net.sourceforge.czt.z.ast.Pred  pred)
  {
    PredExpr zedObject = createPredExpr();
    zedObject.setPred(pred);
    return zedObject;
  }

  public PrimaryDecl createPrimaryDecl()
  {
    PrimaryDecl zedObject = new PrimaryDeclImpl(this);
    return zedObject;
  }

  public PrimaryDecl createPrimaryDecl( net.sourceforge.czt.z.ast.DeclList  declList)
  {
    PrimaryDecl zedObject = createPrimaryDecl();
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public ExChoiceOpExpr createExChoiceOpExpr()
  {
    ExChoiceOpExpr zedObject = new ExChoiceOpExprImpl(this);
    return zedObject;
  }

  public ExChoiceOpExpr createExChoiceOpExpr( OpExpr  leftOpExpr, OpExpr  rightOpExpr)
  {
    ExChoiceOpExpr zedObject = createExChoiceOpExpr();
    zedObject.setLeftOpExpr(leftOpExpr);
    zedObject.setRightOpExpr(rightOpExpr);
    return zedObject;
  }

  public RenameOpExpr createRenameOpExpr()
  {
    RenameOpExpr zedObject = new RenameOpExprImpl(this);
    return zedObject;
  }

  public RenameOpExpr createRenameOpExpr( OpExpr  opExpr, net.sourceforge.czt.z.ast.RenameList  renameList)
  {
    RenameOpExpr zedObject = createRenameOpExpr();
    zedObject.setOpExpr(opExpr);
    zedObject.setRenameList(renameList);
    return zedObject;
  }

  public ParallelOpExpr createParallelOpExpr()
  {
    ParallelOpExpr zedObject = new ParallelOpExprImpl(this);
    return zedObject;
  }

  public ParallelOpExpr createParallelOpExpr( OpExpr  leftOpExpr, OpExpr  rightOpExpr)
  {
    ParallelOpExpr zedObject = createParallelOpExpr();
    zedObject.setLeftOpExpr(leftOpExpr);
    zedObject.setRightOpExpr(rightOpExpr);
    return zedObject;
  }

  public ClassUnionType createClassUnionType()
  {
    ClassUnionType zedObject = new ClassUnionTypeImpl(this);
    return zedObject;
  }

  public ClassUnionType createClassUnionType( ClassSig  classSig)
  {
    ClassUnionType zedObject = createClassUnionType();
    zedObject.setClassSig(classSig);
    return zedObject;
  }

  public AnonOpExpr createAnonOpExpr()
  {
    AnonOpExpr zedObject = new AnonOpExprImpl(this);
    return zedObject;
  }

  public AnonOpExpr createAnonOpExpr( OpText  opText)
  {
    AnonOpExpr zedObject = createAnonOpExpr();
    zedObject.setOpText(opText);
    return zedObject;
  }

}
