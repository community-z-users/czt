
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.oz.ast;
import net.sourceforge.czt.z.ast.*;

/**
 * <p>The object factory for the AST.
 * This interface contains factory methods
 * for each concrete Z term.</p>
 *
 * <p>This object factory allows the programmer to programatically
 * construct new instances of concrete Z terms.
 * There is a factory method that does not require arguments
 * (called default factory method)
 * and a factory method where all the children (except annotations)
 * of that particular Z term can be provided.</p>
 *
 * @author Gnast version 0.1
 */
public interface OzFactory
  extends net.sourceforge.czt.z.ast.ZFactory
{
  /**
   * Creates an instance of {@link SecondaryDecl}.
   *
   * @return the new instance of SecondaryDecl.
   */
  SecondaryDecl createSecondaryDecl();

  /**
   * Creates an instance of {@link SecondaryDecl} with the given children.
   *
   * @return the new instance of SecondaryDecl.
   */
  SecondaryDecl createSecondaryDecl( net.sourceforge.czt.z.ast.DeclList  declList);

  /**
   * Creates an instance of {@link ClassRefType}.
   *
   * @return the new instance of ClassRefType.
   */
  ClassRefType createClassRefType();

  /**
   * Creates an instance of {@link ClassRefType} with the given children.
   *
   * @return the new instance of ClassRefType.
   */
  ClassRefType createClassRefType( ClassSig  classSig, ClassRef  thisClass,java.util.List<? extends ClassRef>
 superClass, VisibilityList  visibilityList,java.util.List<? extends net.sourceforge.czt.z.ast.DeclName>
 primary);

  /**
   * Creates an instance of {@link ClassRef}.
   *
   * @return the new instance of ClassRef.
   */
  ClassRef createClassRef();

  /**
   * Creates an instance of {@link ClassRef} with the given children.
   *
   * @return the new instance of ClassRef.
   */
  ClassRef createClassRef( net.sourceforge.czt.z.ast.RefName  refName,java.util.List<? extends net.sourceforge.czt.z.ast.Type2>
 type,java.util.List<? extends net.sourceforge.czt.z.ast.NewOldPair>
 newOldPair);

  /**
   * Creates an instance of {@link DistConjOpExpr}.
   *
   * @return the new instance of DistConjOpExpr.
   */
  DistConjOpExpr createDistConjOpExpr();

  /**
   * Creates an instance of {@link DistConjOpExpr} with the given children.
   *
   * @return the new instance of DistConjOpExpr.
   */
  DistConjOpExpr createDistConjOpExpr( net.sourceforge.czt.z.ast.SchText  schText, OpExpr  opExpr);

  /**
   * Creates an instance of {@link VisibilityList}.
   *
   * @return the new instance of VisibilityList.
   */
  VisibilityList createVisibilityList();

  /**
   * Creates an instance of {@link VisibilityList} with the given children.
   *
   * @return the new instance of VisibilityList.
   */
  VisibilityList createVisibilityList(java.util.List<? extends net.sourceforge.czt.z.ast.ZRefName>
 zRefName);

  /**
   * Creates an instance of {@link PolyExpr}.
   *
   * @return the new instance of PolyExpr.
   */
  PolyExpr createPolyExpr();

  /**
   * Creates an instance of {@link PolyExpr} with the given children.
   *
   * @return the new instance of PolyExpr.
   */
  PolyExpr createPolyExpr( Expr  expr);

  /**
   * Creates an instance of {@link HideOpExpr}.
   *
   * @return the new instance of HideOpExpr.
   */
  HideOpExpr createHideOpExpr();

  /**
   * Creates an instance of {@link HideOpExpr} with the given children.
   *
   * @return the new instance of HideOpExpr.
   */
  HideOpExpr createHideOpExpr( OpExpr  opExpr, net.sourceforge.czt.z.ast.RefNameList  refNameList);

  /**
   * Creates an instance of {@link SeqOpExpr}.
   *
   * @return the new instance of SeqOpExpr.
   */
  SeqOpExpr createSeqOpExpr();

  /**
   * Creates an instance of {@link SeqOpExpr} with the given children.
   *
   * @return the new instance of SeqOpExpr.
   */
  SeqOpExpr createSeqOpExpr( OpExpr  leftOpExpr, OpExpr  rightOpExpr);

  /**
   * Creates an instance of {@link NameSignaturePair}.
   *
   * @return the new instance of NameSignaturePair.
   */
  NameSignaturePair createNameSignaturePair();

  /**
   * Creates an instance of {@link NameSignaturePair} with the given children.
   *
   * @return the new instance of NameSignaturePair.
   */
  NameSignaturePair createNameSignaturePair( net.sourceforge.czt.z.ast.DeclName  declName, net.sourceforge.czt.z.ast.Signature  signature);

  /**
   * Creates an instance of {@link ClassSig}.
   *
   * @return the new instance of ClassSig.
   */
  ClassSig createClassSig();

  /**
   * Creates an instance of {@link ClassSig} with the given children.
   *
   * @return the new instance of ClassSig.
   */
  ClassSig createClassSig(java.util.List<? extends ClassRef>
 classes, net.sourceforge.czt.z.ast.Signature  state,java.util.List<? extends net.sourceforge.czt.z.ast.NameTypePair>
 attribute,java.util.List<? extends NameSignaturePair>
 operation);

  /**
   * Creates an instance of {@link OpText}.
   *
   * @return the new instance of OpText.
   */
  OpText createOpText();

  /**
   * Creates an instance of {@link OpText} with the given children.
   *
   * @return the new instance of OpText.
   */
  OpText createOpText( DeltaList  deltaList, net.sourceforge.czt.z.ast.SchText  schText);

  /**
   * Creates an instance of {@link DistChoiceOpExpr}.
   *
   * @return the new instance of DistChoiceOpExpr.
   */
  DistChoiceOpExpr createDistChoiceOpExpr();

  /**
   * Creates an instance of {@link DistChoiceOpExpr} with the given children.
   *
   * @return the new instance of DistChoiceOpExpr.
   */
  DistChoiceOpExpr createDistChoiceOpExpr( net.sourceforge.czt.z.ast.SchText  schText, OpExpr  opExpr);

  /**
   * Creates an instance of {@link AssoParallelOpExpr}.
   *
   * @return the new instance of AssoParallelOpExpr.
   */
  AssoParallelOpExpr createAssoParallelOpExpr();

  /**
   * Creates an instance of {@link AssoParallelOpExpr} with the given children.
   *
   * @return the new instance of AssoParallelOpExpr.
   */
  AssoParallelOpExpr createAssoParallelOpExpr( OpExpr  leftOpExpr, OpExpr  rightOpExpr);

  /**
   * Creates an instance of {@link DeltaList}.
   *
   * @return the new instance of DeltaList.
   */
  DeltaList createDeltaList();

  /**
   * Creates an instance of {@link DeltaList} with the given children.
   *
   * @return the new instance of DeltaList.
   */
  DeltaList createDeltaList(java.util.List<? extends net.sourceforge.czt.z.ast.RefName>
 refName);

  /**
   * Creates an instance of {@link State}.
   *
   * @return the new instance of State.
   */
  State createState();

  /**
   * Creates an instance of {@link State} with the given children.
   *
   * @return the new instance of State.
   */
  State createState( PrimaryDecl  primaryDecl, SecondaryDecl  secondaryDecl, net.sourceforge.czt.z.ast.Pred  pred, net.sourceforge.czt.z.ast.Box  box);

  /**
   * Creates an instance of {@link OpPromotionExpr}.
   *
   * @return the new instance of OpPromotionExpr.
   */
  OpPromotionExpr createOpPromotionExpr();

  /**
   * Creates an instance of {@link OpPromotionExpr} with the given children.
   *
   * @return the new instance of OpPromotionExpr.
   */
  OpPromotionExpr createOpPromotionExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.RefName  refName);

  /**
   * Creates an instance of {@link ConjOpExpr}.
   *
   * @return the new instance of ConjOpExpr.
   */
  ConjOpExpr createConjOpExpr();

  /**
   * Creates an instance of {@link ConjOpExpr} with the given children.
   *
   * @return the new instance of ConjOpExpr.
   */
  ConjOpExpr createConjOpExpr( OpExpr  leftOpExpr, OpExpr  rightOpExpr);

  /**
   * Creates an instance of {@link ClassPara}.
   *
   * @return the new instance of ClassPara.
   */
  ClassPara createClassPara();

  /**
   * Creates an instance of {@link ClassPara} with the given children.
   *
   * @return the new instance of ClassPara.
   */
  ClassPara createClassPara( net.sourceforge.czt.z.ast.DeclName  declName,java.util.List<? extends net.sourceforge.czt.z.ast.DeclName>
 formalParameters, VisibilityList  visibilityList, net.sourceforge.czt.z.ast.ExprList  inheritedClass,java.util.List<? extends net.sourceforge.czt.z.ast.Para>
 localDef, State  state, InitialState  initialState,java.util.List<? extends Operation>
 operation);

  /**
   * Creates an instance of {@link Operation}.
   *
   * @return the new instance of Operation.
   */
  Operation createOperation();

  /**
   * Creates an instance of {@link Operation} with the given children.
   *
   * @return the new instance of Operation.
   */
  Operation createOperation( net.sourceforge.czt.z.ast.DeclName  opName, OpExpr  opExpr, net.sourceforge.czt.z.ast.Box  box);

  /**
   * Creates an instance of {@link ClassPolyType}.
   *
   * @return the new instance of ClassPolyType.
   */
  ClassPolyType createClassPolyType();

  /**
   * Creates an instance of {@link ClassPolyType} with the given children.
   *
   * @return the new instance of ClassPolyType.
   */
  ClassPolyType createClassPolyType( ClassSig  classSig, ClassRef  rootClass);

  /**
   * Creates an instance of {@link ContainmentExpr}.
   *
   * @return the new instance of ContainmentExpr.
   */
  ContainmentExpr createContainmentExpr();

  /**
   * Creates an instance of {@link ContainmentExpr} with the given children.
   *
   * @return the new instance of ContainmentExpr.
   */
  ContainmentExpr createContainmentExpr( Expr  expr);

  /**
   * Creates an instance of {@link InitialState}.
   *
   * @return the new instance of InitialState.
   */
  InitialState createInitialState();

  /**
   * Creates an instance of {@link InitialState} with the given children.
   *
   * @return the new instance of InitialState.
   */
  InitialState createInitialState( net.sourceforge.czt.z.ast.Pred  pred, net.sourceforge.czt.z.ast.Box  box);

  /**
   * Creates an instance of {@link ClassUnionExpr}.
   *
   * @return the new instance of ClassUnionExpr.
   */
  ClassUnionExpr createClassUnionExpr();

  /**
   * Creates an instance of {@link ClassUnionExpr} with the given children.
   *
   * @return the new instance of ClassUnionExpr.
   */
  ClassUnionExpr createClassUnionExpr( Expr  leftExpr, Expr  rightExpr);

  /**
   * Creates an instance of {@link DistSeqOpExpr}.
   *
   * @return the new instance of DistSeqOpExpr.
   */
  DistSeqOpExpr createDistSeqOpExpr();

  /**
   * Creates an instance of {@link DistSeqOpExpr} with the given children.
   *
   * @return the new instance of DistSeqOpExpr.
   */
  DistSeqOpExpr createDistSeqOpExpr( net.sourceforge.czt.z.ast.SchText  schText, OpExpr  opExpr);

  /**
   * Creates an instance of {@link ScopeEnrichOpExpr}.
   *
   * @return the new instance of ScopeEnrichOpExpr.
   */
  ScopeEnrichOpExpr createScopeEnrichOpExpr();

  /**
   * Creates an instance of {@link ScopeEnrichOpExpr} with the given children.
   *
   * @return the new instance of ScopeEnrichOpExpr.
   */
  ScopeEnrichOpExpr createScopeEnrichOpExpr( OpExpr  leftOpExpr, OpExpr  rightOpExpr);

  /**
   * Creates an instance of {@link PredExpr}.
   *
   * @return the new instance of PredExpr.
   */
  PredExpr createPredExpr();

  /**
   * Creates an instance of {@link PredExpr} with the given children.
   *
   * @return the new instance of PredExpr.
   */
  PredExpr createPredExpr( net.sourceforge.czt.z.ast.Pred  pred);

  /**
   * Creates an instance of {@link PrimaryDecl}.
   *
   * @return the new instance of PrimaryDecl.
   */
  PrimaryDecl createPrimaryDecl();

  /**
   * Creates an instance of {@link PrimaryDecl} with the given children.
   *
   * @return the new instance of PrimaryDecl.
   */
  PrimaryDecl createPrimaryDecl( net.sourceforge.czt.z.ast.DeclList  declList);

  /**
   * Creates an instance of {@link ExChoiceOpExpr}.
   *
   * @return the new instance of ExChoiceOpExpr.
   */
  ExChoiceOpExpr createExChoiceOpExpr();

  /**
   * Creates an instance of {@link ExChoiceOpExpr} with the given children.
   *
   * @return the new instance of ExChoiceOpExpr.
   */
  ExChoiceOpExpr createExChoiceOpExpr( OpExpr  leftOpExpr, OpExpr  rightOpExpr);

  /**
   * Creates an instance of {@link RenameOpExpr}.
   *
   * @return the new instance of RenameOpExpr.
   */
  RenameOpExpr createRenameOpExpr();

  /**
   * Creates an instance of {@link RenameOpExpr} with the given children.
   *
   * @return the new instance of RenameOpExpr.
   */
  RenameOpExpr createRenameOpExpr( OpExpr  opExpr, net.sourceforge.czt.z.ast.RenameList  renameList);

  /**
   * Creates an instance of {@link ParallelOpExpr}.
   *
   * @return the new instance of ParallelOpExpr.
   */
  ParallelOpExpr createParallelOpExpr();

  /**
   * Creates an instance of {@link ParallelOpExpr} with the given children.
   *
   * @return the new instance of ParallelOpExpr.
   */
  ParallelOpExpr createParallelOpExpr( OpExpr  leftOpExpr, OpExpr  rightOpExpr);

  /**
   * Creates an instance of {@link ClassUnionType}.
   *
   * @return the new instance of ClassUnionType.
   */
  ClassUnionType createClassUnionType();

  /**
   * Creates an instance of {@link ClassUnionType} with the given children.
   *
   * @return the new instance of ClassUnionType.
   */
  ClassUnionType createClassUnionType( ClassSig  classSig);

  /**
   * Creates an instance of {@link AnonOpExpr}.
   *
   * @return the new instance of AnonOpExpr.
   */
  AnonOpExpr createAnonOpExpr();

  /**
   * Creates an instance of {@link AnonOpExpr} with the given children.
   *
   * @return the new instance of AnonOpExpr.
   */
  AnonOpExpr createAnonOpExpr( OpText  opText);

}
