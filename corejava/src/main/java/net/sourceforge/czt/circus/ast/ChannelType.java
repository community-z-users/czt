
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstInterface.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.ast;

import net.sourceforge.czt.base.ast.*;
import net.sourceforge.czt.z.ast.*;

/**
 * A channel type is like a generic type, where the type can be <code>null</code> for synchronisation channels.
        The <code>OptionalType</code> is the resolved type after instantiation via generic actuals or type inference.
 *
 * @author Gnast version 0.1
 */
public interface ChannelType extends Type
{

  /**
   * Returns the GenFormals element.
   *
   * @return the GenFormals element.
   */
  net.sourceforge.czt.z.ast.DeclNameList getGenFormals();


  /**
   * Sets the GenFormals element.
   *
   * @param genFormals   the GenFormals element.
   * @see #getGenFormals
   */
  void setGenFormals(net.sourceforge.czt.z.ast.DeclNameList genFormals);

  /**
   * Returns the DeclaredType element.
   *
   * @return the DeclaredType element.
   */
  net.sourceforge.czt.z.ast.Type2 getDeclaredType();


  /**
   * Sets the DeclaredType element.
   *
   * @param declaredType   the DeclaredType element.
   * @see #getDeclaredType
   */
  void setDeclaredType(net.sourceforge.czt.z.ast.Type2 declaredType);

  /**
   * Returns the ResolvedType element.
   *
   * @return the ResolvedType element.
   */
  net.sourceforge.czt.z.ast.Type2 getResolvedType();


  /**
   * Sets the ResolvedType element.
   *
   * @param resolvedType   the ResolvedType element.
   * @see #getResolvedType
   */
  void setResolvedType(net.sourceforge.czt.z.ast.Type2 resolvedType);
}
