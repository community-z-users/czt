
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstInterface.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.ast;

import net.sourceforge.czt.base.ast.*;
import net.sourceforge.czt.z.ast.*;

/**
 * <p>
        Circus process reference call. In other words, it permits a name to be a process.
        That is, it contains a reference name to lookup the process definition.
        </p>
        <p>
        Moreover, it contains two list of expressions and an attribute defining the kind of call this 
        reference is related too. The first list is related to generic actuals, whereas the second list is 
        related to actual parameters or indexes. 
        An empty list of generic actuals means that refering process is not generic.
        An empty list of expressions means a simple process call of the grammar rules <b>N, N[Expr+]</b>,
        where <b>N</b> is the process name.
        If the list of expressions is not empty, then the <code>CallKind</code> attribute defines if this is an indexed 
        process instantiation call, a parameterised process call.
        It represents the grammar rules: <b>N(Expr+), N lfloor Expr+ rfloor</b>
        </p>
        <p>        
        The invariant is as follows:  TODO: THIS COMMENT NEEDS UPDATE (See Parser.xml)
        <ul>
          <li>N        = nonempty name, empty generic actuals, and empty parameters/indexes. </li>
          <li>N[Expr+] = nonempty name, nonempty generic actuals, and empty parameters/indexes. </li>
          <li>N(Expr+) = empty generic actuals, nonempty parameters. 
                         Internal name for on-the-fly, user given name for previously declared action. 
                         The call type defines whether the expressions are actual parameters or indexes.</li>
          <li>N[Expr+](Expr+) = nonempty generic actuals, nonempty parameters. 
                         Internal name for on-the-fly, user given name for previously declared action. 
                         The call type defines whether the expressions are actual parameters or indexes.</li>          
        </ul>
        The case for parameterised and indexed process is not present in the grammar. 
        The default value of CallKind is <b>Param</b> and need to be inspected only for the case where the 
        second expression list demands attention.
        </p>
 *
 * @author Gnast version 0.1
 */
public interface CallProcess extends CircusProcess
{

  /**
   * Returns the CallExpr element.
   *
   * @return the CallExpr element.
   */
  net.sourceforge.czt.z.ast.RefExpr getCallExpr();


  /**
   * Sets the CallExpr element.
   *
   * @param callExpr   the CallExpr element.
   * @see #getCallExpr
   */
  void setCallExpr(net.sourceforge.czt.z.ast.RefExpr callExpr);

  /**
   * Returns the Actuals element.
   *
   * @return the Actuals element.
   */
  net.sourceforge.czt.z.ast.ExprList getActuals();


  /**
   * Sets the Actuals element.
   *
   * @param actuals   the Actuals element.
   * @see #getActuals
   */
  void setActuals(net.sourceforge.czt.z.ast.ExprList actuals);

  /**
   * Returns the CallKind element.
   *
   * @return the CallKind element.
   */
  CallKind getCallKind();


  /**
   * Sets the CallKind element.
   *
   * @param callKind   the CallKind element.
   * @see #getCallKind
   */
  void setCallKind(CallKind callKind);
}
