
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstInterface.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.ast;

import net.sourceforge.czt.base.ast.*;
import net.sourceforge.czt.z.ast.*;

/**
 * <p>
        A CSP communication that is part of a prefixing process or action. 
        If the communicating channel has been declared with generic types, the communication 
        must carry the generic actual expressions, hence we have a <code>RefExpr</code> rather than
        a <code>RefName</code>. It represents the <b>Communication</b> grammar rule.
        </p>
        <p>
        A communication can be either a communication for synchronisation, input, output, or mixed.
        Synchronisation has no fields. Input and Output has only input or output fields respectively. 
        Mixed communication has both input and output fields, such as <code>c?x:P!v -&gt; A</code>.
        </p>
        <p>
        The semantics of dot (c.x) and output (c!x) is equivalent. 
        However, for some applications/tools, their evaluation can be done differently.
        </p>
 *
 * @author Gnast version 0.1
 */
public interface Communication extends Term
{

  /**
   * Returns the ChannelExpr element.
   *
   * @return the ChannelExpr element.
   */
  net.sourceforge.czt.z.ast.RefExpr getChannelExpr();


  /**
   * Sets the ChannelExpr element.
   *
   * @param channelExpr   the ChannelExpr element.
   * @see #getChannelExpr
   */
  void setChannelExpr(net.sourceforge.czt.z.ast.RefExpr channelExpr);

  /**
   * Returns the ChanFields element.
   *
   * @return the ChanFields element.
   */
  CircusFieldList getChanFields();


  /**
   * Sets the ChanFields element.
   *
   * @param chanFields   the ChanFields element.
   * @see #getChanFields
   */
  void setChanFields(CircusFieldList chanFields);

  /**
   * Returns the CommKind element.
   *
   * @return the CommKind element.
   */
  CommKind getCommKind();


  /**
   * Sets the CommKind element.
   *
   * @param commKind   the CommKind element.
   * @see #getCommKind
   */
  void setCommKind(CommKind commKind);

  /**
   * Returns the MultiSych element.
   *
   * @return the MultiSych element.
   */
  java.math.BigInteger getMultiSych();


  /**
   * Sets the MultiSych element.
   *
   * @param multiSych   the MultiSych element.
   * @see #getMultiSych
   */
  void setMultiSych(java.math.BigInteger multiSych);
}
