
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToJaxb.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.base.ast.Term;

import net.sourceforge.czt.z.jaxb.gen.*;
import net.sourceforge.czt.circus.jaxb.gen.*;
import org.w3._2001.xmlschema.*;

/**
 * The marshaller responsible for serializing XML data.
 *
 * @author Gnast version 0.1
 */
public class AstToJaxb
  extends net.sourceforge.czt.z.jaxb.AstToJaxb
  implements net.sourceforge.czt.circus.visitor.CircusVisitor,
             net.sourceforge.czt.base.visitor.TermVisitor
{

  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  private net.sourceforge.czt.circus.jaxb.gen.ObjectFactory
    objectFactory_ = new net.sourceforge.czt.circus.jaxb.gen.ObjectFactory();
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    annsObjectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();
  private org.w3._2001.xmlschema.ObjectFactory
    anyTypeObjectFactory_ = new org.w3._2001.xmlschema.ObjectFactory();

  /**
   * A map that maps id's to the corresponding Object.
   */
  private Map hash_ = new HashMap();

  private String getClassName()
  {
    return "net.sourceforge.czt.circus.jaxb.AstToJaxb";
  }

  private Logger getLogger()
  {
    return Logger.getLogger(getClassName());
  }

  private net.sourceforge.czt.z.jaxb.gen.Term.AnnsType visitAnnotations(List list)
    throws javax.xml.bind.JAXBException
  {
      net.sourceforge.czt.z.jaxb.gen.Term.AnnsType anns =
        annsObjectFactory_.createTermAnnsType();
    List newlist = anns.getany();
    for (Iterator iter = list.iterator(); iter.hasNext();) {
      Object obj = iter.next();
      if (obj instanceof Term) {
        Term term = (Term) obj;
        try {
          createElement_ = true;
          Object visitedTerm = term.accept(this);
          newlist.add(visitedTerm);
        }
        catch (Exception e) {
          String message = "Annotation " + term + " cannot be handled; " +
            "drop it.";
          getLogger().warning(message);
        }
      }
    }
    return anns;
  }


  public Object visitTerm(Term zedObject)
  {
    String message = "Unexpected element " + zedObject.getClass().getName();
    // getLogger().warning(message);
    // return null;
    throw(new UnsupportedOperationException(message));
  }


  public Object visitChannelSetType(net.sourceforge.czt.circus.ast.ChannelSetType zedObject)
  {
    getLogger().entering(getClassName(), "visitChannelSetType", zedObject);

    ChannelSetType jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createChannelSetTypeElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createChannelSetType();
      }
      createElement_ = true;
      if (zedObject.getSignature() != null) {
        Term term = zedObject.getSignature();
        jaxbObject.setSignature((Signature) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ChannelSetType to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ChannelSetType to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitChannelSetType", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitGuardedAction(net.sourceforge.czt.circus.ast.GuardedAction zedObject)
  {
    getLogger().entering(getClassName(), "visitGuardedAction", zedObject);

    GuardedAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createGuardedActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createGuardedAction();
      }
      createElement_ = true;
      if (zedObject.getCircusAction() != null) {
        Term term = zedObject.getCircusAction();
        jaxbObject.setCircusAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getPred() != null) {
        Term term = zedObject.getPred();
        jaxbObject.setPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a GuardedAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a GuardedAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitGuardedAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParallelAction(net.sourceforge.czt.circus.ast.ParallelAction zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelAction", zedObject);

    ParallelAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParallelActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createParallelAction();
      }
      createElement_ = true;
      if (zedObject.getLeftAction() != null) {
        Term term = zedObject.getLeftAction();
        jaxbObject.setLeftAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightAction() != null) {
        Term term = zedObject.getRightAction();
        jaxbObject.setRightAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getLeftNameSet() != null) {
        Term term = zedObject.getLeftNameSet();
        jaxbObject.setLeftNameSet((NameSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightNameSet() != null) {
        Term term = zedObject.getRightNameSet();
        jaxbObject.setRightNameSet((NameSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getChannelSet() != null) {
        Term term = zedObject.getChannelSet();
        jaxbObject.setChannelSet((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ParallelAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitParallelAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitChannelDecl(net.sourceforge.czt.circus.ast.ChannelDecl zedObject)
  {
    getLogger().entering(getClassName(), "visitChannelDecl", zedObject);

    ChannelDecl jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createChannelDeclElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createChannelDecl();
      }
      createElement_ = false;
      if (zedObject.getGenFormals() != null) {
        Term term = zedObject.getGenFormals();
        jaxbObject.setGenFormals((DeclNameList) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclNameList() != null) {
        Term term = zedObject.getDeclNameList();
        jaxbObject.setDeclNameList((DeclNameList) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ChannelDecl to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ChannelDecl to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitChannelDecl", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitHideAction(net.sourceforge.czt.circus.ast.HideAction zedObject)
  {
    getLogger().entering(getClassName(), "visitHideAction", zedObject);

    HideAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createHideActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createHideAction();
      }
      createElement_ = true;
      if (zedObject.getCircusAction() != null) {
        Term term = zedObject.getCircusAction();
        jaxbObject.setCircusAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getChannelSet() != null) {
        Term term = zedObject.getChannelSet();
        jaxbObject.setChannelSet((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a HideAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a HideAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitHideAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitExtChoiceProcessIte(net.sourceforge.czt.circus.ast.ExtChoiceProcessIte zedObject)
  {
    getLogger().entering(getClassName(), "visitExtChoiceProcessIte", zedObject);

    ExtChoiceProcessIte jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createExtChoiceProcessIte();
      createElement_ = true;
      if (zedObject.getCircusProcess() != null) {
        Term term = zedObject.getCircusProcess();
        jaxbObject.setCircusProcess((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExtChoiceProcessIte to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ExtChoiceProcessIte to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitExtChoiceProcessIte", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitChaosAction(net.sourceforge.czt.circus.ast.ChaosAction zedObject)
  {
    getLogger().entering(getClassName(), "visitChaosAction", zedObject);

    ChaosAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createChaosAction();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ChaosAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ChaosAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitChaosAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCircusFieldList(net.sourceforge.czt.circus.ast.CircusFieldList zedObject)
  {
    getLogger().entering(getClassName(), "visitCircusFieldList", zedObject);

    CircusFieldList jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCircusFieldListElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCircusFieldList();
      }
      {
        List list = zedObject.getField();
        List newlist = jaxbObject.getField();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CircusFieldList to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a CircusFieldList to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCircusFieldList", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCircusStateAnn(net.sourceforge.czt.circus.ast.CircusStateAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitCircusStateAnn", zedObject);

    CircusStateAnn jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCircusStateAnnElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCircusStateAnn();
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CircusStateAnn to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a CircusStateAnn to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCircusStateAnn", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIntChoiceProcessIte(net.sourceforge.czt.circus.ast.IntChoiceProcessIte zedObject)
  {
    getLogger().entering(getClassName(), "visitIntChoiceProcessIte", zedObject);

    IntChoiceProcessIte jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIntChoiceProcessIte();
      createElement_ = true;
      if (zedObject.getCircusProcess() != null) {
        Term term = zedObject.getCircusProcess();
        jaxbObject.setCircusProcess((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntChoiceProcessIte to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IntChoiceProcessIte to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIntChoiceProcessIte", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitAlphabetisedParallelAction(net.sourceforge.czt.circus.ast.AlphabetisedParallelAction zedObject)
  {
    getLogger().entering(getClassName(), "visitAlphabetisedParallelAction", zedObject);

    AlphabetisedParallelAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createAlphabetisedParallelActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createAlphabetisedParallelAction();
      }
      createElement_ = true;
      if (zedObject.getLeftAction() != null) {
        Term term = zedObject.getLeftAction();
        jaxbObject.setLeftAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightAction() != null) {
        Term term = zedObject.getRightAction();
        jaxbObject.setRightAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getLeftNameSet() != null) {
        Term term = zedObject.getLeftNameSet();
        jaxbObject.setLeftNameSet((NameSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightNameSet() != null) {
        Term term = zedObject.getRightNameSet();
        jaxbObject.setRightNameSet((NameSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getLeftAlpha() != null) {
        Term term = zedObject.getLeftAlpha();
        jaxbObject.setLeftAlpha((ChannelSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightAlpha() != null) {
        Term term = zedObject.getRightAlpha();
        jaxbObject.setRightAlpha((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AlphabetisedParallelAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a AlphabetisedParallelAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitAlphabetisedParallelAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSkipAction(net.sourceforge.czt.circus.ast.SkipAction zedObject)
  {
    getLogger().entering(getClassName(), "visitSkipAction", zedObject);

    SkipAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSkipAction();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SkipAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SkipAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSkipAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitProcessType(net.sourceforge.czt.circus.ast.ProcessType zedObject)
  {
    getLogger().entering(getClassName(), "visitProcessType", zedObject);

    ProcessType jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createProcessTypeElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createProcessType();
      }
      createElement_ = true;
      if (zedObject.getProcessSignature() != null) {
        Term term = zedObject.getProcessSignature();
        jaxbObject.setProcessSignature((ProcessSignature) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProcessType to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ProcessType to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitProcessType", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSeqProcessIdx(net.sourceforge.czt.circus.ast.SeqProcessIdx zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqProcessIdx", zedObject);

    SeqProcessIdx jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSeqProcessIdx();
      createElement_ = true;
      if (zedObject.getCircusProcess() != null) {
        Term term = zedObject.getCircusProcess();
        jaxbObject.setCircusProcess((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqProcessIdx to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SeqProcessIdx to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSeqProcessIdx", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitExtChoiceActionIte(net.sourceforge.czt.circus.ast.ExtChoiceActionIte zedObject)
  {
    getLogger().entering(getClassName(), "visitExtChoiceActionIte", zedObject);

    ExtChoiceActionIte jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createExtChoiceActionIte();
      createElement_ = true;
      if (zedObject.getCircusAction() != null) {
        Term term = zedObject.getCircusAction();
        jaxbObject.setCircusAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExtChoiceActionIte to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ExtChoiceActionIte to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitExtChoiceActionIte", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitQualifiedDecl(net.sourceforge.czt.circus.ast.QualifiedDecl zedObject)
  {
    getLogger().entering(getClassName(), "visitQualifiedDecl", zedObject);

    QualifiedDecl jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createQualifiedDeclElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createQualifiedDecl();
      }
      createElement_ = true;
      if (zedObject.getDeclNameList() != null) {
        Term term = zedObject.getDeclNameList();
        jaxbObject.setDeclNameList((DeclNameList) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getParamQualifier() != null) {
        jaxbObject.setParamQualifier(zedObject.getParamQualifier().toString());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a QualifiedDecl to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a QualifiedDecl to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitQualifiedDecl", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitAssignmentPairs(net.sourceforge.czt.circus.ast.AssignmentPairs zedObject)
  {
    getLogger().entering(getClassName(), "visitAssignmentPairs", zedObject);

    AssignmentPairs jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createAssignmentPairsElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createAssignmentPairs();
      }
      createElement_ = true;
      if (zedObject.getLHS() != null) {
        Term term = zedObject.getLHS();
        jaxbObject.setLHS((RefNameList) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRHS() != null) {
        Term term = zedObject.getRHS();
        jaxbObject.setRHS((ExprList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AssignmentPairs to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a AssignmentPairs to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitAssignmentPairs", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIndexedProcess(net.sourceforge.czt.circus.ast.IndexedProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitIndexedProcess", zedObject);

    IndexedProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIndexedProcess();
      createElement_ = true;
      if (zedObject.getCircusProcess() != null) {
        Term term = zedObject.getCircusProcess();
        jaxbObject.setCircusProcess((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IndexedProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IndexedProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIndexedProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitLetMuAction(net.sourceforge.czt.circus.ast.LetMuAction zedObject)
  {
    getLogger().entering(getClassName(), "visitLetMuAction", zedObject);

    LetMuAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createLetMuActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createLetMuAction();
      }
      createElement_ = true;
      if (zedObject.getCircusAction() != null) {
        Term term = zedObject.getCircusAction();
        jaxbObject.setCircusAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getParaList() != null) {
        Term term = zedObject.getParaList();
        jaxbObject.setParaList((ParaList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a LetMuAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a LetMuAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitLetMuAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitChannelType(net.sourceforge.czt.circus.ast.ChannelType zedObject)
  {
    getLogger().entering(getClassName(), "visitChannelType", zedObject);

    ChannelType jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createChannelTypeElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createChannelType();
      }
      createElement_ = false;
      if (zedObject.getGenFormals() != null) {
        Term term = zedObject.getGenFormals();
        jaxbObject.setGenFormals((DeclNameList) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclaredType() != null) {
        Term term = zedObject.getDeclaredType();
        jaxbObject.setDeclaredType((Type2) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getResolvedType() != null) {
        Term term = zedObject.getResolvedType();
        jaxbObject.setResolvedType((Type2) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ChannelType to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ChannelType to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitChannelType", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInterleaveAction(net.sourceforge.czt.circus.ast.InterleaveAction zedObject)
  {
    getLogger().entering(getClassName(), "visitInterleaveAction", zedObject);

    InterleaveAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInterleaveAction();
      createElement_ = true;
      if (zedObject.getLeftAction() != null) {
        Term term = zedObject.getLeftAction();
        jaxbObject.setLeftAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightAction() != null) {
        Term term = zedObject.getRightAction();
        jaxbObject.setRightAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getLeftNameSet() != null) {
        Term term = zedObject.getLeftNameSet();
        jaxbObject.setLeftNameSet((NameSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightNameSet() != null) {
        Term term = zedObject.getRightNameSet();
        jaxbObject.setRightNameSet((NameSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InterleaveAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a InterleaveAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitInterleaveAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIntChoiceProcess(net.sourceforge.czt.circus.ast.IntChoiceProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitIntChoiceProcess", zedObject);

    IntChoiceProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIntChoiceProcess();
      createElement_ = true;
      if (zedObject.getLeftProc() != null) {
        Term term = zedObject.getLeftProc();
        jaxbObject.setLeftProc((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightProc() != null) {
        Term term = zedObject.getRightProc();
        jaxbObject.setRightProc((CircusProcess) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntChoiceProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IntChoiceProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIntChoiceProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSchExprAction(net.sourceforge.czt.circus.ast.SchExprAction zedObject)
  {
    getLogger().entering(getClassName(), "visitSchExprAction", zedObject);

    SchExprAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSchExprActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createSchExprAction();
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SchExprAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SchExprAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSchExprAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIfGuardedCommand(net.sourceforge.czt.circus.ast.IfGuardedCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitIfGuardedCommand", zedObject);

    IfGuardedCommand jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIfGuardedCommandElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createIfGuardedCommand();
      }
      {
        List list = zedObject.getGuardedAction();
        List newlist = jaxbObject.getGuardedAction();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IfGuardedCommand to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IfGuardedCommand to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIfGuardedCommand", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParallelProcessIte(net.sourceforge.czt.circus.ast.ParallelProcessIte zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelProcessIte", zedObject);

    ParallelProcessIte jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParallelProcessIteElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createParallelProcessIte();
      }
      createElement_ = true;
      if (zedObject.getCircusProcess() != null) {
        Term term = zedObject.getCircusProcess();
        jaxbObject.setCircusProcess((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getChannelSet() != null) {
        Term term = zedObject.getChannelSet();
        jaxbObject.setChannelSet((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelProcessIte to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ParallelProcessIte to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitParallelProcessIte", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitExtChoiceProcess(net.sourceforge.czt.circus.ast.ExtChoiceProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitExtChoiceProcess", zedObject);

    ExtChoiceProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createExtChoiceProcess();
      createElement_ = true;
      if (zedObject.getLeftProc() != null) {
        Term term = zedObject.getLeftProc();
        jaxbObject.setLeftProc((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightProc() != null) {
        Term term = zedObject.getRightProc();
        jaxbObject.setRightProc((CircusProcess) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExtChoiceProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ExtChoiceProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitExtChoiceProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitStopAction(net.sourceforge.czt.circus.ast.StopAction zedObject)
  {
    getLogger().entering(getClassName(), "visitStopAction", zedObject);

    StopAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createStopAction();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a StopAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a StopAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitStopAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitExtChoiceAction(net.sourceforge.czt.circus.ast.ExtChoiceAction zedObject)
  {
    getLogger().entering(getClassName(), "visitExtChoiceAction", zedObject);

    ExtChoiceAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createExtChoiceAction();
      createElement_ = true;
      if (zedObject.getLeftAction() != null) {
        Term term = zedObject.getLeftAction();
        jaxbObject.setLeftAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightAction() != null) {
        Term term = zedObject.getRightAction();
        jaxbObject.setRightAction((CircusAction) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExtChoiceAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ExtChoiceAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitExtChoiceAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInterleaveProcessIdx(net.sourceforge.czt.circus.ast.InterleaveProcessIdx zedObject)
  {
    getLogger().entering(getClassName(), "visitInterleaveProcessIdx", zedObject);

    InterleaveProcessIdx jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInterleaveProcessIdx();
      createElement_ = true;
      if (zedObject.getCircusProcess() != null) {
        Term term = zedObject.getCircusProcess();
        jaxbObject.setCircusProcess((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InterleaveProcessIdx to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a InterleaveProcessIdx to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitInterleaveProcessIdx", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitAlphabetisedParallelProcessIte(net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIte zedObject)
  {
    getLogger().entering(getClassName(), "visitAlphabetisedParallelProcessIte", zedObject);

    AlphabetisedParallelProcessIte jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createAlphabetisedParallelProcessIte();
      createElement_ = true;
      if (zedObject.getCircusProcess() != null) {
        Term term = zedObject.getCircusProcess();
        jaxbObject.setCircusProcess((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getChannelSet() != null) {
        Term term = zedObject.getChannelSet();
        jaxbObject.setChannelSet((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AlphabetisedParallelProcessIte to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a AlphabetisedParallelProcessIte to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitAlphabetisedParallelProcessIte", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitAlphabetisedParallelProcessIdx(net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIdx zedObject)
  {
    getLogger().entering(getClassName(), "visitAlphabetisedParallelProcessIdx", zedObject);

    AlphabetisedParallelProcessIdx jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createAlphabetisedParallelProcessIdx();
      createElement_ = true;
      if (zedObject.getCircusProcess() != null) {
        Term term = zedObject.getCircusProcess();
        jaxbObject.setCircusProcess((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getChannelSet() != null) {
        Term term = zedObject.getChannelSet();
        jaxbObject.setChannelSet((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AlphabetisedParallelProcessIdx to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a AlphabetisedParallelProcessIdx to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitAlphabetisedParallelProcessIdx", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitPrefixingAction(net.sourceforge.czt.circus.ast.PrefixingAction zedObject)
  {
    getLogger().entering(getClassName(), "visitPrefixingAction", zedObject);

    PrefixingAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createPrefixingActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createPrefixingAction();
      }
      createElement_ = true;
      if (zedObject.getCircusAction() != null) {
        Term term = zedObject.getCircusAction();
        jaxbObject.setCircusAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getCommunication() != null) {
        Term term = zedObject.getCommunication();
        jaxbObject.setCommunication((Communication) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PrefixingAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a PrefixingAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitPrefixingAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNameSetType(net.sourceforge.czt.circus.ast.NameSetType zedObject)
  {
    getLogger().entering(getClassName(), "visitNameSetType", zedObject);

    NameSetType jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNameSetTypeElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createNameSetType();
      }
      createElement_ = true;
      if (zedObject.getSignature() != null) {
        Term term = zedObject.getSignature();
        jaxbObject.setSignature((Signature) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NameSetType to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a NameSetType to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitNameSetType", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitOnTheFlyDefAnn(net.sourceforge.czt.circus.ast.OnTheFlyDefAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitOnTheFlyDefAnn", zedObject);

    OnTheFlyDefAnn jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createOnTheFlyDefAnnElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createOnTheFlyDefAnn();
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OnTheFlyDefAnn to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a OnTheFlyDefAnn to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitOnTheFlyDefAnn", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitChannelSet(net.sourceforge.czt.circus.ast.ChannelSet zedObject)
  {
    getLogger().entering(getClassName(), "visitChannelSet", zedObject);

    ChannelSet jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createChannelSetElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createChannelSet();
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ChannelSet to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ChannelSet to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitChannelSet", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitAssignmentCommand(net.sourceforge.czt.circus.ast.AssignmentCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitAssignmentCommand", zedObject);

    AssignmentCommand jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createAssignmentCommandElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createAssignmentCommand();
      }
      createElement_ = true;
      if (zedObject.getAssignmentPairs() != null) {
        Term term = zedObject.getAssignmentPairs();
        jaxbObject.setAssignmentPairs((AssignmentPairs) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AssignmentCommand to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a AssignmentCommand to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitAssignmentCommand", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSeqProcessIte(net.sourceforge.czt.circus.ast.SeqProcessIte zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqProcessIte", zedObject);

    SeqProcessIte jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSeqProcessIte();
      createElement_ = true;
      if (zedObject.getCircusProcess() != null) {
        Term term = zedObject.getCircusProcess();
        jaxbObject.setCircusProcess((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqProcessIte to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SeqProcessIte to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSeqProcessIte", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIntChoiceProcessIdx(net.sourceforge.czt.circus.ast.IntChoiceProcessIdx zedObject)
  {
    getLogger().entering(getClassName(), "visitIntChoiceProcessIdx", zedObject);

    IntChoiceProcessIdx jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIntChoiceProcessIdx();
      createElement_ = true;
      if (zedObject.getCircusProcess() != null) {
        Term term = zedObject.getCircusProcess();
        jaxbObject.setCircusProcess((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntChoiceProcessIdx to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IntChoiceProcessIdx to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIntChoiceProcessIdx", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitBasicProcessSignature(net.sourceforge.czt.circus.ast.BasicProcessSignature zedObject)
  {
    getLogger().entering(getClassName(), "visitBasicProcessSignature", zedObject);

    BasicProcessSignature jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createBasicProcessSignatureElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createBasicProcessSignature();
      }
      createElement_ = false;
      if (zedObject.getProcessName() != null) {
        Term term = zedObject.getProcessName();
        jaxbObject.setProcessName((DeclName) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getGenFormals() != null) {
        Term term = zedObject.getGenFormals();
        jaxbObject.setGenFormals((DeclNameList) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getParamOrIndexes() != null) {
        Term term = zedObject.getParamOrIndexes();
        jaxbObject.setParamOrIndexes((Signature) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getKind() != null) {
        jaxbObject.setKind(zedObject.getKind().toString());
      }
      createElement_ = false;
      if (zedObject.getStateType() != null) {
        Term term = zedObject.getStateType();
        jaxbObject.setStateType((SchemaType) term.accept(this));
      }
      {
        List list = zedObject.getZSignature();
        List newlist = jaxbObject.getZSignature();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getActionSignature();
        List newlist = jaxbObject.getActionSignature();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = false;
      if (zedObject.getNameSet() != null) {
        Term term = zedObject.getNameSet();
        jaxbObject.setNameSet((ZRefNameList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a BasicProcessSignature to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a BasicProcessSignature to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitBasicProcessSignature", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParamProcess(net.sourceforge.czt.circus.ast.ParamProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitParamProcess", zedObject);

    ParamProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParamProcess();
      createElement_ = true;
      if (zedObject.getCircusProcess() != null) {
        Term term = zedObject.getCircusProcess();
        jaxbObject.setCircusProcess((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParamProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ParamProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitParamProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSigmaExpr(net.sourceforge.czt.circus.ast.SigmaExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitSigmaExpr", zedObject);

    SigmaExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSigmaExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createSigmaExpr();
      }
      createElement_ = false;
      if (zedObject.getChannel() != null) {
        Term term = zedObject.getChannel();
        jaxbObject.setChannel((RefExpr) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getValue() != null) {
        Term term = zedObject.getValue();
        jaxbObject.setValue((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SigmaExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SigmaExpr to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSigmaExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSubstitutionAction(net.sourceforge.czt.circus.ast.SubstitutionAction zedObject)
  {
    getLogger().entering(getClassName(), "visitSubstitutionAction", zedObject);

    SubstitutionAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSubstitutionActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createSubstitutionAction();
      }
      createElement_ = true;
      if (zedObject.getCircusAction() != null) {
        Term term = zedObject.getCircusAction();
        jaxbObject.setCircusAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRenameList() != null) {
        Term term = zedObject.getRenameList();
        jaxbObject.setRenameList((RenameList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SubstitutionAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SubstitutionAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSubstitutionAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSpecStmtCommand(net.sourceforge.czt.circus.ast.SpecStmtCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitSpecStmtCommand", zedObject);

    SpecStmtCommand jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSpecStmtCommandElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createSpecStmtCommand();
      }
      createElement_ = false;
      if (zedObject.getFrame() != null) {
        Term term = zedObject.getFrame();
        jaxbObject.setFrame((RefNameList) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getPre() != null) {
        Term term = zedObject.getPre();
        jaxbObject.setPre((Pred) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getPost() != null) {
        Term term = zedObject.getPost();
        jaxbObject.setPost((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SpecStmtCommand to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SpecStmtCommand to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSpecStmtCommand", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitMuAction(net.sourceforge.czt.circus.ast.MuAction zedObject)
  {
    getLogger().entering(getClassName(), "visitMuAction", zedObject);

    MuAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createMuActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createMuAction();
      }
      createElement_ = true;
      if (zedObject.getCircusAction() != null) {
        Term term = zedObject.getCircusAction();
        jaxbObject.setCircusAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclName() != null) {
        Term term = zedObject.getDeclName();
        jaxbObject.setDeclName((DeclName) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a MuAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a MuAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitMuAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitProcessSignature(net.sourceforge.czt.circus.ast.ProcessSignature zedObject)
  {
    getLogger().entering(getClassName(), "visitProcessSignature", zedObject);

    ProcessSignature jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createProcessSignatureElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createProcessSignature();
      }
      createElement_ = false;
      if (zedObject.getProcessName() != null) {
        Term term = zedObject.getProcessName();
        jaxbObject.setProcessName((DeclName) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getGenFormals() != null) {
        Term term = zedObject.getGenFormals();
        jaxbObject.setGenFormals((DeclNameList) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getParamOrIndexes() != null) {
        Term term = zedObject.getParamOrIndexes();
        jaxbObject.setParamOrIndexes((Signature) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getKind() != null) {
        jaxbObject.setKind(zedObject.getKind().toString());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProcessSignature to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ProcessSignature to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitProcessSignature", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitAlphabetisedParallelProcess(net.sourceforge.czt.circus.ast.AlphabetisedParallelProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitAlphabetisedParallelProcess", zedObject);

    AlphabetisedParallelProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createAlphabetisedParallelProcessElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createAlphabetisedParallelProcess();
      }
      createElement_ = true;
      if (zedObject.getLeftProc() != null) {
        Term term = zedObject.getLeftProc();
        jaxbObject.setLeftProc((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightProc() != null) {
        Term term = zedObject.getRightProc();
        jaxbObject.setRightProc((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getLeftAlpha() != null) {
        Term term = zedObject.getLeftAlpha();
        jaxbObject.setLeftAlpha((ChannelSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightAlpha() != null) {
        Term term = zedObject.getRightAlpha();
        jaxbObject.setRightAlpha((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AlphabetisedParallelProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a AlphabetisedParallelProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitAlphabetisedParallelProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitProcessPara(net.sourceforge.czt.circus.ast.ProcessPara zedObject)
  {
    getLogger().entering(getClassName(), "visitProcessPara", zedObject);

    ProcessPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createProcessParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createProcessPara();
      }
      createElement_ = true;
      if (zedObject.getProcessName() != null) {
        Term term = zedObject.getProcessName();
        jaxbObject.setProcessName((DeclName) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getGenFormals() != null) {
        Term term = zedObject.getGenFormals();
        jaxbObject.setGenFormals((DeclNameList) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getCircusProcess() != null) {
        Term term = zedObject.getCircusProcess();
        jaxbObject.setCircusProcess((CircusProcess) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProcessPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ProcessPara to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitProcessPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSeqAction(net.sourceforge.czt.circus.ast.SeqAction zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqAction", zedObject);

    SeqAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSeqAction();
      createElement_ = true;
      if (zedObject.getLeftAction() != null) {
        Term term = zedObject.getLeftAction();
        jaxbObject.setLeftAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightAction() != null) {
        Term term = zedObject.getRightAction();
        jaxbObject.setRightAction((CircusAction) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SeqAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSeqAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitBasicChannelSetExpr(net.sourceforge.czt.circus.ast.BasicChannelSetExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitBasicChannelSetExpr", zedObject);

    BasicChannelSetExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createBasicChannelSetExpr();
      createElement_ = true;
      if (zedObject.getExprList() != null) {
        Term term = zedObject.getExprList();
        jaxbObject.setExprList((ExprList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a BasicChannelSetExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a BasicChannelSetExpr to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitBasicChannelSetExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSeqActionIte(net.sourceforge.czt.circus.ast.SeqActionIte zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqActionIte", zedObject);

    SeqActionIte jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSeqActionIte();
      createElement_ = true;
      if (zedObject.getCircusAction() != null) {
        Term term = zedObject.getCircusAction();
        jaxbObject.setCircusAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqActionIte to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SeqActionIte to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSeqActionIte", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParamAction(net.sourceforge.czt.circus.ast.ParamAction zedObject)
  {
    getLogger().entering(getClassName(), "visitParamAction", zedObject);

    ParamAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParamAction();
      createElement_ = true;
      if (zedObject.getCircusAction() != null) {
        Term term = zedObject.getCircusAction();
        jaxbObject.setCircusAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParamAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ParamAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitParamAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitDotField(net.sourceforge.czt.circus.ast.DotField zedObject)
  {
    getLogger().entering(getClassName(), "visitDotField", zedObject);

    DotField jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createDotFieldElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createDotField();
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a DotField to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a DotField to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitDotField", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitChannelSetPara(net.sourceforge.czt.circus.ast.ChannelSetPara zedObject)
  {
    getLogger().entering(getClassName(), "visitChannelSetPara", zedObject);

    ChannelSetPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createChannelSetParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createChannelSetPara();
      }
      createElement_ = false;
      if (zedObject.getGenFormals() != null) {
        Term term = zedObject.getGenFormals();
        jaxbObject.setGenFormals((DeclNameList) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        Term term = zedObject.getName();
        jaxbObject.setName((DeclName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getChannelSet() != null) {
        Term term = zedObject.getChannelSet();
        jaxbObject.setChannelSet((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ChannelSetPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ChannelSetPara to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitChannelSetPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCallAction(net.sourceforge.czt.circus.ast.CallAction zedObject)
  {
    getLogger().entering(getClassName(), "visitCallAction", zedObject);

    CallAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCallActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCallAction();
      }
      createElement_ = true;
      if (zedObject.getRefName() != null) {
        Term term = zedObject.getRefName();
        jaxbObject.setRefName((RefName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getExprList() != null) {
        Term term = zedObject.getExprList();
        jaxbObject.setExprList((ExprList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CallAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a CallAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCallAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitExtChoiceProcessIdx(net.sourceforge.czt.circus.ast.ExtChoiceProcessIdx zedObject)
  {
    getLogger().entering(getClassName(), "visitExtChoiceProcessIdx", zedObject);

    ExtChoiceProcessIdx jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createExtChoiceProcessIdx();
      createElement_ = true;
      if (zedObject.getCircusProcess() != null) {
        Term term = zedObject.getCircusProcess();
        jaxbObject.setCircusProcess((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExtChoiceProcessIdx to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ExtChoiceProcessIdx to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitExtChoiceProcessIdx", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNameSet(net.sourceforge.czt.circus.ast.NameSet zedObject)
  {
    getLogger().entering(getClassName(), "visitNameSet", zedObject);

    NameSet jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNameSetElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createNameSet();
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NameSet to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a NameSet to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitNameSet", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParallelActionIte(net.sourceforge.czt.circus.ast.ParallelActionIte zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelActionIte", zedObject);

    ParallelActionIte jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParallelActionIteElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createParallelActionIte();
      }
      createElement_ = true;
      if (zedObject.getCircusAction() != null) {
        Term term = zedObject.getCircusAction();
        jaxbObject.setCircusAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getNameSet() != null) {
        Term term = zedObject.getNameSet();
        jaxbObject.setNameSet((NameSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getChannelSet() != null) {
        Term term = zedObject.getChannelSet();
        jaxbObject.setChannelSet((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelActionIte to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ParallelActionIte to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitParallelActionIte", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCommunication(net.sourceforge.czt.circus.ast.Communication zedObject)
  {
    getLogger().entering(getClassName(), "visitCommunication", zedObject);

    Communication jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCommunicationElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCommunication();
      }
      createElement_ = false;
      if (zedObject.getChannelExpr() != null) {
        Term term = zedObject.getChannelExpr();
        jaxbObject.setChannelExpr((RefExpr) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getChanFields() != null) {
        Term term = zedObject.getChanFields();
        jaxbObject.setChanFields((CircusFieldList) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getCommKind() != null) {
        jaxbObject.setCommKind(zedObject.getCommKind().toString());
      }
      createElement_ = false;
      if (zedObject.getMultiSych() != null) {
        jaxbObject.setMultiSych(zedObject.getMultiSych());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Communication to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a Communication to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCommunication", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitOutputField(net.sourceforge.czt.circus.ast.OutputField zedObject)
  {
    getLogger().entering(getClassName(), "visitOutputField", zedObject);

    OutputField jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createOutputField();
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OutputField to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a OutputField to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitOutputField", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitActionPara(net.sourceforge.czt.circus.ast.ActionPara zedObject)
  {
    getLogger().entering(getClassName(), "visitActionPara", zedObject);

    ActionPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createActionParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createActionPara();
      }
      createElement_ = true;
      if (zedObject.getDeclName() != null) {
        Term term = zedObject.getDeclName();
        jaxbObject.setDeclName((DeclName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getCircusAction() != null) {
        Term term = zedObject.getCircusAction();
        jaxbObject.setCircusAction((CircusAction) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActionPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ActionPara to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitActionPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitHideProcess(net.sourceforge.czt.circus.ast.HideProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitHideProcess", zedObject);

    HideProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createHideProcessElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createHideProcess();
      }
      createElement_ = true;
      if (zedObject.getCircusProcess() != null) {
        Term term = zedObject.getCircusProcess();
        jaxbObject.setCircusProcess((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getChannelSet() != null) {
        Term term = zedObject.getChannelSet();
        jaxbObject.setChannelSet((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a HideProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a HideProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitHideProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParallelProcess(net.sourceforge.czt.circus.ast.ParallelProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelProcess", zedObject);

    ParallelProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParallelProcessElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createParallelProcess();
      }
      createElement_ = true;
      if (zedObject.getLeftProc() != null) {
        Term term = zedObject.getLeftProc();
        jaxbObject.setLeftProc((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightProc() != null) {
        Term term = zedObject.getRightProc();
        jaxbObject.setRightProc((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getChannelSet() != null) {
        Term term = zedObject.getChannelSet();
        jaxbObject.setChannelSet((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ParallelProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitParallelProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitLetVarAction(net.sourceforge.czt.circus.ast.LetVarAction zedObject)
  {
    getLogger().entering(getClassName(), "visitLetVarAction", zedObject);

    LetVarAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createLetVarActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createLetVarAction();
      }
      createElement_ = true;
      if (zedObject.getCircusAction() != null) {
        Term term = zedObject.getCircusAction();
        jaxbObject.setCircusAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getExprList() != null) {
        Term term = zedObject.getExprList();
        jaxbObject.setExprList((ExprList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a LetVarAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a LetVarAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitLetVarAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitActionType(net.sourceforge.czt.circus.ast.ActionType zedObject)
  {
    getLogger().entering(getClassName(), "visitActionType", zedObject);

    ActionType jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createActionTypeElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createActionType();
      }
      createElement_ = true;
      if (zedObject.getActionSignature() != null) {
        Term term = zedObject.getActionSignature();
        jaxbObject.setActionSignature((ActionSignature) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActionType to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ActionType to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitActionType", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIntChoiceAction(net.sourceforge.czt.circus.ast.IntChoiceAction zedObject)
  {
    getLogger().entering(getClassName(), "visitIntChoiceAction", zedObject);

    IntChoiceAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIntChoiceAction();
      createElement_ = true;
      if (zedObject.getLeftAction() != null) {
        Term term = zedObject.getLeftAction();
        jaxbObject.setLeftAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightAction() != null) {
        Term term = zedObject.getRightAction();
        jaxbObject.setRightAction((CircusAction) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntChoiceAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IntChoiceAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIntChoiceAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParallelProcessIdx(net.sourceforge.czt.circus.ast.ParallelProcessIdx zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelProcessIdx", zedObject);

    ParallelProcessIdx jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParallelProcessIdxElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createParallelProcessIdx();
      }
      createElement_ = true;
      if (zedObject.getCircusProcess() != null) {
        Term term = zedObject.getCircusProcess();
        jaxbObject.setCircusProcess((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getChannelSet() != null) {
        Term term = zedObject.getChannelSet();
        jaxbObject.setChannelSet((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelProcessIdx to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ParallelProcessIdx to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitParallelProcessIdx", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRenameProcess(net.sourceforge.czt.circus.ast.RenameProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitRenameProcess", zedObject);

    RenameProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRenameProcessElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createRenameProcess();
      }
      createElement_ = true;
      if (zedObject.getCircusProcess() != null) {
        Term term = zedObject.getCircusProcess();
        jaxbObject.setCircusProcess((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getAssignmentPairs() != null) {
        Term term = zedObject.getAssignmentPairs();
        jaxbObject.setAssignmentPairs((AssignmentPairs) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RenameProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a RenameProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitRenameProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitChannelPara(net.sourceforge.czt.circus.ast.ChannelPara zedObject)
  {
    getLogger().entering(getClassName(), "visitChannelPara", zedObject);

    ChannelPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createChannelParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createChannelPara();
      }
      createElement_ = false;
      if (zedObject.getChannelDecl() != null) {
        Term term = zedObject.getChannelDecl();
        jaxbObject.setChannelDecl((DeclList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ChannelPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ChannelPara to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitChannelPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCallProcess(net.sourceforge.czt.circus.ast.CallProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitCallProcess", zedObject);

    CallProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCallProcessElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCallProcess();
      }
      createElement_ = false;
      if (zedObject.getCallExpr() != null) {
        Term term = zedObject.getCallExpr();
        jaxbObject.setCallExpr((RefExpr) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getActuals() != null) {
        Term term = zedObject.getActuals();
        jaxbObject.setActuals((ExprList) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getCallKind() != null) {
        jaxbObject.setCallKind(zedObject.getCallKind().toString());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CallProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a CallProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCallProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIntChoiceActionIte(net.sourceforge.czt.circus.ast.IntChoiceActionIte zedObject)
  {
    getLogger().entering(getClassName(), "visitIntChoiceActionIte", zedObject);

    IntChoiceActionIte jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIntChoiceActionIte();
      createElement_ = true;
      if (zedObject.getCircusAction() != null) {
        Term term = zedObject.getCircusAction();
        jaxbObject.setCircusAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntChoiceActionIte to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IntChoiceActionIte to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIntChoiceActionIte", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitAlphabetisedParallelActionIte(net.sourceforge.czt.circus.ast.AlphabetisedParallelActionIte zedObject)
  {
    getLogger().entering(getClassName(), "visitAlphabetisedParallelActionIte", zedObject);

    AlphabetisedParallelActionIte jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createAlphabetisedParallelActionIte();
      createElement_ = true;
      if (zedObject.getCircusAction() != null) {
        Term term = zedObject.getCircusAction();
        jaxbObject.setCircusAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getNameSet() != null) {
        Term term = zedObject.getNameSet();
        jaxbObject.setNameSet((NameSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getChannelSet() != null) {
        Term term = zedObject.getChannelSet();
        jaxbObject.setChannelSet((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AlphabetisedParallelActionIte to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a AlphabetisedParallelActionIte to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitAlphabetisedParallelActionIte", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNameSetPara(net.sourceforge.czt.circus.ast.NameSetPara zedObject)
  {
    getLogger().entering(getClassName(), "visitNameSetPara", zedObject);

    NameSetPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNameSetParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createNameSetPara();
      }
      createElement_ = true;
      if (zedObject.getDeclName() != null) {
        Term term = zedObject.getDeclName();
        jaxbObject.setDeclName((DeclName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getNameSet() != null) {
        Term term = zedObject.getNameSet();
        jaxbObject.setNameSet((NameSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NameSetPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a NameSetPara to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitNameSetPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInterleaveProcess(net.sourceforge.czt.circus.ast.InterleaveProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitInterleaveProcess", zedObject);

    InterleaveProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInterleaveProcess();
      createElement_ = true;
      if (zedObject.getLeftProc() != null) {
        Term term = zedObject.getLeftProc();
        jaxbObject.setLeftProc((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightProc() != null) {
        Term term = zedObject.getRightProc();
        jaxbObject.setRightProc((CircusProcess) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InterleaveProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a InterleaveProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitInterleaveProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSeqProcess(net.sourceforge.czt.circus.ast.SeqProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqProcess", zedObject);

    SeqProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSeqProcess();
      createElement_ = true;
      if (zedObject.getLeftProc() != null) {
        Term term = zedObject.getLeftProc();
        jaxbObject.setLeftProc((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightProc() != null) {
        Term term = zedObject.getRightProc();
        jaxbObject.setRightProc((CircusProcess) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SeqProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSeqProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInterleaveActionIte(net.sourceforge.czt.circus.ast.InterleaveActionIte zedObject)
  {
    getLogger().entering(getClassName(), "visitInterleaveActionIte", zedObject);

    InterleaveActionIte jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInterleaveActionIte();
      createElement_ = true;
      if (zedObject.getCircusAction() != null) {
        Term term = zedObject.getCircusAction();
        jaxbObject.setCircusAction((CircusAction) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getNameSet() != null) {
        Term term = zedObject.getNameSet();
        jaxbObject.setNameSet((NameSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InterleaveActionIte to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a InterleaveActionIte to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitInterleaveActionIte", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitBasicProcess(net.sourceforge.czt.circus.ast.BasicProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitBasicProcess", zedObject);

    BasicProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createBasicProcessElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createBasicProcess();
      }
      createElement_ = false;
      if (zedObject.getStatePara() != null) {
        Term term = zedObject.getStatePara();
        jaxbObject.setStatePara((Para) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getLocalPara() != null) {
        Term term = zedObject.getLocalPara();
        jaxbObject.setLocalPara((ParaList) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getOnTheFlyPara() != null) {
        Term term = zedObject.getOnTheFlyPara();
        jaxbObject.setOnTheFlyPara((ParaList) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getMainAction() != null) {
        Term term = zedObject.getMainAction();
        jaxbObject.setMainAction((CircusAction) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a BasicProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a BasicProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitBasicProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInterleaveProcessIte(net.sourceforge.czt.circus.ast.InterleaveProcessIte zedObject)
  {
    getLogger().entering(getClassName(), "visitInterleaveProcessIte", zedObject);

    InterleaveProcessIte jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInterleaveProcessIte();
      createElement_ = true;
      if (zedObject.getCircusProcess() != null) {
        Term term = zedObject.getCircusProcess();
        jaxbObject.setCircusProcess((CircusProcess) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InterleaveProcessIte to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a InterleaveProcessIte to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitInterleaveProcessIte", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitVarDeclCommand(net.sourceforge.czt.circus.ast.VarDeclCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitVarDeclCommand", zedObject);

    VarDeclCommand jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createVarDeclCommandElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createVarDeclCommand();
      }
      createElement_ = true;
      if (zedObject.getDeclList() != null) {
        Term term = zedObject.getDeclList();
        jaxbObject.setDeclList((DeclList) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getCircusAction() != null) {
        Term term = zedObject.getCircusAction();
        jaxbObject.setCircusAction((CircusAction) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a VarDeclCommand to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a VarDeclCommand to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitVarDeclCommand", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInputField(net.sourceforge.czt.circus.ast.InputField zedObject)
  {
    getLogger().entering(getClassName(), "visitInputField", zedObject);

    InputField jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInputFieldElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createInputField();
      }
      createElement_ = false;
      if (zedObject.getVariable() != null) {
        Term term = zedObject.getVariable();
        jaxbObject.setVariable((RefName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRestriction() != null) {
        Term term = zedObject.getRestriction();
        jaxbObject.setRestriction((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InputField to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a InputField to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitInputField", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRefinementConjPara(net.sourceforge.czt.circus.ast.RefinementConjPara zedObject)
  {
    getLogger().entering(getClassName(), "visitRefinementConjPara", zedObject);

    RefinementConjPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRefinementConjParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createRefinementConjPara();
      }
      createElement_ = false;
      if (zedObject.getSpecification() != null) {
        Term term = zedObject.getSpecification();
        jaxbObject.setSpecification((CircusAction) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getImplementation() != null) {
        Term term = zedObject.getImplementation();
        jaxbObject.setImplementation((CircusAction) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getModel() != null) {
        jaxbObject.setModel(zedObject.getModel().toString());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RefinementConjPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a RefinementConjPara to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitRefinementConjPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitActionSignature(net.sourceforge.czt.circus.ast.ActionSignature zedObject)
  {
    getLogger().entering(getClassName(), "visitActionSignature", zedObject);

    ActionSignature jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createActionSignatureElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createActionSignature();
      }
      createElement_ = false;
      if (zedObject.getActionName() != null) {
        Term term = zedObject.getActionName();
        jaxbObject.setActionName((DeclName) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getFormalParams() != null) {
        Term term = zedObject.getFormalParams();
        jaxbObject.setFormalParams((Signature) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getLocalVars() != null) {
        Term term = zedObject.getLocalVars();
        jaxbObject.setLocalVars((Signature) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getUsedChannels() != null) {
        Term term = zedObject.getUsedChannels();
        jaxbObject.setUsedChannels((Signature) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActionSignature to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ActionSignature to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitActionSignature", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }
}
