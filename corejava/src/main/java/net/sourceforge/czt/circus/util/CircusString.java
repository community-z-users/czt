
/**
Copyright 2005 Leonardo Freitas
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.circus.util;

import net.sourceforge.czt.z.util.*;

/**
 * An interface for commonly used Circus characters.
 *
 * @author generated by Gnast XSL script circuschar2stringclass.xsl
 */
public interface CircusString extends ZString
{


  /**
   * left channel set bracket.
   */
  String LCIRCCHANSET = String.valueOf(CircusChar.LCIRCCHANSET);

  /**
   * right channel set bracket.
   */
  String RCIRCCHANSET = String.valueOf(CircusChar.RCIRCCHANSET);

  /**
   * left indexed process instantiation angle bracket.
   */
  String CIRCLINST = String.valueOf(CircusChar.CIRCLINST);

  /**
   * right indexed process instantiation angle bracket.
   */
  String CIRCRINST = String.valueOf(CircusChar.CIRCRINST);

  /**
   * left guarded action bracket.
   */
  String LCIRCGUARD = String.valueOf(CircusChar.LCIRCGUARD);

  /**
   * right guarded action bracket.
   */
  String RCIRCGUARD = String.valueOf(CircusChar.RCIRCGUARD);

  /**
   * left schema expression action bracket.
   */
  String LSCHEXPRACT = String.valueOf(CircusChar.LSCHEXPRACT);

  /**
   * right schema expression action bracket.
   */
  String RSCHEXPRACT = String.valueOf(CircusChar.RSCHEXPRACT);

  /**
   * left process renaming bracket.
   */
  String LCIRCRENAME = String.valueOf(CircusChar.LCIRCRENAME);

  /**
   * right process renaming bracket.
   */
  String RCIRCRENAME = String.valueOf(CircusChar.RCIRCRENAME);

  /**
   * left parallel bracket.
   */
  String LPAR = String.valueOf(CircusChar.LPAR);

  /**
   * right parallel bracket.
   */
  String RPAR = String.valueOf(CircusChar.RPAR);

  /**
   * left interleave bracket.
   */
  String LINTER = String.valueOf(CircusChar.LINTER);

  /**
   * right interleave bracket.
   */
  String RINTER = String.valueOf(CircusChar.RINTER);

  /**
   * box drawings thick down and right. Like SCHCHAR.
   */
  String CIRCUSPROCESSCHAR = String.valueOf(CircusChar.CIRCUSPROCESSCHAR);

  /**
   * prefix input field colon.
   */
  String PREFIXCOLON = String.valueOf(CircusChar.PREFIXCOLON);

  /**
   * Spivey's like definition symbol (or just \defs?).
   */
  String CIRCDEF = String.valueOf(CircusChar.CIRCDEF);

  /**
   * Process indexing spot or 2A00.
   */
  String CIRCINDEX = String.valueOf(CircusChar.CIRCINDEX);

  /**
   * recursive (least fixed-point) operator.
   */
  String CIRCMU = String.valueOf(CircusChar.CIRCMU);

  /**
   * then for if guarded command.
   */
  String CIRCTHEN = String.valueOf(CircusChar.CIRCTHEN);

  /**
   * else for if guarded command.
   */
  String CIRCELSE = String.valueOf(CircusChar.CIRCELSE);

  /**
   * prefixing.
   */
  String PREFIXTHEN = String.valueOf(CircusChar.PREFIXTHEN);

  /**
   * sequential composition.
   */
  String CIRCSEQ = String.valueOf(CircusChar.CIRCSEQ);

  /**
   * Process interleave.
   */
  String INTERLEAVE = String.valueOf(CircusChar.INTERLEAVE);

  /**
   * Replicated interleave.
   */
  String REPINTERLEAVE = String.valueOf(CircusChar.REPINTERLEAVE);

  /**
   * Replicated Parallelism or 01C1.
   */
  String REPPARALLEL = String.valueOf(CircusChar.REPPARALLEL);

  /**
   * Hiding operator.
   */
  String CIRCHIDING = String.valueOf(CircusChar.CIRCHIDING);

  /**
   * External choice.
   */
  String EXTCHOICE = String.valueOf(CircusChar.EXTCHOICE);

  /**
   * Replicated external choice.
   */
  String REPEXTCHOICE = String.valueOf(CircusChar.REPEXTCHOICE);

  /**
   * Internal choice.
   */
  String INTCHOICE = String.valueOf(CircusChar.INTCHOICE);

  /**
   * Replicated internal choice (TODO:Change Unicode char).
   */
  String REPINTCHOICE = String.valueOf(CircusChar.REPINTCHOICE);

  /**
   * mathematical double-struck capital B.
   */
  String BOOLEAN = String.valueOf(CircusChar.BOOLEAN);

  /**
   * generalised disjointness.
   */
  String GENDJ = String.valueOf(CircusChar.GENDJ);

  /**
   * regions of a set of sets.
   */
  String REGIONS = String.valueOf(CircusChar.REGIONS);

  /**
   * distributed set difference.
   */
  String DSETMINUS = String.valueOf(CircusChar.DSETMINUS);

  /**
   * distributed set intersection.
   */
  String DCAP = String.valueOf(CircusChar.DCAP);

  /* Reuse Z IF, see Parser.xml terminal section for an explanation.
   * String CIRCIF = "ifg";  
   */
  String CIRCFI = "fi";
  String CIRCDO = "do";
  String CIRCOD = "od";
  String CIRCVAR = "var";
  String CIRCVAL = "val";
  String CIRCRES = "res";
  String CIRCVRES = "vres";
  String CIRCCHAN = "channel";  
  String CIRCCHANFROM = "channelfrom";
  String CIRCCHANSET = "channelset";
  String CIRCNAMESET = "nameset";  
  String CIRCPROC = "process";
  String CIRCBEGIN = "begin";
  String CIRCEND = "end";
  String CIRCSTATE = "state";
  String CIRCSKIP = "Skip";
  String CIRCSTOP = "Stop";
  String CIRCCHAOS = "Chaos";
  String CIRCASSIGN = ":=";
}

