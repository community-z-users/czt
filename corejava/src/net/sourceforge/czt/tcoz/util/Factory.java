
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.tcoz.util;

import net.sourceforge.czt.tcoz.ast.*;
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.oz.ast.*;

/**
 * <p>An object factory for the AST.
 *
 * <p>This object factory allows the programmer
 * to programatically construct new instances of concrete Z terms.
 * </p>
 *
 * @author Gnast version 0.1
 */
public class Factory
  extends net.sourceforge.czt.oz.util.Factory
{
  private net.sourceforge.czt.tcoz.ast.TcozFactory factory_ =
    new net.sourceforge.czt.tcoz.impl.TcozFactoryImpl();

  /**
   * Creates a new convenience factory that uses the standard factory
   * implementation for creating AST terms.
   */
  public Factory()
  {
    super();
  }

  /**
   * Creates a new convenience factory that uses the given base factory
   * for creating AST terms.
   */
  public Factory(net.sourceforge.czt.tcoz.ast.TcozFactory factory)
  {
    super(factory);
    factory_ = factory;
  }

  /**
   * Creates an instance of {@link RecProExpr}.
   *
   * @return the new instance of RecProExpr.
   */
  public RecProExpr createRecProExpr()
  {
    return factory_.createRecProExpr();
  }

  /**
   * Creates an instance of {@link RecProExpr} with the given children.
   *
   * @return the new instance of RecProExpr.
   */
  public RecProExpr createRecProExpr(net.sourceforge.czt.z.ast.RefName opName, net.sourceforge.czt.oz.ast.OperationExpr operationExpr)
  {
    return factory_.createRecProExpr(opName, operationExpr);
  }

  /**
   * Creates an instance of {@link WaitUntilProExpr}.
   *
   * @return the new instance of WaitUntilProExpr.
   */
  public WaitUntilProExpr createWaitUntilProExpr()
  {
    return factory_.createWaitUntilProExpr();
  }

  /**
   * Creates an instance of {@link WaitUntilProExpr} with the given children.
   *
   * @return the new instance of WaitUntilProExpr.
   */
  public WaitUntilProExpr createWaitUntilProExpr(net.sourceforge.czt.oz.ast.OperationExpr operationExpr, net.sourceforge.czt.z.ast.Expr1 waitUntil)
  {
    return factory_.createWaitUntilProExpr(operationExpr, waitUntil);
  }

  /**
   * Creates an instance of {@link DeadlineProExpr}.
   *
   * @return the new instance of DeadlineProExpr.
   */
  public DeadlineProExpr createDeadlineProExpr()
  {
    return factory_.createDeadlineProExpr();
  }

  /**
   * Creates an instance of {@link DeadlineProExpr} with the given children.
   *
   * @return the new instance of DeadlineProExpr.
   */
  public DeadlineProExpr createDeadlineProExpr(net.sourceforge.czt.oz.ast.OperationExpr operationExpr, net.sourceforge.czt.z.ast.Expr1 deadline)
  {
    return factory_.createDeadlineProExpr(operationExpr, deadline);
  }

  /**
   * Creates an instance of {@link WaitProExpr}.
   *
   * @return the new instance of WaitProExpr.
   */
  public WaitProExpr createWaitProExpr()
  {
    return factory_.createWaitProExpr();
  }

  /**
   * Creates an instance of {@link WaitProExpr} with the given children.
   *
   * @return the new instance of WaitProExpr.
   */
  public WaitProExpr createWaitProExpr(net.sourceforge.czt.z.ast.Expr expr)
  {
    return factory_.createWaitProExpr(expr);
  }

  /**
   * Creates an instance of {@link DivergeProExpr}.
   *
   * @return the new instance of DivergeProExpr.
   */
  public DivergeProExpr createDivergeProExpr()
  {
    return factory_.createDivergeProExpr();
  }

  /**
   * Creates an instance of {@link SynPllProExpr}.
   *
   * @return the new instance of SynPllProExpr.
   */
  public SynPllProExpr createSynPllProExpr()
  {
    return factory_.createSynPllProExpr();
  }

  /**
   * Creates an instance of {@link SynPllProExpr} with the given children.
   *
   * @return the new instance of SynPllProExpr.
   */
  public SynPllProExpr createSynPllProExpr(OperationExpr leftOperationExpr, OperationExpr rightOperationExpr, EventSet events)
  {
    return factory_.createSynPllProExpr(leftOperationExpr, rightOperationExpr, events);
  }

  /**
   * Creates an instance of {@link InterruptProExpr}.
   *
   * @return the new instance of InterruptProExpr.
   */
  public InterruptProExpr createInterruptProExpr()
  {
    return factory_.createInterruptProExpr();
  }

  /**
   * Creates an instance of {@link InterruptProExpr} with the given children.
   *
   * @return the new instance of InterruptProExpr.
   */
  public InterruptProExpr createInterruptProExpr(net.sourceforge.czt.oz.ast.OperationExpr normalOp, net.sourceforge.czt.z.ast.Expr1 intOrTimeout, net.sourceforge.czt.oz.ast.OperationExpr handlerOp)
  {
    return factory_.createInterruptProExpr(normalOp, intOrTimeout, handlerOp);
  }

  /**
   * Creates an instance of {@link InterleaveProExpr}.
   *
   * @return the new instance of InterleaveProExpr.
   */
  public InterleaveProExpr createInterleaveProExpr()
  {
    return factory_.createInterleaveProExpr();
  }

  /**
   * Creates an instance of {@link InterleaveProExpr} with the given children.
   *
   * @return the new instance of InterleaveProExpr.
   */
  public InterleaveProExpr createInterleaveProExpr(OperationExpr leftOperationExpr, OperationExpr rightOperationExpr)
  {
    return factory_.createInterleaveProExpr(leftOperationExpr, rightOperationExpr);
  }

  /**
   * Creates an instance of {@link AtProExpr}.
   *
   * @return the new instance of AtProExpr.
   */
  public AtProExpr createAtProExpr()
  {
    return factory_.createAtProExpr();
  }

  /**
   * Creates an instance of {@link AtProExpr} with the given children.
   *
   * @return the new instance of AtProExpr.
   */
  public AtProExpr createAtProExpr(Event event, net.sourceforge.czt.z.ast.Expr expr, net.sourceforge.czt.oz.ast.OperationExpr operationExpr)
  {
    return factory_.createAtProExpr(event, expr, operationExpr);
  }

  /**
   * Creates an instance of {@link Connection}.
   *
   * @return the new instance of Connection.
   */
  public Connection createConnection()
  {
    return factory_.createConnection();
  }

  /**
   * Creates an instance of {@link Connection} with the given children.
   *
   * @return the new instance of Connection.
   */
  public Connection createConnection(net.sourceforge.czt.oz.ast.RefNameList leftProcess, net.sourceforge.czt.oz.ast.RefNameList rightProcess, net.sourceforge.czt.oz.ast.RefNameList channels)
  {
    return factory_.createConnection(leftProcess, rightProcess, channels);
  }

  /**
   * Creates an instance of {@link InterruptTimeOpExpr}.
   *
   * @return the new instance of InterruptTimeOpExpr.
   */
  public InterruptTimeOpExpr createInterruptTimeOpExpr()
  {
    return factory_.createInterruptTimeOpExpr();
  }

  /**
   * Creates an instance of {@link InterruptTimeOpExpr} with the given children.
   *
   * @return the new instance of InterruptTimeOpExpr.
   */
  public InterruptTimeOpExpr createInterruptTimeOpExpr(net.sourceforge.czt.oz.ast.OperationExpr normalOp, net.sourceforge.czt.z.ast.Expr1 intOrTimeout, net.sourceforge.czt.oz.ast.OperationExpr handlerOp)
  {
    return factory_.createInterruptTimeOpExpr(normalOp, intOrTimeout, handlerOp);
  }

  /**
   * Creates an instance of {@link GuardProExpr}.
   *
   * @return the new instance of GuardProExpr.
   */
  public GuardProExpr createGuardProExpr()
  {
    return factory_.createGuardProExpr();
  }

  /**
   * Creates an instance of {@link GuardProExpr} with the given children.
   *
   * @return the new instance of GuardProExpr.
   */
  public GuardProExpr createGuardProExpr(net.sourceforge.czt.z.ast.SchText guard, net.sourceforge.czt.oz.ast.OperationExpr operationExpr)
  {
    return factory_.createGuardProExpr(guard, operationExpr);
  }

  /**
   * Creates an instance of {@link StopProExpr}.
   *
   * @return the new instance of StopProExpr.
   */
  public StopProExpr createStopProExpr()
  {
    return factory_.createStopProExpr();
  }

  /**
   * Creates an instance of {@link SkipProExpr}.
   *
   * @return the new instance of SkipProExpr.
   */
  public SkipProExpr createSkipProExpr()
  {
    return factory_.createSkipProExpr();
  }

  /**
   * Creates an instance of {@link ChannelExpr}.
   *
   * @return the new instance of ChannelExpr.
   */
  public ChannelExpr createChannelExpr()
  {
    return factory_.createChannelExpr();
  }

  /**
   * Creates an instance of {@link ChannelExpr} with the given children.
   *
   * @return the new instance of ChannelExpr.
   */
  public ChannelExpr createChannelExpr(net.sourceforge.czt.z.ast.Expr expr, ChannelType channelType)
  {
    return factory_.createChannelExpr(expr, channelType);
  }

  /**
   * Creates an instance of {@link EventSet}.
   *
   * @return the new instance of EventSet.
   */
  public EventSet createEventSet()
  {
    return factory_.createEventSet();
  }

  /**
   * Creates an instance of {@link EventSet} with the given children.
   *
   * @return the new instance of EventSet.
   */
  public EventSet createEventSet(java.util.List event)
  {
    return factory_.createEventSet(event);
  }

  /**
   * Creates an instance of {@link Event}.
   *
   * @return the new instance of Event.
   */
  public Event createEvent()
  {
    return factory_.createEvent();
  }

  /**
   * Creates an instance of {@link Event} with the given children.
   *
   * @return the new instance of Event.
   */
  public Event createEvent(net.sourceforge.czt.z.ast.RefName name, net.sourceforge.czt.z.ast.Expr expr)
  {
    return factory_.createEvent(name, expr);
  }

  /**
   * Creates an instance of {@link TopologyProExpr}.
   *
   * @return the new instance of TopologyProExpr.
   */
  public TopologyProExpr createTopologyProExpr()
  {
    return factory_.createTopologyProExpr();
  }

  /**
   * Creates an instance of {@link TopologyProExpr} with the given children.
   *
   * @return the new instance of TopologyProExpr.
   */
  public TopologyProExpr createTopologyProExpr(java.util.List connection)
  {
    return factory_.createTopologyProExpr(connection);
  }

  /**
   * Creates an instance of {@link TimeoutEndProExpr}.
   *
   * @return the new instance of TimeoutEndProExpr.
   */
  public TimeoutEndProExpr createTimeoutEndProExpr()
  {
    return factory_.createTimeoutEndProExpr();
  }

  /**
   * Creates an instance of {@link TimeoutEndProExpr} with the given children.
   *
   * @return the new instance of TimeoutEndProExpr.
   */
  public TimeoutEndProExpr createTimeoutEndProExpr(net.sourceforge.czt.oz.ast.OperationExpr normalOp, net.sourceforge.czt.z.ast.Expr1 intOrTimeout, net.sourceforge.czt.oz.ast.OperationExpr handlerOp)
  {
    return factory_.createTimeoutEndProExpr(normalOp, intOrTimeout, handlerOp);
  }

  /**
   * Creates an instance of {@link TimeoutStartProExpr}.
   *
   * @return the new instance of TimeoutStartProExpr.
   */
  public TimeoutStartProExpr createTimeoutStartProExpr()
  {
    return factory_.createTimeoutStartProExpr();
  }

  /**
   * Creates an instance of {@link TimeoutStartProExpr} with the given children.
   *
   * @return the new instance of TimeoutStartProExpr.
   */
  public TimeoutStartProExpr createTimeoutStartProExpr(net.sourceforge.czt.oz.ast.OperationExpr normalOp, net.sourceforge.czt.z.ast.Expr1 intOrTimeout, net.sourceforge.czt.oz.ast.OperationExpr handlerOp)
  {
    return factory_.createTimeoutStartProExpr(normalOp, intOrTimeout, handlerOp);
  }


  /**
   * Creates a list of size one with the given object as element.
   * This is a convenience method.
   */
  public java.util.List list(Object o)
  {
    java.util.List result = new java.util.ArrayList();
    result.add(o);
    return result;
  }

  /**
   * Creates a list with the two objects as elements.
   * This is a convenience method.
   */
  public java.util.List list(Object first, Object second)
  {
    java.util.List result = new java.util.ArrayList();
    result.add(first);
    result.add(second);
    return result;
  }

  /**
   * Creates an application (Expr followed by Expr in the syntax),
   * that is an ApplExpr with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public ApplExpr createApplication(RefName refName, Expr expr)
  {
    return createApplExpr(createRefExpr(refName), expr, Boolean.FALSE);
  }

  /**
   * Creates a DeclName with the given word and strokes and
   * id set to <code>null</code>.
   * This is a convenience method.
   */
  public DeclName createDeclName(String word, java.util.List strokes)
  {
    return createDeclName(word, strokes, null);
  }

  /**
   * Creates a DeclName from a decorword, that is a string that
   * may contain strokes at the end.
   * The strokes are extracted from the end and the resulting
   * name is returned.
   * This is a convenience method.
   */
  public DeclName createDeclName(String decorword)
  {
    java.util.List strokes = new java.util.ArrayList();
    final String word = getWordAndStrokes(decorword, strokes);
    return createDeclName(word, strokes, null);
  }

  protected String getWordAndStrokes(String decorword, java.util.List strokes)
  {
    final String NUMSTROKE_REGEX =
      net.sourceforge.czt.z.util.ZString.SE + "[0-9]"  +
      net.sourceforge.czt.z.util.ZString.NW;

    final char instroke   = net.sourceforge.czt.z.util.ZChar.INSTROKE;
    final char outstroke  = net.sourceforge.czt.z.util.ZChar.OUTSTROKE;
    final char nextstroke = net.sourceforge.czt.z.util.ZChar.PRIME;

    int wordEnd = decorword.length();

    for (int i = decorword.length() - 1;
         i >= 0 &&
           (decorword.charAt(i) == instroke   ||
            decorword.charAt(i) == outstroke  ||
            decorword.charAt(i) == nextstroke ||
            (i >= 2 &&
             decorword.substring(i - 2, i + 1).matches(NUMSTROKE_REGEX)));
         i--) {
      final char c = decorword.charAt(i);
      if (c == instroke) {
        strokes.add(0, createInStroke());
      }
      else if (c == outstroke) {
        strokes.add(0, createOutStroke());
      }
      else if (c == nextstroke) {
        strokes.add(0, createNextStroke());
      }
      else {
        NumStroke numStroke =
          createNumStroke(new Integer(decorword.substring(i - 1, i)));
        strokes.add(numStroke);
        i -= 2;  //skip the rest
      }
      wordEnd = i;
    }
    return decorword.substring(0, wordEnd);
  }

  /**
   * Creates a member predicate that represents equality
   * between the two given expressions.
   * This is a convenience method.
   */
  public MemPred createEquality(Expr left, Expr right)
  {
    return createMemPred(left, createSetExpr(list(right)), Boolean.TRUE);
  }

  /**
   * Creates a function operator application, that is an ApplExpr
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public ApplExpr createFunOpAppl(RefName refName, Expr expr)
  {
    return createApplExpr(createRefExpr(refName), expr, Boolean.TRUE);
  }

  /**
   * Creates a generic instantiation expression, that is a RefExpr
   * with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public RefExpr createGenInst(RefName refName, java.util.List exprs)
  {
    return createRefExpr(refName, exprs, Boolean.FALSE);
  }

  /**
   * Creates a generic operator application, that is a RefExpr
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public RefExpr createGenOpApp(RefName refName, java.util.List exprs)
  {
    return createRefExpr(refName, exprs, Boolean.TRUE);
  }

  /**
   * Creates a horizontal definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * expression and with Box set to OmitBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param expr an expression.
   */
  public AxPara createHorizontalDef(DeclName declName, Expr expr)
  {
    return createHorizontalDef(declName, null, expr);
  }

  /**
   * Creates a generic horizontal definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * expression and with Box set to OmitBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param formals a list of DeclName, the formal parameters.
   * @param expr an expression.
   */
  public AxPara createHorizontalDef(DeclName declName,
                                    java.util.List formals,
                                    Expr expr)
  {
    ConstDecl constDecl = createConstDecl(declName, expr);
    SchText schText = createSchText(list(constDecl), null);
    return createAxPara(formals, schText, Box.OmitBox);
  }

  /**
   * Creates a member predicate for a given referencing name and
   * an expression, that is a MemPred with mixfix set to <code>false</code>.
   * This is a convenience method.
   */ 
  public MemPred createMemPred(RefName refName, Expr expr)
  {
    return createMemPred(createRefExpr(refName), expr, Boolean.FALSE);
  }

  /**
   * Creates a number expression with the given value.
   * This is a convenience method.
   */
  public NumExpr createNumExpr(int value)
  {
    return createNumExpr(java.math.BigInteger.valueOf(value));
  }

  /**
   * Creates a binary product expression.
   * This is a convenience method.
   */
  public ProdExpr createProdExpr(Expr left, Expr right)
  {
    return createProdExpr(list(left, right));
  }

  /**
   * Creates a reference (expression) to the given name.
   * The mixfix child of the returned reference expression
   * is <code>false</code> and the list of expressions is empty.
   * This is a convenience method.
   */
  public RefExpr createRefExpr(RefName refName)
  {
    return createRefExpr(refName, null, Boolean.FALSE);
  }

  /**
   * Creates a RefName with the given word and strokes and
   * id set to <code>null</code>.
   * This is a convenience method.
   */
  public RefName createRefName(String word, java.util.List strokes)
  {
    return createRefName(word, strokes, null);
  }

  /**
   * Creates a RefName from a decorword, that is a string that
   * may contain strokes at the end.
   * The strokes are extracted from the end and the resulting
   * name is returned.
   * This is a convenience method.
   */
  public RefName createRefName(String decorword)
  {
    java.util.List strokes = new java.util.ArrayList();
    final String word = getWordAndStrokes(decorword, strokes);
    return createRefName(word, strokes, null);
  }

  /**
   * Creates a referencing name that refers to the given
   * declaring name.
   * This is a convenience method.
   */
  public RefName createRefName(DeclName declName)
  {
    return createRefName(declName.getWord(), declName.getStroke(), declName);
  }

  /**
   * Creates a relation operator application, that is a MemPred
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public MemPred createRelOpAppl(Expr expr, RefName refName)
  {
    return createMemPred(expr, createRefExpr(refName), Boolean.TRUE);
  }

  /**
   * Creates a schema definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * schema text and with Box set to SchBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param schemaText the schema text.
   */
  public AxPara createSchema(DeclName declName, SchText schemaText)
  {
    return createSchema(declName, null, schemaText);
  }

  /**
   * Creates a generic schema definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * schema text and with Box set to SchBox.
   * This is a convenience method.
   *
   * @param formals a list of DeclName, the formal parameters.
   * @param declName name of the schema.
   * @param schemaText the schema text.
   */
  public AxPara createSchema(DeclName declName,
                             java.util.List formals,
                             SchText schemaText)
  {
    ConstDecl constDecl = createConstDecl(declName, createSchExpr(schemaText));
    SchText schText = createSchText(list(constDecl), null);
    return createAxPara(formals, schText, Box.SchBox);
  }

  /**
   * <p>Creates a sequence, that is a set of pairs of position
   * (starting from 1) and corresponding component expression.
   * This applies rule 12.2.12 of the Z standard to a list of
   * expressions.</p>
   *
   * <p>More formally, a list
   * <code>e_1, ..., e_n</code> of expressions is transformed into
   * the set <code>\{ (1, e_1), ... , (n, e_n) \}</code>.
   * </p>
   *
   * <p>This is a convenience method.</p>
   *
   * @param exprList a list of expressions (Expr).
   */
  public SetExpr createSequence(java.util.List exprList)
  {
    java.util.List tupleList = new java.util.ArrayList(exprList.size());
    int count = 1;
    for (java.util.Iterator i = exprList.iterator(); i.hasNext(); count++) {
      tupleList.add(createTupleExpr(createNumExpr(count), (Expr) i.next()));
    }
    return createSetExpr(tupleList);
  }

  /**
   * Creates a pair, that is a tuple expression with two elements.
   * This is a convenience method.
   */
  public TupleExpr createTupleExpr(Expr left, Expr right)
  {
    return createTupleExpr(list(left, right));
  }
}
