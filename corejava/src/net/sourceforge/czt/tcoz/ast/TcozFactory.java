
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.tcoz.ast;
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.oz.ast.*;

/**
 * <p>The object factory for the AST.
 * This interface contains factory methods
 * for each concrete Z term.</p>
 *
 * <p>This object factory allows the programmer to programatically
 * construct new instances of concrete Z terms.
 * There is a factory method that does not require arguments
 * (called default factory method)
 * and a factory method where all the children (except annotations)
 * of that particular Z term can be provided.</p>
 *
 * @author Gnast version 0.1
 */
public interface TcozFactory
  extends net.sourceforge.czt.oz.ast.OzFactory
{
  /**
   * Creates an instance of {@link WaitUntilProExpr}.
   *
   * @return the new instance of WaitUntilProExpr.
   */
  WaitUntilProExpr createWaitUntilProExpr();

  /**
   * Creates an instance of {@link WaitUntilProExpr} with the given children.
   *
   * @return the new instance of WaitUntilProExpr.
   */
  WaitUntilProExpr createWaitUntilProExpr(net.sourceforge.czt.oz.ast.OpExpr opExpr, net.sourceforge.czt.z.ast.Expr waitUntil);

  /**
   * Creates an instance of {@link DistInChoiceProExpr}.
   *
   * @return the new instance of DistInChoiceProExpr.
   */
  DistInChoiceProExpr createDistInChoiceProExpr();

  /**
   * Creates an instance of {@link DistInChoiceProExpr} with the given children.
   *
   * @return the new instance of DistInChoiceProExpr.
   */
  DistInChoiceProExpr createDistInChoiceProExpr(net.sourceforge.czt.z.ast.SchText schText, OpExpr opExpr);

  /**
   * Creates an instance of {@link ChannelType}.
   *
   * @return the new instance of ChannelType.
   */
  ChannelType createChannelType();

  /**
   * Creates an instance of {@link ChannelType} with the given children.
   *
   * @return the new instance of ChannelType.
   */
  ChannelType createChannelType(net.sourceforge.czt.z.ast.Type2 type);

  /**
   * Creates an instance of {@link DivergeProExpr}.
   *
   * @return the new instance of DivergeProExpr.
   */
  DivergeProExpr createDivergeProExpr();

  /**
   * Creates an instance of {@link SynPllProExpr}.
   *
   * @return the new instance of SynPllProExpr.
   */
  SynPllProExpr createSynPllProExpr();

  /**
   * Creates an instance of {@link SynPllProExpr} with the given children.
   *
   * @return the new instance of SynPllProExpr.
   */
  SynPllProExpr createSynPllProExpr(OpExpr leftOpExpr, OpExpr rightOpExpr, EventSet events);

  /**
   * Creates an instance of {@link AtProExpr}.
   *
   * @return the new instance of AtProExpr.
   */
  AtProExpr createAtProExpr();

  /**
   * Creates an instance of {@link AtProExpr} with the given children.
   *
   * @return the new instance of AtProExpr.
   */
  AtProExpr createAtProExpr(Event event, net.sourceforge.czt.z.ast.Expr expr, net.sourceforge.czt.oz.ast.OpExpr opExpr);

  /**
   * Creates an instance of {@link Connection}.
   *
   * @return the new instance of Connection.
   */
  Connection createConnection();

  /**
   * Creates an instance of {@link Connection} with the given children.
   *
   * @return the new instance of Connection.
   */
  Connection createConnection(java.util.List leftProcess, java.util.List rightProcess, java.util.List channels);

  /**
   * Creates an instance of {@link InterruptTimeOpExpr}.
   *
   * @return the new instance of InterruptTimeOpExpr.
   */
  InterruptTimeOpExpr createInterruptTimeOpExpr();

  /**
   * Creates an instance of {@link InterruptTimeOpExpr} with the given children.
   *
   * @return the new instance of InterruptTimeOpExpr.
   */
  InterruptTimeOpExpr createInterruptTimeOpExpr(net.sourceforge.czt.oz.ast.OpExpr normalOp, net.sourceforge.czt.z.ast.Expr intOrTimeout, net.sourceforge.czt.oz.ast.OpExpr handlerOp);

  /**
   * Creates an instance of {@link InChoiceProExpr}.
   *
   * @return the new instance of InChoiceProExpr.
   */
  InChoiceProExpr createInChoiceProExpr();

  /**
   * Creates an instance of {@link InChoiceProExpr} with the given children.
   *
   * @return the new instance of InChoiceProExpr.
   */
  InChoiceProExpr createInChoiceProExpr(OpExpr leftOpExpr, OpExpr rightOpExpr);

  /**
   * Creates an instance of {@link EventSet}.
   *
   * @return the new instance of EventSet.
   */
  EventSet createEventSet();

  /**
   * Creates an instance of {@link EventSet} with the given children.
   *
   * @return the new instance of EventSet.
   */
  EventSet createEventSet(java.util.List event);

  /**
   * Creates an instance of {@link Event}.
   *
   * @return the new instance of Event.
   */
  Event createEvent();

  /**
   * Creates an instance of {@link Event} with the given children.
   *
   * @return the new instance of Event.
   */
  Event createEvent(net.sourceforge.czt.z.ast.RefName name, net.sourceforge.czt.z.ast.Expr expr);

  /**
   * Creates an instance of {@link TimeoutEndProExpr}.
   *
   * @return the new instance of TimeoutEndProExpr.
   */
  TimeoutEndProExpr createTimeoutEndProExpr();

  /**
   * Creates an instance of {@link TimeoutEndProExpr} with the given children.
   *
   * @return the new instance of TimeoutEndProExpr.
   */
  TimeoutEndProExpr createTimeoutEndProExpr(net.sourceforge.czt.oz.ast.OpExpr normalOp, net.sourceforge.czt.z.ast.Expr intOrTimeout, net.sourceforge.czt.oz.ast.OpExpr handlerOp);

  /**
   * Creates an instance of {@link SensorExpr}.
   *
   * @return the new instance of SensorExpr.
   */
  SensorExpr createSensorExpr();

  /**
   * Creates an instance of {@link SensorExpr} with the given children.
   *
   * @return the new instance of SensorExpr.
   */
  SensorExpr createSensorExpr(Expr expr);

  /**
   * Creates an instance of {@link TopologyProExpr}.
   *
   * @return the new instance of TopologyProExpr.
   */
  TopologyProExpr createTopologyProExpr();

  /**
   * Creates an instance of {@link TopologyProExpr} with the given children.
   *
   * @return the new instance of TopologyProExpr.
   */
  TopologyProExpr createTopologyProExpr(java.util.List connection);

  /**
   * Creates an instance of {@link TimeoutStartProExpr}.
   *
   * @return the new instance of TimeoutStartProExpr.
   */
  TimeoutStartProExpr createTimeoutStartProExpr();

  /**
   * Creates an instance of {@link TimeoutStartProExpr} with the given children.
   *
   * @return the new instance of TimeoutStartProExpr.
   */
  TimeoutStartProExpr createTimeoutStartProExpr(net.sourceforge.czt.oz.ast.OpExpr normalOp, net.sourceforge.czt.z.ast.Expr intOrTimeout, net.sourceforge.czt.oz.ast.OpExpr handlerOp);

  /**
   * Creates an instance of {@link RecProExpr}.
   *
   * @return the new instance of RecProExpr.
   */
  RecProExpr createRecProExpr();

  /**
   * Creates an instance of {@link RecProExpr} with the given children.
   *
   * @return the new instance of RecProExpr.
   */
  RecProExpr createRecProExpr(net.sourceforge.czt.z.ast.RefName opName, net.sourceforge.czt.oz.ast.OpExpr opExpr);

  /**
   * Creates an instance of {@link ActuatorExpr}.
   *
   * @return the new instance of ActuatorExpr.
   */
  ActuatorExpr createActuatorExpr();

  /**
   * Creates an instance of {@link ActuatorExpr} with the given children.
   *
   * @return the new instance of ActuatorExpr.
   */
  ActuatorExpr createActuatorExpr(Expr expr);

  /**
   * Creates an instance of {@link DeadlineProExpr}.
   *
   * @return the new instance of DeadlineProExpr.
   */
  DeadlineProExpr createDeadlineProExpr();

  /**
   * Creates an instance of {@link DeadlineProExpr} with the given children.
   *
   * @return the new instance of DeadlineProExpr.
   */
  DeadlineProExpr createDeadlineProExpr(net.sourceforge.czt.oz.ast.OpExpr opExpr, net.sourceforge.czt.z.ast.Expr deadline);

  /**
   * Creates an instance of {@link DistInterleaveProExpr}.
   *
   * @return the new instance of DistInterleaveProExpr.
   */
  DistInterleaveProExpr createDistInterleaveProExpr();

  /**
   * Creates an instance of {@link DistInterleaveProExpr} with the given children.
   *
   * @return the new instance of DistInterleaveProExpr.
   */
  DistInterleaveProExpr createDistInterleaveProExpr(net.sourceforge.czt.z.ast.SchText schText, OpExpr opExpr);

  /**
   * Creates an instance of {@link WaitProExpr}.
   *
   * @return the new instance of WaitProExpr.
   */
  WaitProExpr createWaitProExpr();

  /**
   * Creates an instance of {@link WaitProExpr} with the given children.
   *
   * @return the new instance of WaitProExpr.
   */
  WaitProExpr createWaitProExpr(net.sourceforge.czt.z.ast.Expr expr);

  /**
   * Creates an instance of {@link InterruptProExpr}.
   *
   * @return the new instance of InterruptProExpr.
   */
  InterruptProExpr createInterruptProExpr();

  /**
   * Creates an instance of {@link InterruptProExpr} with the given children.
   *
   * @return the new instance of InterruptProExpr.
   */
  InterruptProExpr createInterruptProExpr(net.sourceforge.czt.oz.ast.OpExpr normalOp, net.sourceforge.czt.z.ast.Expr intOrTimeout, net.sourceforge.czt.oz.ast.OpExpr handlerOp);

  /**
   * Creates an instance of {@link InterleaveProExpr}.
   *
   * @return the new instance of InterleaveProExpr.
   */
  InterleaveProExpr createInterleaveProExpr();

  /**
   * Creates an instance of {@link InterleaveProExpr} with the given children.
   *
   * @return the new instance of InterleaveProExpr.
   */
  InterleaveProExpr createInterleaveProExpr(OpExpr leftOpExpr, OpExpr rightOpExpr);

  /**
   * Creates an instance of {@link StopProExpr}.
   *
   * @return the new instance of StopProExpr.
   */
  StopProExpr createStopProExpr();

  /**
   * Creates an instance of {@link ChannelExpr}.
   *
   * @return the new instance of ChannelExpr.
   */
  ChannelExpr createChannelExpr();

  /**
   * Creates an instance of {@link SkipProExpr}.
   *
   * @return the new instance of SkipProExpr.
   */
  SkipProExpr createSkipProExpr();

}
