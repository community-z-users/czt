
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToDom.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.tcoz.dom;

import java.util.logging.Logger;
import java.util.*;
import org.w3c.dom.*;

import net.sourceforge.czt.base.ast.ListTerm;
import net.sourceforge.czt.base.ast.Term;

import net.sourceforge.czt.util.CztException;

import net.sourceforge.czt.tcoz.ast.*;
import net.sourceforge.czt.tcoz.visitor.*;
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.visitor.*;
import net.sourceforge.czt.oz.ast.*;
import net.sourceforge.czt.oz.visitor.*;

/**
 * Transformer from AST classes to a DOM tree.
 *
 * @author Gnast version 0.1
 */
public class AstToDom
  extends net.sourceforge.czt.oz.dom.AstToDom
  implements net.sourceforge.czt.tcoz.visitor.TcozVisitor,
    net.sourceforge.czt.base.visitor.TermVisitor
{
  private Logger getLogger()
  {
    return Logger.getLogger("net.sourceforge.czt.tcoz.dom.AstToDom");
  }



  public Object visitRecProExpr(RecProExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitRecProExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "RecProExpr");
    try {
      if (zedObject.getOpName() != null) {
        Term term = (Term) zedObject.getOpName();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getOperationExpr() != null) {
        Term term = (Term) zedObject.getOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a RecProExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitRecProExpr", elem);
    return elem;
  }

  public Object visitWaitUntilProExpr(WaitUntilProExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitWaitUntilProExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "WaitUntilProExpr");
    try {
      if (zedObject.getOperationExpr() != null) {
        Term term = (Term) zedObject.getOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getWaitUntil() != null) {
        Term term = (Term) zedObject.getWaitUntil();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a WaitUntilProExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitWaitUntilProExpr", elem);
    return elem;
  }

  public Object visitDeadlineProExpr(DeadlineProExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitDeadlineProExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "DeadlineProExpr");
    try {
      if (zedObject.getOperationExpr() != null) {
        Term term = (Term) zedObject.getOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getDeadline() != null) {
        Term term = (Term) zedObject.getDeadline();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a DeadlineProExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitDeadlineProExpr", elem);
    return elem;
  }

  public Object visitDistInterleaveProExpr(DistInterleaveProExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitDistInterleaveProExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "DistInterleaveProExpr");
    try {
      if (zedObject.getMainOpExpr() != null) {
        Term term = (Term) zedObject.getMainOpExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a DistInterleaveProExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitDistInterleaveProExpr", elem);
    return elem;
  }

  public Object visitDistInChoiceProExpr(DistInChoiceProExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitDistInChoiceProExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "DistInChoiceProExpr");
    try {
      if (zedObject.getMainOpExpr() != null) {
        Term term = (Term) zedObject.getMainOpExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a DistInChoiceProExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitDistInChoiceProExpr", elem);
    return elem;
  }

  public Object visitDivergeProExpr(DivergeProExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitDivergeProExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "DivergeProExpr");
    try {
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a DivergeProExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitDivergeProExpr", elem);
    return elem;
  }

  public Object visitWaitProExpr(WaitProExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitWaitProExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "WaitProExpr");
    try {
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a WaitProExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitWaitProExpr", elem);
    return elem;
  }

  public Object visitSynPllProExpr(SynPllProExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitSynPllProExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "SynPllProExpr");
    try {
      if (zedObject.getLeftOperationExpr() != null) {
        Term term = (Term) zedObject.getLeftOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightOperationExpr() != null) {
        Term term = (Term) zedObject.getRightOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getEvents() != null) {
        Term term = (Term) zedObject.getEvents();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a SynPllProExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitSynPllProExpr", elem);
    return elem;
  }

  public Object visitInterruptProExpr(InterruptProExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitInterruptProExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "InterruptProExpr");
    try {
      if (zedObject.getNormalOp() != null) {
        Term term = (Term) zedObject.getNormalOp();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getIntOrTimeout() != null) {
        Term term = (Term) zedObject.getIntOrTimeout();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getHandlerOp() != null) {
        Term term = (Term) zedObject.getHandlerOp();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a InterruptProExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitInterruptProExpr", elem);
    return elem;
  }

  public Object visitInterleaveProExpr(InterleaveProExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitInterleaveProExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "InterleaveProExpr");
    try {
      if (zedObject.getLeftOperationExpr() != null) {
        Term term = (Term) zedObject.getLeftOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightOperationExpr() != null) {
        Term term = (Term) zedObject.getRightOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a InterleaveProExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitInterleaveProExpr", elem);
    return elem;
  }

  public Object visitAtProExpr(AtProExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitAtProExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "AtProExpr");
    try {
      if (zedObject.getEvent() != null) {
        Term term = (Term) zedObject.getEvent();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getOperationExpr() != null) {
        Term term = (Term) zedObject.getOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a AtProExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitAtProExpr", elem);
    return elem;
  }

  public Object visitConnection(Connection zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitConnection", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "Connection");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftProcess() != null) {
        Term term = (Term) zedObject.getLeftProcess();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightProcess() != null) {
        Term term = (Term) zedObject.getRightProcess();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getChannels() != null) {
        Term term = (Term) zedObject.getChannels();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a Connection to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitConnection", elem);
    return elem;
  }

  public Object visitInterruptTimeOpExpr(InterruptTimeOpExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitInterruptTimeOpExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "InterruptTimeOpExpr");
    try {
      if (zedObject.getNormalOp() != null) {
        Term term = (Term) zedObject.getNormalOp();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getIntOrTimeout() != null) {
        Term term = (Term) zedObject.getIntOrTimeout();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getHandlerOp() != null) {
        Term term = (Term) zedObject.getHandlerOp();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a InterruptTimeOpExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitInterruptTimeOpExpr", elem);
    return elem;
  }

  public Object visitGuardProExpr(GuardProExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitGuardProExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "GuardProExpr");
    try {
      if (zedObject.getGuard() != null) {
        Term term = (Term) zedObject.getGuard();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getOperationExpr() != null) {
        Term term = (Term) zedObject.getOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a GuardProExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitGuardProExpr", elem);
    return elem;
  }

  public Object visitStopProExpr(StopProExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitStopProExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "StopProExpr");
    try {
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a StopProExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitStopProExpr", elem);
    return elem;
  }

  public Object visitInChoiceProExpr(InChoiceProExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitInChoiceProExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "InChoiceProExpr");
    try {
      if (zedObject.getLeftOperationExpr() != null) {
        Term term = (Term) zedObject.getLeftOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightOperationExpr() != null) {
        Term term = (Term) zedObject.getRightOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a InChoiceProExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitInChoiceProExpr", elem);
    return elem;
  }

  public Object visitSkipProExpr(SkipProExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitSkipProExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "SkipProExpr");
    try {
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a SkipProExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitSkipProExpr", elem);
    return elem;
  }

  public Object visitChannelExpr(ChannelExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitChannelExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ChannelExpr");
    try {
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getChannelType() != null) {
        Element child = getDocument().createElementNS(ns, "ChannelType");
        String string = zedObject.getChannelType().toString();
        child.appendChild(getDocument().createTextNode(string));
        elem.appendChild(child);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ChannelExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitChannelExpr", elem);
    return elem;
  }

  public Object visitEventSet(EventSet zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitEventSet", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "EventSet");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getEvent().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a EventSet to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitEventSet", elem);
    return elem;
  }

  public Object visitEvent(Event zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitEvent", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "Event");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getName() != null) {
        Term term = (Term) zedObject.getName();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a Event to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitEvent", elem);
    return elem;
  }

  public Object visitTopologyProExpr(TopologyProExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitTopologyProExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "TopologyProExpr");
    try {
      for (Iterator iter = zedObject.getConnection().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a TopologyProExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitTopologyProExpr", elem);
    return elem;
  }

  public Object visitTimeoutEndProExpr(TimeoutEndProExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitTimeoutEndProExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "TimeoutEndProExpr");
    try {
      if (zedObject.getNormalOp() != null) {
        Term term = (Term) zedObject.getNormalOp();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getIntOrTimeout() != null) {
        Term term = (Term) zedObject.getIntOrTimeout();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getHandlerOp() != null) {
        Term term = (Term) zedObject.getHandlerOp();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a TimeoutEndProExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitTimeoutEndProExpr", elem);
    return elem;
  }

  public Object visitTimeoutStartProExpr(TimeoutStartProExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitTimeoutStartProExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "TimeoutStartProExpr");
    try {
      if (zedObject.getNormalOp() != null) {
        Term term = (Term) zedObject.getNormalOp();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getIntOrTimeout() != null) {
        Term term = (Term) zedObject.getIntOrTimeout();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getHandlerOp() != null) {
        Term term = (Term) zedObject.getHandlerOp();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a TimeoutStartProExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitTimeoutStartProExpr", elem);
    return elem;
  }
}
