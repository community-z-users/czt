
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.oz.ast;
import net.sourceforge.czt.z.ast.*;

/**
 * <p>An object factory for the AST.
 *
 * <p>This object factory allows the programmer
 * to programatically construct new instances of concrete Z terms.
 * </p>
 *
 * @author Gnast version 0.1
 */
public class Factory
  extends net.sourceforge.czt.z.ast.Factory
{
  private net.sourceforge.czt.oz.ast.OzFactory factory_ =
    new net.sourceforge.czt.oz.impl.OzFactoryImpl();

  /**
   * Creates a new convenience factory that uses the standard factory
   * implementation for creating AST terms.
   */
  public Factory()
  {
    super();
  }

  /**
   * Creates a new convenience factory that uses the given base factory
   * for creating AST terms.
   */
  public Factory(net.sourceforge.czt.oz.ast.OzFactory factory)
  {
    super(factory);
    factory_ = factory;
  }

  /**
   * Creates an instance of {@link RefNameList}.
   *
   * @return the new instance of RefNameList.
   */
  public RefNameList createRefNameList()
  {
    return factory_.createRefNameList();
  }

  /**
   * Creates an instance of {@link RefNameList} with the given children.
   *
   * @return the new instance of RefNameList.
   */
  public RefNameList createRefNameList(java.util.List name)
  {
    return factory_.createRefNameList(name);
  }

  /**
   * Creates an instance of {@link PromotedAttrExpr}.
   *
   * @return the new instance of PromotedAttrExpr.
   */
  public PromotedAttrExpr createPromotedAttrExpr()
  {
    return factory_.createPromotedAttrExpr();
  }

  /**
   * Creates an instance of {@link PromotedAttrExpr} with the given children.
   *
   * @return the new instance of PromotedAttrExpr.
   */
  public PromotedAttrExpr createPromotedAttrExpr(Expr expr, net.sourceforge.czt.z.ast.RefName refName)
  {
    return factory_.createPromotedAttrExpr(expr, refName);
  }

  /**
   * Creates an instance of {@link RenameList}.
   *
   * @return the new instance of RenameList.
   */
  public RenameList createRenameList()
  {
    return factory_.createRenameList();
  }

  /**
   * Creates an instance of {@link RenameList} with the given children.
   *
   * @return the new instance of RenameList.
   */
  public RenameList createRenameList(java.util.List nameNamePair)
  {
    return factory_.createRenameList(nameNamePair);
  }

  /**
   * Creates an instance of {@link ActualParameters}.
   *
   * @return the new instance of ActualParameters.
   */
  public ActualParameters createActualParameters()
  {
    return factory_.createActualParameters();
  }

  /**
   * Creates an instance of {@link ActualParameters} with the given children.
   *
   * @return the new instance of ActualParameters.
   */
  public ActualParameters createActualParameters(java.util.List expr)
  {
    return factory_.createActualParameters(expr);
  }

  /**
   * Creates an instance of {@link DistConjOpExpr}.
   *
   * @return the new instance of DistConjOpExpr.
   */
  public DistConjOpExpr createDistConjOpExpr()
  {
    return factory_.createDistConjOpExpr();
  }

  /**
   * Creates an instance of {@link DistConjOpExpr} with the given children.
   *
   * @return the new instance of DistConjOpExpr.
   */
  public DistConjOpExpr createDistConjOpExpr(MainOpExpr mainOpExpr)
  {
    return factory_.createDistConjOpExpr(mainOpExpr);
  }

  /**
   * Creates an instance of {@link BasicOpExpr}.
   *
   * @return the new instance of BasicOpExpr.
   */
  public BasicOpExpr createBasicOpExpr()
  {
    return factory_.createBasicOpExpr();
  }

  /**
   * Creates an instance of {@link BasicOpExpr} with the given children.
   *
   * @return the new instance of BasicOpExpr.
   */
  public BasicOpExpr createBasicOpExpr(RefNameList deltaList, net.sourceforge.czt.z.ast.SchText schText)
  {
    return factory_.createBasicOpExpr(deltaList, schText);
  }

  /**
   * Creates an instance of {@link MainOpExpr}.
   *
   * @return the new instance of MainOpExpr.
   */
  public MainOpExpr createMainOpExpr()
  {
    return factory_.createMainOpExpr();
  }

  /**
   * Creates an instance of {@link MainOpExpr} with the given children.
   *
   * @return the new instance of MainOpExpr.
   */
  public MainOpExpr createMainOpExpr(net.sourceforge.czt.z.ast.SchText schText, OperationExpr operationExpr)
  {
    return factory_.createMainOpExpr(schText, operationExpr);
  }

  /**
   * Creates an instance of {@link PolyExpr}.
   *
   * @return the new instance of PolyExpr.
   */
  public PolyExpr createPolyExpr()
  {
    return factory_.createPolyExpr();
  }

  /**
   * Creates an instance of {@link PolyExpr} with the given children.
   *
   * @return the new instance of PolyExpr.
   */
  public PolyExpr createPolyExpr(Expr expr)
  {
    return factory_.createPolyExpr(expr);
  }

  /**
   * Creates an instance of {@link HideOpExpr}.
   *
   * @return the new instance of HideOpExpr.
   */
  public HideOpExpr createHideOpExpr()
  {
    return factory_.createHideOpExpr();
  }

  /**
   * Creates an instance of {@link HideOpExpr} with the given children.
   *
   * @return the new instance of HideOpExpr.
   */
  public HideOpExpr createHideOpExpr(OperationExpr operationExpr, java.util.List hideName)
  {
    return factory_.createHideOpExpr(operationExpr, hideName);
  }

  /**
   * Creates an instance of {@link SeqOpExpr}.
   *
   * @return the new instance of SeqOpExpr.
   */
  public SeqOpExpr createSeqOpExpr()
  {
    return factory_.createSeqOpExpr();
  }

  /**
   * Creates an instance of {@link SeqOpExpr} with the given children.
   *
   * @return the new instance of SeqOpExpr.
   */
  public SeqOpExpr createSeqOpExpr(OperationExpr leftOperationExpr, OperationExpr rightOperationExpr)
  {
    return factory_.createSeqOpExpr(leftOperationExpr, rightOperationExpr);
  }

  /**
   * Creates an instance of {@link SelfExpr}.
   *
   * @return the new instance of SelfExpr.
   */
  public SelfExpr createSelfExpr()
  {
    return factory_.createSelfExpr();
  }

  /**
   * Creates an instance of {@link InheritedClass}.
   *
   * @return the new instance of InheritedClass.
   */
  public InheritedClass createInheritedClass()
  {
    return factory_.createInheritedClass();
  }

  /**
   * Creates an instance of {@link InheritedClass} with the given children.
   *
   * @return the new instance of InheritedClass.
   */
  public InheritedClass createInheritedClass(net.sourceforge.czt.z.ast.RefName name, ActualParameters actualParameters, RenameList renameList)
  {
    return factory_.createInheritedClass(name, actualParameters, renameList);
  }

  /**
   * Creates an instance of {@link DistChoiceOpExpr}.
   *
   * @return the new instance of DistChoiceOpExpr.
   */
  public DistChoiceOpExpr createDistChoiceOpExpr()
  {
    return factory_.createDistChoiceOpExpr();
  }

  /**
   * Creates an instance of {@link DistChoiceOpExpr} with the given children.
   *
   * @return the new instance of DistChoiceOpExpr.
   */
  public DistChoiceOpExpr createDistChoiceOpExpr(MainOpExpr mainOpExpr)
  {
    return factory_.createDistChoiceOpExpr(mainOpExpr);
  }

  /**
   * Creates an instance of {@link AssoParallelOpExpr}.
   *
   * @return the new instance of AssoParallelOpExpr.
   */
  public AssoParallelOpExpr createAssoParallelOpExpr()
  {
    return factory_.createAssoParallelOpExpr();
  }

  /**
   * Creates an instance of {@link AssoParallelOpExpr} with the given children.
   *
   * @return the new instance of AssoParallelOpExpr.
   */
  public AssoParallelOpExpr createAssoParallelOpExpr(OperationExpr leftOperationExpr, OperationExpr rightOperationExpr)
  {
    return factory_.createAssoParallelOpExpr(leftOperationExpr, rightOperationExpr);
  }

  /**
   * Creates an instance of {@link State}.
   *
   * @return the new instance of State.
   */
  public State createState()
  {
    return factory_.createState();
  }

  /**
   * Creates an instance of {@link State} with the given children.
   *
   * @return the new instance of State.
   */
  public State createState(java.util.List decl, SecondaryAttributes secondaryAttributes, java.util.List pred)
  {
    return factory_.createState(decl, secondaryAttributes, pred);
  }

  /**
   * Creates an instance of {@link PromotedInitPred}.
   *
   * @return the new instance of PromotedInitPred.
   */
  public PromotedInitPred createPromotedInitPred()
  {
    return factory_.createPromotedInitPred();
  }

  /**
   * Creates an instance of {@link PromotedInitPred} with the given children.
   *
   * @return the new instance of PromotedInitPred.
   */
  public PromotedInitPred createPromotedInitPred(net.sourceforge.czt.z.ast.Expr expr)
  {
    return factory_.createPromotedInitPred(expr);
  }

  /**
   * Creates an instance of {@link OpPromotionExpr}.
   *
   * @return the new instance of OpPromotionExpr.
   */
  public OpPromotionExpr createOpPromotionExpr()
  {
    return factory_.createOpPromotionExpr();
  }

  /**
   * Creates an instance of {@link OpPromotionExpr} with the given children.
   *
   * @return the new instance of OpPromotionExpr.
   */
  public OpPromotionExpr createOpPromotionExpr(net.sourceforge.czt.z.ast.Expr expr, net.sourceforge.czt.z.ast.RefName opName)
  {
    return factory_.createOpPromotionExpr(expr, opName);
  }

  /**
   * Creates an instance of {@link ConjOpExpr}.
   *
   * @return the new instance of ConjOpExpr.
   */
  public ConjOpExpr createConjOpExpr()
  {
    return factory_.createConjOpExpr();
  }

  /**
   * Creates an instance of {@link ConjOpExpr} with the given children.
   *
   * @return the new instance of ConjOpExpr.
   */
  public ConjOpExpr createConjOpExpr(OperationExpr leftOperationExpr, OperationExpr rightOperationExpr)
  {
    return factory_.createConjOpExpr(leftOperationExpr, rightOperationExpr);
  }

  /**
   * Creates an instance of {@link ClassPara}.
   *
   * @return the new instance of ClassPara.
   */
  public ClassPara createClassPara()
  {
    return factory_.createClassPara();
  }

  /**
   * Creates an instance of {@link ClassPara} with the given children.
   *
   * @return the new instance of ClassPara.
   */
  public ClassPara createClassPara(net.sourceforge.czt.z.ast.DeclName name, FormalParameters formalParameters, RefNameList visibilityList, java.util.List inheritedClass, LocalDef localDef, State state, InitialState initialState, java.util.List operation)
  {
    return factory_.createClassPara(name, formalParameters, visibilityList, inheritedClass, localDef, state, initialState, operation);
  }

  /**
   * Creates an instance of {@link ParenOpExpr}.
   *
   * @return the new instance of ParenOpExpr.
   */
  public ParenOpExpr createParenOpExpr()
  {
    return factory_.createParenOpExpr();
  }

  /**
   * Creates an instance of {@link Operation}.
   *
   * @return the new instance of Operation.
   */
  public Operation createOperation()
  {
    return factory_.createOperation();
  }

  /**
   * Creates an instance of {@link Operation} with the given children.
   *
   * @return the new instance of Operation.
   */
  public Operation createOperation(net.sourceforge.czt.z.ast.DeclName name, OperationBoxExpr operationBoxExpr)
  {
    return factory_.createOperation(name, operationBoxExpr);
  }

  /**
   * Creates an instance of {@link LocalDef}.
   *
   * @return the new instance of LocalDef.
   */
  public LocalDef createLocalDef()
  {
    return factory_.createLocalDef();
  }

  /**
   * Creates an instance of {@link LocalDef} with the given children.
   *
   * @return the new instance of LocalDef.
   */
  public LocalDef createLocalDef(java.util.List givenPara, java.util.List axPara, java.util.List freePara)
  {
    return factory_.createLocalDef(givenPara, axPara, freePara);
  }

  /**
   * Creates an instance of {@link ContainmentExpr}.
   *
   * @return the new instance of ContainmentExpr.
   */
  public ContainmentExpr createContainmentExpr()
  {
    return factory_.createContainmentExpr();
  }

  /**
   * Creates an instance of {@link ContainmentExpr} with the given children.
   *
   * @return the new instance of ContainmentExpr.
   */
  public ContainmentExpr createContainmentExpr(Expr expr)
  {
    return factory_.createContainmentExpr(expr);
  }

  /**
   * Creates an instance of {@link InitialState}.
   *
   * @return the new instance of InitialState.
   */
  public InitialState createInitialState()
  {
    return factory_.createInitialState();
  }

  /**
   * Creates an instance of {@link InitialState} with the given children.
   *
   * @return the new instance of InitialState.
   */
  public InitialState createInitialState(java.util.List pred)
  {
    return factory_.createInitialState(pred);
  }

  /**
   * Creates an instance of {@link OperationBox}.
   *
   * @return the new instance of OperationBox.
   */
  public OperationBox createOperationBox()
  {
    return factory_.createOperationBox();
  }

  /**
   * Creates an instance of {@link OperationBox} with the given children.
   *
   * @return the new instance of OperationBox.
   */
  public OperationBox createOperationBox(RefNameList deltaList, java.util.List decl, java.util.List pred)
  {
    return factory_.createOperationBox(deltaList, decl, pred);
  }

  /**
   * Creates an instance of {@link DistSeqOpExpr}.
   *
   * @return the new instance of DistSeqOpExpr.
   */
  public DistSeqOpExpr createDistSeqOpExpr()
  {
    return factory_.createDistSeqOpExpr();
  }

  /**
   * Creates an instance of {@link DistSeqOpExpr} with the given children.
   *
   * @return the new instance of DistSeqOpExpr.
   */
  public DistSeqOpExpr createDistSeqOpExpr(MainOpExpr mainOpExpr)
  {
    return factory_.createDistSeqOpExpr(mainOpExpr);
  }

  /**
   * Creates an instance of {@link ScopeEnrichOpExpr}.
   *
   * @return the new instance of ScopeEnrichOpExpr.
   */
  public ScopeEnrichOpExpr createScopeEnrichOpExpr()
  {
    return factory_.createScopeEnrichOpExpr();
  }

  /**
   * Creates an instance of {@link ScopeEnrichOpExpr} with the given children.
   *
   * @return the new instance of ScopeEnrichOpExpr.
   */
  public ScopeEnrichOpExpr createScopeEnrichOpExpr(OperationExpr leftOperationExpr, OperationExpr rightOperationExpr)
  {
    return factory_.createScopeEnrichOpExpr(leftOperationExpr, rightOperationExpr);
  }

  /**
   * Creates an instance of {@link SecondaryAttributes}.
   *
   * @return the new instance of SecondaryAttributes.
   */
  public SecondaryAttributes createSecondaryAttributes()
  {
    return factory_.createSecondaryAttributes();
  }

  /**
   * Creates an instance of {@link SecondaryAttributes} with the given children.
   *
   * @return the new instance of SecondaryAttributes.
   */
  public SecondaryAttributes createSecondaryAttributes(java.util.List varDecl)
  {
    return factory_.createSecondaryAttributes(varDecl);
  }

  /**
   * Creates an instance of {@link RenameOpExpr}.
   *
   * @return the new instance of RenameOpExpr.
   */
  public RenameOpExpr createRenameOpExpr()
  {
    return factory_.createRenameOpExpr();
  }

  /**
   * Creates an instance of {@link RenameOpExpr} with the given children.
   *
   * @return the new instance of RenameOpExpr.
   */
  public RenameOpExpr createRenameOpExpr(OperationExpr operationExpr, java.util.List nameNamePair)
  {
    return factory_.createRenameOpExpr(operationExpr, nameNamePair);
  }

  /**
   * Creates an instance of {@link ExChoiceOpExpr}.
   *
   * @return the new instance of ExChoiceOpExpr.
   */
  public ExChoiceOpExpr createExChoiceOpExpr()
  {
    return factory_.createExChoiceOpExpr();
  }

  /**
   * Creates an instance of {@link ExChoiceOpExpr} with the given children.
   *
   * @return the new instance of ExChoiceOpExpr.
   */
  public ExChoiceOpExpr createExChoiceOpExpr(OperationExpr leftOperationExpr, OperationExpr rightOperationExpr)
  {
    return factory_.createExChoiceOpExpr(leftOperationExpr, rightOperationExpr);
  }

  /**
   * Creates an instance of {@link ParallelOpExpr}.
   *
   * @return the new instance of ParallelOpExpr.
   */
  public ParallelOpExpr createParallelOpExpr()
  {
    return factory_.createParallelOpExpr();
  }

  /**
   * Creates an instance of {@link ParallelOpExpr} with the given children.
   *
   * @return the new instance of ParallelOpExpr.
   */
  public ParallelOpExpr createParallelOpExpr(OperationExpr leftOperationExpr, OperationExpr rightOperationExpr)
  {
    return factory_.createParallelOpExpr(leftOperationExpr, rightOperationExpr);
  }

  /**
   * Creates an instance of {@link FormalParameters}.
   *
   * @return the new instance of FormalParameters.
   */
  public FormalParameters createFormalParameters()
  {
    return factory_.createFormalParameters();
  }

  /**
   * Creates an instance of {@link FormalParameters} with the given children.
   *
   * @return the new instance of FormalParameters.
   */
  public FormalParameters createFormalParameters(java.util.List name)
  {
    return factory_.createFormalParameters(name);
  }


  /**
   * Creates a list of size one with the given object as element.
   */
  public java.util.List list(Object o)
  {
    java.util.List result = new java.util.ArrayList();
    result.add(o);
    return result;
  }

  /**
   * Creates a list with the two objects as elements.
   */
  public java.util.List list(Object first, Object second)
  {
    java.util.List result = new java.util.ArrayList();
    result.add(first);
    result.add(second);
    return result;
  }

  /**
   * Creates a member predicate that represents equality
   * between the two given expressions.
   */
  public MemPred createEquality(Expr left, Expr right)
  {
    return createMemPred(left, createSetExpr(list(right)), Boolean.TRUE);
  }

  /**
   * Creates a binary product expression.
   */
  public ProdExpr createProdExpr(Expr left, Expr right)
  {
    return createProdExpr(list(left, right));
  }

  /**
   * Creates a referencing name that refers to the given
   * declaring name.
   */
  public RefName createRefName(DeclName declName)
  {
    return createRefName(declName.getWord(), declName.getStroke(), declName);
  }

  /**
   * Creates a pair, that is a tuple expression with two elements.
   */
  public TupleExpr createTupleExpr(Expr left, Expr right)
  {
    return createTupleExpr(list(left, right));
  }



  
}
