
/*
THIS FILE WAS GENERATED BY GNAST.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

************************************************************

Copyright 2003 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.oz.ast;

/**
 * <p>The object factory for the AST. 
 * This interface contains factory methods
 * for each concrete Z term.</p>
 *
 * <p>This object factory allows the programmer to programatically
 * construct new instances of concrete Z terms.
 * There is a factory method that does not require arguments
 * (called default factory method)
 * and a factory method where all the children (except annotations)
 * of that particular Z term can be provided.</p>
 *
 * @author Gnast version 0.1
 */
public interface OZFactory
{
    /**
     * Creates an instance of {@link RenameList}.
     *
     * @return the new instance of RenameList.
     */
    public RenameList createRenameList();

    /**
     * Creates an instance of {@link RenameList} with the given children.
     *
     * @return the new instance of RenameList.
     */
    public RenameList createRenameList(net.sourceforge.czt.z.ast.RenameExpr renameExpr);

    /**
     * Creates an instance of {@link ActualParameters}.
     *
     * @return the new instance of ActualParameters.
     */
    public ActualParameters createActualParameters();

    /**
     * Creates an instance of {@link ActualParameters} with the given children.
     *
     * @return the new instance of ActualParameters.
     */
    public ActualParameters createActualParameters(java.util.List expr);

    /**
     * Creates an instance of {@link DistConjOpExpr}.
     *
     * @return the new instance of DistConjOpExpr.
     */
    public DistConjOpExpr createDistConjOpExpr();

    /**
     * Creates an instance of {@link DistConjOpExpr} with the given children.
     *
     * @return the new instance of DistConjOpExpr.
     */
    public DistConjOpExpr createDistConjOpExpr(MainOpExpr mainOpExpr);

    /**
     * Creates an instance of {@link BasicOpExpr}.
     *
     * @return the new instance of BasicOpExpr.
     */
    public BasicOpExpr createBasicOpExpr();

    /**
     * Creates an instance of {@link BasicOpExpr} with the given children.
     *
     * @return the new instance of BasicOpExpr.
     */
    public BasicOpExpr createBasicOpExpr(StringListType deltaList, net.sourceforge.czt.z.ast.SchText schText);

    /**
     * Creates an instance of {@link MainOpExpr}.
     *
     * @return the new instance of MainOpExpr.
     */
    public MainOpExpr createMainOpExpr();

    /**
     * Creates an instance of {@link MainOpExpr} with the given children.
     *
     * @return the new instance of MainOpExpr.
     */
    public MainOpExpr createMainOpExpr(net.sourceforge.czt.z.ast.SchText schText, OperationExpr operationExpr);

    /**
     * Creates an instance of {@link HideOpExpr}.
     *
     * @return the new instance of HideOpExpr.
     */
    public HideOpExpr createHideOpExpr();

    /**
     * Creates an instance of {@link HideOpExpr} with the given children.
     *
     * @return the new instance of HideOpExpr.
     */
    public HideOpExpr createHideOpExpr(OperationExpr operationExpr, java.util.List hideName);

    /**
     * Creates an instance of {@link StringListType}.
     *
     * @return the new instance of StringListType.
     */
    public StringListType createStringListType();

    /**
     * Creates an instance of {@link StringListType} with the given children.
     *
     * @return the new instance of StringListType.
     */
    public StringListType createStringListType(java.util.List name);

    /**
     * Creates an instance of {@link SeqOpExpr}.
     *
     * @return the new instance of SeqOpExpr.
     */
    public SeqOpExpr createSeqOpExpr();

    /**
     * Creates an instance of {@link SeqOpExpr} with the given children.
     *
     * @return the new instance of SeqOpExpr.
     */
    public SeqOpExpr createSeqOpExpr(OperationExpr leftOpExpr, OperationExpr rightOpExpr);

    /**
     * Creates an instance of {@link InheritedClass}.
     *
     * @return the new instance of InheritedClass.
     */
    public InheritedClass createInheritedClass();

    /**
     * Creates an instance of {@link InheritedClass} with the given children.
     *
     * @return the new instance of InheritedClass.
     */
    public InheritedClass createInheritedClass(net.sourceforge.czt.z.ast.RefName name, ActualParameters actualParameters, RenameList renameList);

    /**
     * Creates an instance of {@link DistChoiceOpExpr}.
     *
     * @return the new instance of DistChoiceOpExpr.
     */
    public DistChoiceOpExpr createDistChoiceOpExpr();

    /**
     * Creates an instance of {@link DistChoiceOpExpr} with the given children.
     *
     * @return the new instance of DistChoiceOpExpr.
     */
    public DistChoiceOpExpr createDistChoiceOpExpr(MainOpExpr mainOpExpr);

    /**
     * Creates an instance of {@link AssoParallelOpExpr}.
     *
     * @return the new instance of AssoParallelOpExpr.
     */
    public AssoParallelOpExpr createAssoParallelOpExpr();

    /**
     * Creates an instance of {@link AssoParallelOpExpr} with the given children.
     *
     * @return the new instance of AssoParallelOpExpr.
     */
    public AssoParallelOpExpr createAssoParallelOpExpr(OperationExpr leftOpExpr, OperationExpr rightOpExpr);

    /**
     * Creates an instance of {@link State}.
     *
     * @return the new instance of State.
     */
    public State createState();

    /**
     * Creates an instance of {@link State} with the given children.
     *
     * @return the new instance of State.
     */
    public State createState(java.util.List decl, java.util.List secondaryAttributes, java.util.List pred);

    /**
     * Creates an instance of {@link ConjOpExpr}.
     *
     * @return the new instance of ConjOpExpr.
     */
    public ConjOpExpr createConjOpExpr();

    /**
     * Creates an instance of {@link ConjOpExpr} with the given children.
     *
     * @return the new instance of ConjOpExpr.
     */
    public ConjOpExpr createConjOpExpr(OperationExpr leftOpExpr, OperationExpr rightOpExpr);

    /**
     * Creates an instance of {@link OpPromotionExpr}.
     *
     * @return the new instance of OpPromotionExpr.
     */
    public OpPromotionExpr createOpPromotionExpr();

    /**
     * Creates an instance of {@link OpPromotionExpr} with the given children.
     *
     * @return the new instance of OpPromotionExpr.
     */
    public OpPromotionExpr createOpPromotionExpr(net.sourceforge.czt.z.ast.Expr expr, net.sourceforge.czt.z.ast.RefName opName);

    /**
     * Creates an instance of {@link ClassPara}.
     *
     * @return the new instance of ClassPara.
     */
    public ClassPara createClassPara();

    /**
     * Creates an instance of {@link ClassPara} with the given children.
     *
     * @return the new instance of ClassPara.
     */
    public ClassPara createClassPara(net.sourceforge.czt.z.ast.DeclName name, FormalParameters formalParameters, StringListType visibilityList, java.util.List inheritedClass, LocalDef localDef, State state, InitialState initialState, java.util.List operation);

    /**
     * Creates an instance of {@link ParenOpExpr}.
     *
     * @return the new instance of ParenOpExpr.
     */
    public ParenOpExpr createParenOpExpr();

    /**
     * Creates an instance of {@link Operation}.
     *
     * @return the new instance of Operation.
     */
    public Operation createOperation();

    /**
     * Creates an instance of {@link Operation} with the given children.
     *
     * @return the new instance of Operation.
     */
    public Operation createOperation(net.sourceforge.czt.z.ast.DeclName name, net.sourceforge.czt.base.ast.TermA operandBoxOrExpr);

    /**
     * Creates an instance of {@link LocalDef}.
     *
     * @return the new instance of LocalDef.
     */
    public LocalDef createLocalDef();

    /**
     * Creates an instance of {@link LocalDef} with the given children.
     *
     * @return the new instance of LocalDef.
     */
    public LocalDef createLocalDef(java.util.List givenPara, java.util.List axPara, java.util.List freePara);

    /**
     * Creates an instance of {@link OperationBox}.
     *
     * @return the new instance of OperationBox.
     */
    public OperationBox createOperationBox();

    /**
     * Creates an instance of {@link OperationBox} with the given children.
     *
     * @return the new instance of OperationBox.
     */
    public OperationBox createOperationBox(StringListType deltaList, java.util.List decl, java.util.List pred);

    /**
     * Creates an instance of {@link InitialState}.
     *
     * @return the new instance of InitialState.
     */
    public InitialState createInitialState();

    /**
     * Creates an instance of {@link InitialState} with the given children.
     *
     * @return the new instance of InitialState.
     */
    public InitialState createInitialState(java.util.List pred);

    /**
     * Creates an instance of {@link DistSeqOpExpr}.
     *
     * @return the new instance of DistSeqOpExpr.
     */
    public DistSeqOpExpr createDistSeqOpExpr();

    /**
     * Creates an instance of {@link DistSeqOpExpr} with the given children.
     *
     * @return the new instance of DistSeqOpExpr.
     */
    public DistSeqOpExpr createDistSeqOpExpr(MainOpExpr mainOpExpr);

    /**
     * Creates an instance of {@link ScopeEnrichOpExpr}.
     *
     * @return the new instance of ScopeEnrichOpExpr.
     */
    public ScopeEnrichOpExpr createScopeEnrichOpExpr();

    /**
     * Creates an instance of {@link ScopeEnrichOpExpr} with the given children.
     *
     * @return the new instance of ScopeEnrichOpExpr.
     */
    public ScopeEnrichOpExpr createScopeEnrichOpExpr(OperationExpr leftOpExpr, OperationExpr rightOpExpr);

    /**
     * Creates an instance of {@link SecondaryAttributes}.
     *
     * @return the new instance of SecondaryAttributes.
     */
    public SecondaryAttributes createSecondaryAttributes();

    /**
     * Creates an instance of {@link ExChoiceOpExpr}.
     *
     * @return the new instance of ExChoiceOpExpr.
     */
    public ExChoiceOpExpr createExChoiceOpExpr();

    /**
     * Creates an instance of {@link ExChoiceOpExpr} with the given children.
     *
     * @return the new instance of ExChoiceOpExpr.
     */
    public ExChoiceOpExpr createExChoiceOpExpr(OperationExpr leftOpExpr, OperationExpr rightOpExpr);

    /**
     * Creates an instance of {@link RenameOpExpr}.
     *
     * @return the new instance of RenameOpExpr.
     */
    public RenameOpExpr createRenameOpExpr();

    /**
     * Creates an instance of {@link RenameOpExpr} with the given children.
     *
     * @return the new instance of RenameOpExpr.
     */
    public RenameOpExpr createRenameOpExpr(OperationExpr operationExpr, RenameList renameList);

    /**
     * Creates an instance of {@link ParallelOpExpr}.
     *
     * @return the new instance of ParallelOpExpr.
     */
    public ParallelOpExpr createParallelOpExpr();

    /**
     * Creates an instance of {@link ParallelOpExpr} with the given children.
     *
     * @return the new instance of ParallelOpExpr.
     */
    public ParallelOpExpr createParallelOpExpr(OperationExpr leftOpExpr, OperationExpr rightOpExpr);

    /**
     * Creates an instance of {@link FormalParameters}.
     *
     * @return the new instance of FormalParameters.
     */
    public FormalParameters createFormalParameters();

    /**
     * Creates an instance of {@link FormalParameters} with the given children.
     *
     * @return the new instance of FormalParameters.
     */
    public FormalParameters createFormalParameters(java.util.List refName);

}
