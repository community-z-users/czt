//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.1-05/30/2003 05:06 AM(java_re)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2003.10.08 at 02:45:10 NZDT 
//


package net.sourceforge.czt.oz.jaxb.gen.impl;

public class OperationBoxImpl
    extends net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl
    implements net.sourceforge.czt.oz.jaxb.gen.OperationBox, com.sun.xml.bind.JAXBObject, net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.UnmarshallableObject, net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.XMLSerializable, net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.ValidatableObject
{

    protected com.sun.xml.bind.util.ListImpl _Decl = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    protected net.sourceforge.czt.oz.jaxb.gen.StringListType _DeltaList;
    protected com.sun.xml.bind.util.ListImpl _Pred = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    public final static java.lang.Class version = (net.sourceforge.czt.oz.jaxb.gen.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (net.sourceforge.czt.oz.jaxb.gen.OperationBox.class);
    }

    public java.util.List getDecl() {
        return _Decl;
    }

    public net.sourceforge.czt.oz.jaxb.gen.StringListType getDeltaList() {
        return _DeltaList;
    }

    public void setDeltaList(net.sourceforge.czt.oz.jaxb.gen.StringListType value) {
        _DeltaList = value;
    }

    public java.util.List getPred() {
        return _Pred;
    }

    public net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.UnmarshallingEventHandler createUnmarshaller(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.UnmarshallingContext context) {
        return new net.sourceforge.czt.oz.jaxb.gen.impl.OperationBoxImpl.Unmarshaller(context);
    }

    public void serializeElementBody(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _Decl.size();
        int idx3 = 0;
        final int len3 = _Pred.size();
        super.serializeElementBody(context);
        if (_DeltaList!= null) {
            context.startElement("http://czt.sourceforge.net/object-z", "DeltaList");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _DeltaList));
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _DeltaList));
            context.endAttributes();
            context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _DeltaList));
            context.endElement();
        }
        while (idx1 != len1) {
            if (_Decl.get(idx1) instanceof net.sourceforge.czt.core.jaxb.gen.Decl) {
                if (_Decl.get(idx1) instanceof javax.xml.bind.Element) {
                    context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)));
                } else {
                    context.startElement("http://czt.sourceforge.net/zml", "Decl");
                    int idx_2 = idx1;
                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Decl.get(idx_2 ++)));
                    context.endNamespaceDecls();
                    int idx_3 = idx1;
                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Decl.get(idx_3 ++)));
                    context.endAttributes();
                    context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)));
                    context.endElement();
                }
            } else {
                if (_Decl.get(idx1) instanceof net.sourceforge.czt.core.jaxb.gen.InclDeclElement) {
                    context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)));
                } else {
                    if (_Decl.get(idx1) instanceof net.sourceforge.czt.core.jaxb.gen.VarDeclElement) {
                        context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)));
                    } else {
                        if (_Decl.get(idx1) instanceof net.sourceforge.czt.core.jaxb.gen.ConstDeclElement) {
                            context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)));
                        } else {
                            throw new org.xml.sax.SAXException("type mismatch error");
                        }
                    }
                }
            }
        }
        while (idx3 != len3) {
            if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.Pred) {
                if (_Pred.get(idx3) instanceof javax.xml.bind.Element) {
                    context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                } else {
                    context.startElement("http://czt.sourceforge.net/zml", "Pred");
                    int idx_4 = idx3;
                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred.get(idx_4 ++)));
                    context.endNamespaceDecls();
                    int idx_5 = idx3;
                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred.get(idx_5 ++)));
                    context.endAttributes();
                    context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                    context.endElement();
                }
            } else {
                if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.TruePred) {
                    context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                } else {
                    if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.Pred2Element) {
                        context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                    } else {
                        if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.MemPredElement) {
                            context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                        } else {
                            if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.Exists1Pred) {
                                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                            } else {
                                if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.FalsePred) {
                                    context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                } else {
                                    if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.NegPredElement) {
                                        context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                    } else {
                                        if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.IffPred) {
                                            context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                        } else {
                                            if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.ForallPred) {
                                                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                            } else {
                                                if (_Pred.get(idx3) instanceof net.sourceforge.czt.zpatt.jaxb.gen.JokerPredElement) {
                                                    context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                } else {
                                                    if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.OrPred) {
                                                        context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                    } else {
                                                        if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.QntPredElement) {
                                                            context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                        } else {
                                                            if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.ExprPredElement) {
                                                                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                            } else {
                                                                if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.ImpliesPred) {
                                                                    context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                                } else {
                                                                    if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.ExistsPred) {
                                                                        context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                                    } else {
                                                                        if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.FactElement) {
                                                                            context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                                        } else {
                                                                            if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.AndPredElement) {
                                                                                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                                            } else {
                                                                                throw new org.xml.sax.SAXException("type mismatch error");
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public void serializeAttributes(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _Decl.size();
        int idx3 = 0;
        final int len3 = _Pred.size();
        super.serializeAttributes(context);
        while (idx1 != len1) {
            if (!(_Decl.get(idx1) instanceof net.sourceforge.czt.core.jaxb.gen.Decl)) {
                if (_Decl.get(idx1) instanceof net.sourceforge.czt.core.jaxb.gen.InclDeclElement) {
                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)));
                } else {
                    if (_Decl.get(idx1) instanceof net.sourceforge.czt.core.jaxb.gen.VarDeclElement) {
                        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)));
                    } else {
                        if (_Decl.get(idx1) instanceof net.sourceforge.czt.core.jaxb.gen.ConstDeclElement) {
                            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)));
                        } else {
                            throw new org.xml.sax.SAXException("type mismatch error");
                        }
                    }
                }
            }
        }
        while (idx3 != len3) {
            if (!(_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.Pred)) {
                if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.TruePred) {
                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                } else {
                    if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.Pred2Element) {
                        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                    } else {
                        if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.MemPredElement) {
                            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                        } else {
                            if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.Exists1Pred) {
                                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                            } else {
                                if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.FalsePred) {
                                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                } else {
                                    if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.NegPredElement) {
                                        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                    } else {
                                        if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.IffPred) {
                                            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                        } else {
                                            if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.ForallPred) {
                                                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                            } else {
                                                if (_Pred.get(idx3) instanceof net.sourceforge.czt.zpatt.jaxb.gen.JokerPredElement) {
                                                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                } else {
                                                    if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.OrPred) {
                                                        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                    } else {
                                                        if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.QntPredElement) {
                                                            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                        } else {
                                                            if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.ExprPredElement) {
                                                                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                            } else {
                                                                if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.ImpliesPred) {
                                                                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                                } else {
                                                                    if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.ExistsPred) {
                                                                        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                                    } else {
                                                                        if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.FactElement) {
                                                                            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                                        } else {
                                                                            if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.AndPredElement) {
                                                                                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                                            } else {
                                                                                throw new org.xml.sax.SAXException("type mismatch error");
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public void serializeAttributeBody(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _Decl.size();
        int idx3 = 0;
        final int len3 = _Pred.size();
        super.serializeAttributeBody(context);
        if (_DeltaList!= null) {
            context.startElement("http://czt.sourceforge.net/object-z", "DeltaList");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _DeltaList));
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _DeltaList));
            context.endAttributes();
            context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _DeltaList));
            context.endElement();
        }
        while (idx1 != len1) {
            if (_Decl.get(idx1) instanceof net.sourceforge.czt.core.jaxb.gen.Decl) {
                if (_Decl.get(idx1) instanceof javax.xml.bind.Element) {
                    context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)));
                } else {
                    context.startElement("http://czt.sourceforge.net/zml", "Decl");
                    int idx_2 = idx1;
                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Decl.get(idx_2 ++)));
                    context.endNamespaceDecls();
                    int idx_3 = idx1;
                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Decl.get(idx_3 ++)));
                    context.endAttributes();
                    context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)));
                    context.endElement();
                }
            } else {
                if (_Decl.get(idx1) instanceof net.sourceforge.czt.core.jaxb.gen.InclDeclElement) {
                    context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)));
                } else {
                    if (_Decl.get(idx1) instanceof net.sourceforge.czt.core.jaxb.gen.VarDeclElement) {
                        context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)));
                    } else {
                        if (_Decl.get(idx1) instanceof net.sourceforge.czt.core.jaxb.gen.ConstDeclElement) {
                            context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)));
                        } else {
                            throw new org.xml.sax.SAXException("type mismatch error");
                        }
                    }
                }
            }
        }
        while (idx3 != len3) {
            if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.Pred) {
                if (_Pred.get(idx3) instanceof javax.xml.bind.Element) {
                    context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                } else {
                    context.startElement("http://czt.sourceforge.net/zml", "Pred");
                    int idx_4 = idx3;
                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred.get(idx_4 ++)));
                    context.endNamespaceDecls();
                    int idx_5 = idx3;
                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred.get(idx_5 ++)));
                    context.endAttributes();
                    context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                    context.endElement();
                }
            } else {
                if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.TruePred) {
                    context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                } else {
                    if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.Pred2Element) {
                        context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                    } else {
                        if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.MemPredElement) {
                            context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                        } else {
                            if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.Exists1Pred) {
                                context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                            } else {
                                if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.FalsePred) {
                                    context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                } else {
                                    if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.NegPredElement) {
                                        context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                    } else {
                                        if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.IffPred) {
                                            context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                        } else {
                                            if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.ForallPred) {
                                                context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                            } else {
                                                if (_Pred.get(idx3) instanceof net.sourceforge.czt.zpatt.jaxb.gen.JokerPredElement) {
                                                    context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                } else {
                                                    if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.OrPred) {
                                                        context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                    } else {
                                                        if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.QntPredElement) {
                                                            context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                        } else {
                                                            if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.ExprPredElement) {
                                                                context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                            } else {
                                                                if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.ImpliesPred) {
                                                                    context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                                } else {
                                                                    if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.ExistsPred) {
                                                                        context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                                    } else {
                                                                        if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.FactElement) {
                                                                            context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                                        } else {
                                                                            if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.AndPredElement) {
                                                                                context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                                            } else {
                                                                                throw new org.xml.sax.SAXException("type mismatch error");
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public void serializeURIs(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _Decl.size();
        int idx3 = 0;
        final int len3 = _Pred.size();
        super.serializeURIs(context);
        while (idx1 != len1) {
            if (!(_Decl.get(idx1) instanceof net.sourceforge.czt.core.jaxb.gen.Decl)) {
                if (_Decl.get(idx1) instanceof net.sourceforge.czt.core.jaxb.gen.InclDeclElement) {
                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)));
                } else {
                    if (_Decl.get(idx1) instanceof net.sourceforge.czt.core.jaxb.gen.VarDeclElement) {
                        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)));
                    } else {
                        if (_Decl.get(idx1) instanceof net.sourceforge.czt.core.jaxb.gen.ConstDeclElement) {
                            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)));
                        } else {
                            throw new org.xml.sax.SAXException("type mismatch error");
                        }
                    }
                }
            }
        }
        while (idx3 != len3) {
            if (!(_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.Pred)) {
                if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.TruePred) {
                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                } else {
                    if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.Pred2Element) {
                        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                    } else {
                        if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.MemPredElement) {
                            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                        } else {
                            if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.Exists1Pred) {
                                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                            } else {
                                if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.FalsePred) {
                                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                } else {
                                    if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.NegPredElement) {
                                        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                    } else {
                                        if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.IffPred) {
                                            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                        } else {
                                            if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.ForallPred) {
                                                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                            } else {
                                                if (_Pred.get(idx3) instanceof net.sourceforge.czt.zpatt.jaxb.gen.JokerPredElement) {
                                                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                } else {
                                                    if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.OrPred) {
                                                        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                    } else {
                                                        if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.QntPredElement) {
                                                            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                        } else {
                                                            if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.ExprPredElement) {
                                                                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                            } else {
                                                                if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.ImpliesPred) {
                                                                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                                } else {
                                                                    if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.ExistsPred) {
                                                                        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                                    } else {
                                                                        if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.FactElement) {
                                                                            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                                        } else {
                                                                            if (_Pred.get(idx3) instanceof net.sourceforge.czt.core.jaxb.gen.AndPredElement) {
                                                                                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred.get(idx3 ++)));
                                                                            } else {
                                                                                throw new org.xml.sax.SAXException("type mismatch error");
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (net.sourceforge.czt.oz.jaxb.gen.OperationBox.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava"
+"/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u001f@@1ppsq\u0000~\u0000\u0000\u0007p\u00d2\u0080ppsq\u0000~\u0000\u0000\u0002"
+"\u00f9\u00ed\u00e1ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001\u0001|\u00f6\u00eep"
+"psr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tna"
+"meClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.gra"
+"mmar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fco"
+"ntentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0001|\u00f6\u00e3sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005"
+"valuexp\u0000p\u0000sq\u0000~\u0000\n\u0001|\u00f6\u00d8pp\u0000sq\u0000~\u0000\b\u0001|\u00f6\u00cdppsr\u0000 com.sun.msv.grammar.O"
+"neOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0001|\u00f6\u00c2q\u0000~\u0000\u000fpsr\u0000 com.sun.msv.grammar.Attr"
+"ibuteExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u000bxq\u0000~\u0000\u0003\u0001|\u00f6\u00bfq\u0000~"
+"\u0000\u000fpsr\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\bsq\u0000~\u0000\u000e\u0001q\u0000~\u0000\u0018sr\u0000 com.sun.msv.grammar.AnyNam"
+"eClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\tq\u0000~\u0000\u0019q\u0000~\u0000\u001esr\u0000#com.sun.msv.grammar.SimpleName"
+"Class\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespac"
+"eURIq\u0000~\u0000 xq\u0000~\u0000\u001bt\u00000net.sourceforge.czt.core.jaxb.gen.TermA.An"
+"nsTypet\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u001ft\u0000"
+"\u0004Annst\u0000\u001ehttp://czt.sourceforge.net/zmlq\u0000~\u0000\u001esq\u0000~\u0000\b\u0001|\u00f6\u00eeppsq\u0000~\u0000"
+"\n\u0001|\u00f6\u00e3q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\n\u0001|\u00f6\u00d8pp\u0000sq\u0000~\u0000\b\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0012\u0001|\u00f6\u00c2q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001"
+"|\u00f6\u00bfq\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000.net.sourceforge.czt.oz.jaxb"
+".gen.StringListTypeq\u0000~\u0000#sq\u0000~\u0000\u001ft\u0000\tDeltaListt\u0000#http://czt.sour"
+"ceforge.net/object-zq\u0000~\u0000\u001esq\u0000~\u0000\b\u0004v\u00e4\u009appsq\u0000~\u0000\u0012\u0004v\u00e4\u008fq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0004"
+"v\u00e4\u008cq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0002\u00f9\u00ed\u00b2q\u0000~\u0000\u000fpsq\u0000~\u0000\n\u0001|\u00f6\u00d8q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0012"
+"\u0001|\u00f6\u00c2q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001|\u00f6\u00bfq\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00001net.source"
+"forge.czt.core.jaxb.gen.InclDeclElementq\u0000~\u0000#sq\u0000~\u0000\n\u0001|\u00f6\u00d8q\u0000~\u0000\u000fp"
+"\u0000sq\u0000~\u0000\b\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0012\u0001|\u00f6\u00c2q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001|\u00f6\u00bfq\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001e"
+"sq\u0000~\u0000\u001ft\u00000net.sourceforge.czt.core.jaxb.gen.VarDeclElementq\u0000~"
+"\u0000#sq\u0000~\u0000\n\u0001|\u00f6\u00d8q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0012\u0001|\u00f6\u00c2q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001|\u00f6\u00bfq\u0000~"
+"\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00002net.sourceforge.czt.core.jaxb.gen"
+".ConstDeclElementq\u0000~\u0000#q\u0000~\u0000\u001esq\u0000~\u0000\b\u0017\u00cfm\u00acppsq\u0000~\u0000\u0012\u0017\u00cfm\u00a1q\u0000~\u0000\u000fpsq\u0000~\u0000"
+"\b\u0017\u00cfm\u009eq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0016Rv\u00c4q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0014\u00d5\u007f\u00eaq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0013X\u0089\u0010q\u0000~\u0000\u000fps"
+"q\u0000~\u0000\b\u0011\u00db\u00926q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0010^\u009b\\q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u000e\u00e1\u00a4\u0082q\u0000~\u0000\u000fpsq\u0000~\u0000\b\rd\u00ad\u00a8q\u0000~"
+"\u0000\u000fpsq\u0000~\u0000\b\u000b\u00e7\u00b6\u00ceq\u0000~\u0000\u000fpsq\u0000~\u0000\b\nj\u00bf\u00f4q\u0000~\u0000\u000fpsq\u0000~\u0000\b\b\u00ed\u00c9\u001aq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0007p\u00d2"
+"@q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0005\u00f3\u00dbfq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0004v\u00e4\u008cq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0002\u00f9\u00ed\u00b2q\u0000~\u0000\u000fpsq\u0000~\u0000"
+"\n\u0001|\u00f6\u00d8q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0012\u0001|\u00f6\u00c2q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001|\u00f6\u00bfq\u0000~\u0000\u000fpq\u0000~\u0000"
+"\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000*net.sourceforge.czt.core.jaxb.gen.TruePr"
+"edq\u0000~\u0000#sq\u0000~\u0000\n\u0001|\u00f6\u00d8q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0012\u0001|\u00f6\u00c2q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001|"
+"\u00f6\u00bfq\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000.net.sourceforge.czt.core.jax"
+"b.gen.Pred2Elementq\u0000~\u0000#sq\u0000~\u0000\n\u0001|\u00f6\u00d8q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0012\u0001|"
+"\u00f6\u00c2q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001|\u00f6\u00bfq\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00000net.sourcefo"
+"rge.czt.core.jaxb.gen.MemPredElementq\u0000~\u0000#sq\u0000~\u0000\n\u0001|\u00f6\u00d8q\u0000~\u0000\u000fp\u0000sq"
+"\u0000~\u0000\b\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0012\u0001|\u00f6\u00c2q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001|\u00f6\u00bfq\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000"
+"~\u0000\u001ft\u0000-net.sourceforge.czt.core.jaxb.gen.Exists1Predq\u0000~\u0000#sq\u0000~"
+"\u0000\n\u0001|\u00f6\u00d8q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0012\u0001|\u00f6\u00c2q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001|\u00f6\u00bfq\u0000~\u0000\u000fpq\u0000~"
+"\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000+net.sourceforge.czt.core.jaxb.gen.False"
+"Predq\u0000~\u0000#sq\u0000~\u0000\n\u0001|\u00f6\u00d8q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0012\u0001|\u00f6\u00c2q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015"
+"\u0001|\u00f6\u00bfq\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00000net.sourceforge.czt.core.j"
+"axb.gen.NegPredElementq\u0000~\u0000#sq\u0000~\u0000\n\u0001|\u00f6\u00d8q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001|\u00f6\u00cdppsq\u0000~"
+"\u0000\u0012\u0001|\u00f6\u00c2q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001|\u00f6\u00bfq\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000)net.sour"
+"ceforge.czt.core.jaxb.gen.IffPredq\u0000~\u0000#sq\u0000~\u0000\n\u0001|\u00f6\u00d8q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000"
+"\b\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0012\u0001|\u00f6\u00c2q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001|\u00f6\u00bfq\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001f"
+"t\u0000,net.sourceforge.czt.core.jaxb.gen.ForallPredq\u0000~\u0000#sq\u0000~\u0000\n\u0001|"
+"\u00f6\u00d8q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0012\u0001|\u00f6\u00c2q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001|\u00f6\u00bfq\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000"
+"~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00003net.sourceforge.czt.zpatt.jaxb.gen.JokerPre"
+"dElementq\u0000~\u0000#sq\u0000~\u0000\n\u0001|\u00f6\u00d8q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0012\u0001|\u00f6\u00c2q\u0000~\u0000\u000fpsq"
+"\u0000~\u0000\u0015\u0001|\u00f6\u00bfq\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000(net.sourceforge.czt.co"
+"re.jaxb.gen.OrPredq\u0000~\u0000#sq\u0000~\u0000\n\u0001|\u00f6\u00d8q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0012\u0001|"
+"\u00f6\u00c2q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001|\u00f6\u00bfq\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00000net.sourcefo"
+"rge.czt.core.jaxb.gen.QntPredElementq\u0000~\u0000#sq\u0000~\u0000\n\u0001|\u00f6\u00d8q\u0000~\u0000\u000fp\u0000sq"
+"\u0000~\u0000\b\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0012\u0001|\u00f6\u00c2q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001|\u00f6\u00bfq\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000"
+"~\u0000\u001ft\u00001net.sourceforge.czt.core.jaxb.gen.ExprPredElementq\u0000~\u0000#"
+"sq\u0000~\u0000\n\u0001|\u00f6\u00d8q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0012\u0001|\u00f6\u00c2q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001|\u00f6\u00bfq\u0000~\u0000\u000f"
+"pq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000-net.sourceforge.czt.core.jaxb.gen.I"
+"mpliesPredq\u0000~\u0000#sq\u0000~\u0000\n\u0001|\u00f6\u00d8q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0012\u0001|\u00f6\u00c2q\u0000~\u0000\u000fp"
+"sq\u0000~\u0000\u0015\u0001|\u00f6\u00bfq\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000,net.sourceforge.czt."
+"core.jaxb.gen.ExistsPredq\u0000~\u0000#sq\u0000~\u0000\n\u0001|\u00f6\u00d8q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001|\u00f6\u00cdppsq"
+"\u0000~\u0000\u0012\u0001|\u00f6\u00c2q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001|\u00f6\u00bfq\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000-net.so"
+"urceforge.czt.core.jaxb.gen.FactElementq\u0000~\u0000#sq\u0000~\u0000\n\u0001|\u00f6\u00d8q\u0000~\u0000\u000fp"
+"\u0000sq\u0000~\u0000\b\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0012\u0001|\u00f6\u00c2q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001|\u00f6\u00bfq\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001e"
+"sq\u0000~\u0000\u001ft\u00000net.sourceforge.czt.core.jaxb.gen.AndPredElementq\u0000~"
+"\u0000#q\u0000~\u0000\u001esr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\be"
+"xpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xps"
+"r\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I"
+"\u0000\u0005countI\u0000\tthresholdL\u0000\u0006parentq\u0000~\u0000\u00ba[\u0000\u0005tablet\u0000![Lcom/sun/msv/gr"
+"ammar/Expression;xp\u0000\u0000\u0000D\u0000\u0000\u0000rpur\u0000![Lcom.sun.msv.grammar.Expres"
+"sion;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0001\u007fpppppq\u0000~\u00002ppppppppppppppppppppppppq\u0000~\u0000"
+"\u0005ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp"
+"pppq\u0000~\u0000Lppppppq\u0000~\u0000Oppppppq\u0000~\u0000Rppppppq\u0000~\u0000Uppppppq\u0000~\u0000Xq\u0000~\u00005ppp"
+"ppppppppppppppppppppppppppppppppppppppppppq\u0000~\u0000\u0007pppppppppq\u0000~\u0000"
+"\u0006pppppppppppppppppppppppppppppppppppppq\u0000~\u0000Jppq\u0000~\u0000Ipppq\u0000~\u0000Mpp"
+"pppq\u0000~\u0000\u00a9q\u0000~\u0000\u00a3q\u0000~\u0000\u009dq\u0000~\u0000\u0097q\u0000~\u0000\u0091q\u0000~\u0000\u008bq\u0000~\u0000\u0085q\u0000~\u0000\u007fq\u0000~\u0000yq\u0000~\u0000sq\u0000~\u0000mq\u0000"
+"~\u0000\u00a2q\u0000~\u0000\u009cq\u0000~\u0000\u0096q\u0000~\u0000\u0090q\u0000~\u0000\u008aq\u0000~\u0000\u0084q\u0000~\u0000~q\u0000~\u0000xq\u0000~\u0000rq\u0000~\u0000lq\u0000~\u0000fq\u0000~\u0000`q\u0000"
+"~\u0000Zq\u0000~\u0000Cq\u0000~\u0000=q\u0000~\u00007q\u0000~\u0000*q\u0000~\u0000\u0011q\u0000~\u0000gq\u0000~\u0000aq\u0000~\u0000[q\u0000~\u0000Dq\u0000~\u0000>q\u0000~\u00008q\u0000"
+"~\u0000+q\u0000~\u0000\u0014q\u0000~\u0000Vq\u0000~\u0000Sq\u0000~\u0000Pq\u0000~\u0000\u00a8q\u0000~\u0000\u00afq\u0000~\u0000\u00aeq\u0000~\u0000\u00b5q\u0000~\u0000\'q\u0000~\u0000\tq\u0000~\u0000\u00b4q\u0000"
+"~\u0000Hppppppppppppppppppppppppppppppppppppppppppppppppppppppppp"
+"ppppppppppppq\u0000~\u0000Kppppppq\u0000~\u0000Nppppppq\u0000~\u0000Qppppppq\u0000~\u0000Tppppppq\u0000~\u0000"
+"Wq\u0000~\u00004pq\u0000~\u00003ppppp"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.UnmarshallingContext context) {
            super(context, "-----------");
        }

        protected Unmarshaller(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return net.sourceforge.czt.oz.jaxb.gen.impl.OperationBoxImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  5 :
                        if (("Decl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 9;
                            return ;
                        }
                        if (("InclDecl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.InclDeclElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.InclDeclElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("VarDecl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.VarDeclElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.VarDeclElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ConstDecl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.ConstDeclElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ConstDeclElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Pred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 7;
                            return ;
                        }
                        if (("TruePred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.TruePredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.TruePredImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Pred2" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.Pred2ElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.Pred2ElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("MemPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.MemPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.MemPredElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Exists1Pred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.Exists1PredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.Exists1PredImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("FalsePred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.FalsePredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.FalsePredImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("NegPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.NegPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.NegPredElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("IffPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.IffPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.IffPredImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ForallPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.ForallPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ForallPredImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("JokerPred" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerPredElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("OrPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.OrPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.OrPredImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("QntPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.QntPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.QntPredElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ExprPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.ExprPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ExprPredElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ImpliesPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.ImpliesPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ImpliesPredImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ExistsPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.ExistsPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ExistsPredImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Fact" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.FactElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.FactElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AndPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  0 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl)net.sourceforge.czt.oz.jaxb.gen.impl.OperationBoxImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl)net.sourceforge.czt.oz.jaxb.gen.impl.OperationBoxImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                        return ;
                    case  4 :
                        if (("Decl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 9;
                            return ;
                        }
                        if (("InclDecl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.InclDeclElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.InclDeclElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("VarDecl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.VarDeclElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.VarDeclElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ConstDecl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.ConstDeclElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ConstDeclElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 5;
                        continue outer;
                    case  7 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                        return ;
                    case  6 :
                        if (("Pred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 7;
                            return ;
                        }
                        if (("TruePred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.TruePredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.TruePredImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Pred2" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.Pred2ElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.Pred2ElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("MemPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.MemPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.MemPredElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Exists1Pred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.Exists1PredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.Exists1PredImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("FalsePred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.FalsePredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.FalsePredImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("NegPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.NegPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.NegPredElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("IffPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.IffPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.IffPredImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ForallPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.ForallPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ForallPredImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("JokerPred" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerPredElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("OrPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.OrPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.OrPredImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("QntPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.QntPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.QntPredElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ExprPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.ExprPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ExprPredElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ImpliesPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.ImpliesPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ImpliesPredImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ExistsPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.ExistsPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ExistsPredImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Fact" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.FactElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.FactElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AndPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  2 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _DeltaList = ((net.sourceforge.czt.oz.jaxb.gen.impl.StringListTypeImpl) spawnChildFromEnterElement((net.sourceforge.czt.oz.jaxb.gen.impl.StringListTypeImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Name" == ___local)&&("http://czt.sourceforge.net/object-z" == ___uri)) {
                            _DeltaList = ((net.sourceforge.czt.oz.jaxb.gen.impl.StringListTypeImpl) spawnChildFromEnterElement((net.sourceforge.czt.oz.jaxb.gen.impl.StringListTypeImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _DeltaList = ((net.sourceforge.czt.oz.jaxb.gen.impl.StringListTypeImpl) spawnChildFromEnterElement((net.sourceforge.czt.oz.jaxb.gen.impl.StringListTypeImpl.class), 3, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  9 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl.class), 10, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl.class), 10, ___uri, ___local, ___qname, __atts)));
                        return ;
                    case  1 :
                        if (("DeltaList" == ___local)&&("http://czt.sourceforge.net/object-z" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 2;
                            return ;
                        }
                        state = 4;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  5 :
                        state = 6;
                        continue outer;
                    case  0 :
                        spawnHandlerFromLeaveElement((((net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl)net.sourceforge.czt.oz.jaxb.gen.impl.OperationBoxImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  8 :
                        if (("Pred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 6;
                            return ;
                        }
                        break;
                    case  4 :
                        state = 5;
                        continue outer;
                    case  7 :
                        _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl) spawnChildFromLeaveElement((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl.class), 8, ___uri, ___local, ___qname)));
                        return ;
                    case  6 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  3 :
                        if (("DeltaList" == ___local)&&("http://czt.sourceforge.net/object-z" == ___uri)) {
                            context.popAttributes();
                            state = 4;
                            return ;
                        }
                        break;
                    case  2 :
                        _DeltaList = ((net.sourceforge.czt.oz.jaxb.gen.impl.StringListTypeImpl) spawnChildFromLeaveElement((net.sourceforge.czt.oz.jaxb.gen.impl.StringListTypeImpl.class), 3, ___uri, ___local, ___qname));
                        return ;
                    case  9 :
                        _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl) spawnChildFromLeaveElement((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl.class), 10, ___uri, ___local, ___qname)));
                        return ;
                    case  1 :
                        state = 4;
                        continue outer;
                    case  10 :
                        if (("Decl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 5;
                            return ;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  5 :
                        state = 6;
                        continue outer;
                    case  0 :
                        spawnHandlerFromEnterAttribute((((net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl)net.sourceforge.czt.oz.jaxb.gen.impl.OperationBoxImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  4 :
                        state = 5;
                        continue outer;
                    case  7 :
                        _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl.class), 8, ___uri, ___local, ___qname)));
                        return ;
                    case  6 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  2 :
                        _DeltaList = ((net.sourceforge.czt.oz.jaxb.gen.impl.StringListTypeImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.oz.jaxb.gen.impl.StringListTypeImpl.class), 3, ___uri, ___local, ___qname));
                        return ;
                    case  9 :
                        _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl.class), 10, ___uri, ___local, ___qname)));
                        return ;
                    case  1 :
                        state = 4;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  5 :
                        state = 6;
                        continue outer;
                    case  0 :
                        spawnHandlerFromLeaveAttribute((((net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl)net.sourceforge.czt.oz.jaxb.gen.impl.OperationBoxImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  4 :
                        state = 5;
                        continue outer;
                    case  7 :
                        _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl.class), 8, ___uri, ___local, ___qname)));
                        return ;
                    case  6 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  2 :
                        _DeltaList = ((net.sourceforge.czt.oz.jaxb.gen.impl.StringListTypeImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.oz.jaxb.gen.impl.StringListTypeImpl.class), 3, ___uri, ___local, ___qname));
                        return ;
                    case  9 :
                        _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl.class), 10, ___uri, ___local, ___qname)));
                        return ;
                    case  1 :
                        state = 4;
                        continue outer;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  5 :
                            state = 6;
                            continue outer;
                        case  0 :
                            spawnHandlerFromText((((net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl)net.sourceforge.czt.oz.jaxb.gen.impl.OperationBoxImpl.this).new Unmarshaller(context)), 1, value);
                            return ;
                        case  4 :
                            state = 5;
                            continue outer;
                        case  7 :
                            _Pred.add(((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl) spawnChildFromText((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl.class), 8, value)));
                            return ;
                        case  6 :
                            revertToParentFromText(value);
                            return ;
                        case  2 :
                            _DeltaList = ((net.sourceforge.czt.oz.jaxb.gen.impl.StringListTypeImpl) spawnChildFromText((net.sourceforge.czt.oz.jaxb.gen.impl.StringListTypeImpl.class), 3, value));
                            return ;
                        case  9 :
                            _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl) spawnChildFromText((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl.class), 10, value)));
                            return ;
                        case  1 :
                            state = 4;
                            continue outer;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
