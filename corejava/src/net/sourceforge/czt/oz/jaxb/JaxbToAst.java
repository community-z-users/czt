
/*
THIS FILE WAS GENERATED BY GNAST.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

************************************************************

Copyright 2003 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.oz.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.util.ReflectiveVisitor;
import net.sourceforge.czt.oz.ast.*;

/**
 * The unmarshaller responsible for deserializing XML data.
 *
 * @author Gnast version 0.1
 */
public class JaxbToAst extends net.sourceforge.czt.oz.jaxb.JaxbToAst
{
  private static final Logger sLogger =
    Logger.getLogger("net.sourceforge.czt.oz.jaxb.JaxbToAst");
  protected OZFactory mObjectFactory;

  public JaxbToAst()
  {
    mObjectFactory =
      new net.sourceforge.czt.oz.impl.OZFactoryImpl();
  }

  public JaxbToAst(OZFactory factory)
  {
    mObjectFactory = factory;
  }

  public Object visitObject(Object o) {
    sLogger.fine("Visit " + o.getClass().toString());
    return o;
  }

  public Object visitRenameList(net.sourceforge.czt.oz.jaxb.gen.RenameList jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitRenameList", jaxbObject);
    net.sourceforge.czt.z.ast.RenameExpr renameExpr =
      (net.sourceforge.czt.z.ast.RenameExpr) dispatch(jaxbObject.getRenameExpr());
    RenameList erg = mObjectFactory.createRenameList(renameExpr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitRenameList", erg);
    return erg;
  }

  public Object visitActualParameters(net.sourceforge.czt.oz.jaxb.gen.ActualParameters jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitActualParameters", jaxbObject);
    java.util.List expr = new java.util.Vector();
    for(Iterator iter=jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    ActualParameters erg = mObjectFactory.createActualParameters(expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitActualParameters", erg);
    return erg;
  }

  public Object visitDistConjOpExpr(net.sourceforge.czt.oz.jaxb.gen.DistConjOpExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitDistConjOpExpr", jaxbObject);
    MainOpExpr mainOpExpr =
      (MainOpExpr) dispatch(jaxbObject.getMainOpExpr());
    DistConjOpExpr erg = mObjectFactory.createDistConjOpExpr(mainOpExpr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitDistConjOpExpr", erg);
    return erg;
  }

  public Object visitBasicOpExpr(net.sourceforge.czt.oz.jaxb.gen.BasicOpExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitBasicOpExpr", jaxbObject);
    StringListType deltaList =
      (StringListType) dispatch(jaxbObject.getDeltaList());
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    BasicOpExpr erg = mObjectFactory.createBasicOpExpr(deltaList, schText);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitBasicOpExpr", erg);
    return erg;
  }

  public Object visitMainOpExpr(net.sourceforge.czt.oz.jaxb.gen.MainOpExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitMainOpExpr", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    OperationExpr operationExpr =
      (OperationExpr) dispatch(jaxbObject.getOperationExpr());
    MainOpExpr erg = mObjectFactory.createMainOpExpr(schText, operationExpr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitMainOpExpr", erg);
    return erg;
  }

  public Object visitHideOpExpr(net.sourceforge.czt.oz.jaxb.gen.HideOpExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitHideOpExpr", jaxbObject);
    OperationExpr operationExpr =
      (OperationExpr) dispatch(jaxbObject.getOperationExpr());
    java.util.List hideName = new java.util.Vector();
    for(Iterator iter=jaxbObject.getHideName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      hideName.add(o);
    }
    HideOpExpr erg = mObjectFactory.createHideOpExpr(operationExpr, hideName);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitHideOpExpr", erg);
    return erg;
  }

  public Object visitStringListType(net.sourceforge.czt.oz.jaxb.gen.StringListType jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitStringListType", jaxbObject);
    java.util.List name = new java.util.Vector();
    for(Iterator iter=jaxbObject.getName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      name.add(o);
    }
    StringListType erg = mObjectFactory.createStringListType(name);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitStringListType", erg);
    return erg;
  }

  public Object visitSeqOpExpr(net.sourceforge.czt.oz.jaxb.gen.SeqOpExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitSeqOpExpr", jaxbObject);
    OperationExpr leftOpExpr =
      (OperationExpr) dispatch(jaxbObject.getLeftOpExpr());
    OperationExpr rightOpExpr =
      (OperationExpr) dispatch(jaxbObject.getRightOpExpr());
    SeqOpExpr erg = mObjectFactory.createSeqOpExpr(leftOpExpr, rightOpExpr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitSeqOpExpr", erg);
    return erg;
  }

  public Object visitInheritedClass(net.sourceforge.czt.oz.jaxb.gen.InheritedClass jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitInheritedClass", jaxbObject);
    net.sourceforge.czt.z.ast.RefName name =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getName());
    ActualParameters actualParameters =
      (ActualParameters) dispatch(jaxbObject.getActualParameters());
    RenameList renameList =
      (RenameList) dispatch(jaxbObject.getRenameList());
    InheritedClass erg = mObjectFactory.createInheritedClass(name, actualParameters, renameList);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitInheritedClass", erg);
    return erg;
  }

  public Object visitDistChoiceOpExpr(net.sourceforge.czt.oz.jaxb.gen.DistChoiceOpExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitDistChoiceOpExpr", jaxbObject);
    MainOpExpr mainOpExpr =
      (MainOpExpr) dispatch(jaxbObject.getMainOpExpr());
    DistChoiceOpExpr erg = mObjectFactory.createDistChoiceOpExpr(mainOpExpr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitDistChoiceOpExpr", erg);
    return erg;
  }

  public Object visitAssoParallelOpExpr(net.sourceforge.czt.oz.jaxb.gen.AssoParallelOpExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitAssoParallelOpExpr", jaxbObject);
    OperationExpr leftOpExpr =
      (OperationExpr) dispatch(jaxbObject.getLeftOpExpr());
    OperationExpr rightOpExpr =
      (OperationExpr) dispatch(jaxbObject.getRightOpExpr());
    AssoParallelOpExpr erg = mObjectFactory.createAssoParallelOpExpr(leftOpExpr, rightOpExpr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitAssoParallelOpExpr", erg);
    return erg;
  }

  public Object visitState(net.sourceforge.czt.oz.jaxb.gen.State jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitState", jaxbObject);
    java.util.List decl = new java.util.Vector();
    for(Iterator iter=jaxbObject.getDecl().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      decl.add(o);
    }
    java.util.List secondaryAttributes = new java.util.Vector();
    for(Iterator iter=jaxbObject.getSecondaryAttributes().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      secondaryAttributes.add(o);
    }
    java.util.List pred = new java.util.Vector();
    for(Iterator iter=jaxbObject.getPred().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      pred.add(o);
    }
    State erg = mObjectFactory.createState(decl, secondaryAttributes, pred);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitState", erg);
    return erg;
  }

  public Object visitConjOpExpr(net.sourceforge.czt.oz.jaxb.gen.ConjOpExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitConjOpExpr", jaxbObject);
    OperationExpr leftOpExpr =
      (OperationExpr) dispatch(jaxbObject.getLeftOpExpr());
    OperationExpr rightOpExpr =
      (OperationExpr) dispatch(jaxbObject.getRightOpExpr());
    ConjOpExpr erg = mObjectFactory.createConjOpExpr(leftOpExpr, rightOpExpr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitConjOpExpr", erg);
    return erg;
  }

  public Object visitOpPromotionExpr(net.sourceforge.czt.oz.jaxb.gen.OpPromotionExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitOpPromotionExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.RefName opName =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getOpName());
    OpPromotionExpr erg = mObjectFactory.createOpPromotionExpr(expr, opName);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitOpPromotionExpr", erg);
    return erg;
  }

  public Object visitClassPara(net.sourceforge.czt.oz.jaxb.gen.ClassPara jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitClassPara", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName name =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getName());
    FormalParameters formalParameters =
      (FormalParameters) dispatch(jaxbObject.getFormalParameters());
    StringListType visibilityList =
      (StringListType) dispatch(jaxbObject.getVisibilityList());
    java.util.List inheritedClass = new java.util.Vector();
    for(Iterator iter=jaxbObject.getInheritedClass().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      inheritedClass.add(o);
    }
    LocalDef localDef =
      (LocalDef) dispatch(jaxbObject.getLocalDef());
    State state =
      (State) dispatch(jaxbObject.getState());
    InitialState initialState =
      (InitialState) dispatch(jaxbObject.getInitialState());
    java.util.List operation = new java.util.Vector();
    for(Iterator iter=jaxbObject.getOperation().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      operation.add(o);
    }
    ClassPara erg = mObjectFactory.createClassPara(name, formalParameters, visibilityList, inheritedClass, localDef, state, initialState, operation);
    sLogger.exiting(this.getClass().toString(), "visitClassPara", erg);
    return erg;
  }

  public Object visitParenOpExpr(net.sourceforge.czt.oz.jaxb.gen.ParenOpExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitParenOpExpr", jaxbObject);
    ParenOpExpr erg = mObjectFactory.createParenOpExpr();
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitParenOpExpr", erg);
    return erg;
  }

  public Object visitOperation(net.sourceforge.czt.oz.jaxb.gen.Operation jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitOperation", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName name =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getName());
    net.sourceforge.czt.base.ast.TermA operandBoxOrExpr =
      (net.sourceforge.czt.base.ast.TermA) dispatch(jaxbObject.getOperandBoxOrExpr());
    Operation erg = mObjectFactory.createOperation(name, operandBoxOrExpr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitOperation", erg);
    return erg;
  }

  public Object visitLocalDef(net.sourceforge.czt.oz.jaxb.gen.LocalDef jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitLocalDef", jaxbObject);
    java.util.List givenPara = new java.util.Vector();
    for(Iterator iter=jaxbObject.getGivenPara().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      givenPara.add(o);
    }
    java.util.List axPara = new java.util.Vector();
    for(Iterator iter=jaxbObject.getAxPara().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      axPara.add(o);
    }
    java.util.List freePara = new java.util.Vector();
    for(Iterator iter=jaxbObject.getFreePara().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      freePara.add(o);
    }
    LocalDef erg = mObjectFactory.createLocalDef(givenPara, axPara, freePara);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitLocalDef", erg);
    return erg;
  }

  public Object visitOperationBox(net.sourceforge.czt.oz.jaxb.gen.OperationBox jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitOperationBox", jaxbObject);
    StringListType deltaList =
      (StringListType) dispatch(jaxbObject.getDeltaList());
    java.util.List decl = new java.util.Vector();
    for(Iterator iter=jaxbObject.getDecl().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      decl.add(o);
    }
    java.util.List pred = new java.util.Vector();
    for(Iterator iter=jaxbObject.getPred().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      pred.add(o);
    }
    OperationBox erg = mObjectFactory.createOperationBox(deltaList, decl, pred);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitOperationBox", erg);
    return erg;
  }

  public Object visitInitialState(net.sourceforge.czt.oz.jaxb.gen.InitialState jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitInitialState", jaxbObject);
    java.util.List pred = new java.util.Vector();
    for(Iterator iter=jaxbObject.getPred().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      pred.add(o);
    }
    InitialState erg = mObjectFactory.createInitialState(pred);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitInitialState", erg);
    return erg;
  }

  public Object visitDistSeqOpExpr(net.sourceforge.czt.oz.jaxb.gen.DistSeqOpExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitDistSeqOpExpr", jaxbObject);
    MainOpExpr mainOpExpr =
      (MainOpExpr) dispatch(jaxbObject.getMainOpExpr());
    DistSeqOpExpr erg = mObjectFactory.createDistSeqOpExpr(mainOpExpr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitDistSeqOpExpr", erg);
    return erg;
  }

  public Object visitScopeEnrichOpExpr(net.sourceforge.czt.oz.jaxb.gen.ScopeEnrichOpExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitScopeEnrichOpExpr", jaxbObject);
    OperationExpr leftOpExpr =
      (OperationExpr) dispatch(jaxbObject.getLeftOpExpr());
    OperationExpr rightOpExpr =
      (OperationExpr) dispatch(jaxbObject.getRightOpExpr());
    ScopeEnrichOpExpr erg = mObjectFactory.createScopeEnrichOpExpr(leftOpExpr, rightOpExpr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitScopeEnrichOpExpr", erg);
    return erg;
  }

  public Object visitSecondaryAttributes(net.sourceforge.czt.oz.jaxb.gen.SecondaryAttributes jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitSecondaryAttributes", jaxbObject);
    SecondaryAttributes erg = mObjectFactory.createSecondaryAttributes();
    sLogger.exiting(this.getClass().toString(), "visitSecondaryAttributes", erg);
    return erg;
  }

  public Object visitExChoiceOpExpr(net.sourceforge.czt.oz.jaxb.gen.ExChoiceOpExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitExChoiceOpExpr", jaxbObject);
    OperationExpr leftOpExpr =
      (OperationExpr) dispatch(jaxbObject.getLeftOpExpr());
    OperationExpr rightOpExpr =
      (OperationExpr) dispatch(jaxbObject.getRightOpExpr());
    ExChoiceOpExpr erg = mObjectFactory.createExChoiceOpExpr(leftOpExpr, rightOpExpr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitExChoiceOpExpr", erg);
    return erg;
  }

  public Object visitRenameOpExpr(net.sourceforge.czt.oz.jaxb.gen.RenameOpExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitRenameOpExpr", jaxbObject);
    OperationExpr operationExpr =
      (OperationExpr) dispatch(jaxbObject.getOperationExpr());
    RenameList renameList =
      (RenameList) dispatch(jaxbObject.getRenameList());
    RenameOpExpr erg = mObjectFactory.createRenameOpExpr(operationExpr, renameList);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitRenameOpExpr", erg);
    return erg;
  }

  public Object visitParallelOpExpr(net.sourceforge.czt.oz.jaxb.gen.ParallelOpExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitParallelOpExpr", jaxbObject);
    OperationExpr leftOpExpr =
      (OperationExpr) dispatch(jaxbObject.getLeftOpExpr());
    OperationExpr rightOpExpr =
      (OperationExpr) dispatch(jaxbObject.getRightOpExpr());
    ParallelOpExpr erg = mObjectFactory.createParallelOpExpr(leftOpExpr, rightOpExpr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitParallelOpExpr", erg);
    return erg;
  }

  public Object visitFormalParameters(net.sourceforge.czt.oz.jaxb.gen.FormalParameters jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitFormalParameters", jaxbObject);
    java.util.List refName = new java.util.Vector();
    for(Iterator iter=jaxbObject.getRefName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      refName.add(o);
    }
    FormalParameters erg = mObjectFactory.createFormalParameters(refName);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitFormalParameters", erg);
    return erg;
  }
}
