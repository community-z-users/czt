
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE JaxbToAst.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.oz.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.util.ReflectiveVisitor;
import net.sourceforge.czt.oz.ast.*;
import net.sourceforge.czt.z.ast.*;

/**
 * The unmarshaller responsible for deserializing XML data.
 *
 * @author Gnast version 0.1
 */
public class JaxbToAst extends net.sourceforge.czt.z.jaxb.JaxbToAst
{
  protected OzFactory mOzFactory_;

  public JaxbToAst()
  {
    mOzFactory_ =
      new net.sourceforge.czt.oz.impl.OzFactoryImpl();
  }

  public JaxbToAst(net.sourceforge.czt.z.ast.ZFactory vZFactory, OzFactory vOzFactory)
  {
    super(vZFactory);
    mOzFactory_ = vOzFactory;
  }

  private static Logger getLogger()
  {
    return Logger.getLogger("net.sourceforge.czt.oz.jaxb.JaxbToAst");
  }

  public Object visitObject(Object object)
  {
    getLogger().fine("Visit " + object.getClass().toString());
    if (object instanceof String
        || object instanceof Boolean
        || object instanceof List
        || object instanceof Integer
        || object instanceof java.math.BigInteger) {
      return object;
    }
    throw new UnsupportedOperationException("Unexpected element "
                                            + object.getClass().getName());
  }

  public Object visitDistConjOpExpr(net.sourceforge.czt.oz.jaxb.gen.DistConjOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDistConjOpExpr", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    OpExpr opExpr =
      (OpExpr) dispatch(jaxbObject.getOpExpr());
    DistConjOpExpr erg = mOzFactory_.createDistConjOpExpr(schText, opExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitDistConjOpExpr", erg);
    return erg;
  }

  public Object visitPolyExpr(net.sourceforge.czt.oz.jaxb.gen.PolyExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPolyExpr", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    PolyExpr erg = mOzFactory_.createPolyExpr(expr);
    getLogger().exiting("JaxbToAst", "visitPolyExpr", erg);
    return erg;
  }

  public Object visitHideOpExpr(net.sourceforge.czt.oz.jaxb.gen.HideOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitHideOpExpr", jaxbObject);
    OpExpr opExpr =
      (OpExpr) dispatch(jaxbObject.getOpExpr());
    List name = new Vector();
    for (Iterator iter = jaxbObject.getName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      name.add(o);
    }
    HideOpExpr erg = mOzFactory_.createHideOpExpr(opExpr, name);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitHideOpExpr", erg);
    return erg;
  }

  public Object visitNameSignaturePair(net.sourceforge.czt.oz.jaxb.gen.NameSignaturePair jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNameSignaturePair", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName name =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getName());
    net.sourceforge.czt.z.ast.Signature signature =
      (net.sourceforge.czt.z.ast.Signature) dispatch(jaxbObject.getSignature());
    NameSignaturePair erg = mOzFactory_.createNameSignaturePair(name, signature);
    getLogger().exiting("JaxbToAst", "visitNameSignaturePair", erg);
    return erg;
  }

  public Object visitSeqOpExpr(net.sourceforge.czt.oz.jaxb.gen.SeqOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSeqOpExpr", jaxbObject);
    OpExpr leftOpExpr =
      (OpExpr) dispatch(jaxbObject.getLeftOpExpr());
    OpExpr rightOpExpr =
      (OpExpr) dispatch(jaxbObject.getRightOpExpr());
    SeqOpExpr erg = mOzFactory_.createSeqOpExpr(leftOpExpr, rightOpExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSeqOpExpr", erg);
    return erg;
  }

  public Object visitClassType(net.sourceforge.czt.oz.jaxb.gen.ClassType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitClassType", jaxbObject);
    ClassSignature classSignature =
      (ClassSignature) dispatch(jaxbObject.getClassSignature());
    ClassType erg = mOzFactory_.createClassType(classSignature);
    getLogger().exiting("JaxbToAst", "visitClassType", erg);
    return erg;
  }

  public Object visitClassSignature(net.sourceforge.czt.oz.jaxb.gen.ClassSignature jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitClassSignature", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName className =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getClassName());
    net.sourceforge.czt.z.ast.Signature primaryDecl =
      (net.sourceforge.czt.z.ast.Signature) dispatch(jaxbObject.getPrimaryDecl());
    net.sourceforge.czt.z.ast.Signature secondaryDecl =
      (net.sourceforge.czt.z.ast.Signature) dispatch(jaxbObject.getSecondaryDecl());
    List parentClass = new Vector();
    for (Iterator iter = jaxbObject.getParentClass().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      parentClass.add(o);
    }
    List attribute = new Vector();
    for (Iterator iter = jaxbObject.getAttribute().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      attribute.add(o);
    }
    List operation = new Vector();
    for (Iterator iter = jaxbObject.getOperation().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      operation.add(o);
    }
    List visibility = new Vector();
    for (Iterator iter = jaxbObject.getVisibility().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      visibility.add(o);
    }
    ClassSignature erg = mOzFactory_.createClassSignature(className, primaryDecl, secondaryDecl, parentClass, attribute, operation, visibility);
    getLogger().exiting("JaxbToAst", "visitClassSignature", erg);
    return erg;
  }

  public Object visitOpText(net.sourceforge.czt.oz.jaxb.gen.OpText jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOpText", jaxbObject);
    List delta = new Vector();
    for (Iterator iter = jaxbObject.getDelta().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      delta.add(o);
    }
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    OpText erg = mOzFactory_.createOpText(delta, schText);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitOpText", erg);
    return erg;
  }

  public Object visitDistChoiceOpExpr(net.sourceforge.czt.oz.jaxb.gen.DistChoiceOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDistChoiceOpExpr", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    OpExpr opExpr =
      (OpExpr) dispatch(jaxbObject.getOpExpr());
    DistChoiceOpExpr erg = mOzFactory_.createDistChoiceOpExpr(schText, opExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitDistChoiceOpExpr", erg);
    return erg;
  }

  public Object visitAssoParallelOpExpr(net.sourceforge.czt.oz.jaxb.gen.AssoParallelOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAssoParallelOpExpr", jaxbObject);
    OpExpr leftOpExpr =
      (OpExpr) dispatch(jaxbObject.getLeftOpExpr());
    OpExpr rightOpExpr =
      (OpExpr) dispatch(jaxbObject.getRightOpExpr());
    AssoParallelOpExpr erg = mOzFactory_.createAssoParallelOpExpr(leftOpExpr, rightOpExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitAssoParallelOpExpr", erg);
    return erg;
  }

  public Object visitState(net.sourceforge.czt.oz.jaxb.gen.State jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitState", jaxbObject);
    List primaryDecl = new Vector();
    for (Iterator iter = jaxbObject.getPrimaryDecl().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      primaryDecl.add(o);
    }
    List secondaryDecl = new Vector();
    for (Iterator iter = jaxbObject.getSecondaryDecl().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      secondaryDecl.add(o);
    }
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    State erg = mOzFactory_.createState(primaryDecl, secondaryDecl, pred);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitState", erg);
    return erg;
  }

  public Object visitOpPromotionExpr(net.sourceforge.czt.oz.jaxb.gen.OpPromotionExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOpPromotionExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.RefName name =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getName());
    OpPromotionExpr erg = mOzFactory_.createOpPromotionExpr(expr, name);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitOpPromotionExpr", erg);
    return erg;
  }

  public Object visitConjOpExpr(net.sourceforge.czt.oz.jaxb.gen.ConjOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitConjOpExpr", jaxbObject);
    OpExpr leftOpExpr =
      (OpExpr) dispatch(jaxbObject.getLeftOpExpr());
    OpExpr rightOpExpr =
      (OpExpr) dispatch(jaxbObject.getRightOpExpr());
    ConjOpExpr erg = mOzFactory_.createConjOpExpr(leftOpExpr, rightOpExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitConjOpExpr", erg);
    return erg;
  }

  public Object visitClassPara(net.sourceforge.czt.oz.jaxb.gen.ClassPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitClassPara", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName name =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getName());
    List formalParameters = new Vector();
    for (Iterator iter = jaxbObject.getFormalParameters().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      formalParameters.add(o);
    }
    List visibility = new Vector();
    for (Iterator iter = jaxbObject.getVisibility().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      visibility.add(o);
    }
    List inheritedClass = new Vector();
    for (Iterator iter = jaxbObject.getInheritedClass().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      inheritedClass.add(o);
    }
    List localDef = new Vector();
    for (Iterator iter = jaxbObject.getLocalDef().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      localDef.add(o);
    }
    State state =
      (State) dispatch(jaxbObject.getState());
    InitialState initialState =
      (InitialState) dispatch(jaxbObject.getInitialState());
    List operation = new Vector();
    for (Iterator iter = jaxbObject.getOperation().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      operation.add(o);
    }
    ClassPara erg = mOzFactory_.createClassPara(name, formalParameters, visibility, inheritedClass, localDef, state, initialState, operation);
    getLogger().exiting("JaxbToAst", "visitClassPara", erg);
    return erg;
  }

  public Object visitOperation(net.sourceforge.czt.oz.jaxb.gen.Operation jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOperation", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName name =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getName());
    OpExpr opExpr =
      (OpExpr) dispatch(jaxbObject.getOpExpr());
    net.sourceforge.czt.z.ast.Box box =
      (net.sourceforge.czt.z.ast.Box) dispatch(jaxbObject.getBox());
    Operation erg = mOzFactory_.createOperation(name, opExpr, box);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitOperation", erg);
    return erg;
  }

  public Object visitContainmentExpr(net.sourceforge.czt.oz.jaxb.gen.ContainmentExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitContainmentExpr", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    ContainmentExpr erg = mOzFactory_.createContainmentExpr(expr);
    getLogger().exiting("JaxbToAst", "visitContainmentExpr", erg);
    return erg;
  }

  public Object visitInitialState(net.sourceforge.czt.oz.jaxb.gen.InitialState jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInitialState", jaxbObject);
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    InitialState erg = mOzFactory_.createInitialState(pred);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitInitialState", erg);
    return erg;
  }

  public Object visitClassUnionExpr(net.sourceforge.czt.oz.jaxb.gen.ClassUnionExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitClassUnionExpr", jaxbObject);
    Expr leftExpr =
      (Expr) dispatch(jaxbObject.getLeftExpr());
    Expr rightExpr =
      (Expr) dispatch(jaxbObject.getRightExpr());
    ClassUnionExpr erg = mOzFactory_.createClassUnionExpr(leftExpr, rightExpr);
    getLogger().exiting("JaxbToAst", "visitClassUnionExpr", erg);
    return erg;
  }

  public Object visitDistSeqOpExpr(net.sourceforge.czt.oz.jaxb.gen.DistSeqOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDistSeqOpExpr", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    OpExpr opExpr =
      (OpExpr) dispatch(jaxbObject.getOpExpr());
    DistSeqOpExpr erg = mOzFactory_.createDistSeqOpExpr(schText, opExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitDistSeqOpExpr", erg);
    return erg;
  }

  public Object visitScopeEnrichOpExpr(net.sourceforge.czt.oz.jaxb.gen.ScopeEnrichOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitScopeEnrichOpExpr", jaxbObject);
    OpExpr leftOpExpr =
      (OpExpr) dispatch(jaxbObject.getLeftOpExpr());
    OpExpr rightOpExpr =
      (OpExpr) dispatch(jaxbObject.getRightOpExpr());
    ScopeEnrichOpExpr erg = mOzFactory_.createScopeEnrichOpExpr(leftOpExpr, rightOpExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitScopeEnrichOpExpr", erg);
    return erg;
  }

  public Object visitPredExpr(net.sourceforge.czt.oz.jaxb.gen.PredExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPredExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    PredExpr erg = mOzFactory_.createPredExpr(pred);
    getLogger().exiting("JaxbToAst", "visitPredExpr", erg);
    return erg;
  }

  public Object visitRenameOpExpr(net.sourceforge.czt.oz.jaxb.gen.RenameOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRenameOpExpr", jaxbObject);
    OpExpr opExpr =
      (OpExpr) dispatch(jaxbObject.getOpExpr());
    List nameNamePair = new Vector();
    for (Iterator iter = jaxbObject.getNameNamePair().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      nameNamePair.add(o);
    }
    RenameOpExpr erg = mOzFactory_.createRenameOpExpr(opExpr, nameNamePair);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitRenameOpExpr", erg);
    return erg;
  }

  public Object visitExChoiceOpExpr(net.sourceforge.czt.oz.jaxb.gen.ExChoiceOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExChoiceOpExpr", jaxbObject);
    OpExpr leftOpExpr =
      (OpExpr) dispatch(jaxbObject.getLeftOpExpr());
    OpExpr rightOpExpr =
      (OpExpr) dispatch(jaxbObject.getRightOpExpr());
    ExChoiceOpExpr erg = mOzFactory_.createExChoiceOpExpr(leftOpExpr, rightOpExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitExChoiceOpExpr", erg);
    return erg;
  }

  public Object visitParallelOpExpr(net.sourceforge.czt.oz.jaxb.gen.ParallelOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParallelOpExpr", jaxbObject);
    OpExpr leftOpExpr =
      (OpExpr) dispatch(jaxbObject.getLeftOpExpr());
    OpExpr rightOpExpr =
      (OpExpr) dispatch(jaxbObject.getRightOpExpr());
    ParallelOpExpr erg = mOzFactory_.createParallelOpExpr(leftOpExpr, rightOpExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitParallelOpExpr", erg);
    return erg;
  }

  public Object visitAnonOpExpr(net.sourceforge.czt.oz.jaxb.gen.AnonOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAnonOpExpr", jaxbObject);
    OpText opText =
      (OpText) dispatch(jaxbObject.getOpText());
    AnonOpExpr erg = mOzFactory_.createAnonOpExpr(opText);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitAnonOpExpr", erg);
    return erg;
  }
}
