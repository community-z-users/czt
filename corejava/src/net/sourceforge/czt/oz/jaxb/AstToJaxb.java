
/*
THIS FILE WAS GENERATED BY GNAST.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

************************************************************

Copyright 2003 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.oz.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.z.jaxb.gen.*;
import net.sourceforge.czt.oz.jaxb.gen.*;
import org.w3._2001.xmlschema.*;

/**
 * The marshaller responsible for serializing XML data.
 *
 * @author Gnast version 0.1
 */
public class AstToJaxb
  extends net.sourceforge.czt.core.jaxb.AstToJaxb
  implements net.sourceforge.czt.oz.visitor.OZVisitor,
             net.sourceforge.czt.base.visitor.TermVisitor
{
  private static final Logger sLogger =
    Logger.getLogger("net.sourceforge.czt.oz.jaxb.AstToJaxb");

  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  protected net.sourceforge.czt.oz.jaxb.gen.ObjectFactory
    mObjectFactory = new net.sourceforge.czt.oz.jaxb.gen.ObjectFactory();
  protected net.sourceforge.czt.core.jaxb.gen.ObjectFactory
    mAnnsObjectFactory = new net.sourceforge.czt.core.jaxb.gen.ObjectFactory();
  protected org.w3._2001.xmlschema.ObjectFactory
    mAnyTypeObjectFactory = new org.w3._2001.xmlschema.ObjectFactory();

  /**
   * A map that maps id's to the corresponding Object
   */
  protected Map mHash = new HashMap();

  public Object visitTerm(net.sourceforge.czt.base.ast.Term zedObject)
  {
    throw(new UnsupportedOperationException());
  }


  public Object visitRenameList(net.sourceforge.czt.oz.ast.RenameList zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitRenameList", zedObject);

    RenameList jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createRenameListElement();
      if (zedObject.getRenameExpr()!=null) {
        jaxbObject.setRenameExpr((RenameExpr) zedObject.getRenameExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitRenameList", jaxbObject);
    return jaxbObject;
  }

  public Object visitActualParameters(net.sourceforge.czt.oz.ast.ActualParameters zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitActualParameters", zedObject);

    ActualParameters jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createActualParametersElement();
      {
        java.util.List list = zedObject.getExpr();
        java.util.List newlist = jaxbObject.getExpr();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitActualParameters", jaxbObject);
    return jaxbObject;
  }

  public Object visitDistConjOpExpr(net.sourceforge.czt.oz.ast.DistConjOpExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitDistConjOpExpr", zedObject);

    DistConjOpExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createDistConjOpExpr();
      if (zedObject.getMainOpExpr()!=null) {
        jaxbObject.setMainOpExpr((MainOpExpr) zedObject.getMainOpExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitDistConjOpExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitBasicOpExpr(net.sourceforge.czt.oz.ast.BasicOpExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitBasicOpExpr", zedObject);

    BasicOpExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createBasicOpExprElement();
      if (zedObject.getDeltaList()!=null) {
        jaxbObject.setDeltaList((StringListType) zedObject.getDeltaList().accept(this));
      }
      if (zedObject.getSchText()!=null) {
        jaxbObject.setSchText((SchText) zedObject.getSchText().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitBasicOpExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitMainOpExpr(net.sourceforge.czt.oz.ast.MainOpExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitMainOpExpr", zedObject);

    MainOpExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createMainOpExprElement();
      if (zedObject.getSchText()!=null) {
        jaxbObject.setSchText((SchText) zedObject.getSchText().accept(this));
      }
      if (zedObject.getOperationExpr()!=null) {
        jaxbObject.setOperationExpr((OperationExpr) zedObject.getOperationExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitMainOpExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitHideOpExpr(net.sourceforge.czt.oz.ast.HideOpExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitHideOpExpr", zedObject);

    HideOpExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createHideOpExprElement();
      if (zedObject.getOperationExpr()!=null) {
        jaxbObject.setOperationExpr((OperationExpr) zedObject.getOperationExpr().accept(this));
      }
      {
        java.util.List list = zedObject.getHideName();
        java.util.List newlist = jaxbObject.getHideName();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitHideOpExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitStringListType(net.sourceforge.czt.oz.ast.StringListType zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitStringListType", zedObject);

    StringListType jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createStringListTypeElement();
      {
        java.util.List list = zedObject.getName();
        java.util.List newlist = jaxbObject.getName();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitStringListType", jaxbObject);
    return jaxbObject;
  }

  public Object visitSeqOpExpr(net.sourceforge.czt.oz.ast.SeqOpExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitSeqOpExpr", zedObject);

    SeqOpExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createSeqOpExpr();
      if (zedObject.getLeftOpExpr()!=null) {
        jaxbObject.setLeftOpExpr((OperationExpr) zedObject.getLeftOpExpr().accept(this));
      }
      if (zedObject.getRightOpExpr()!=null) {
        jaxbObject.setRightOpExpr((OperationExpr) zedObject.getRightOpExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitSeqOpExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitInheritedClass(net.sourceforge.czt.oz.ast.InheritedClass zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitInheritedClass", zedObject);

    InheritedClass jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createInheritedClassElement();
      if (zedObject.getName()!=null) {
        jaxbObject.setName((RefName) zedObject.getName().accept(this));
      }
      if (zedObject.getActualParameters()!=null) {
        jaxbObject.setActualParameters((ActualParameters) zedObject.getActualParameters().accept(this));
      }
      if (zedObject.getRenameList()!=null) {
        jaxbObject.setRenameList((RenameList) zedObject.getRenameList().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitInheritedClass", jaxbObject);
    return jaxbObject;
  }

  public Object visitDistChoiceOpExpr(net.sourceforge.czt.oz.ast.DistChoiceOpExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitDistChoiceOpExpr", zedObject);

    DistChoiceOpExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createDistChoiceOpExpr();
      if (zedObject.getMainOpExpr()!=null) {
        jaxbObject.setMainOpExpr((MainOpExpr) zedObject.getMainOpExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitDistChoiceOpExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitAssoParallelOpExpr(net.sourceforge.czt.oz.ast.AssoParallelOpExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitAssoParallelOpExpr", zedObject);

    AssoParallelOpExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createAssoParallelOpExpr();
      if (zedObject.getLeftOpExpr()!=null) {
        jaxbObject.setLeftOpExpr((OperationExpr) zedObject.getLeftOpExpr().accept(this));
      }
      if (zedObject.getRightOpExpr()!=null) {
        jaxbObject.setRightOpExpr((OperationExpr) zedObject.getRightOpExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitAssoParallelOpExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitState(net.sourceforge.czt.oz.ast.State zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitState", zedObject);

    State jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createStateElement();
      {
        java.util.List list = zedObject.getDecl();
        java.util.List newlist = jaxbObject.getDecl();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
      {
        java.util.List list = zedObject.getSecondaryAttributes();
        java.util.List newlist = jaxbObject.getSecondaryAttributes();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
      {
        java.util.List list = zedObject.getPred();
        java.util.List newlist = jaxbObject.getPred();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitState", jaxbObject);
    return jaxbObject;
  }

  public Object visitConjOpExpr(net.sourceforge.czt.oz.ast.ConjOpExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitConjOpExpr", zedObject);

    ConjOpExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createConjOpExpr();
      if (zedObject.getLeftOpExpr()!=null) {
        jaxbObject.setLeftOpExpr((OperationExpr) zedObject.getLeftOpExpr().accept(this));
      }
      if (zedObject.getRightOpExpr()!=null) {
        jaxbObject.setRightOpExpr((OperationExpr) zedObject.getRightOpExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitConjOpExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitOpPromotionExpr(net.sourceforge.czt.oz.ast.OpPromotionExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitOpPromotionExpr", zedObject);

    OpPromotionExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createOpPromotionExprElement();
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
      if (zedObject.getOpName()!=null) {
        jaxbObject.setOpName((RefName) zedObject.getOpName().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitOpPromotionExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitClassPara(net.sourceforge.czt.oz.ast.ClassPara zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitClassPara", zedObject);

    ClassPara jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createClassParaElement();
      if (zedObject.getName()!=null) {
        jaxbObject.setName((DeclName) zedObject.getName().accept(this));
      }
      if (zedObject.getFormalParameters()!=null) {
        jaxbObject.setFormalParameters((FormalParameters) zedObject.getFormalParameters().accept(this));
      }
      if (zedObject.getVisibilityList()!=null) {
        jaxbObject.setVisibilityList((StringListType) zedObject.getVisibilityList().accept(this));
      }
      {
        java.util.List list = zedObject.getInheritedClass();
        java.util.List newlist = jaxbObject.getInheritedClass();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
      if (zedObject.getLocalDef()!=null) {
        jaxbObject.setLocalDef((LocalDef) zedObject.getLocalDef().accept(this));
      }
      if (zedObject.getState()!=null) {
        jaxbObject.setState((State) zedObject.getState().accept(this));
      }
      if (zedObject.getInitialState()!=null) {
        jaxbObject.setInitialState((InitialState) zedObject.getInitialState().accept(this));
      }
      {
        java.util.List list = zedObject.getOperation();
        java.util.List newlist = jaxbObject.getOperation();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitClassPara", jaxbObject);
    return jaxbObject;
  }

  public Object visitParenOpExpr(net.sourceforge.czt.oz.ast.ParenOpExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitParenOpExpr", zedObject);

    ParenOpExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createParenOpExpr();
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitParenOpExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitOperation(net.sourceforge.czt.oz.ast.Operation zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitOperation", zedObject);

    Operation jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createOperationElement();
      if (zedObject.getName()!=null) {
        jaxbObject.setName((DeclName) zedObject.getName().accept(this));
      }
      if (zedObject.getOperandBoxOrExpr()!=null) {
        jaxbObject.setOperandBoxOrExpr((TermA) zedObject.getOperandBoxOrExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitOperation", jaxbObject);
    return jaxbObject;
  }

  public Object visitLocalDef(net.sourceforge.czt.oz.ast.LocalDef zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitLocalDef", zedObject);

    LocalDef jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createLocalDefElement();
      {
        java.util.List list = zedObject.getGivenPara();
        java.util.List newlist = jaxbObject.getGivenPara();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
      {
        java.util.List list = zedObject.getAxPara();
        java.util.List newlist = jaxbObject.getAxPara();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
      {
        java.util.List list = zedObject.getFreePara();
        java.util.List newlist = jaxbObject.getFreePara();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitLocalDef", jaxbObject);
    return jaxbObject;
  }

  public Object visitOperationBox(net.sourceforge.czt.oz.ast.OperationBox zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitOperationBox", zedObject);

    OperationBox jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createOperationBoxElement();
      if (zedObject.getDeltaList()!=null) {
        jaxbObject.setDeltaList((StringListType) zedObject.getDeltaList().accept(this));
      }
      {
        java.util.List list = zedObject.getDecl();
        java.util.List newlist = jaxbObject.getDecl();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
      {
        java.util.List list = zedObject.getPred();
        java.util.List newlist = jaxbObject.getPred();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitOperationBox", jaxbObject);
    return jaxbObject;
  }

  public Object visitInitialState(net.sourceforge.czt.oz.ast.InitialState zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitInitialState", zedObject);

    InitialState jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createInitialStateElement();
      {
        java.util.List list = zedObject.getPred();
        java.util.List newlist = jaxbObject.getPred();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitInitialState", jaxbObject);
    return jaxbObject;
  }

  public Object visitDistSeqOpExpr(net.sourceforge.czt.oz.ast.DistSeqOpExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitDistSeqOpExpr", zedObject);

    DistSeqOpExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createDistSeqOpExpr();
      if (zedObject.getMainOpExpr()!=null) {
        jaxbObject.setMainOpExpr((MainOpExpr) zedObject.getMainOpExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitDistSeqOpExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitScopeEnrichOpExpr(net.sourceforge.czt.oz.ast.ScopeEnrichOpExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitScopeEnrichOpExpr", zedObject);

    ScopeEnrichOpExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createScopeEnrichOpExpr();
      if (zedObject.getLeftOpExpr()!=null) {
        jaxbObject.setLeftOpExpr((OperationExpr) zedObject.getLeftOpExpr().accept(this));
      }
      if (zedObject.getRightOpExpr()!=null) {
        jaxbObject.setRightOpExpr((OperationExpr) zedObject.getRightOpExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitScopeEnrichOpExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitSecondaryAttributes(net.sourceforge.czt.oz.ast.SecondaryAttributes zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitSecondaryAttributes", zedObject);

    SecondaryAttributes jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createSecondaryAttributesElement();
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitSecondaryAttributes", jaxbObject);
    return jaxbObject;
  }

  public Object visitExChoiceOpExpr(net.sourceforge.czt.oz.ast.ExChoiceOpExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitExChoiceOpExpr", zedObject);

    ExChoiceOpExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createExChoiceOpExpr();
      if (zedObject.getLeftOpExpr()!=null) {
        jaxbObject.setLeftOpExpr((OperationExpr) zedObject.getLeftOpExpr().accept(this));
      }
      if (zedObject.getRightOpExpr()!=null) {
        jaxbObject.setRightOpExpr((OperationExpr) zedObject.getRightOpExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitExChoiceOpExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitRenameOpExpr(net.sourceforge.czt.oz.ast.RenameOpExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitRenameOpExpr", zedObject);

    RenameOpExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createRenameOpExprElement();
      if (zedObject.getOperationExpr()!=null) {
        jaxbObject.setOperationExpr((OperationExpr) zedObject.getOperationExpr().accept(this));
      }
      if (zedObject.getRenameList()!=null) {
        jaxbObject.setRenameList((RenameList) zedObject.getRenameList().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitRenameOpExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitParallelOpExpr(net.sourceforge.czt.oz.ast.ParallelOpExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitParallelOpExpr", zedObject);

    ParallelOpExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createParallelOpExpr();
      if (zedObject.getLeftOpExpr()!=null) {
        jaxbObject.setLeftOpExpr((OperationExpr) zedObject.getLeftOpExpr().accept(this));
      }
      if (zedObject.getRightOpExpr()!=null) {
        jaxbObject.setRightOpExpr((OperationExpr) zedObject.getRightOpExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitParallelOpExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitFormalParameters(net.sourceforge.czt.oz.ast.FormalParameters zedObject)
  {
    sLogger.entering("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitFormalParameters", zedObject);

    FormalParameters jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createFormalParametersElement();
      {
        java.util.List list = zedObject.getRefName();
        java.util.List newlist = jaxbObject.getRefName();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.oz.jaxb.AstToJaxb", "visitFormalParameters", jaxbObject);
    return jaxbObject;
  }
}
