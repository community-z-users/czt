
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToJaxb.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.oz.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.base.ast.Term;

import net.sourceforge.czt.z.jaxb.gen.*;
import net.sourceforge.czt.oz.jaxb.gen.*;
import org.w3._2001.xmlschema.*;

/**
 * The marshaller responsible for serializing XML data.
 *
 * @author Gnast version 0.1
 */
public class AstToJaxb
  extends net.sourceforge.czt.z.jaxb.AstToJaxb
  implements net.sourceforge.czt.oz.visitor.OzVisitor,
             net.sourceforge.czt.base.visitor.TermVisitor
{

  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  private net.sourceforge.czt.oz.jaxb.gen.ObjectFactory
    objectFactory_ = new net.sourceforge.czt.oz.jaxb.gen.ObjectFactory();
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    annsObjectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();
  private org.w3._2001.xmlschema.ObjectFactory
    anyTypeObjectFactory_ = new org.w3._2001.xmlschema.ObjectFactory();

  /**
   * A map that maps id's to the corresponding Object.
   */
  private Map hash_ = new HashMap();

  private String getClassName()
  {
    return "net.sourceforge.czt.oz.jaxb.AstToJaxb";
  }

  private Logger getLogger()
  {
    return Logger.getLogger(getClassName());
  }

  private net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType visitAnnotations(List list)
    throws javax.xml.bind.JAXBException
  {
      net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
        annsObjectFactory_.createTermAAnnsType();
    List newlist = anns.getany();
    for (Iterator iter = list.iterator(); iter.hasNext();) {
      Object obj = iter.next();
      if (obj instanceof Term) {
        Term term = (Term) obj;
        try {
          createElement_ = true;
          Object visitedTerm = term.accept(this);
          newlist.add(visitedTerm);
        }
        catch (Exception e) {
          String message = "Annotation " + term + " cannot be handled; " +
            "drop it.";
          getLogger().warning(message);
        }
      }
    }
    return anns;
  }


  public Object visitTerm(Term zedObject)
  {
    String message = "Unexpected element " + zedObject.getClass().getName();
    // getLogger().warning(message);
    // return null;
    throw(new UnsupportedOperationException(message));
  }


  public Object visitDistConjOpExpr(net.sourceforge.czt.oz.ast.DistConjOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitDistConjOpExpr", zedObject);

    DistConjOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createDistConjOpExpr();
      createElement_ = true;
      if (zedObject.getSchText() != null) {
        Term term = zedObject.getSchText();
        jaxbObject.setSchText((SchText) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getOpExpr() != null) {
        Term term = zedObject.getOpExpr();
        jaxbObject.setOpExpr((OpExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a DistConjOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a DistConjOpExpr to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitDistConjOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitPolyExpr(net.sourceforge.czt.oz.ast.PolyExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitPolyExpr", zedObject);

    PolyExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createPolyExpr();
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PolyExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitPolyExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitHideOpExpr(net.sourceforge.czt.oz.ast.HideOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitHideOpExpr", zedObject);

    HideOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createHideOpExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createHideOpExpr();
      }
      createElement_ = true;
      if (zedObject.getOpExpr() != null) {
        Term term = zedObject.getOpExpr();
        jaxbObject.setOpExpr((OpExpr) term.accept(this));
      }
      {
        List list = zedObject.getName();
        List newlist = jaxbObject.getName();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a HideOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a HideOpExpr to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitHideOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNameSignaturePair(net.sourceforge.czt.oz.ast.NameSignaturePair zedObject)
  {
    getLogger().entering(getClassName(), "visitNameSignaturePair", zedObject);

    NameSignaturePair jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNameSignaturePairElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createNameSignaturePair();
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        Term term = zedObject.getName();
        jaxbObject.setName((DeclName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getSignature() != null) {
        Term term = zedObject.getSignature();
        jaxbObject.setSignature((Signature) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NameSignaturePair to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitNameSignaturePair", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSeqOpExpr(net.sourceforge.czt.oz.ast.SeqOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqOpExpr", zedObject);

    SeqOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSeqOpExpr();
      createElement_ = true;
      if (zedObject.getLeftOpExpr() != null) {
        Term term = zedObject.getLeftOpExpr();
        jaxbObject.setLeftOpExpr((OpExpr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightOpExpr() != null) {
        Term term = zedObject.getRightOpExpr();
        jaxbObject.setRightOpExpr((OpExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SeqOpExpr to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSeqOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitClassType(net.sourceforge.czt.oz.ast.ClassType zedObject)
  {
    getLogger().entering(getClassName(), "visitClassType", zedObject);

    ClassType jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createClassTypeElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createClassType();
      }
      createElement_ = true;
      if (zedObject.getClassSignature() != null) {
        Term term = zedObject.getClassSignature();
        jaxbObject.setClassSignature((ClassSignature) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ClassType to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitClassType", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitClassSignature(net.sourceforge.czt.oz.ast.ClassSignature zedObject)
  {
    getLogger().entering(getClassName(), "visitClassSignature", zedObject);

    ClassSignature jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createClassSignatureElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createClassSignature();
      }
      createElement_ = false;
      if (zedObject.getClassName() != null) {
        Term term = zedObject.getClassName();
        jaxbObject.setClassName((DeclName) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getState() != null) {
        Term term = zedObject.getState();
        jaxbObject.setState((Signature) term.accept(this));
      }
      {
        List list = zedObject.getParentClass();
        List newlist = jaxbObject.getParentClass();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getAttribute();
        List newlist = jaxbObject.getAttribute();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getOperation();
        List newlist = jaxbObject.getOperation();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getVisibility();
        List newlist = jaxbObject.getVisibility();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ClassSignature to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitClassSignature", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInheritedClass(net.sourceforge.czt.oz.ast.InheritedClass zedObject)
  {
    getLogger().entering(getClassName(), "visitInheritedClass", zedObject);

    InheritedClass jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInheritedClassElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createInheritedClass();
      }
      createElement_ = true;
      if (zedObject.getRefExpr() != null) {
        Term term = zedObject.getRefExpr();
        jaxbObject.setRefExpr((RefExpr) term.accept(this));
      }
      {
        List list = zedObject.getNameNamePair();
        List newlist = jaxbObject.getNameNamePair();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InheritedClass to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a InheritedClass to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitInheritedClass", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitOpText(net.sourceforge.czt.oz.ast.OpText zedObject)
  {
    getLogger().entering(getClassName(), "visitOpText", zedObject);

    OpText jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createOpTextElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createOpText();
      }
      {
        List list = zedObject.getDelta();
        List newlist = jaxbObject.getDelta();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getSchText() != null) {
        Term term = zedObject.getSchText();
        jaxbObject.setSchText((SchText) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OpText to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a OpText to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitOpText", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitDistChoiceOpExpr(net.sourceforge.czt.oz.ast.DistChoiceOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitDistChoiceOpExpr", zedObject);

    DistChoiceOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createDistChoiceOpExpr();
      createElement_ = true;
      if (zedObject.getSchText() != null) {
        Term term = zedObject.getSchText();
        jaxbObject.setSchText((SchText) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getOpExpr() != null) {
        Term term = zedObject.getOpExpr();
        jaxbObject.setOpExpr((OpExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a DistChoiceOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a DistChoiceOpExpr to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitDistChoiceOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitAssoParallelOpExpr(net.sourceforge.czt.oz.ast.AssoParallelOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitAssoParallelOpExpr", zedObject);

    AssoParallelOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createAssoParallelOpExpr();
      createElement_ = true;
      if (zedObject.getLeftOpExpr() != null) {
        Term term = zedObject.getLeftOpExpr();
        jaxbObject.setLeftOpExpr((OpExpr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightOpExpr() != null) {
        Term term = zedObject.getRightOpExpr();
        jaxbObject.setRightOpExpr((OpExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AssoParallelOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a AssoParallelOpExpr to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitAssoParallelOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitState(net.sourceforge.czt.oz.ast.State zedObject)
  {
    getLogger().entering(getClassName(), "visitState", zedObject);

    State jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createStateElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createState();
      }
      {
        List list = zedObject.getDecl();
        List newlist = jaxbObject.getDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getSecondaryDecl();
        List newlist = jaxbObject.getSecondaryDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getPred() != null) {
        Term term = zedObject.getPred();
        jaxbObject.setPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a State to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a State to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitState", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitOpPromotionExpr(net.sourceforge.czt.oz.ast.OpPromotionExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitOpPromotionExpr", zedObject);

    OpPromotionExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createOpPromotionExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createOpPromotionExpr();
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getOpName() != null) {
        Term term = zedObject.getOpName();
        jaxbObject.setOpName((RefName) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OpPromotionExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a OpPromotionExpr to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitOpPromotionExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitConjOpExpr(net.sourceforge.czt.oz.ast.ConjOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitConjOpExpr", zedObject);

    ConjOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createConjOpExpr();
      createElement_ = true;
      if (zedObject.getLeftOpExpr() != null) {
        Term term = zedObject.getLeftOpExpr();
        jaxbObject.setLeftOpExpr((OpExpr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightOpExpr() != null) {
        Term term = zedObject.getRightOpExpr();
        jaxbObject.setRightOpExpr((OpExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ConjOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ConjOpExpr to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitConjOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitClassPara(net.sourceforge.czt.oz.ast.ClassPara zedObject)
  {
    getLogger().entering(getClassName(), "visitClassPara", zedObject);

    ClassPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createClassParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createClassPara();
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        Term term = zedObject.getName();
        jaxbObject.setName((DeclName) term.accept(this));
      }
      {
        List list = zedObject.getFormalParameters();
        List newlist = jaxbObject.getFormalParameters();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getVisibility();
        List newlist = jaxbObject.getVisibility();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getInheritedClass();
        List newlist = jaxbObject.getInheritedClass();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getLocalDef();
        List newlist = jaxbObject.getLocalDef();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getState() != null) {
        Term term = zedObject.getState();
        jaxbObject.setState((State) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getInitialState() != null) {
        Term term = zedObject.getInitialState();
        jaxbObject.setInitialState((InitialState) term.accept(this));
      }
      {
        List list = zedObject.getOperation();
        List newlist = jaxbObject.getOperation();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ClassPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitClassPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitOperation(net.sourceforge.czt.oz.ast.Operation zedObject)
  {
    getLogger().entering(getClassName(), "visitOperation", zedObject);

    Operation jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createOperationElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createOperation();
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        Term term = zedObject.getName();
        jaxbObject.setName((DeclName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getOpExpr() != null) {
        Term term = zedObject.getOpExpr();
        jaxbObject.setOpExpr((OpExpr) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getBox() != null) {
        jaxbObject.setBox(zedObject.getBox().toString());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Operation to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a Operation to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitOperation", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitContainmentExpr(net.sourceforge.czt.oz.ast.ContainmentExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitContainmentExpr", zedObject);

    ContainmentExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createContainmentExpr();
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ContainmentExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitContainmentExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInitialState(net.sourceforge.czt.oz.ast.InitialState zedObject)
  {
    getLogger().entering(getClassName(), "visitInitialState", zedObject);

    InitialState jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInitialStateElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createInitialState();
      }
      createElement_ = true;
      if (zedObject.getPred() != null) {
        Term term = zedObject.getPred();
        jaxbObject.setPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InitialState to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a InitialState to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitInitialState", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitClassUnionExpr(net.sourceforge.czt.oz.ast.ClassUnionExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitClassUnionExpr", zedObject);

    ClassUnionExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createClassUnionExpr();
      createElement_ = true;
      if (zedObject.getLeftExpr() != null) {
        Term term = zedObject.getLeftExpr();
        jaxbObject.setLeftExpr((Expr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightExpr() != null) {
        Term term = zedObject.getRightExpr();
        jaxbObject.setRightExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ClassUnionExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitClassUnionExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitDistSeqOpExpr(net.sourceforge.czt.oz.ast.DistSeqOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitDistSeqOpExpr", zedObject);

    DistSeqOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createDistSeqOpExpr();
      createElement_ = true;
      if (zedObject.getSchText() != null) {
        Term term = zedObject.getSchText();
        jaxbObject.setSchText((SchText) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getOpExpr() != null) {
        Term term = zedObject.getOpExpr();
        jaxbObject.setOpExpr((OpExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a DistSeqOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a DistSeqOpExpr to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitDistSeqOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitScopeEnrichOpExpr(net.sourceforge.czt.oz.ast.ScopeEnrichOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitScopeEnrichOpExpr", zedObject);

    ScopeEnrichOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createScopeEnrichOpExpr();
      createElement_ = true;
      if (zedObject.getLeftOpExpr() != null) {
        Term term = zedObject.getLeftOpExpr();
        jaxbObject.setLeftOpExpr((OpExpr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightOpExpr() != null) {
        Term term = zedObject.getRightOpExpr();
        jaxbObject.setRightOpExpr((OpExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ScopeEnrichOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ScopeEnrichOpExpr to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitScopeEnrichOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitPredExpr(net.sourceforge.czt.oz.ast.PredExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitPredExpr", zedObject);

    PredExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createPredExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createPredExpr();
      }
      createElement_ = true;
      if (zedObject.getPred() != null) {
        Term term = zedObject.getPred();
        jaxbObject.setPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PredExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitPredExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRenameOpExpr(net.sourceforge.czt.oz.ast.RenameOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitRenameOpExpr", zedObject);

    RenameOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRenameOpExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createRenameOpExpr();
      }
      createElement_ = true;
      if (zedObject.getOpExpr() != null) {
        Term term = zedObject.getOpExpr();
        jaxbObject.setOpExpr((OpExpr) term.accept(this));
      }
      {
        List list = zedObject.getNameNamePair();
        List newlist = jaxbObject.getNameNamePair();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RenameOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a RenameOpExpr to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitRenameOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitExChoiceOpExpr(net.sourceforge.czt.oz.ast.ExChoiceOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitExChoiceOpExpr", zedObject);

    ExChoiceOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createExChoiceOpExpr();
      createElement_ = true;
      if (zedObject.getLeftOpExpr() != null) {
        Term term = zedObject.getLeftOpExpr();
        jaxbObject.setLeftOpExpr((OpExpr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightOpExpr() != null) {
        Term term = zedObject.getRightOpExpr();
        jaxbObject.setRightOpExpr((OpExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExChoiceOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ExChoiceOpExpr to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitExChoiceOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParallelOpExpr(net.sourceforge.czt.oz.ast.ParallelOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelOpExpr", zedObject);

    ParallelOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParallelOpExpr();
      createElement_ = true;
      if (zedObject.getLeftOpExpr() != null) {
        Term term = zedObject.getLeftOpExpr();
        jaxbObject.setLeftOpExpr((OpExpr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightOpExpr() != null) {
        Term term = zedObject.getRightOpExpr();
        jaxbObject.setRightOpExpr((OpExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ParallelOpExpr to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitParallelOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitAnonOpExpr(net.sourceforge.czt.oz.ast.AnonOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitAnonOpExpr", zedObject);

    AnonOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createAnonOpExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createAnonOpExpr();
      }
      createElement_ = true;
      if (zedObject.getOpText() != null) {
        Term term = zedObject.getOpText();
        jaxbObject.setOpText((OpText) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AnonOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a AnonOpExpr to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitAnonOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }
}
