
/*
THIS FILE WAS GENERATED BY GNAST.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

************************************************************

Copyright 2003 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.oz.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.base.ast.Term;

import net.sourceforge.czt.z.jaxb.gen.*;
import net.sourceforge.czt.oz.jaxb.gen.*;
import org.w3._2001.xmlschema.*;

/**
 * The marshaller responsible for serializing XML data.
 *
 * @author Gnast version 0.1
 */
public class AstToJaxb
  extends net.sourceforge.czt.z.jaxb.AstToJaxb
  implements net.sourceforge.czt.oz.visitor.OzVisitor,
             net.sourceforge.czt.base.visitor.TermVisitor
{

  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  private net.sourceforge.czt.oz.jaxb.gen.ObjectFactory
    objectFactory_ = new net.sourceforge.czt.oz.jaxb.gen.ObjectFactory();
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    annsObjectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();
  private org.w3._2001.xmlschema.ObjectFactory
    anyTypeObjectFactory_ = new org.w3._2001.xmlschema.ObjectFactory();

  /**
   * A map that maps id's to the corresponding Object.
   */
  private Map hash_ = new HashMap();

  private String getClassName()
  {
    return "net.sourceforge.czt.oz.jaxb.AstToJaxb";
  }

  private Logger getLogger()
  {
    return Logger.getLogger(getClassName());
  }

  public Object visitTerm(Term zedObject)
  {
    throw(new UnsupportedOperationException("Unexpected element "
                                            + zedObject.getClass().getName()));
  }


  public Object visitRefNameList(net.sourceforge.czt.oz.ast.RefNameList zedObject)
  {
    getLogger().entering(getClassName(), "visitRefNameList", zedObject);

    RefNameList jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRefNameListElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createRefNameList();
      }
      {
        java.util.List list = zedObject.getName();
        java.util.List newlist = jaxbObject.getName();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RefNameList to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a RefNameList to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitRefNameList", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitPromotedAttrExpr(net.sourceforge.czt.oz.ast.PromotedAttrExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitPromotedAttrExpr", zedObject);

    PromotedAttrExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createPromotedAttrExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createPromotedAttrExpr();
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRefName() != null) {
        Term term = zedObject.getRefName();
        jaxbObject.setRefName((RefName) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PromotedAttrExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitPromotedAttrExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRenameList(net.sourceforge.czt.oz.ast.RenameList zedObject)
  {
    getLogger().entering(getClassName(), "visitRenameList", zedObject);

    RenameList jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRenameListElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createRenameList();
      }
      {
        java.util.List list = zedObject.getNameNamePair();
        java.util.List newlist = jaxbObject.getNameNamePair();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RenameList to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a RenameList to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitRenameList", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitActualParameters(net.sourceforge.czt.oz.ast.ActualParameters zedObject)
  {
    getLogger().entering(getClassName(), "visitActualParameters", zedObject);

    ActualParameters jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createActualParametersElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createActualParameters();
      }
      {
        java.util.List list = zedObject.getExpr();
        java.util.List newlist = jaxbObject.getExpr();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActualParameters to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ActualParameters to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitActualParameters", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitDistConjOpExpr(net.sourceforge.czt.oz.ast.DistConjOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitDistConjOpExpr", zedObject);

    DistConjOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createDistConjOpExpr();
      createElement_ = true;
      if (zedObject.getMainOpExpr() != null) {
        Term term = zedObject.getMainOpExpr();
        jaxbObject.setMainOpExpr((MainOpExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a DistConjOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a DistConjOpExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitDistConjOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitBasicOpExpr(net.sourceforge.czt.oz.ast.BasicOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitBasicOpExpr", zedObject);

    BasicOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createBasicOpExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createBasicOpExpr();
      }
      createElement_ = false;
      if (zedObject.getDeltaList() != null) {
        Term term = zedObject.getDeltaList();
        jaxbObject.setDeltaList((RefNameList) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getSchText() != null) {
        Term term = zedObject.getSchText();
        jaxbObject.setSchText((SchText) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a BasicOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a BasicOpExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitBasicOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitMainOpExpr(net.sourceforge.czt.oz.ast.MainOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitMainOpExpr", zedObject);

    MainOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createMainOpExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createMainOpExpr();
      }
      createElement_ = true;
      if (zedObject.getSchText() != null) {
        Term term = zedObject.getSchText();
        jaxbObject.setSchText((SchText) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getOperationExpr() != null) {
        Term term = zedObject.getOperationExpr();
        jaxbObject.setOperationExpr((OperationExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a MainOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a MainOpExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitMainOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitPolyExpr(net.sourceforge.czt.oz.ast.PolyExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitPolyExpr", zedObject);

    PolyExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createPolyExpr();
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PolyExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitPolyExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitHideOpExpr(net.sourceforge.czt.oz.ast.HideOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitHideOpExpr", zedObject);

    HideOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createHideOpExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createHideOpExpr();
      }
      createElement_ = true;
      if (zedObject.getOperationExpr() != null) {
        Term term = zedObject.getOperationExpr();
        jaxbObject.setOperationExpr((OperationExpr) term.accept(this));
      }
      {
        java.util.List list = zedObject.getHideName();
        java.util.List newlist = jaxbObject.getHideName();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a HideOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a HideOpExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitHideOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSeqOpExpr(net.sourceforge.czt.oz.ast.SeqOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqOpExpr", zedObject);

    SeqOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSeqOpExpr();
      createElement_ = true;
      if (zedObject.getLeftOperationExpr() != null) {
        Term term = zedObject.getLeftOperationExpr();
        jaxbObject.setLeftOperationExpr((OperationExpr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightOperationExpr() != null) {
        Term term = zedObject.getRightOperationExpr();
        jaxbObject.setRightOperationExpr((OperationExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a SeqOpExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitSeqOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSelfExpr(net.sourceforge.czt.oz.ast.SelfExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitSelfExpr", zedObject);

    SelfExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSelfExpr();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SelfExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSelfExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInheritedClass(net.sourceforge.czt.oz.ast.InheritedClass zedObject)
  {
    getLogger().entering(getClassName(), "visitInheritedClass", zedObject);

    InheritedClass jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInheritedClassElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createInheritedClass();
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        Term term = zedObject.getName();
        jaxbObject.setName((RefName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getActualParameters() != null) {
        Term term = zedObject.getActualParameters();
        jaxbObject.setActualParameters((ActualParameters) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRenameList() != null) {
        Term term = zedObject.getRenameList();
        jaxbObject.setRenameList((RenameList) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InheritedClass to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a InheritedClass to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitInheritedClass", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitDistChoiceOpExpr(net.sourceforge.czt.oz.ast.DistChoiceOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitDistChoiceOpExpr", zedObject);

    DistChoiceOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createDistChoiceOpExpr();
      createElement_ = true;
      if (zedObject.getMainOpExpr() != null) {
        Term term = zedObject.getMainOpExpr();
        jaxbObject.setMainOpExpr((MainOpExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a DistChoiceOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a DistChoiceOpExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitDistChoiceOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitAssoParallelOpExpr(net.sourceforge.czt.oz.ast.AssoParallelOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitAssoParallelOpExpr", zedObject);

    AssoParallelOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createAssoParallelOpExpr();
      createElement_ = true;
      if (zedObject.getLeftOperationExpr() != null) {
        Term term = zedObject.getLeftOperationExpr();
        jaxbObject.setLeftOperationExpr((OperationExpr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightOperationExpr() != null) {
        Term term = zedObject.getRightOperationExpr();
        jaxbObject.setRightOperationExpr((OperationExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AssoParallelOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a AssoParallelOpExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitAssoParallelOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitState(net.sourceforge.czt.oz.ast.State zedObject)
  {
    getLogger().entering(getClassName(), "visitState", zedObject);

    State jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createStateElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createState();
      }
      {
        java.util.List list = zedObject.getDecl();
        java.util.List newlist = jaxbObject.getDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getSecondaryAttributes() != null) {
        Term term = zedObject.getSecondaryAttributes();
        jaxbObject.setSecondaryAttributes((SecondaryAttributes) term.accept(this));
      }
      {
        java.util.List list = zedObject.getPred();
        java.util.List newlist = jaxbObject.getPred();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a State to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a State to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitState", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitPromotedInitPred(net.sourceforge.czt.oz.ast.PromotedInitPred zedObject)
  {
    getLogger().entering(getClassName(), "visitPromotedInitPred", zedObject);

    PromotedInitPred jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createPromotedInitPredElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createPromotedInitPred();
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PromotedInitPred to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitPromotedInitPred", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitOpPromotionExpr(net.sourceforge.czt.oz.ast.OpPromotionExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitOpPromotionExpr", zedObject);

    OpPromotionExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createOpPromotionExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createOpPromotionExpr();
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getOpName() != null) {
        Term term = zedObject.getOpName();
        jaxbObject.setOpName((RefName) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OpPromotionExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a OpPromotionExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitOpPromotionExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitConjOpExpr(net.sourceforge.czt.oz.ast.ConjOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitConjOpExpr", zedObject);

    ConjOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createConjOpExpr();
      createElement_ = true;
      if (zedObject.getLeftOperationExpr() != null) {
        Term term = zedObject.getLeftOperationExpr();
        jaxbObject.setLeftOperationExpr((OperationExpr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightOperationExpr() != null) {
        Term term = zedObject.getRightOperationExpr();
        jaxbObject.setRightOperationExpr((OperationExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ConjOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ConjOpExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitConjOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitClassPara(net.sourceforge.czt.oz.ast.ClassPara zedObject)
  {
    getLogger().entering(getClassName(), "visitClassPara", zedObject);

    ClassPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createClassParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createClassPara();
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        Term term = zedObject.getName();
        jaxbObject.setName((DeclName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getFormalParameters() != null) {
        Term term = zedObject.getFormalParameters();
        jaxbObject.setFormalParameters((FormalParameters) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getVisibilityList() != null) {
        Term term = zedObject.getVisibilityList();
        jaxbObject.setVisibilityList((RefNameList) term.accept(this));
      }
      {
        java.util.List list = zedObject.getInheritedClass();
        java.util.List newlist = jaxbObject.getInheritedClass();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getLocalDef() != null) {
        Term term = zedObject.getLocalDef();
        jaxbObject.setLocalDef((LocalDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getState() != null) {
        Term term = zedObject.getState();
        jaxbObject.setState((State) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getInitialState() != null) {
        Term term = zedObject.getInitialState();
        jaxbObject.setInitialState((InitialState) term.accept(this));
      }
      {
        java.util.List list = zedObject.getOperation();
        java.util.List newlist = jaxbObject.getOperation();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ClassPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitClassPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParenOpExpr(net.sourceforge.czt.oz.ast.ParenOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitParenOpExpr", zedObject);

    ParenOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParenOpExpr();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParenOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ParenOpExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitParenOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitOperation(net.sourceforge.czt.oz.ast.Operation zedObject)
  {
    getLogger().entering(getClassName(), "visitOperation", zedObject);

    Operation jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createOperationElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createOperation();
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        Term term = zedObject.getName();
        jaxbObject.setName((DeclName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getOperationBoxExpr() != null) {
        Term term = zedObject.getOperationBoxExpr();
        jaxbObject.setOperationBoxExpr((OperationBoxExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Operation to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a Operation to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitOperation", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitLocalDef(net.sourceforge.czt.oz.ast.LocalDef zedObject)
  {
    getLogger().entering(getClassName(), "visitLocalDef", zedObject);

    LocalDef jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createLocalDefElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createLocalDef();
      }
      {
        java.util.List list = zedObject.getGivenPara();
        java.util.List newlist = jaxbObject.getGivenPara();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        java.util.List list = zedObject.getAxPara();
        java.util.List newlist = jaxbObject.getAxPara();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        java.util.List list = zedObject.getFreePara();
        java.util.List newlist = jaxbObject.getFreePara();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a LocalDef to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a LocalDef to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitLocalDef", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitContainmentExpr(net.sourceforge.czt.oz.ast.ContainmentExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitContainmentExpr", zedObject);

    ContainmentExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createContainmentExpr();
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ContainmentExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitContainmentExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInitialState(net.sourceforge.czt.oz.ast.InitialState zedObject)
  {
    getLogger().entering(getClassName(), "visitInitialState", zedObject);

    InitialState jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInitialStateElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createInitialState();
      }
      {
        java.util.List list = zedObject.getPred();
        java.util.List newlist = jaxbObject.getPred();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InitialState to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a InitialState to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitInitialState", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitOperationBox(net.sourceforge.czt.oz.ast.OperationBox zedObject)
  {
    getLogger().entering(getClassName(), "visitOperationBox", zedObject);

    OperationBox jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createOperationBoxElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createOperationBox();
      }
      createElement_ = false;
      if (zedObject.getDeltaList() != null) {
        Term term = zedObject.getDeltaList();
        jaxbObject.setDeltaList((RefNameList) term.accept(this));
      }
      {
        java.util.List list = zedObject.getDecl();
        java.util.List newlist = jaxbObject.getDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        java.util.List list = zedObject.getPred();
        java.util.List newlist = jaxbObject.getPred();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OperationBox to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a OperationBox to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitOperationBox", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitDistSeqOpExpr(net.sourceforge.czt.oz.ast.DistSeqOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitDistSeqOpExpr", zedObject);

    DistSeqOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createDistSeqOpExpr();
      createElement_ = true;
      if (zedObject.getMainOpExpr() != null) {
        Term term = zedObject.getMainOpExpr();
        jaxbObject.setMainOpExpr((MainOpExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a DistSeqOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a DistSeqOpExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitDistSeqOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitScopeEnrichOpExpr(net.sourceforge.czt.oz.ast.ScopeEnrichOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitScopeEnrichOpExpr", zedObject);

    ScopeEnrichOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createScopeEnrichOpExpr();
      createElement_ = true;
      if (zedObject.getLeftOperationExpr() != null) {
        Term term = zedObject.getLeftOperationExpr();
        jaxbObject.setLeftOperationExpr((OperationExpr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightOperationExpr() != null) {
        Term term = zedObject.getRightOperationExpr();
        jaxbObject.setRightOperationExpr((OperationExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ScopeEnrichOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ScopeEnrichOpExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitScopeEnrichOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSecondaryAttributes(net.sourceforge.czt.oz.ast.SecondaryAttributes zedObject)
  {
    getLogger().entering(getClassName(), "visitSecondaryAttributes", zedObject);

    SecondaryAttributes jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSecondaryAttributesElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createSecondaryAttributes();
      }
      {
        java.util.List list = zedObject.getVarDecl();
        java.util.List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SecondaryAttributes to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a SecondaryAttributes to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitSecondaryAttributes", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRenameOpExpr(net.sourceforge.czt.oz.ast.RenameOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitRenameOpExpr", zedObject);

    RenameOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRenameOpExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createRenameOpExpr();
      }
      createElement_ = true;
      if (zedObject.getOperationExpr() != null) {
        Term term = zedObject.getOperationExpr();
        jaxbObject.setOperationExpr((OperationExpr) term.accept(this));
      }
      {
        java.util.List list = zedObject.getNameNamePair();
        java.util.List newlist = jaxbObject.getNameNamePair();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RenameOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a RenameOpExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitRenameOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitExChoiceOpExpr(net.sourceforge.czt.oz.ast.ExChoiceOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitExChoiceOpExpr", zedObject);

    ExChoiceOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createExChoiceOpExpr();
      createElement_ = true;
      if (zedObject.getLeftOperationExpr() != null) {
        Term term = zedObject.getLeftOperationExpr();
        jaxbObject.setLeftOperationExpr((OperationExpr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightOperationExpr() != null) {
        Term term = zedObject.getRightOperationExpr();
        jaxbObject.setRightOperationExpr((OperationExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExChoiceOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ExChoiceOpExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitExChoiceOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParallelOpExpr(net.sourceforge.czt.oz.ast.ParallelOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelOpExpr", zedObject);

    ParallelOpExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParallelOpExpr();
      createElement_ = true;
      if (zedObject.getLeftOperationExpr() != null) {
        Term term = zedObject.getLeftOperationExpr();
        jaxbObject.setLeftOperationExpr((OperationExpr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightOperationExpr() != null) {
        Term term = zedObject.getRightOperationExpr();
        jaxbObject.setRightOperationExpr((OperationExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelOpExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ParallelOpExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitParallelOpExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitFormalParameters(net.sourceforge.czt.oz.ast.FormalParameters zedObject)
  {
    getLogger().entering(getClassName(), "visitFormalParameters", zedObject);

    FormalParameters jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createFormalParametersElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createFormalParameters();
      }
      {
        java.util.List list = zedObject.getName();
        java.util.List newlist = jaxbObject.getName();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a FormalParameters to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          java.util.List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a FormalParameters to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitFormalParameters", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }
}
