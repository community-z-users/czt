
/*
THIS FILE WAS GENERATED BY GNAST.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

************************************************************

Copyright 2003 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.oz.dom;

import java.util.logging.Logger;
import java.util.*;
import org.w3c.dom.*;

import net.sourceforge.czt.oz.ast.*;
import net.sourceforge.czt.oz.visitor.*;
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.visitor.*;

/**
 * Transformer from AST classes to a DOM tree.
 *
 * @author Gnast version 0.1
 */
public class AstToDom extends net.sourceforge.czt.z.dom.AstToDom implements OzVisitor
{
  private static final Logger sLogger =
    Logger.getLogger("net.sourceforge.czt.oz.dom.AstToDom");



  public Object visitRenameList(RenameList zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitRenameList", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "RenameList");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getRenameExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getRenameExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitRenameList", elem);
    return elem;
  }

  public Object visitActualParameters(ActualParameters zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitActualParameters", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "ActualParameters");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getExpr().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof net.sourceforge.czt.base.ast.Term) {
	  Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(getDocument().createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitActualParameters", elem);
    return elem;
  }

  public Object visitDistConjOpExpr(DistConjOpExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitDistConjOpExpr", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "DistConjOpExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getMainOpExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getMainOpExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitDistConjOpExpr", elem);
    return elem;
  }

  public Object visitBasicOpExpr(BasicOpExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitBasicOpExpr", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "BasicOpExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getDeltaList()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getDeltaList()).accept(this));
      }
      if (zedObject.getSchText()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getSchText()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitBasicOpExpr", elem);
    return elem;
  }

  public Object visitMainOpExpr(MainOpExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitMainOpExpr", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "MainOpExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getSchText()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getSchText()).accept(this));
      }
      if (zedObject.getOperationExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getOperationExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitMainOpExpr", elem);
    return elem;
  }

  public Object visitHideOpExpr(HideOpExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitHideOpExpr", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "HideOpExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getOperationExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getOperationExpr()).accept(this));
      }
      for(Iterator iter=zedObject.getHideName().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof net.sourceforge.czt.base.ast.Term) {
	  Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(getDocument().createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitHideOpExpr", elem);
    return elem;
  }

  public Object visitStringListType(StringListType zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitStringListType", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "StringListType");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getName().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof net.sourceforge.czt.base.ast.Term) {
	  Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(getDocument().createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitStringListType", elem);
    return elem;
  }

  public Object visitSeqOpExpr(SeqOpExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitSeqOpExpr", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "SeqOpExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getLeftOperationExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getLeftOperationExpr()).accept(this));
      }
      if (zedObject.getRightOperationExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getRightOperationExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitSeqOpExpr", elem);
    return elem;
  }

  public Object visitInheritedClass(InheritedClass zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitInheritedClass", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "InheritedClass");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getName()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getName()).accept(this));
      }
      if (zedObject.getActualParameters()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getActualParameters()).accept(this));
      }
      if (zedObject.getRenameList()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getRenameList()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitInheritedClass", elem);
    return elem;
  }

  public Object visitOperationExpr(OperationExpr zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitDistChoiceOpExpr(DistChoiceOpExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitDistChoiceOpExpr", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "DistChoiceOpExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getMainOpExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getMainOpExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitDistChoiceOpExpr", elem);
    return elem;
  }

  public Object visitOperationBoxExpr(OperationBoxExpr zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitAssoParallelOpExpr(AssoParallelOpExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitAssoParallelOpExpr", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "AssoParallelOpExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getLeftOperationExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getLeftOperationExpr()).accept(this));
      }
      if (zedObject.getRightOperationExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getRightOperationExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitAssoParallelOpExpr", elem);
    return elem;
  }

  public Object visitState(State zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitState", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "State");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getDecl().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof net.sourceforge.czt.base.ast.Term) {
	  Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(getDocument().createTextNode(o.toString()));
	}
      }
      for(Iterator iter=zedObject.getSecondaryAttributes().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof net.sourceforge.czt.base.ast.Term) {
	  Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(getDocument().createTextNode(o.toString()));
	}
      }
      for(Iterator iter=zedObject.getPred().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof net.sourceforge.czt.base.ast.Term) {
	  Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(getDocument().createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitState", elem);
    return elem;
  }

  public Object visitConjOpExpr(ConjOpExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitConjOpExpr", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "ConjOpExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getLeftOperationExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getLeftOperationExpr()).accept(this));
      }
      if (zedObject.getRightOperationExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getRightOperationExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitConjOpExpr", elem);
    return elem;
  }

  public Object visitOpPromotionExpr(OpPromotionExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitOpPromotionExpr", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "OpPromotionExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getExpr()).accept(this));
      }
      if (zedObject.getOpName()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getOpName()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitOpPromotionExpr", elem);
    return elem;
  }

  public Object visitClassPara(ClassPara zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitClassPara", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "ClassPara");
    try {
      if (zedObject.getName()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getName()).accept(this));
      }
      if (zedObject.getFormalParameters()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getFormalParameters()).accept(this));
      }
      if (zedObject.getVisibilityList()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getVisibilityList()).accept(this));
      }
      for(Iterator iter=zedObject.getInheritedClass().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof net.sourceforge.czt.base.ast.Term) {
	  Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(getDocument().createTextNode(o.toString()));
	}
      }
      if (zedObject.getLocalDef()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getLocalDef()).accept(this));
      }
      if (zedObject.getState()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getState()).accept(this));
      }
      if (zedObject.getInitialState()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getInitialState()).accept(this));
      }
      for(Iterator iter=zedObject.getOperation().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof net.sourceforge.czt.base.ast.Term) {
	  Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(getDocument().createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitClassPara", elem);
    return elem;
  }

  public Object visitParenOpExpr(ParenOpExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitParenOpExpr", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "ParenOpExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitParenOpExpr", elem);
    return elem;
  }

  public Object visitOperation(Operation zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitOperation", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Operation");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getName()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getName()).accept(this));
      }
      if (zedObject.getOperationBoxExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getOperationBoxExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitOperation", elem);
    return elem;
  }

  public Object visitLocalDef(LocalDef zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitLocalDef", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "LocalDef");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getGivenPara().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof net.sourceforge.czt.base.ast.Term) {
	  Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(getDocument().createTextNode(o.toString()));
	}
      }
      for(Iterator iter=zedObject.getAxPara().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof net.sourceforge.czt.base.ast.Term) {
	  Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(getDocument().createTextNode(o.toString()));
	}
      }
      for(Iterator iter=zedObject.getFreePara().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof net.sourceforge.czt.base.ast.Term) {
	  Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(getDocument().createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitLocalDef", elem);
    return elem;
  }

  public Object visitOperationBox(OperationBox zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitOperationBox", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "OperationBox");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getDeltaList()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getDeltaList()).accept(this));
      }
      for(Iterator iter=zedObject.getDecl().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof net.sourceforge.czt.base.ast.Term) {
	  Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(getDocument().createTextNode(o.toString()));
	}
      }
      for(Iterator iter=zedObject.getPred().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof net.sourceforge.czt.base.ast.Term) {
	  Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(getDocument().createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitOperationBox", elem);
    return elem;
  }

  public Object visitInitialState(InitialState zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitInitialState", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "InitialState");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getPred().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof net.sourceforge.czt.base.ast.Term) {
	  Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(getDocument().createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitInitialState", elem);
    return elem;
  }

  public Object visitDistSeqOpExpr(DistSeqOpExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitDistSeqOpExpr", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "DistSeqOpExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getMainOpExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getMainOpExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitDistSeqOpExpr", elem);
    return elem;
  }

  public Object visitScopeEnrichOpExpr(ScopeEnrichOpExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitScopeEnrichOpExpr", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "ScopeEnrichOpExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getLeftOperationExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getLeftOperationExpr()).accept(this));
      }
      if (zedObject.getRightOperationExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getRightOperationExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitScopeEnrichOpExpr", elem);
    return elem;
  }

  public Object visitSecondaryAttributes(SecondaryAttributes zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitSecondaryAttributes", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "SecondaryAttributes");
    try {
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitSecondaryAttributes", elem);
    return elem;
  }

  public Object visitRenameOpExpr(RenameOpExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitRenameOpExpr", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "RenameOpExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getOperationExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getOperationExpr()).accept(this));
      }
      if (zedObject.getRenameList()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getRenameList()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitRenameOpExpr", elem);
    return elem;
  }

  public Object visitExChoiceOpExpr(ExChoiceOpExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitExChoiceOpExpr", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "ExChoiceOpExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getLeftOperationExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getLeftOperationExpr()).accept(this));
      }
      if (zedObject.getRightOperationExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getRightOperationExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitExChoiceOpExpr", elem);
    return elem;
  }

  public Object visitParallelOpExpr(ParallelOpExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitParallelOpExpr", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "ParallelOpExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getLeftOperationExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getLeftOperationExpr()).accept(this));
      }
      if (zedObject.getRightOperationExpr()!=null) {
        elem.appendChild((Node)((net.sourceforge.czt.base.ast.Term) zedObject.getRightOperationExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitParallelOpExpr", elem);
    return elem;
  }

  public Object visitFormalParameters(FormalParameters zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitFormalParameters", zedObject);
    Element elem = getDocument().createElementNS("http://czt.sourceforge.net/zml", "FormalParameters");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = getDocument().createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof net.sourceforge.czt.base.ast.Term) {
	    Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(getDocument().createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getRefName().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof net.sourceforge.czt.base.ast.Term) {
	  Node node = (Node) ((net.sourceforge.czt.base.ast.Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(getDocument().createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitFormalParameters", elem);
    return elem;
  }
}
