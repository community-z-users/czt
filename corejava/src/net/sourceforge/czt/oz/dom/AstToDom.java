
/*
THIS FILE WAS GENERATED BY GNAST.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

************************************************************

Copyright 2003 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.oz.dom;

import java.util.logging.Logger;
import java.util.*;
import org.w3c.dom.*;

import net.sourceforge.czt.base.ast.Term;

import net.sourceforge.czt.util.CztException;

import net.sourceforge.czt.oz.ast.*;
import net.sourceforge.czt.oz.visitor.*;
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.visitor.*;

/**
 * Transformer from AST classes to a DOM tree.
 *
 * @author Gnast version 0.1
 */
public class AstToDom
  extends net.sourceforge.czt.z.dom.AstToDom
  implements net.sourceforge.czt.oz.visitor.OzVisitor
{
  private Logger getLogger()
  {
    return Logger.getLogger("net.sourceforge.czt.oz.dom.AstToDom");
  }



  public Object visitRefNameList(RefNameList zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitRefNameList", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "RefNameList");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getName().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a RefNameList to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitRefNameList", elem);
    return elem;
  }

  public Object visitPromotedAttrExpr(PromotedAttrExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitPromotedAttrExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "PromotedAttrExpr");
    try {
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRefName() != null) {
        Term term = (Term) zedObject.getRefName();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a PromotedAttrExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitPromotedAttrExpr", elem);
    return elem;
  }

  public Object visitRenameList(RenameList zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitRenameList", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "RenameList");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getNameNamePair().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a RenameList to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitRenameList", elem);
    return elem;
  }

  public Object visitActualParameters(ActualParameters zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitActualParameters", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ActualParameters");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getExpr().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ActualParameters to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitActualParameters", elem);
    return elem;
  }

  public Object visitDistConjOpExpr(DistConjOpExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitDistConjOpExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "DistConjOpExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getMainOpExpr() != null) {
        Term term = (Term) zedObject.getMainOpExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a DistConjOpExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitDistConjOpExpr", elem);
    return elem;
  }

  public Object visitBasicOpExpr(BasicOpExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitBasicOpExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "BasicOpExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getDeltaList() != null) {
        Term term = (Term) zedObject.getDeltaList();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getSchText() != null) {
        Term term = (Term) zedObject.getSchText();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a BasicOpExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitBasicOpExpr", elem);
    return elem;
  }

  public Object visitMainOpExpr(MainOpExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitMainOpExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "MainOpExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getSchText() != null) {
        Term term = (Term) zedObject.getSchText();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getOperationExpr() != null) {
        Term term = (Term) zedObject.getOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a MainOpExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitMainOpExpr", elem);
    return elem;
  }

  public Object visitPolyExpr(PolyExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitPolyExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "PolyExpr");
    try {
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a PolyExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitPolyExpr", elem);
    return elem;
  }

  public Object visitHideOpExpr(HideOpExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitHideOpExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "HideOpExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getOperationExpr() != null) {
        Term term = (Term) zedObject.getOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      for (Iterator iter = zedObject.getHideName().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a HideOpExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitHideOpExpr", elem);
    return elem;
  }

  public Object visitSeqOpExpr(SeqOpExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitSeqOpExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "SeqOpExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftOperationExpr() != null) {
        Term term = (Term) zedObject.getLeftOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightOperationExpr() != null) {
        Term term = (Term) zedObject.getRightOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a SeqOpExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitSeqOpExpr", elem);
    return elem;
  }

  public Object visitSelfExpr(SelfExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitSelfExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "SelfExpr");
    try {
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a SelfExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitSelfExpr", elem);
    return elem;
  }

  public Object visitInheritedClass(InheritedClass zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitInheritedClass", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "InheritedClass");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getName() != null) {
        Term term = (Term) zedObject.getName();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getActualParameters() != null) {
        Term term = (Term) zedObject.getActualParameters();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRenameList() != null) {
        Term term = (Term) zedObject.getRenameList();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a InheritedClass to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitInheritedClass", elem);
    return elem;
  }

  public Object visitOperationExpr(OperationExpr zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitDistChoiceOpExpr(DistChoiceOpExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitDistChoiceOpExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "DistChoiceOpExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getMainOpExpr() != null) {
        Term term = (Term) zedObject.getMainOpExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a DistChoiceOpExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitDistChoiceOpExpr", elem);
    return elem;
  }

  public Object visitOperationBoxExpr(OperationBoxExpr zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitAssoParallelOpExpr(AssoParallelOpExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitAssoParallelOpExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "AssoParallelOpExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftOperationExpr() != null) {
        Term term = (Term) zedObject.getLeftOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightOperationExpr() != null) {
        Term term = (Term) zedObject.getRightOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a AssoParallelOpExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitAssoParallelOpExpr", elem);
    return elem;
  }

  public Object visitState(State zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitState", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "State");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getDecl().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      if (zedObject.getSecondaryAttributes() != null) {
        Term term = (Term) zedObject.getSecondaryAttributes();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      for (Iterator iter = zedObject.getPred().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a State to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitState", elem);
    return elem;
  }

  public Object visitPromotedInitPred(PromotedInitPred zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitPromotedInitPred", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "PromotedInitPred");
    try {
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a PromotedInitPred to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitPromotedInitPred", elem);
    return elem;
  }

  public Object visitOpPromotionExpr(OpPromotionExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitOpPromotionExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "OpPromotionExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getOpName() != null) {
        Term term = (Term) zedObject.getOpName();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a OpPromotionExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitOpPromotionExpr", elem);
    return elem;
  }

  public Object visitConjOpExpr(ConjOpExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitConjOpExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ConjOpExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftOperationExpr() != null) {
        Term term = (Term) zedObject.getLeftOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightOperationExpr() != null) {
        Term term = (Term) zedObject.getRightOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ConjOpExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitConjOpExpr", elem);
    return elem;
  }

  public Object visitClassPara(ClassPara zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitClassPara", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ClassPara");
    try {
      if (zedObject.getName() != null) {
        Term term = (Term) zedObject.getName();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getFormalParameters() != null) {
        Term term = (Term) zedObject.getFormalParameters();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getVisibilityList() != null) {
        Term term = (Term) zedObject.getVisibilityList();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      for (Iterator iter = zedObject.getInheritedClass().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      if (zedObject.getLocalDef() != null) {
        Term term = (Term) zedObject.getLocalDef();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getState() != null) {
        Term term = (Term) zedObject.getState();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getInitialState() != null) {
        Term term = (Term) zedObject.getInitialState();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      for (Iterator iter = zedObject.getOperation().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ClassPara to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitClassPara", elem);
    return elem;
  }

  public Object visitParenOpExpr(ParenOpExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitParenOpExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ParenOpExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ParenOpExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitParenOpExpr", elem);
    return elem;
  }

  public Object visitOperation(Operation zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitOperation", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "Operation");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getName() != null) {
        Term term = (Term) zedObject.getName();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getOperationBoxExpr() != null) {
        Term term = (Term) zedObject.getOperationBoxExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a Operation to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitOperation", elem);
    return elem;
  }

  public Object visitLocalDef(LocalDef zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitLocalDef", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "LocalDef");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getGivenPara().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      for (Iterator iter = zedObject.getAxPara().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      for (Iterator iter = zedObject.getFreePara().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a LocalDef to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitLocalDef", elem);
    return elem;
  }

  public Object visitContainmentExpr(ContainmentExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitContainmentExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ContainmentExpr");
    try {
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ContainmentExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitContainmentExpr", elem);
    return elem;
  }

  public Object visitInitialState(InitialState zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitInitialState", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "InitialState");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getPred().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a InitialState to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitInitialState", elem);
    return elem;
  }

  public Object visitOperationBox(OperationBox zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitOperationBox", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "OperationBox");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getDeltaList() != null) {
        Term term = (Term) zedObject.getDeltaList();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      for (Iterator iter = zedObject.getDecl().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      for (Iterator iter = zedObject.getPred().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a OperationBox to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitOperationBox", elem);
    return elem;
  }

  public Object visitDistSeqOpExpr(DistSeqOpExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitDistSeqOpExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "DistSeqOpExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getMainOpExpr() != null) {
        Term term = (Term) zedObject.getMainOpExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a DistSeqOpExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitDistSeqOpExpr", elem);
    return elem;
  }

  public Object visitScopeEnrichOpExpr(ScopeEnrichOpExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitScopeEnrichOpExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ScopeEnrichOpExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftOperationExpr() != null) {
        Term term = (Term) zedObject.getLeftOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightOperationExpr() != null) {
        Term term = (Term) zedObject.getRightOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ScopeEnrichOpExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitScopeEnrichOpExpr", elem);
    return elem;
  }

  public Object visitSecondaryAttributes(SecondaryAttributes zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitSecondaryAttributes", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "SecondaryAttributes");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getVarDecl().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a SecondaryAttributes to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitSecondaryAttributes", elem);
    return elem;
  }

  public Object visitRenameOpExpr(RenameOpExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitRenameOpExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "RenameOpExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getOperationExpr() != null) {
        Term term = (Term) zedObject.getOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      for (Iterator iter = zedObject.getNameNamePair().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a RenameOpExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitRenameOpExpr", elem);
    return elem;
  }

  public Object visitExChoiceOpExpr(ExChoiceOpExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitExChoiceOpExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ExChoiceOpExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftOperationExpr() != null) {
        Term term = (Term) zedObject.getLeftOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightOperationExpr() != null) {
        Term term = (Term) zedObject.getRightOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ExChoiceOpExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitExChoiceOpExpr", elem);
    return elem;
  }

  public Object visitParallelOpExpr(ParallelOpExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitParallelOpExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ParallelOpExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftOperationExpr() != null) {
        Term term = (Term) zedObject.getLeftOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightOperationExpr() != null) {
        Term term = (Term) zedObject.getRightOperationExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ParallelOpExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitParallelOpExpr", elem);
    return elem;
  }

  public Object visitFormalParameters(FormalParameters zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitFormalParameters", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "FormalParameters");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getName().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a FormalParameters to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitFormalParameters", elem);
    return elem;
  }
}
