
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactoryImpl.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.oz.impl;

import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.oz.ast.*;

/**
 * <p>An implementation of the object factory for constructing
 * concrete Z terms.  Each factory method returns an instance
 * of the corresponding class provided in this package.</p>
 *
 * @author Gnast version 0.1
 */
public class OzFactoryImpl
  extends net.sourceforge.czt.z.impl.ZFactoryImpl
  implements net.sourceforge.czt.oz.ast.OzFactory
{
  public SecondaryDecl createSecondaryDecl()
  {
    SecondaryDecl zedObject = new SecondaryDeclImpl();
    return zedObject;
  }

  public SecondaryDecl createSecondaryDecl(net.sourceforge.czt.z.ast.Decl decl)
  {
    SecondaryDecl zedObject = createSecondaryDecl();
    zedObject.setDecl(decl);
    return zedObject;
  }

  public ClassRefType createClassRefType()
  {
    ClassRefType zedObject = new ClassRefTypeImpl();
    return zedObject;
  }

  public ClassRefType createClassRefType(ClassSig classSig, ClassRef thisClass, java.util.List superClass, VisibilityList visibilityList)
  {
    ClassRefType zedObject = createClassRefType();
    zedObject.setClassSig(classSig);
    zedObject.setThisClass(thisClass);
    if (superClass != null) {
      zedObject.getSuperClass().addAll(superClass);
    }
    zedObject.setVisibilityList(visibilityList);
    return zedObject;
  }

  public ClassRef createClassRef()
  {
    ClassRef zedObject = new ClassRefImpl();
    return zedObject;
  }

  public ClassRef createClassRef(net.sourceforge.czt.z.ast.RefName refName, java.util.List type2, java.util.List nameNamePair)
  {
    ClassRef zedObject = createClassRef();
    zedObject.setRefName(refName);
    if (type2 != null) {
      zedObject.getType2().addAll(type2);
    }
    if (nameNamePair != null) {
      zedObject.getNameNamePair().addAll(nameNamePair);
    }
    return zedObject;
  }

  public DistConjOpExpr createDistConjOpExpr()
  {
    DistConjOpExpr zedObject = new DistConjOpExprImpl();
    return zedObject;
  }

  public DistConjOpExpr createDistConjOpExpr(net.sourceforge.czt.z.ast.SchText schText, OpExpr opExpr)
  {
    DistConjOpExpr zedObject = createDistConjOpExpr();
    zedObject.setSchText(schText);
    zedObject.setOpExpr(opExpr);
    return zedObject;
  }

  public VisibilityList createVisibilityList()
  {
    VisibilityList zedObject = new VisibilityListImpl();
    return zedObject;
  }

  public VisibilityList createVisibilityList(java.util.List refName)
  {
    VisibilityList zedObject = createVisibilityList();
    if (refName != null) {
      zedObject.getRefName().addAll(refName);
    }
    return zedObject;
  }

  public PolyExpr createPolyExpr()
  {
    PolyExpr zedObject = new PolyExprImpl();
    return zedObject;
  }

  public PolyExpr createPolyExpr(Expr expr)
  {
    PolyExpr zedObject = createPolyExpr();
    zedObject.setExpr(expr);
    return zedObject;
  }

  public HideOpExpr createHideOpExpr()
  {
    HideOpExpr zedObject = new HideOpExprImpl();
    return zedObject;
  }

  public HideOpExpr createHideOpExpr(OpExpr opExpr, java.util.List name)
  {
    HideOpExpr zedObject = createHideOpExpr();
    zedObject.setOpExpr(opExpr);
    if (name != null) {
      zedObject.getName().addAll(name);
    }
    return zedObject;
  }

  public SeqOpExpr createSeqOpExpr()
  {
    SeqOpExpr zedObject = new SeqOpExprImpl();
    return zedObject;
  }

  public SeqOpExpr createSeqOpExpr(OpExpr leftOpExpr, OpExpr rightOpExpr)
  {
    SeqOpExpr zedObject = createSeqOpExpr();
    zedObject.setLeftOpExpr(leftOpExpr);
    zedObject.setRightOpExpr(rightOpExpr);
    return zedObject;
  }

  public NameSignaturePair createNameSignaturePair()
  {
    NameSignaturePair zedObject = new NameSignaturePairImpl();
    return zedObject;
  }

  public NameSignaturePair createNameSignaturePair(net.sourceforge.czt.z.ast.DeclName name, net.sourceforge.czt.z.ast.Signature signature)
  {
    NameSignaturePair zedObject = createNameSignaturePair();
    zedObject.setName(name);
    zedObject.setSignature(signature);
    return zedObject;
  }

  public ClassSig createClassSig()
  {
    ClassSig zedObject = new ClassSigImpl();
    return zedObject;
  }

  public ClassSig createClassSig(java.util.List classes, net.sourceforge.czt.z.ast.Signature state, java.util.List attribute, java.util.List operation)
  {
    ClassSig zedObject = createClassSig();
    if (classes != null) {
      zedObject.getClasses().addAll(classes);
    }
    zedObject.setState(state);
    if (attribute != null) {
      zedObject.getAttribute().addAll(attribute);
    }
    if (operation != null) {
      zedObject.getOperation().addAll(operation);
    }
    return zedObject;
  }

  public OpText createOpText()
  {
    OpText zedObject = new OpTextImpl();
    return zedObject;
  }

  public OpText createOpText(java.util.List delta, net.sourceforge.czt.z.ast.SchText schText)
  {
    OpText zedObject = createOpText();
    if (delta != null) {
      zedObject.getDelta().addAll(delta);
    }
    zedObject.setSchText(schText);
    return zedObject;
  }

  public DistChoiceOpExpr createDistChoiceOpExpr()
  {
    DistChoiceOpExpr zedObject = new DistChoiceOpExprImpl();
    return zedObject;
  }

  public DistChoiceOpExpr createDistChoiceOpExpr(net.sourceforge.czt.z.ast.SchText schText, OpExpr opExpr)
  {
    DistChoiceOpExpr zedObject = createDistChoiceOpExpr();
    zedObject.setSchText(schText);
    zedObject.setOpExpr(opExpr);
    return zedObject;
  }

  public AssoParallelOpExpr createAssoParallelOpExpr()
  {
    AssoParallelOpExpr zedObject = new AssoParallelOpExprImpl();
    return zedObject;
  }

  public AssoParallelOpExpr createAssoParallelOpExpr(OpExpr leftOpExpr, OpExpr rightOpExpr)
  {
    AssoParallelOpExpr zedObject = createAssoParallelOpExpr();
    zedObject.setLeftOpExpr(leftOpExpr);
    zedObject.setRightOpExpr(rightOpExpr);
    return zedObject;
  }

  public State createState()
  {
    State zedObject = new StateImpl();
    return zedObject;
  }

  public State createState(java.util.List primaryDecl, java.util.List secondaryDecl, net.sourceforge.czt.z.ast.Pred pred)
  {
    State zedObject = createState();
    if (primaryDecl != null) {
      zedObject.getPrimaryDecl().addAll(primaryDecl);
    }
    if (secondaryDecl != null) {
      zedObject.getSecondaryDecl().addAll(secondaryDecl);
    }
    zedObject.setPred(pred);
    return zedObject;
  }

  public OpPromotionExpr createOpPromotionExpr()
  {
    OpPromotionExpr zedObject = new OpPromotionExprImpl();
    return zedObject;
  }

  public OpPromotionExpr createOpPromotionExpr(net.sourceforge.czt.z.ast.Expr expr, net.sourceforge.czt.z.ast.RefName name)
  {
    OpPromotionExpr zedObject = createOpPromotionExpr();
    zedObject.setExpr(expr);
    zedObject.setName(name);
    return zedObject;
  }

  public ConjOpExpr createConjOpExpr()
  {
    ConjOpExpr zedObject = new ConjOpExprImpl();
    return zedObject;
  }

  public ConjOpExpr createConjOpExpr(OpExpr leftOpExpr, OpExpr rightOpExpr)
  {
    ConjOpExpr zedObject = createConjOpExpr();
    zedObject.setLeftOpExpr(leftOpExpr);
    zedObject.setRightOpExpr(rightOpExpr);
    return zedObject;
  }

  public ClassPara createClassPara()
  {
    ClassPara zedObject = new ClassParaImpl();
    return zedObject;
  }

  public ClassPara createClassPara(net.sourceforge.czt.z.ast.DeclName name, java.util.List formalParameters, VisibilityList visibilityList, java.util.List inheritedClass, java.util.List localDef, State state, InitialState initialState, java.util.List operation)
  {
    ClassPara zedObject = createClassPara();
    zedObject.setName(name);
    if (formalParameters != null) {
      zedObject.getFormalParameters().addAll(formalParameters);
    }
    zedObject.setVisibilityList(visibilityList);
    if (inheritedClass != null) {
      zedObject.getInheritedClass().addAll(inheritedClass);
    }
    if (localDef != null) {
      zedObject.getLocalDef().addAll(localDef);
    }
    zedObject.setState(state);
    zedObject.setInitialState(initialState);
    if (operation != null) {
      zedObject.getOperation().addAll(operation);
    }
    return zedObject;
  }

  public Operation createOperation()
  {
    Operation zedObject = new OperationImpl();
    return zedObject;
  }

  public Operation createOperation(net.sourceforge.czt.z.ast.DeclName name, OpExpr opExpr, net.sourceforge.czt.z.ast.Box box)
  {
    Operation zedObject = createOperation();
    zedObject.setName(name);
    zedObject.setOpExpr(opExpr);
    zedObject.setBox(box);
    return zedObject;
  }

  public ClassPolyType createClassPolyType()
  {
    ClassPolyType zedObject = new ClassPolyTypeImpl();
    return zedObject;
  }

  public ClassPolyType createClassPolyType(ClassSig classSig, ClassRef rootClass)
  {
    ClassPolyType zedObject = createClassPolyType();
    zedObject.setClassSig(classSig);
    zedObject.setRootClass(rootClass);
    return zedObject;
  }

  public ContainmentExpr createContainmentExpr()
  {
    ContainmentExpr zedObject = new ContainmentExprImpl();
    return zedObject;
  }

  public ContainmentExpr createContainmentExpr(Expr expr)
  {
    ContainmentExpr zedObject = createContainmentExpr();
    zedObject.setExpr(expr);
    return zedObject;
  }

  public InitialState createInitialState()
  {
    InitialState zedObject = new InitialStateImpl();
    return zedObject;
  }

  public InitialState createInitialState(net.sourceforge.czt.z.ast.Pred pred)
  {
    InitialState zedObject = createInitialState();
    zedObject.setPred(pred);
    return zedObject;
  }

  public ClassUnionExpr createClassUnionExpr()
  {
    ClassUnionExpr zedObject = new ClassUnionExprImpl();
    return zedObject;
  }

  public ClassUnionExpr createClassUnionExpr(Expr leftExpr, Expr rightExpr)
  {
    ClassUnionExpr zedObject = createClassUnionExpr();
    zedObject.setLeftExpr(leftExpr);
    zedObject.setRightExpr(rightExpr);
    return zedObject;
  }

  public DistSeqOpExpr createDistSeqOpExpr()
  {
    DistSeqOpExpr zedObject = new DistSeqOpExprImpl();
    return zedObject;
  }

  public DistSeqOpExpr createDistSeqOpExpr(net.sourceforge.czt.z.ast.SchText schText, OpExpr opExpr)
  {
    DistSeqOpExpr zedObject = createDistSeqOpExpr();
    zedObject.setSchText(schText);
    zedObject.setOpExpr(opExpr);
    return zedObject;
  }

  public ScopeEnrichOpExpr createScopeEnrichOpExpr()
  {
    ScopeEnrichOpExpr zedObject = new ScopeEnrichOpExprImpl();
    return zedObject;
  }

  public ScopeEnrichOpExpr createScopeEnrichOpExpr(OpExpr leftOpExpr, OpExpr rightOpExpr)
  {
    ScopeEnrichOpExpr zedObject = createScopeEnrichOpExpr();
    zedObject.setLeftOpExpr(leftOpExpr);
    zedObject.setRightOpExpr(rightOpExpr);
    return zedObject;
  }

  public PredExpr createPredExpr()
  {
    PredExpr zedObject = new PredExprImpl();
    return zedObject;
  }

  public PredExpr createPredExpr(net.sourceforge.czt.z.ast.Pred pred)
  {
    PredExpr zedObject = createPredExpr();
    zedObject.setPred(pred);
    return zedObject;
  }

  public PrimaryDecl createPrimaryDecl()
  {
    PrimaryDecl zedObject = new PrimaryDeclImpl();
    return zedObject;
  }

  public PrimaryDecl createPrimaryDecl(net.sourceforge.czt.z.ast.Decl decl)
  {
    PrimaryDecl zedObject = createPrimaryDecl();
    zedObject.setDecl(decl);
    return zedObject;
  }

  public ExChoiceOpExpr createExChoiceOpExpr()
  {
    ExChoiceOpExpr zedObject = new ExChoiceOpExprImpl();
    return zedObject;
  }

  public ExChoiceOpExpr createExChoiceOpExpr(OpExpr leftOpExpr, OpExpr rightOpExpr)
  {
    ExChoiceOpExpr zedObject = createExChoiceOpExpr();
    zedObject.setLeftOpExpr(leftOpExpr);
    zedObject.setRightOpExpr(rightOpExpr);
    return zedObject;
  }

  public RenameOpExpr createRenameOpExpr()
  {
    RenameOpExpr zedObject = new RenameOpExprImpl();
    return zedObject;
  }

  public RenameOpExpr createRenameOpExpr(OpExpr opExpr, java.util.List nameNamePair)
  {
    RenameOpExpr zedObject = createRenameOpExpr();
    zedObject.setOpExpr(opExpr);
    if (nameNamePair != null) {
      zedObject.getNameNamePair().addAll(nameNamePair);
    }
    return zedObject;
  }

  public ParallelOpExpr createParallelOpExpr()
  {
    ParallelOpExpr zedObject = new ParallelOpExprImpl();
    return zedObject;
  }

  public ParallelOpExpr createParallelOpExpr(OpExpr leftOpExpr, OpExpr rightOpExpr)
  {
    ParallelOpExpr zedObject = createParallelOpExpr();
    zedObject.setLeftOpExpr(leftOpExpr);
    zedObject.setRightOpExpr(rightOpExpr);
    return zedObject;
  }

  public ClassUnionType createClassUnionType()
  {
    ClassUnionType zedObject = new ClassUnionTypeImpl();
    return zedObject;
  }

  public ClassUnionType createClassUnionType(ClassSig classSig)
  {
    ClassUnionType zedObject = createClassUnionType();
    zedObject.setClassSig(classSig);
    return zedObject;
  }

  public AnonOpExpr createAnonOpExpr()
  {
    AnonOpExpr zedObject = new AnonOpExprImpl();
    return zedObject;
  }

  public AnonOpExpr createAnonOpExpr(OpText opText)
  {
    AnonOpExpr zedObject = createAnonOpExpr();
    zedObject.setOpText(opText);
    return zedObject;
  }

}
