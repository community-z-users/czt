//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b18-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.02.13 at 10:27:41 GMT 
//


package net.sourceforge.czt.z.jaxb.gen;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the net.sourceforge.czt.z.jaxb.gen package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
public class ObjectFactory
    extends net.sourceforge.czt.oz.jaxb.gen.impl.runtime.DefaultJAXBContextImpl
{

    private static java.util.HashMap defaultImplementations = new java.util.HashMap(253, 0.75F);
    private static java.util.HashMap rootTagMap = new java.util.HashMap();
    public final static net.sourceforge.czt.oz.jaxb.gen.impl.runtime.GrammarInfo grammarInfo = new net.sourceforge.czt.oz.jaxb.gen.impl.runtime.GrammarInfoImpl(rootTagMap, defaultImplementations, (net.sourceforge.czt.z.jaxb.gen.ObjectFactory.class));
    public final static java.lang.Class version = (net.sourceforge.czt.z.jaxb.gen.impl.JAXBVersion.class);

    static {
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.SchemaType.class), "net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NextStroke.class), "net.sourceforge.czt.z.jaxb.gen.impl.NextStrokeImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Oper.class), "net.sourceforge.czt.z.jaxb.gen.impl.OperImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.PipeExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.PipeExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType.class), "net.sourceforge.czt.z.jaxb.gen.impl.TermAImpl.AnnsTypeImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NegPredElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.NegPredElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.CompExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.CompExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.UnparsedZSectElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.UnparsedZSectElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.DeclName.class), "net.sourceforge.czt.z.jaxb.gen.impl.DeclNameImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.LatexMarkupParaElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.LatexMarkupParaElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.SignatureElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.SignatureElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Para.class), "net.sourceforge.czt.z.jaxb.gen.impl.ParaImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.TruePred.class), "net.sourceforge.czt.z.jaxb.gen.impl.TruePredImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.InclDeclElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.InclDeclElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.SectElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.SectElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.LetExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.LetExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ProdExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.ProdExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.RenameExprElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.RenameExprElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.SchemaTypeElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Freetype.class), "net.sourceforge.czt.z.jaxb.gen.impl.FreetypeImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.FreetypeElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.FreetypeElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Exists1Pred.class), "net.sourceforge.czt.z.jaxb.gen.impl.Exists1PredImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Expr2N.class), "net.sourceforge.czt.z.jaxb.gen.impl.Expr2NImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.SchText.class), "net.sourceforge.czt.z.jaxb.gen.impl.SchTextImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.OperandElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.OperandElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Pred2Element.class), "net.sourceforge.czt.z.jaxb.gen.impl.Pred2ElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.GenParamType.class), "net.sourceforge.czt.z.jaxb.gen.impl.GenParamTypeImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Stroke.class), "net.sourceforge.czt.z.jaxb.gen.impl.StrokeImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.IffExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.IffExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Exists1Expr.class), "net.sourceforge.czt.z.jaxb.gen.impl.Exists1ExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NumStrokeElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.NumStrokeElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Ann.class), "net.sourceforge.czt.z.jaxb.gen.impl.AnnImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.SchExpr2 .class), "net.sourceforge.czt.z.jaxb.gen.impl.SchExpr2Impl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.FalsePred.class), "net.sourceforge.czt.z.jaxb.gen.impl.FalsePredImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ProdTypeElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.ProdTypeElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NameNamePairElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.NameNamePairElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.OperElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.OperElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.FactElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.FactElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Qnt1ExprElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.Qnt1ExprElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.SetCompExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.SetCompExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.FreeParaElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.FreeParaElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.PowerTypeElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.PowerTypeElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.DecorExprElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.DecorExprElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.SignatureAnn.class), "net.sourceforge.czt.z.jaxb.gen.impl.SignatureAnnImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Operand.class), "net.sourceforge.czt.z.jaxb.gen.impl.OperandImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Expr.class), "net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NumStroke.class), "net.sourceforge.czt.z.jaxb.gen.impl.NumStrokeImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.PowerExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.PowerExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.QntExprElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.QntExprElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.QntPred.class), "net.sourceforge.czt.z.jaxb.gen.impl.QntPredImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Expr2NElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.Expr2NElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.SpecElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.SpecElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.InStroke.class), "net.sourceforge.czt.z.jaxb.gen.impl.InStrokeImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.CondExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.CondExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Branch.class), "net.sourceforge.czt.z.jaxb.gen.impl.BranchImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.MemPred.class), "net.sourceforge.czt.z.jaxb.gen.impl.MemPredImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NarrPara.class), "net.sourceforge.czt.z.jaxb.gen.impl.NarrParaImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NumExprElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.NumExprElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.LatexMarkupPara.class), "net.sourceforge.czt.z.jaxb.gen.impl.LatexMarkupParaImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.SignatureAnnElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.SignatureAnnElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.TypeAnn.class), "net.sourceforge.czt.z.jaxb.gen.impl.TypeAnnImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Expr0NElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.Expr0NElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ParenAnn.class), "net.sourceforge.czt.z.jaxb.gen.impl.ParenAnnImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ConjPara.class), "net.sourceforge.czt.z.jaxb.gen.impl.ConjParaImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ExprElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.ExprElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.GivenTypeElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.GivenTypeElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NameElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.NameElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.OptempParaElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.OptempParaElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.GivenParaElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.GivenParaElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.TupleExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.TupleExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.UnparsedParaElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.UnparsedParaElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.OrExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.OrExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.QntExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.QntExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.UnparsedPara.class), "net.sourceforge.czt.z.jaxb.gen.impl.UnparsedParaImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ConjParaElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.ConjParaElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ExprPredElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.ExprPredElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.BindSelExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.IffPred.class), "net.sourceforge.czt.z.jaxb.gen.impl.IffPredImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.SchExprElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.SchExprElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NarrSectElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.NarrSectElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Type2Element.class), "net.sourceforge.czt.z.jaxb.gen.impl.Type2ElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ConstDeclElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.ConstDeclElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NarrParaElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.NarrParaElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.OutStroke.class), "net.sourceforge.czt.z.jaxb.gen.impl.OutStrokeImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Qnt1Expr.class), "net.sourceforge.czt.z.jaxb.gen.impl.Qnt1ExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NameNamePair.class), "net.sourceforge.czt.z.jaxb.gen.impl.NameNamePairImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.UnparsedZSect.class), "net.sourceforge.czt.z.jaxb.gen.impl.UnparsedZSectImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.PreExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.PreExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.HideExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.HideExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.TypeElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.TypeElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ZSectElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.ZSectElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ProjExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.ProjExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Expr2Element.class), "net.sourceforge.czt.z.jaxb.gen.impl.Expr2ElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.PowerType.class), "net.sourceforge.czt.z.jaxb.gen.impl.PowerTypeImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.GivenType.class), "net.sourceforge.czt.z.jaxb.gen.impl.GivenTypeImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.StrokeElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.StrokeElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.OrPred.class), "net.sourceforge.czt.z.jaxb.gen.impl.OrPredImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Expr0N.class), "net.sourceforge.czt.z.jaxb.gen.impl.Expr0NImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Operator.class), "net.sourceforge.czt.z.jaxb.gen.impl.OperatorImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ExistsExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.ExistsExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.GenericTypeElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.GenericTypeElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ImpliesPred.class), "net.sourceforge.czt.z.jaxb.gen.impl.ImpliesPredImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.AndPredElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.AndPredElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ExprPred.class), "net.sourceforge.czt.z.jaxb.gen.impl.ExprPredImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ZSect.class), "net.sourceforge.czt.z.jaxb.gen.impl.ZSectImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.AxParaElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.AxParaElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ApplExprElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.ApplExprElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Directive.class), "net.sourceforge.czt.z.jaxb.gen.impl.DirectiveImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.AndPred.class), "net.sourceforge.czt.z.jaxb.gen.impl.AndPredImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.AndExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.AndExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.OperatorElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.OperatorElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NegPred.class), "net.sourceforge.czt.z.jaxb.gen.impl.NegPredImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.LocAnn.class), "net.sourceforge.czt.z.jaxb.gen.impl.LocAnnImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.RefName.class), "net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ThetaExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.ThetaExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ForallExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.ForallExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.OptempPara.class), "net.sourceforge.czt.z.jaxb.gen.impl.OptempParaImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NameSectTypeTripleElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.NameSectTypeTripleElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ThetaExprElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.ThetaExprElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Sect.class), "net.sourceforge.czt.z.jaxb.gen.impl.SectImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.TypeAnnElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.TypeAnnElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.BranchElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.BranchElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NarrSect.class), "net.sourceforge.czt.z.jaxb.gen.impl.NarrSectImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Spec.class), "net.sourceforge.czt.z.jaxb.gen.impl.SpecImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.TypeEnvAnn.class), "net.sourceforge.czt.z.jaxb.gen.impl.TypeEnvAnnImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Type.class), "net.sourceforge.czt.z.jaxb.gen.impl.TypeImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.PredElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.PredElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.TermA.class), "net.sourceforge.czt.z.jaxb.gen.impl.TermAImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.SchExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.SchExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NameExprPairElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.NameExprPairElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.BindExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.BindExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.SectTypeEnvAnn.class), "net.sourceforge.czt.z.jaxb.gen.impl.SectTypeEnvAnnImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NameTypePair.class), "net.sourceforge.czt.z.jaxb.gen.impl.NameTypePairImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.QntPredElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.QntPredElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.GenParamTypeElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.GenParamTypeElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.RefExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Pred.class), "net.sourceforge.czt.z.jaxb.gen.impl.PredImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.BindSelExprElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ParentElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.ParentElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.BindExprElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.BindExprElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.GivenPara.class), "net.sourceforge.czt.z.jaxb.gen.impl.GivenParaImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.RefNameElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.RefNameElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.LocAnnElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.LocAnnElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.SetExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.SetExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Parent.class), "net.sourceforge.czt.z.jaxb.gen.impl.ParentImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Decl.class), "net.sourceforge.czt.z.jaxb.gen.impl.DeclImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.LambdaExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.LambdaExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.VarDeclElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.VarDeclElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Expr1Element.class), "net.sourceforge.czt.z.jaxb.gen.impl.Expr1ElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Fact.class), "net.sourceforge.czt.z.jaxb.gen.impl.FactImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.TupleSelExprElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.MemPredElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.MemPredElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.RefExprElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.RefExprElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ApplExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.ApplExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Type2 .class), "net.sourceforge.czt.z.jaxb.gen.impl.Type2Impl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Name.class), "net.sourceforge.czt.z.jaxb.gen.impl.NameImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.AxPara.class), "net.sourceforge.czt.z.jaxb.gen.impl.AxParaImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.SchExpr2Element.class), "net.sourceforge.czt.z.jaxb.gen.impl.SchExpr2ElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Expr1 .class), "net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Signature.class), "net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.DeclElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.DeclElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.HideExprElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.HideExprElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.GenericType.class), "net.sourceforge.czt.z.jaxb.gen.impl.GenericTypeImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ParaElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.ParaElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ImpliesExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.ImpliesExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NameTypePairElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.NameTypePairElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.RenameExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.RenameExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NameSectTypeTriple.class), "net.sourceforge.czt.z.jaxb.gen.impl.NameSectTypeTripleImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.DecorExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.DecorExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.TypeEnvAnnElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.TypeEnvAnnElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Pred2 .class), "net.sourceforge.czt.z.jaxb.gen.impl.Pred2Impl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.SchTextElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.SchTextElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.InclDecl.class), "net.sourceforge.czt.z.jaxb.gen.impl.InclDeclImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.FreePara.class), "net.sourceforge.czt.z.jaxb.gen.impl.FreeParaImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ProdType.class), "net.sourceforge.czt.z.jaxb.gen.impl.ProdTypeImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.MuExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.MuExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ExistsPred.class), "net.sourceforge.czt.z.jaxb.gen.impl.ExistsPredImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NegExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.NegExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.DeclNameElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.DeclNameElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NameExprPair.class), "net.sourceforge.czt.z.jaxb.gen.impl.NameExprPairImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.TupleSelExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.SectTypeEnvAnnElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.SectTypeEnvAnnElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ConstDecl.class), "net.sourceforge.czt.z.jaxb.gen.impl.ConstDeclImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.CondExprElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.CondExprElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.VarDecl.class), "net.sourceforge.czt.z.jaxb.gen.impl.VarDeclImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.NumExpr.class), "net.sourceforge.czt.z.jaxb.gen.impl.NumExprImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.ForallPred.class), "net.sourceforge.czt.z.jaxb.gen.impl.ForallPredImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.DirectiveElement.class), "net.sourceforge.czt.z.jaxb.gen.impl.DirectiveElementImpl");
        defaultImplementations.put((net.sourceforge.czt.z.jaxb.gen.Expr2 .class), "net.sourceforge.czt.z.jaxb.gen.impl.Expr2Impl");
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "NegExpr"), (net.sourceforge.czt.z.jaxb.gen.NegExpr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "ForallPred"), (net.sourceforge.czt.z.jaxb.gen.ForallPred.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Expr2"), (net.sourceforge.czt.z.jaxb.gen.Expr2Element.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "ParenAnn"), (net.sourceforge.czt.z.jaxb.gen.ParenAnn.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "DecorExpr"), (net.sourceforge.czt.z.jaxb.gen.DecorExprElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Pred"), (net.sourceforge.czt.z.jaxb.gen.PredElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "FreePara"), (net.sourceforge.czt.z.jaxb.gen.FreeParaElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "PowerType"), (net.sourceforge.czt.z.jaxb.gen.PowerTypeElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "NarrSect"), (net.sourceforge.czt.z.jaxb.gen.NarrSectElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "CompExpr"), (net.sourceforge.czt.z.jaxb.gen.CompExpr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "GenericType"), (net.sourceforge.czt.z.jaxb.gen.GenericTypeElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "RefName"), (net.sourceforge.czt.z.jaxb.gen.RefNameElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Type"), (net.sourceforge.czt.z.jaxb.gen.TypeElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Sect"), (net.sourceforge.czt.z.jaxb.gen.SectElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Spec"), (net.sourceforge.czt.z.jaxb.gen.SpecElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "ExistsPred"), (net.sourceforge.czt.z.jaxb.gen.ExistsPred.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "SignatureAnn"), (net.sourceforge.czt.z.jaxb.gen.SignatureAnnElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "MemPred"), (net.sourceforge.czt.z.jaxb.gen.MemPredElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "QntExpr"), (net.sourceforge.czt.z.jaxb.gen.QntExprElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "NarrPara"), (net.sourceforge.czt.z.jaxb.gen.NarrParaElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Operand"), (net.sourceforge.czt.z.jaxb.gen.OperandElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "LocAnn"), (net.sourceforge.czt.z.jaxb.gen.LocAnnElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "ProdExpr"), (net.sourceforge.czt.z.jaxb.gen.ProdExpr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "NumStroke"), (net.sourceforge.czt.z.jaxb.gen.NumStrokeElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "BindSelExpr"), (net.sourceforge.czt.z.jaxb.gen.BindSelExprElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "ExprPred"), (net.sourceforge.czt.z.jaxb.gen.ExprPredElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "ProjExpr"), (net.sourceforge.czt.z.jaxb.gen.ProjExpr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "SchText"), (net.sourceforge.czt.z.jaxb.gen.SchTextElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "OptempPara"), (net.sourceforge.czt.z.jaxb.gen.OptempParaElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "GivenType"), (net.sourceforge.czt.z.jaxb.gen.GivenTypeElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "TypeEnvAnn"), (net.sourceforge.czt.z.jaxb.gen.TypeEnvAnnElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "SetExpr"), (net.sourceforge.czt.z.jaxb.gen.SetExpr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "GivenPara"), (net.sourceforge.czt.z.jaxb.gen.GivenParaElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Decl"), (net.sourceforge.czt.z.jaxb.gen.DeclElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Freetype"), (net.sourceforge.czt.z.jaxb.gen.FreetypeElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "ImpliesExpr"), (net.sourceforge.czt.z.jaxb.gen.ImpliesExpr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "PreExpr"), (net.sourceforge.czt.z.jaxb.gen.PreExpr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "InclDecl"), (net.sourceforge.czt.z.jaxb.gen.InclDeclElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "AndPred"), (net.sourceforge.czt.z.jaxb.gen.AndPredElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "AndExpr"), (net.sourceforge.czt.z.jaxb.gen.AndExpr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "TruePred"), (net.sourceforge.czt.z.jaxb.gen.TruePred.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "SchExpr2"), (net.sourceforge.czt.z.jaxb.gen.SchExpr2Element.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Parent"), (net.sourceforge.czt.z.jaxb.gen.ParentElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "OrExpr"), (net.sourceforge.czt.z.jaxb.gen.OrExpr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "PipeExpr"), (net.sourceforge.czt.z.jaxb.gen.PipeExpr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "OutStroke"), (net.sourceforge.czt.z.jaxb.gen.OutStroke.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "IffExpr"), (net.sourceforge.czt.z.jaxb.gen.IffExpr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "CondExpr"), (net.sourceforge.czt.z.jaxb.gen.CondExprElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "TupleExpr"), (net.sourceforge.czt.z.jaxb.gen.TupleExpr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "RefExpr"), (net.sourceforge.czt.z.jaxb.gen.RefExprElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Expr0N"), (net.sourceforge.czt.z.jaxb.gen.Expr0NElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "RenameExpr"), (net.sourceforge.czt.z.jaxb.gen.RenameExprElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Para"), (net.sourceforge.czt.z.jaxb.gen.ParaElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "IffPred"), (net.sourceforge.czt.z.jaxb.gen.IffPred.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Exists1Expr"), (net.sourceforge.czt.z.jaxb.gen.Exists1Expr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Type2"), (net.sourceforge.czt.z.jaxb.gen.Type2Element.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "NextStroke"), (net.sourceforge.czt.z.jaxb.gen.NextStroke.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "SectTypeEnvAnn"), (net.sourceforge.czt.z.jaxb.gen.SectTypeEnvAnnElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "ImpliesPred"), (net.sourceforge.czt.z.jaxb.gen.ImpliesPred.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "ProdType"), (net.sourceforge.czt.z.jaxb.gen.ProdTypeElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "LambdaExpr"), (net.sourceforge.czt.z.jaxb.gen.LambdaExpr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "FalsePred"), (net.sourceforge.czt.z.jaxb.gen.FalsePred.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "InStroke"), (net.sourceforge.czt.z.jaxb.gen.InStroke.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "NameNamePair"), (net.sourceforge.czt.z.jaxb.gen.NameNamePairElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Oper"), (net.sourceforge.czt.z.jaxb.gen.OperElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "QntPred"), (net.sourceforge.czt.z.jaxb.gen.QntPredElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Stroke"), (net.sourceforge.czt.z.jaxb.gen.StrokeElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Signature"), (net.sourceforge.czt.z.jaxb.gen.SignatureElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "ConstDecl"), (net.sourceforge.czt.z.jaxb.gen.ConstDeclElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "TupleSelExpr"), (net.sourceforge.czt.z.jaxb.gen.TupleSelExprElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "LatexMarkupPara"), (net.sourceforge.czt.z.jaxb.gen.LatexMarkupParaElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Fact"), (net.sourceforge.czt.z.jaxb.gen.FactElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "UnparsedPara"), (net.sourceforge.czt.z.jaxb.gen.UnparsedParaElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "NumExpr"), (net.sourceforge.czt.z.jaxb.gen.NumExprElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "UnparsedZSect"), (net.sourceforge.czt.z.jaxb.gen.UnparsedZSectElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "SchExpr"), (net.sourceforge.czt.z.jaxb.gen.SchExprElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Qnt1Expr"), (net.sourceforge.czt.z.jaxb.gen.Qnt1ExprElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Expr2N"), (net.sourceforge.czt.z.jaxb.gen.Expr2NElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Exists1Pred"), (net.sourceforge.czt.z.jaxb.gen.Exists1Pred.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Branch"), (net.sourceforge.czt.z.jaxb.gen.BranchElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "SetCompExpr"), (net.sourceforge.czt.z.jaxb.gen.SetCompExpr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "NameExprPair"), (net.sourceforge.czt.z.jaxb.gen.NameExprPairElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "DeclName"), (net.sourceforge.czt.z.jaxb.gen.DeclNameElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Directive"), (net.sourceforge.czt.z.jaxb.gen.DirectiveElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "ThetaExpr"), (net.sourceforge.czt.z.jaxb.gen.ThetaExprElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "ForallExpr"), (net.sourceforge.czt.z.jaxb.gen.ForallExpr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "VarDecl"), (net.sourceforge.czt.z.jaxb.gen.VarDeclElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "AxPara"), (net.sourceforge.czt.z.jaxb.gen.AxParaElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Name"), (net.sourceforge.czt.z.jaxb.gen.NameElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "SchemaType"), (net.sourceforge.czt.z.jaxb.gen.SchemaTypeElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Operator"), (net.sourceforge.czt.z.jaxb.gen.OperatorElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "HideExpr"), (net.sourceforge.czt.z.jaxb.gen.HideExprElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "ZSect"), (net.sourceforge.czt.z.jaxb.gen.ZSectElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Pred2"), (net.sourceforge.czt.z.jaxb.gen.Pred2Element.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "NameTypePair"), (net.sourceforge.czt.z.jaxb.gen.NameTypePairElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "ApplExpr"), (net.sourceforge.czt.z.jaxb.gen.ApplExprElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "NameSectTypeTriple"), (net.sourceforge.czt.z.jaxb.gen.NameSectTypeTripleElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Expr"), (net.sourceforge.czt.z.jaxb.gen.ExprElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "TypeAnn"), (net.sourceforge.czt.z.jaxb.gen.TypeAnnElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "Expr1"), (net.sourceforge.czt.z.jaxb.gen.Expr1Element.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "LetExpr"), (net.sourceforge.czt.z.jaxb.gen.LetExpr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "NegPred"), (net.sourceforge.czt.z.jaxb.gen.NegPredElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "OrPred"), (net.sourceforge.czt.z.jaxb.gen.OrPred.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "GenParamType"), (net.sourceforge.czt.z.jaxb.gen.GenParamTypeElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "ConjPara"), (net.sourceforge.czt.z.jaxb.gen.ConjParaElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "PowerExpr"), (net.sourceforge.czt.z.jaxb.gen.PowerExpr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "BindExpr"), (net.sourceforge.czt.z.jaxb.gen.BindExprElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "MuExpr"), (net.sourceforge.czt.z.jaxb.gen.MuExpr.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://czt.sourceforge.net/zml", "ExistsExpr"), (net.sourceforge.czt.z.jaxb.gen.ExistsExpr.class));
    }

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: net.sourceforge.czt.z.jaxb.gen
     * 
     */
    public ObjectFactory() {
        super(grammarInfo);
    }

    /**
     * Create an instance of the specified Java content interface.
     * 
     * @param javaContentInterface
     *     the Class object of the javacontent interface to instantiate
     * @return
     *     a new instance
     * @throws JAXBException
     *     if an error occurs
     */
    public java.lang.Object newInstance(java.lang.Class javaContentInterface)
        throws javax.xml.bind.JAXBException
    {
        return super.newInstance(javaContentInterface);
    }

    /**
     * Get the specified property. This method can only be
     * used to get provider specific properties.
     * Attempting to get an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name
     *     the name of the property to retrieve
     * @return
     *     the value of the requested property
     * @throws PropertyException
     *     when there is an error retrieving the given property or value
     */
    public java.lang.Object getProperty(java.lang.String name)
        throws javax.xml.bind.PropertyException
    {
        return super.getProperty(name);
    }

    /**
     * Set the specified property. This method can only be
     * used to set provider specific properties.
     * Attempting to set an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param value
     *     the value of the property to be set
     * @param name
     *     the name of the property to retrieve
     * @throws PropertyException
     *     when there is an error processing the given property or value
     */
    public void setProperty(java.lang.String name, java.lang.Object value)
        throws javax.xml.bind.PropertyException
    {
        super.setProperty(name, value);
    }

    /**
     * Create an instance of SchemaType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.SchemaType createSchemaType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeImpl();
    }

    /**
     * Create an instance of NextStroke
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NextStroke createNextStroke()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NextStrokeImpl();
    }

    /**
     * Create an instance of Oper
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Oper createOper()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.OperImpl();
    }

    /**
     * Create an instance of PipeExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.PipeExpr createPipeExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.PipeExprImpl();
    }

    /**
     * Create an instance of TermAAnnsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType createTermAAnnsType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.TermAImpl.AnnsTypeImpl();
    }

    /**
     * Create an instance of NegPredElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NegPredElement createNegPredElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NegPredElementImpl();
    }

    /**
     * Create an instance of CompExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.CompExpr createCompExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.CompExprImpl();
    }

    /**
     * Create an instance of UnparsedZSectElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.UnparsedZSectElement createUnparsedZSectElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.UnparsedZSectElementImpl();
    }

    /**
     * Create an instance of DeclName
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.DeclName createDeclName()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.DeclNameImpl();
    }

    /**
     * Create an instance of LatexMarkupParaElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.LatexMarkupParaElement createLatexMarkupParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.LatexMarkupParaElementImpl();
    }

    /**
     * Create an instance of SignatureElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.SignatureElement createSignatureElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SignatureElementImpl();
    }

    /**
     * Create an instance of Para
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Para createPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ParaImpl();
    }

    /**
     * Create an instance of TruePred
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.TruePred createTruePred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.TruePredImpl();
    }

    /**
     * Create an instance of InclDeclElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.InclDeclElement createInclDeclElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.InclDeclElementImpl();
    }

    /**
     * Create an instance of SectElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.SectElement createSectElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SectElementImpl();
    }

    /**
     * Create an instance of LetExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.LetExpr createLetExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.LetExprImpl();
    }

    /**
     * Create an instance of ProdExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ProdExpr createProdExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ProdExprImpl();
    }

    /**
     * Create an instance of RenameExprElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.RenameExprElement createRenameExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.RenameExprElementImpl();
    }

    /**
     * Create an instance of SchemaTypeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.SchemaTypeElement createSchemaTypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SchemaTypeElementImpl();
    }

    /**
     * Create an instance of Freetype
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Freetype createFreetype()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.FreetypeImpl();
    }

    /**
     * Create an instance of FreetypeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.FreetypeElement createFreetypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.FreetypeElementImpl();
    }

    /**
     * Create an instance of Exists1Pred
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Exists1Pred createExists1Pred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.Exists1PredImpl();
    }

    /**
     * Create an instance of Expr2N
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Expr2N createExpr2N()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.Expr2NImpl();
    }

    /**
     * Create an instance of SchText
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.SchText createSchText()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SchTextImpl();
    }

    /**
     * Create an instance of OperandElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.OperandElement createOperandElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.OperandElementImpl();
    }

    /**
     * Create an instance of Pred2Element
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Pred2Element createPred2Element()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.Pred2ElementImpl();
    }

    /**
     * Create an instance of GenParamType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.GenParamType createGenParamType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.GenParamTypeImpl();
    }

    /**
     * Create an instance of Stroke
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Stroke createStroke()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.StrokeImpl();
    }

    /**
     * Create an instance of IffExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.IffExpr createIffExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.IffExprImpl();
    }

    /**
     * Create an instance of Exists1Expr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Exists1Expr createExists1Expr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.Exists1ExprImpl();
    }

    /**
     * Create an instance of NumStrokeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NumStrokeElement createNumStrokeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NumStrokeElementImpl();
    }

    /**
     * Create an instance of Ann
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Ann createAnn()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.AnnImpl();
    }

    /**
     * Create an instance of SchExpr2
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.SchExpr2 createSchExpr2()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SchExpr2Impl();
    }

    /**
     * Create an instance of FalsePred
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.FalsePred createFalsePred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.FalsePredImpl();
    }

    /**
     * Create an instance of ProdTypeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ProdTypeElement createProdTypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ProdTypeElementImpl();
    }

    /**
     * Create an instance of NameNamePairElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NameNamePairElement createNameNamePairElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NameNamePairElementImpl();
    }

    /**
     * Create an instance of OperElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.OperElement createOperElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.OperElementImpl();
    }

    /**
     * Create an instance of FactElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.FactElement createFactElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.FactElementImpl();
    }

    /**
     * Create an instance of Qnt1ExprElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Qnt1ExprElement createQnt1ExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.Qnt1ExprElementImpl();
    }

    /**
     * Create an instance of SetCompExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.SetCompExpr createSetCompExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SetCompExprImpl();
    }

    /**
     * Create an instance of FreeParaElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.FreeParaElement createFreeParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.FreeParaElementImpl();
    }

    /**
     * Create an instance of PowerTypeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.PowerTypeElement createPowerTypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.PowerTypeElementImpl();
    }

    /**
     * Create an instance of DecorExprElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.DecorExprElement createDecorExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.DecorExprElementImpl();
    }

    /**
     * Create an instance of SignatureAnn
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.SignatureAnn createSignatureAnn()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SignatureAnnImpl();
    }

    /**
     * Create an instance of Operand
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Operand createOperand()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.OperandImpl();
    }

    /**
     * Create an instance of Expr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Expr createExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl();
    }

    /**
     * Create an instance of NumStroke
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NumStroke createNumStroke()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NumStrokeImpl();
    }

    /**
     * Create an instance of PowerExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.PowerExpr createPowerExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.PowerExprImpl();
    }

    /**
     * Create an instance of QntExprElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.QntExprElement createQntExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.QntExprElementImpl();
    }

    /**
     * Create an instance of QntPred
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.QntPred createQntPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.QntPredImpl();
    }

    /**
     * Create an instance of Expr2NElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Expr2NElement createExpr2NElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.Expr2NElementImpl();
    }

    /**
     * Create an instance of SpecElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.SpecElement createSpecElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SpecElementImpl();
    }

    /**
     * Create an instance of InStroke
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.InStroke createInStroke()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.InStrokeImpl();
    }

    /**
     * Create an instance of CondExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.CondExpr createCondExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.CondExprImpl();
    }

    /**
     * Create an instance of Branch
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Branch createBranch()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.BranchImpl();
    }

    /**
     * Create an instance of MemPred
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.MemPred createMemPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.MemPredImpl();
    }

    /**
     * Create an instance of NarrPara
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NarrPara createNarrPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NarrParaImpl();
    }

    /**
     * Create an instance of NumExprElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NumExprElement createNumExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NumExprElementImpl();
    }

    /**
     * Create an instance of LatexMarkupPara
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.LatexMarkupPara createLatexMarkupPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.LatexMarkupParaImpl();
    }

    /**
     * Create an instance of SignatureAnnElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.SignatureAnnElement createSignatureAnnElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SignatureAnnElementImpl();
    }

    /**
     * Create an instance of TypeAnn
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.TypeAnn createTypeAnn()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.TypeAnnImpl();
    }

    /**
     * Create an instance of Expr0NElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Expr0NElement createExpr0NElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.Expr0NElementImpl();
    }

    /**
     * Create an instance of ParenAnn
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ParenAnn createParenAnn()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ParenAnnImpl();
    }

    /**
     * Create an instance of ConjPara
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ConjPara createConjPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ConjParaImpl();
    }

    /**
     * Create an instance of ExprElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ExprElement createExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ExprElementImpl();
    }

    /**
     * Create an instance of GivenTypeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.GivenTypeElement createGivenTypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.GivenTypeElementImpl();
    }

    /**
     * Create an instance of NameElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NameElement createNameElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NameElementImpl();
    }

    /**
     * Create an instance of OptempParaElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.OptempParaElement createOptempParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.OptempParaElementImpl();
    }

    /**
     * Create an instance of GivenParaElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.GivenParaElement createGivenParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.GivenParaElementImpl();
    }

    /**
     * Create an instance of TupleExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.TupleExpr createTupleExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.TupleExprImpl();
    }

    /**
     * Create an instance of UnparsedParaElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.UnparsedParaElement createUnparsedParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.UnparsedParaElementImpl();
    }

    /**
     * Create an instance of OrExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.OrExpr createOrExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.OrExprImpl();
    }

    /**
     * Create an instance of QntExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.QntExpr createQntExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.QntExprImpl();
    }

    /**
     * Create an instance of UnparsedPara
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.UnparsedPara createUnparsedPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.UnparsedParaImpl();
    }

    /**
     * Create an instance of ConjParaElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ConjParaElement createConjParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ConjParaElementImpl();
    }

    /**
     * Create an instance of ExprPredElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ExprPredElement createExprPredElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ExprPredElementImpl();
    }

    /**
     * Create an instance of BindSelExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.BindSelExpr createBindSelExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl();
    }

    /**
     * Create an instance of IffPred
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.IffPred createIffPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.IffPredImpl();
    }

    /**
     * Create an instance of SchExprElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.SchExprElement createSchExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SchExprElementImpl();
    }

    /**
     * Create an instance of NarrSectElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NarrSectElement createNarrSectElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NarrSectElementImpl();
    }

    /**
     * Create an instance of Type2Element
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Type2Element createType2Element()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.Type2ElementImpl();
    }

    /**
     * Create an instance of ConstDeclElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ConstDeclElement createConstDeclElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ConstDeclElementImpl();
    }

    /**
     * Create an instance of NarrParaElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NarrParaElement createNarrParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NarrParaElementImpl();
    }

    /**
     * Create an instance of OutStroke
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.OutStroke createOutStroke()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.OutStrokeImpl();
    }

    /**
     * Create an instance of Qnt1Expr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Qnt1Expr createQnt1Expr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.Qnt1ExprImpl();
    }

    /**
     * Create an instance of NameNamePair
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NameNamePair createNameNamePair()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NameNamePairImpl();
    }

    /**
     * Create an instance of UnparsedZSect
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.UnparsedZSect createUnparsedZSect()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.UnparsedZSectImpl();
    }

    /**
     * Create an instance of PreExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.PreExpr createPreExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.PreExprImpl();
    }

    /**
     * Create an instance of HideExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.HideExpr createHideExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.HideExprImpl();
    }

    /**
     * Create an instance of TypeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.TypeElement createTypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.TypeElementImpl();
    }

    /**
     * Create an instance of ZSectElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ZSectElement createZSectElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ZSectElementImpl();
    }

    /**
     * Create an instance of ProjExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ProjExpr createProjExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ProjExprImpl();
    }

    /**
     * Create an instance of Expr2Element
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Expr2Element createExpr2Element()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.Expr2ElementImpl();
    }

    /**
     * Create an instance of PowerType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.PowerType createPowerType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.PowerTypeImpl();
    }

    /**
     * Create an instance of GivenType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.GivenType createGivenType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.GivenTypeImpl();
    }

    /**
     * Create an instance of StrokeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.StrokeElement createStrokeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.StrokeElementImpl();
    }

    /**
     * Create an instance of OrPred
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.OrPred createOrPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.OrPredImpl();
    }

    /**
     * Create an instance of Expr0N
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Expr0N createExpr0N()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.Expr0NImpl();
    }

    /**
     * Create an instance of Operator
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Operator createOperator()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.OperatorImpl();
    }

    /**
     * Create an instance of ExistsExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ExistsExpr createExistsExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ExistsExprImpl();
    }

    /**
     * Create an instance of GenericTypeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.GenericTypeElement createGenericTypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.GenericTypeElementImpl();
    }

    /**
     * Create an instance of ImpliesPred
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ImpliesPred createImpliesPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ImpliesPredImpl();
    }

    /**
     * Create an instance of AndPredElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.AndPredElement createAndPredElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.AndPredElementImpl();
    }

    /**
     * Create an instance of ExprPred
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ExprPred createExprPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ExprPredImpl();
    }

    /**
     * Create an instance of ZSect
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ZSect createZSect()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ZSectImpl();
    }

    /**
     * Create an instance of AxParaElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.AxParaElement createAxParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.AxParaElementImpl();
    }

    /**
     * Create an instance of ApplExprElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ApplExprElement createApplExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ApplExprElementImpl();
    }

    /**
     * Create an instance of Directive
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Directive createDirective()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.DirectiveImpl();
    }

    /**
     * Create an instance of AndPred
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.AndPred createAndPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.AndPredImpl();
    }

    /**
     * Create an instance of AndExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.AndExpr createAndExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.AndExprImpl();
    }

    /**
     * Create an instance of OperatorElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.OperatorElement createOperatorElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.OperatorElementImpl();
    }

    /**
     * Create an instance of NegPred
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NegPred createNegPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NegPredImpl();
    }

    /**
     * Create an instance of LocAnn
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.LocAnn createLocAnn()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.LocAnnImpl();
    }

    /**
     * Create an instance of RefName
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.RefName createRefName()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl();
    }

    /**
     * Create an instance of ThetaExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ThetaExpr createThetaExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ThetaExprImpl();
    }

    /**
     * Create an instance of ForallExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ForallExpr createForallExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ForallExprImpl();
    }

    /**
     * Create an instance of OptempPara
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.OptempPara createOptempPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.OptempParaImpl();
    }

    /**
     * Create an instance of NameSectTypeTripleElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NameSectTypeTripleElement createNameSectTypeTripleElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NameSectTypeTripleElementImpl();
    }

    /**
     * Create an instance of ThetaExprElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ThetaExprElement createThetaExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ThetaExprElementImpl();
    }

    /**
     * Create an instance of Sect
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Sect createSect()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SectImpl();
    }

    /**
     * Create an instance of TypeAnnElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.TypeAnnElement createTypeAnnElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.TypeAnnElementImpl();
    }

    /**
     * Create an instance of BranchElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.BranchElement createBranchElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.BranchElementImpl();
    }

    /**
     * Create an instance of NarrSect
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NarrSect createNarrSect()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NarrSectImpl();
    }

    /**
     * Create an instance of Spec
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Spec createSpec()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SpecImpl();
    }

    /**
     * Create an instance of TypeEnvAnn
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.TypeEnvAnn createTypeEnvAnn()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.TypeEnvAnnImpl();
    }

    /**
     * Create an instance of Type
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Type createType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.TypeImpl();
    }

    /**
     * Create an instance of PredElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.PredElement createPredElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.PredElementImpl();
    }

    /**
     * Create an instance of TermA
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.TermA createTermA()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.TermAImpl();
    }

    /**
     * Create an instance of SchExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.SchExpr createSchExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SchExprImpl();
    }

    /**
     * Create an instance of NameExprPairElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NameExprPairElement createNameExprPairElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NameExprPairElementImpl();
    }

    /**
     * Create an instance of BindExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.BindExpr createBindExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.BindExprImpl();
    }

    /**
     * Create an instance of SectTypeEnvAnn
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.SectTypeEnvAnn createSectTypeEnvAnn()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SectTypeEnvAnnImpl();
    }

    /**
     * Create an instance of NameTypePair
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NameTypePair createNameTypePair()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NameTypePairImpl();
    }

    /**
     * Create an instance of QntPredElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.QntPredElement createQntPredElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.QntPredElementImpl();
    }

    /**
     * Create an instance of GenParamTypeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.GenParamTypeElement createGenParamTypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.GenParamTypeElementImpl();
    }

    /**
     * Create an instance of RefExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.RefExpr createRefExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl();
    }

    /**
     * Create an instance of Pred
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Pred createPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.PredImpl();
    }

    /**
     * Create an instance of BindSelExprElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.BindSelExprElement createBindSelExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprElementImpl();
    }

    /**
     * Create an instance of ParentElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ParentElement createParentElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ParentElementImpl();
    }

    /**
     * Create an instance of BindExprElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.BindExprElement createBindExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.BindExprElementImpl();
    }

    /**
     * Create an instance of GivenPara
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.GivenPara createGivenPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.GivenParaImpl();
    }

    /**
     * Create an instance of RefNameElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.RefNameElement createRefNameElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.RefNameElementImpl();
    }

    /**
     * Create an instance of LocAnnElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.LocAnnElement createLocAnnElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.LocAnnElementImpl();
    }

    /**
     * Create an instance of SetExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.SetExpr createSetExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SetExprImpl();
    }

    /**
     * Create an instance of Parent
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Parent createParent()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ParentImpl();
    }

    /**
     * Create an instance of Decl
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Decl createDecl()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.DeclImpl();
    }

    /**
     * Create an instance of LambdaExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.LambdaExpr createLambdaExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.LambdaExprImpl();
    }

    /**
     * Create an instance of VarDeclElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.VarDeclElement createVarDeclElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.VarDeclElementImpl();
    }

    /**
     * Create an instance of Expr1Element
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Expr1Element createExpr1Element()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.Expr1ElementImpl();
    }

    /**
     * Create an instance of Fact
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Fact createFact()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.FactImpl();
    }

    /**
     * Create an instance of TupleSelExprElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.TupleSelExprElement createTupleSelExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprElementImpl();
    }

    /**
     * Create an instance of MemPredElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.MemPredElement createMemPredElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.MemPredElementImpl();
    }

    /**
     * Create an instance of RefExprElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.RefExprElement createRefExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.RefExprElementImpl();
    }

    /**
     * Create an instance of ApplExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ApplExpr createApplExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ApplExprImpl();
    }

    /**
     * Create an instance of Type2
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Type2 createType2()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.Type2Impl();
    }

    /**
     * Create an instance of Name
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Name createName()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NameImpl();
    }

    /**
     * Create an instance of AxPara
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.AxPara createAxPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.AxParaImpl();
    }

    /**
     * Create an instance of SchExpr2Element
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.SchExpr2Element createSchExpr2Element()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SchExpr2ElementImpl();
    }

    /**
     * Create an instance of Expr1
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Expr1 createExpr1()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl();
    }

    /**
     * Create an instance of Signature
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Signature createSignature()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl();
    }

    /**
     * Create an instance of DeclElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.DeclElement createDeclElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.DeclElementImpl();
    }

    /**
     * Create an instance of HideExprElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.HideExprElement createHideExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.HideExprElementImpl();
    }

    /**
     * Create an instance of GenericType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.GenericType createGenericType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.GenericTypeImpl();
    }

    /**
     * Create an instance of ParaElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ParaElement createParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ParaElementImpl();
    }

    /**
     * Create an instance of ImpliesExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ImpliesExpr createImpliesExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ImpliesExprImpl();
    }

    /**
     * Create an instance of NameTypePairElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NameTypePairElement createNameTypePairElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NameTypePairElementImpl();
    }

    /**
     * Create an instance of RenameExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.RenameExpr createRenameExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.RenameExprImpl();
    }

    /**
     * Create an instance of NameSectTypeTriple
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NameSectTypeTriple createNameSectTypeTriple()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NameSectTypeTripleImpl();
    }

    /**
     * Create an instance of DecorExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.DecorExpr createDecorExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.DecorExprImpl();
    }

    /**
     * Create an instance of TypeEnvAnnElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.TypeEnvAnnElement createTypeEnvAnnElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.TypeEnvAnnElementImpl();
    }

    /**
     * Create an instance of Pred2
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Pred2 createPred2()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.Pred2Impl();
    }

    /**
     * Create an instance of SchTextElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.SchTextElement createSchTextElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SchTextElementImpl();
    }

    /**
     * Create an instance of InclDecl
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.InclDecl createInclDecl()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.InclDeclImpl();
    }

    /**
     * Create an instance of FreePara
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.FreePara createFreePara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.FreeParaImpl();
    }

    /**
     * Create an instance of ProdType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ProdType createProdType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ProdTypeImpl();
    }

    /**
     * Create an instance of MuExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.MuExpr createMuExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.MuExprImpl();
    }

    /**
     * Create an instance of ExistsPred
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ExistsPred createExistsPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ExistsPredImpl();
    }

    /**
     * Create an instance of NegExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NegExpr createNegExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NegExprImpl();
    }

    /**
     * Create an instance of DeclNameElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.DeclNameElement createDeclNameElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.DeclNameElementImpl();
    }

    /**
     * Create an instance of NameExprPair
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NameExprPair createNameExprPair()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NameExprPairImpl();
    }

    /**
     * Create an instance of TupleSelExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.TupleSelExpr createTupleSelExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl();
    }

    /**
     * Create an instance of SectTypeEnvAnnElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.SectTypeEnvAnnElement createSectTypeEnvAnnElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.SectTypeEnvAnnElementImpl();
    }

    /**
     * Create an instance of ConstDecl
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ConstDecl createConstDecl()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ConstDeclImpl();
    }

    /**
     * Create an instance of CondExprElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.CondExprElement createCondExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.CondExprElementImpl();
    }

    /**
     * Create an instance of VarDecl
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.VarDecl createVarDecl()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.VarDeclImpl();
    }

    /**
     * Create an instance of NumExpr
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.NumExpr createNumExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.NumExprImpl();
    }

    /**
     * Create an instance of ForallPred
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.ForallPred createForallPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.ForallPredImpl();
    }

    /**
     * Create an instance of DirectiveElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.DirectiveElement createDirectiveElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.DirectiveElementImpl();
    }

    /**
     * Create an instance of Expr2
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public net.sourceforge.czt.z.jaxb.gen.Expr2 createExpr2()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.z.jaxb.gen.impl.Expr2Impl();
    }

}
