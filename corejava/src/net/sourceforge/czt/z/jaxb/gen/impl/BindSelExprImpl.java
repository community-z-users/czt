//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.2-b15-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2004.02.19 at 05:33:12 NZDT 
//


package net.sourceforge.czt.z.jaxb.gen.impl;

public class BindSelExprImpl
    extends net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl
    implements net.sourceforge.czt.z.jaxb.gen.BindSelExpr, com.sun.xml.bind.JAXBObject, net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallableObject, net.sourceforge.czt.oz.jaxb.gen.impl.runtime.XMLSerializable, net.sourceforge.czt.oz.jaxb.gen.impl.runtime.ValidatableObject
{

    protected net.sourceforge.czt.z.jaxb.gen.RefName _Name;
    public final static java.lang.Class version = (net.sourceforge.czt.z.jaxb.gen.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (net.sourceforge.czt.z.jaxb.gen.BindSelExpr.class);
    }

    public net.sourceforge.czt.z.jaxb.gen.RefName getName() {
        return _Name;
    }

    public void setName(net.sourceforge.czt.z.jaxb.gen.RefName value) {
        _Name = value;
    }

    public net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallingEventHandler createUnmarshaller(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallingContext context) {
        return new net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.Unmarshaller(context);
    }

    public void serializeBody(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeBody(context);
        context.startElement("http://czt.sourceforge.net/zml", "Name");
        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Name), "Name");
        context.endNamespaceDecls();
        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Name), "Name");
        context.endAttributes();
        context.childAsBody(((com.sun.xml.bind.JAXBObject) _Name), "Name");
        context.endElement();
    }

    public void serializeAttributes(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeAttributes(context);
    }

    public void serializeURIs(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeURIs(context);
    }

    public java.lang.Class getPrimaryInterface() {
        return (net.sourceforge.czt.z.jaxb.gen.BindSelExpr.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava"
+"/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp0\u00ba\u000f\u00f9ppsq\u0000~\u0000\u0000-\u00f3H\u0004ppsr\u0000\u001dcom"
+".sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001\u0002\u00a8a1ppsr\u0000\'com.sun"
+".msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLc"
+"om/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.Element"
+"Exp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModelq\u0000"
+"~\u0000\u0002xq\u0000~\u0000\u0003\u0002\u00a8a&sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000p\u0000sq"
+"\u0000~\u0000\u0000\u0002\u00a8a\u001bppsq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsr\u0000 com.sun.msv.grammar.O"
+"neOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0001\u0015\u0012zq\u0000~\u0000\u000epsr\u0000 com.sun.msv.grammar.Attr"
+"ibuteExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\nxq\u0000~\u0000\u0003\u0001\u0015\u0012wq\u0000~"
+"\u0000\u000epsr\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\bsq\u0000~\u0000\r\u0001q\u0000~\u0000\u0018sr\u0000 com.sun.msv.grammar.AnyNam"
+"eClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\tq\u0000~\u0000\u0019q\u0000~\u0000\u001esr\u0000#com.sun.msv.grammar.SimpleName"
+"Class\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespac"
+"eURIq\u0000~\u0000 xq\u0000~\u0000\u001bt\u0000-net.sourceforge.czt.z.jaxb.gen.TermA.AnnsT"
+"ypet\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u0007\u0001\u0093N\u0086p"
+"psq\u0000~\u0000\u0015\u0001\u0093N{q\u0000~\u0000\u000epsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L"
+"\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet"
+"\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003\u0001\u0007\u00bd\u001dppsr\u0000\"com.sun.msv.d"
+"atatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd"
+".BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.Co"
+"ncreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatype"
+"Impl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000 L\u0000\btypeNameq\u0000~\u0000 L\u0000\nwhiteS"
+"pacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 ht"
+"tp://www.w3.org/2001/XMLSchemat\u0000\u0005QNamesr\u00005com.sun.msv.dataty"
+"pe.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.ms"
+"v.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.m"
+"sv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\n"
+"q\u0000~\u0000\u000epsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalName"
+"q\u0000~\u0000 L\u0000\fnamespaceURIq\u0000~\u0000 xpq\u0000~\u00001q\u0000~\u00000sq\u0000~\u0000\u001ft\u0000\u0004typet\u0000)http://"
+"www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000\u0004Annst\u0000\u001ehttp:"
+"//czt.sourceforge.net/zmlq\u0000~\u0000\u001esq\u0000~\u0000\u0007+J\u00e6\u00ceppsq\u0000~\u0000\u0007*5\u00d4<ppsq\u0000~\u0000\u0007"
+") \u00c1\u00aappsq\u0000~\u0000\u0007(\u000b\u00af\u0018ppsq\u0000~\u0000\u0007&\u00f6\u009c\u0086ppsq\u0000~\u0000\u0007%\u00e1\u0089\u00f4ppsq\u0000~\u0000\u0007$\u00ccwbppsq\u0000~\u0000\u0007"
+"#\u00b7d\u00d0ppsq\u0000~\u0000\u0007\"\u00a2R>ppsq\u0000~\u0000\u0007!\u008d?\u00acppsq\u0000~\u0000\u0007 x-\u001appsq\u0000~\u0000\u0007\u001fc\u001a\u0088ppsq\u0000~\u0000\u0007"
+"\u001eN\u0007\u00f6ppsq\u0000~\u0000\u0007\u001d8\u00f5dppsq\u0000~\u0000\u0007\u001c#\u00e2\u00d2ppsq\u0000~\u0000\u0007\u001b\u000e\u00d0@ppsq\u0000~\u0000\u0007\u0019\u00f9\u00bd\u00aeppsq\u0000~\u0000\u0007"
+"\u0018\u00e4\u00ab\u001cppsq\u0000~\u0000\u0007\u0017\u00cf\u0098\u008appsq\u0000~\u0000\u0007\u0016\u00ba\u0085\u00f8ppsq\u0000~\u0000\u0007\u0015\u00a5sfppsq\u0000~\u0000\u0007\u0014\u0090`\u00d4ppsq\u0000~\u0000\u0007"
+"\u0013{NBppsq\u0000~\u0000\u0007\u0012f;\u00b0ppsq\u0000~\u0000\u0007\u0011Q)\u001eppsq\u0000~\u0000\u0007\u0010<\u0016\u008cppsq\u0000~\u0000\u0007\u000f\'\u0003\u00fappsq\u0000~\u0000\u0007"
+"\u000e\u0011\u00f1hppsq\u0000~\u0000\u0007\f\u00fc\u00de\u00d6ppsq\u0000~\u0000\u0007\u000b\u00e7\u00ccDppsq\u0000~\u0000\u0007\n\u00d2\u00b9\u00b2ppsq\u0000~\u0000\u0007\t\u00bd\u00a7 ppsq\u0000~\u0000\u0007"
+"\b\u00a8\u0094\u008eppsq\u0000~\u0000\u0007\u0007\u0093\u0081\u00fcppsq\u0000~\u0000\u0007\u0006~ojppsq\u0000~\u0000\u0007\u0005i\\\u00d8ppsq\u0000~\u0000\u0007\u0004TJFppsq\u0000~\u0000\u0007"
+"\u0003?7\u00b4ppsq\u0000~\u0000\u0007\u0002*%\"ppsq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000eps"
+"q\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000*net.sourceforge.czt.z"
+".jaxb.gen.SetCompExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012"
+"zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000%net.sourcefor"
+"ge.czt.z.jaxb.gen.MuExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012"
+"\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000&net.source"
+"forge.czt.z.jaxb.gen.SetExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq"
+"\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000*net.so"
+"urceforge.czt.z.jaxb.gen.Exists1Exprq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007"
+"\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft"
+"\u00002net.sourceforge.czt.z.jaxb.gen.TupleSelExprElementq\u0000~\u0000#sq\u0000"
+"~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q"
+"\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000-net.sourceforge.czt.z.jaxb.gen.QntExprElem"
+"entq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq"
+"\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000&net.sourceforge.czt.z.jaxb.gen."
+"LetExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001"
+"\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000&net.sourceforge.czt.z.jaxb."
+"gen.NegExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000"
+"~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000.net.sourceforge.czt.z.j"
+"axb.gen.BindExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001"
+"\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000\'net.sourcef"
+"orge.czt.z.jaxb.gen.CompExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq"
+"\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000)net.so"
+"urceforge.czt.z.jaxb.gen.ForallExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001"
+"\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000"
+"&net.sourceforge.czt.z.jaxb.gen.PreExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000"
+"~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~"
+"\u0000\u001ft\u0000(net.sourceforge.czt.z.jaxb.gen.TupleExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090"
+"pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~"
+"\u0000\u001esq\u0000~\u0000\u001ft\u0000+net.sourceforge.czt.z.jaxb.gen.Expr2Elementq\u0000~\u0000#s"
+"q\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000"
+"\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000.net.sourceforge.czt.z.jaxb.gen.SchExpr2E"
+"lementq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015"
+"\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000-net.sourceforge.czt.z.jaxb.g"
+"en.SchExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~"
+"\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000/net.sourceforge.c"
+"zt.z.jaxb.gen.ThetaExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085pp"
+"sq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000.net."
+"sourceforge.czt.z.jaxb.gen.ApplExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000"
+"sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001es"
+"q\u0000~\u0000\u001ft\u0000,net.sourceforge.czt.z.jaxb.gen.Expr0NElementq\u0000~\u0000#sq\u0000"
+"~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q"
+"\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000&net.sourceforge.czt.z.jaxb.gen.IffExprq\u0000~\u0000"
+"#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000"
+"~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000-net.sourceforge.czt.z.jaxb.gen.RefExpr"
+"Elementq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001"
+"\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000/net.sourceforge.czt.z.jaxb."
+"gen.DecorExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012z"
+"q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000\'net.sourceforg"
+"e.czt.z.jaxb.gen.ProjExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000"
+"\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00000net.sourc"
+"eforge.czt.z.jaxb.gen.RenameExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000"
+"~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~"
+"\u0000\u001ft\u0000)net.sourceforge.czt.z.jaxb.gen.ExistsExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012"
+"\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000"
+"~\u0000\u001esq\u0000~\u0000\u001ft\u0000%net.sourceforge.czt.z.jaxb.gen.OrExprq\u0000~\u0000#sq\u0000~\u0000\t"
+"\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000"
+"\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000)net.sourceforge.czt.z.jaxb.gen.LambdaExprq\u0000~\u0000"
+"#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000"
+"~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000.net.sourceforge.czt.z.jaxb.gen.Qnt1Exp"
+"rElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015"
+"\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00003net.sourceforge.czt.zpatt."
+"jaxb.gen.JokerExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000"
+"\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000-net.sourc"
+"eforge.czt.z.jaxb.gen.NumExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007"
+"\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft"
+"\u0000(net.sourceforge.czt.z.jaxb.gen.PowerExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000"
+"sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001es"
+"q\u0000~\u0000\u001ft\u0000+net.sourceforge.czt.z.jaxb.gen.Expr1Elementq\u0000~\u0000#sq\u0000~"
+"\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000"
+"~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00001net.sourceforge.czt.z.jaxb.gen.BindSelExprE"
+"lementq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015"
+"\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000,net.sourceforge.czt.z.jaxb.g"
+"en.Expr2NElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000"
+"\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000&net.sourceforge.cz"
+"t.z.jaxb.gen.AndExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012z"
+"q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000*net.sourceforg"
+"e.czt.z.jaxb.gen.ImpliesExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq"
+"\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000.net.so"
+"urceforge.czt.z.jaxb.gen.HideExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq"
+"\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000"
+"~\u0000\u001ft\u0000\'net.sourceforge.czt.z.jaxb.gen.ProdExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090"
+"pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~"
+"\u0000\u001esq\u0000~\u0000\u001ft\u0000.net.sourceforge.czt.z.jaxb.gen.CondExprElementq\u0000~"
+"\u0000#sq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq"
+"\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000\'net.sourceforge.czt.z.jaxb.gen.PipeEx"
+"prq\u0000~\u0000#sq\u0000~\u0000\t\u0002\u00c6\u00c7\u00f0pp\u0000sq\u0000~\u0000\u0000\u0002\u00c6\u00c7\u00e5ppsq\u0000~\u0000\t\u0001\u0015\u0012\u0090pp\u0000sq\u0000~\u0000\u0007\u0001\u0015\u0012\u0085ppsq\u0000"
+"~\u0000\u0012\u0001\u0015\u0012zq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001\u0015\u0012wq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000&net.sou"
+"rceforge.czt.z.jaxb.gen.RefNameq\u0000~\u0000#sq\u0000~\u0000\u0007\u0001\u00b1\u00b5Pppsq\u0000~\u0000\u0015\u0001\u00b1\u00b5Eq\u0000"
+"~\u0000\u000epq\u0000~\u0000)sq\u0000~\u0000\u001fq\u0000~\u0000:q\u0000~\u0000;q\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000\u0004Nameq\u0000~\u0000>sr\u0000\"com.sun."
+"msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/"
+"msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.gram"
+"mar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthreshold"
+"L\u0000\u0006parentq\u0000~\u0001d[\u0000\u0005tablet\u0000![Lcom/sun/msv/grammar/Expression;xp"
+"\u0000\u0000\u0000\u0082\u0000\u0000\u0000\u00e6pur\u0000![Lcom.sun.msv.grammar.Expression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000"
+"\u0000\u0002\u00ffppppppppppppppppppq\u0000~\u0001^pppppppq\u0000~\u0000Pppppppppq\u0000~\u0000dppppppppp"
+"ppppppppppppppppppq\u0000~\u0000Mppppppppq\u0000~\u0000apppppppppppppppppppppppp"
+"pppq\u0000~\u0000Jpppppq\u0000~\u0000\u0005ppq\u0000~\u0000^pppppppppppppppppppppppppppq\u0000~\u0000Gppp"
+"pppppq\u0000~\u0000[pppppppppppppppppppppppppppq\u0000~\u0000Dppppppppq\u0000~\u0000Xppppp"
+"ppppppppppppppppppppppq\u0000~\u0000Appppppppq\u0000~\u0000Upppppppppppppppppppp"
+"pppq\u0000~\u0001@q\u0000~\u0001:q\u0000~\u00014q\u0000~\u0001.q\u0000~\u0001(q\u0000~\u0001\"q\u0000~\u0001\u001cq\u0000~\u0001\u0016q\u0000~\u0001\u0010q\u0000~\u0001\nq\u0000~\u0001\u0004q\u0000"
+"~\u0001?q\u0000~\u00019q\u0000~\u0000Rq\u0000~\u00013q\u0000~\u0001-q\u0000~\u0001\'q\u0000~\u0001!q\u0000~\u0001\u001bq\u0000~\u0001\u0015q\u0000~\u0001\u000fq\u0000~\u0001\tq\u0000~\u0001\u0003q\u0000"
+"~\u0000\u00fdq\u0000~\u0000\u00feq\u0000~\u0000\u00f7q\u0000~\u0000\u00f8q\u0000~\u0000\u00f1q\u0000~\u0000\u00f2q\u0000~\u0000\u00ebq\u0000~\u0000\u00ecq\u0000~\u0000\u00e5q\u0000~\u0000\u00e6q\u0000~\u0000\u00dfq\u0000~\u0000\u00e0q\u0000"
+"~\u0000\u00d9q\u0000~\u0000\u00daq\u0000~\u0000\u00d3q\u0000~\u0000\u00d4q\u0000~\u0000\u0014q\u0000~\u0000hq\u0000~\u0000nq\u0000~\u0000tq\u0000~\u0000zq\u0000~\u0000\u0080q\u0000~\u0000\u0086q\u0000~\u0000$q\u0000"
+"~\u0000\u008cq\u0000~\u0000\u0011q\u0000~\u0000gq\u0000~\u0000mq\u0000~\u0000sq\u0000~\u0000yq\u0000~\u0000\u007fq\u0000~\u0000\u0085q\u0000~\u0000\u008bq\u0000~\u0000\u0091q\u0000~\u0000\u0097q\u0000~\u0000\u009dq\u0000"
+"~\u0000\u00a3q\u0000~\u0000\u00a9q\u0000~\u0000\u00afq\u0000~\u0000\u00b5q\u0000~\u0000\u00bbq\u0000~\u0000\u00c1q\u0000~\u0000\u00c7q\u0000~\u0000\u00cdq\u0000~\u0000\u0092q\u0000~\u0000\u0098q\u0000~\u0000\u009eq\u0000~\u0000\u00a4q\u0000"
+"~\u0000\u00aaq\u0000~\u0000\u00b0q\u0000~\u0000\u00b6q\u0000~\u0000\u00bcq\u0000~\u0000\u00c2q\u0000~\u0000\u00c8q\u0000~\u0000\u00ceq\u0000~\u0000Oq\u0000~\u0000cq\u0000~\u0001Fq\u0000~\u0001Eq\u0000~\u0001Lq\u0000"
+"~\u0001Kq\u0000~\u0001Rq\u0000~\u0001Qq\u0000~\u0001Zq\u0000~\u0000Lq\u0000~\u0001Yq\u0000~\u0001Wppppppq\u0000~\u0000`pppppppppppppppp"
+"pppppppppppq\u0000~\u0000Ippppppppq\u0000~\u0000]pppppppppppppppppppppppppppq\u0000~\u0000"
+"Fppppppppq\u0000~\u0000Zpppppppppppppppppppppppppppq\u0000~\u0000Cppppppppq\u0000~\u0000Wp"
+"ppppppppppppppppppppppppppq\u0000~\u0000@ppppppppq\u0000~\u0000Tpppppppppppppppp"
+"ppppppppppppppppppppq\u0000~\u0000Qppppppppq\u0000~\u0000epppppppppppppppppppppp"
+"ppppq\u0000~\u0000\u000fq\u0000~\u0000Npppppq\u0000~\u0000\u0006ppq\u0000~\u0000bpppppppppppq\u0000~\u0000\bppppppppppppp"
+"ppq\u0000~\u0000Kppppppppq\u0000~\u0000_pppppppppppppppppppppppppppq\u0000~\u0000Hpppppppp"
+"q\u0000~\u0000\\pppppppppppppppppppppppppppq\u0000~\u0000Eppppppppq\u0000~\u0000Ypppppppppp"
+"pppppppppppppppppq\u0000~\u0000Bppppppppq\u0000~\u0000Vppppppppppppppppppppppppp"
+"ppq\u0000~\u0000?ppppppppq\u0000~\u0000Spppppppppp"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends net.sourceforge.czt.oz.jaxb.gen.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallingContext context) {
            super(context, "-----");
        }

        protected Unmarshaller(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("SetCompExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("MuExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("SetExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Exists1Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("TupleSelExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("QntExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("LetExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("NegExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("BindExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("CompExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ForallExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("PreExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("TupleExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Expr2" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("SchExpr2" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("SchExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ThetaExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ApplExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Expr0N" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("IffExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("RefExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("DecorExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ProjExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("RenameExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ExistsExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("OrExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("LambdaExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Qnt1Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("JokerExpr" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("NumExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("PowerExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Expr1" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("BindSelExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Expr2N" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("AndExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ImpliesExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("HideExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ProdExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("CondExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("PipeExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                        return ;
                    case  2 :
                        attIdx = context.getAttribute("", "Decl");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Name = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Word" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Name = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _Name = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 3, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  4 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  1 :
                        if (("Name" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 2;
                            return ;
                        }
                        break;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        spawnHandlerFromLeaveElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  2 :
                        attIdx = context.getAttribute("", "Decl");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _Name = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromLeaveElement((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 3, ___uri, ___local, ___qname));
                        return ;
                    case  4 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  3 :
                        if (("Name" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 4;
                            return ;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        spawnHandlerFromEnterAttribute((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  2 :
                        if (("Decl" == ___local)&&("" == ___uri)) {
                            _Name = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 3, ___uri, ___local, ___qname));
                            return ;
                        }
                        _Name = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 3, ___uri, ___local, ___qname));
                        return ;
                    case  4 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        spawnHandlerFromLeaveAttribute((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  2 :
                        attIdx = context.getAttribute("", "Decl");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _Name = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 3, ___uri, ___local, ___qname));
                        return ;
                    case  4 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  0 :
                            spawnHandlerFromText((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprImpl.this).new Unmarshaller(context)), 1, value);
                            return ;
                        case  2 :
                            attIdx = context.getAttribute("", "Decl");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _Name = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromText((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 3, value));
                            return ;
                        case  4 :
                            revertToParentFromText(value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
