//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.2-b15-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2003.11.03 at 03:50:09 NZDT 
//


package net.sourceforge.czt.z.jaxb.gen.impl;

public class RefExprImpl
    extends net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl
    implements net.sourceforge.czt.z.jaxb.gen.RefExpr, com.sun.xml.bind.JAXBObject, net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallableObject, net.sourceforge.czt.oz.jaxb.gen.impl.runtime.XMLSerializable, net.sourceforge.czt.oz.jaxb.gen.impl.runtime.ValidatableObject
{

    protected java.lang.Boolean _Mixfix;
    protected com.sun.xml.bind.util.ListImpl _Expr = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    protected net.sourceforge.czt.z.jaxb.gen.RefName _RefName;
    public final static java.lang.Class version = (net.sourceforge.czt.z.jaxb.gen.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (net.sourceforge.czt.z.jaxb.gen.RefExpr.class);
    }

    public java.lang.Boolean getMixfix() {
        if (_Mixfix == null) {
            return net.sourceforge.czt.base.util.CztDatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("false"));
        } else {
            return _Mixfix;
        }
    }

    public void setMixfix(java.lang.Boolean value) {
        _Mixfix = value;
    }

    public java.util.List getExpr() {
        return _Expr;
    }

    public net.sourceforge.czt.z.jaxb.gen.RefName getRefName() {
        return _RefName;
    }

    public void setRefName(net.sourceforge.czt.z.jaxb.gen.RefName value) {
        _RefName = value;
    }

    public net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallingEventHandler createUnmarshaller(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallingContext context) {
        return new net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.Unmarshaller(context);
    }

    public void serializeBody(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = _Expr.size();
        super.serializeBody(context);
        if (_RefName instanceof javax.xml.bind.Element) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _RefName), "RefName");
        } else {
            context.startElement("http://czt.sourceforge.net/zml", "RefName");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _RefName), "RefName");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _RefName), "RefName");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _RefName), "RefName");
            context.endElement();
        }
        while (idx2 != len2) {
            if (_Expr.get(idx2) instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Expr.get(idx2 ++)), "Expr");
            } else {
                context.startElement("http://czt.sourceforge.net/zml", "Expr");
                int idx_2 = idx2;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Expr.get(idx_2 ++)), "Expr");
                context.endNamespaceDecls();
                int idx_3 = idx2;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Expr.get(idx_3 ++)), "Expr");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Expr.get(idx2 ++)), "Expr");
                context.endElement();
            }
        }
    }

    public void serializeAttributes(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = _Expr.size();
        if (_Mixfix!= null) {
            context.startAttribute("", "Mixfix");
            try {
                context.text(net.sourceforge.czt.base.util.CztDatatypeConverter.printBoolean(((java.lang.Boolean) _Mixfix)), "Mixfix");
            } catch (java.lang.Exception e) {
                net.sourceforge.czt.oz.jaxb.gen.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        super.serializeAttributes(context);
        if (_RefName instanceof javax.xml.bind.Element) {
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _RefName), "RefName");
        }
        while (idx2 != len2) {
            if (_Expr.get(idx2) instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Expr.get(idx2 ++)), "Expr");
            } else {
                idx2 += 1;
            }
        }
    }

    public void serializeURIs(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = _Expr.size();
        super.serializeURIs(context);
        if (_RefName instanceof javax.xml.bind.Element) {
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _RefName), "RefName");
        }
        while (idx2 != len2) {
            if (_Expr.get(idx2) instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Expr.get(idx2 ++)), "Expr");
            } else {
                idx2 += 1;
            }
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (net.sourceforge.czt.z.jaxb.gen.RefExpr.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava"
+"/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u0016`\u00b2!ppsq\u0000~\u0000\u0000\u0014D\u0005\u00feppsq\u0000~\u0000\u0000\u0003"
+"\u0096;3ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001\u0001\u00ee\u00b7kp"
+"psr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tna"
+"meClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.gra"
+"mmar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fco"
+"ntentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0001\u00ee\u00b7`sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005"
+"valuexp\u0000p\u0000sq\u0000~\u0000\u0000\u0001\u00ee\u00b7Uppsq\u0000~\u0000\n\u0000h$(pp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsr\u0000 com.sun.m"
+"sv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.Un"
+"aryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0000h$\u0012q\u0000~\u0000\u000fpsr\u0000 com.sun.msv."
+"grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u000bx"
+"q\u0000~\u0000\u0003\u0000h$\u000fq\u0000~\u0000\u000fpsr\u00002com.sun.msv.grammar.Expression$AnyStringE"
+"xpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\bsq\u0000~\u0000\u000e\u0001q\u0000~\u0000\u0019sr\u0000 com.sun.msv.gr"
+"ammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameCla"
+"ss\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExp"
+"ression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\tq\u0000~\u0000\u001aq\u0000~\u0000\u001fsr\u0000#com.sun.msv.gramma"
+"r.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String"
+";L\u0000\fnamespaceURIq\u0000~\u0000!xq\u0000~\u0000\u001ct\u0000-net.sourceforge.czt.z.jaxb.gen"
+".TermA.AnnsTypet\u0000+http://java.sun.com/jaxb/xjc/dummy-element"
+"ssq\u0000~\u0000\b\u0001\u0086\u0093(ppsq\u0000~\u0000\u0016\u0001\u0086\u0093\u001dq\u0000~\u0000\u000fpsr\u0000\u001bcom.sun.msv.grammar.DataExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq"
+"\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003\u0000\u0014t\u00fappsr\u0000\"c"
+"om.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv."
+"datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.dat"
+"atype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xs"
+"d.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000!L\u0000\btypeNameq\u0000"
+"~\u0000!L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProce"
+"ssor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005QNamesr\u00005com.su"
+"n.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr"
+"\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xps"
+"r\u00000com.sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\nq\u0000~\u0000\u000fpsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002"
+"L\u0000\tlocalNameq\u0000~\u0000!L\u0000\fnamespaceURIq\u0000~\u0000!xpq\u0000~\u00002q\u0000~\u00001sq\u0000~\u0000 t\u0000\u0004ty"
+"pet\u0000)http://www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000\u0004"
+"Annst\u0000\u001ehttp://czt.sourceforge.net/zmlq\u0000~\u0000\u001fsq\u0000~\u0000\b\u0001\u00a7\u0083\u00c3ppsq\u0000~\u0000\n"
+"\u0000h$(pp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000"
+"\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000-net.sourceforge.czt.z.jaxb.gen.RefNameElement"
+"q\u0000~\u0000$sq\u0000~\u0000\n\u0001?_\u0099pp\u0000sq\u0000~\u0000\u0000\u0001?_\u008eppsq\u0000~\u0000\n\u0000h$(pp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000"
+"\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000&net.sourc"
+"eforge.czt.z.jaxb.gen.RefNameq\u0000~\u0000$sq\u0000~\u0000\b\u0000\u00d7;appsq\u0000~\u0000\u0016\u0000\u00d7;Vq\u0000~\u0000"
+"\u000fpq\u0000~\u0000*sq\u0000~\u0000 q\u0000~\u0000;q\u0000~\u0000<q\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000\u0007RefNameq\u0000~\u0000?sq\u0000~\u0000\b\u0010\u00ad\u00ca\u00c6p"
+"psq\u0000~\u0000\u0013\u0010\u00ad\u00ca\u00bbq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0010\u00ad\u00ca\u00b8q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0010E\u00a6\u008eq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u000f\u00dd\u0082dq"
+"\u0000~\u0000\u000fpsq\u0000~\u0000\b\u000fu^:q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u000f\r:\u0010q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u000e\u00a5\u0015\u00e6q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u000e"
+"<\u00f1\u00bcq\u0000~\u0000\u000fpsq\u0000~\u0000\b\r\u00d4\u00cd\u0092q\u0000~\u0000\u000fpsq\u0000~\u0000\b\rl\u00a9hq\u0000~\u0000\u000fpsq\u0000~\u0000\b\r\u0004\u0085>q\u0000~\u0000\u000fpsq\u0000"
+"~\u0000\b\f\u009ca\u0014q\u0000~\u0000\u000fpsq\u0000~\u0000\b\f4<\u00eaq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u000b\u00cc\u0018\u00c0q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u000bc\u00f4\u0096q\u0000~\u0000\u000f"
+"psq\u0000~\u0000\b\n\u00fb\u00d0lq\u0000~\u0000\u000fpsq\u0000~\u0000\b\n\u0093\u00acBq\u0000~\u0000\u000fpsq\u0000~\u0000\b\n+\u0088\u0018q\u0000~\u0000\u000fpsq\u0000~\u0000\b\t\u00c3c\u00eeq"
+"\u0000~\u0000\u000fpsq\u0000~\u0000\b\t[?\u00c4q\u0000~\u0000\u000fpsq\u0000~\u0000\b\b\u00f3\u001b\u009aq\u0000~\u0000\u000fpsq\u0000~\u0000\b\b\u008a\u00f7pq\u0000~\u0000\u000fpsq\u0000~\u0000\b\b"
+"\"\u00d3Fq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0007\u00ba\u00af\u001cq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0007R\u008a\u00f2q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0006\u00eaf\u00c8q\u0000~\u0000\u000fpsq\u0000"
+"~\u0000\b\u0006\u0082B\u009eq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0006\u001a\u001etq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0005\u00b1\u00faJq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0005I\u00d6 q\u0000~\u0000\u000f"
+"psq\u0000~\u0000\b\u0004\u00e1\u00b1\u00f6q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0004y\u008d\u00ccq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0004\u0011i\u00a2q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0003\u00a9Exq"
+"\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0003A!Nq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0002\u00d8\u00fd$q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0002p\u00d8\u00faq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0002"
+"\b\u00b4\u00d0q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0001\u00a0\u0090\u00a6q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u00018l|q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0000\u00d0HRq\u0000~\u0000\u000fpsq\u0000"
+"~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000"
+"~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00004net.sourceforge.czt.tcoz.jaxb.gen.Chan"
+"nelExprElementq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000"
+"~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000+net.sourceforge."
+"czt.z.jaxb.gen.Expr2Elementq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dp"
+"psq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000%net"
+".sourceforge.czt.z.jaxb.gen.OrExprq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~"
+"\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000"
+" t\u00002net.sourceforge.czt.z.jaxb.gen.TupleSelExprElementq\u0000~\u0000$s"
+"q\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fp"
+"q\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00000net.sourceforge.czt.z.jaxb.gen.Renam"
+"eExprElementq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000"
+"\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000&net.sourceforge.cz"
+"t.z.jaxb.gen.AndExprq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013"
+"\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000.net.source"
+"forge.czt.z.jaxb.gen.HideExprElementq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq"
+"\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000"
+"~\u0000 t\u0000)net.sourceforge.czt.z.jaxb.gen.LambdaExprq\u0000~\u0000$sq\u0000~\u0000\n\u0000h"
+"$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000"
+"~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000*net.sourceforge.czt.z.jaxb.gen.ImpliesExprq"
+"\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq"
+"\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000*net.sourceforge.czt.z.jaxb.gen."
+"SetCompExprq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000f"
+"psq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000)net.sourceforge.czt"
+".z.jaxb.gen.ForallExprq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~"
+"\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000+net.sour"
+"ceforge.czt.z.jaxb.gen.Expr1Elementq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000"
+"~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~"
+"\u0000 t\u0000&net.sourceforge.czt.z.jaxb.gen.NegExprq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000"
+"~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq"
+"\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000/net.sourceforge.czt.z.jaxb.gen.ThetaExprElement"
+"q\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000f"
+"q\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000&net.sourceforge.czt.z.jaxb.gen"
+".SetExprq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq"
+"\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000&net.sourceforge.czt.z."
+"jaxb.gen.PreExprq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012"
+"q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00003net.sourceforg"
+"e.czt.zpatt.jaxb.gen.JokerExprElementq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000s"
+"q\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq"
+"\u0000~\u0000 t\u0000%net.sourceforge.czt.z.jaxb.gen.MuExprq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q"
+"\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001d"
+"q\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000/net.sourceforge.czt.z.jaxb.gen.DecorExprElemen"
+"tq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$"
+"\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000-net.sourceforge.czt.z.jaxb.ge"
+"n.QntExprElementq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012"
+"q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000,net.sourceforg"
+"e.czt.z.jaxb.gen.Expr0NElementq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h"
+"$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000("
+"net.sourceforge.czt.z.jaxb.gen.PowerExprq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000f"
+"p\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000"
+"\u001fsq\u0000~\u0000 t\u0000-net.sourceforge.czt.z.jaxb.gen.RefExprElementq\u0000~\u0000$"
+"sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000f"
+"pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000-net.sourceforge.czt.z.jaxb.gen.SchE"
+"xprElementq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fp"
+"sq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000.net.sourceforge.czt."
+"z.jaxb.gen.SchExpr2Elementq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dpp"
+"sq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000.net."
+"sourceforge.czt.z.jaxb.gen.ApplExprElementq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~"
+"\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000"
+"~\u0000\u001fsq\u0000~\u0000 t\u0000,net.sourceforge.czt.z.jaxb.gen.Expr2NElementq\u0000~\u0000"
+"$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000"
+"\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000.net.sourceforge.czt.z.jaxb.gen.Bin"
+"dExprElementq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000"
+"\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00001net.sourceforge.cz"
+"t.z.jaxb.gen.BindSelExprElementq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000"
+"h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000"
+")net.sourceforge.czt.z.jaxb.gen.ExistsExprq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~"
+"\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000"
+"~\u0000\u001fsq\u0000~\u0000 t\u0000.net.sourceforge.czt.z.jaxb.gen.Qnt1ExprElementq\u0000"
+"~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000"
+"~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000(net.sourceforge.czt.z.jaxb.gen.T"
+"upleExprq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq"
+"\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000\'net.sourceforge.czt.z."
+"jaxb.gen.ProdExprq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$"
+"\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000&net.sourcefor"
+"ge.czt.z.jaxb.gen.LetExprq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dpps"
+"q\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000-net.s"
+"ourceforge.czt.z.jaxb.gen.NumExprElementq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000f"
+"p\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000"
+"\u001fsq\u0000~\u0000 t\u0000.net.sourceforge.czt.z.jaxb.gen.CondExprElementq\u0000~\u0000"
+"$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000"
+"\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000\'net.sourceforge.czt.z.jaxb.gen.Pip"
+"eExprq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000"
+"\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000*net.sourceforge.czt.z.jax"
+"b.gen.Exists1Exprq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$"
+"\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000\'net.sourcefor"
+"ge.czt.z.jaxb.gen.ProjExprq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0000h$\u001dpp"
+"sq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000\'net."
+"sourceforge.czt.z.jaxb.gen.CompExprq\u0000~\u0000$sq\u0000~\u0000\n\u0000h$(q\u0000~\u0000\u000fp\u0000sq\u0000"
+"~\u0000\b\u0000h$\u001dppsq\u0000~\u0000\u0013\u0000h$\u0012q\u0000~\u0000\u000fpsq\u0000~\u0000\u0016\u0000h$\u000fq\u0000~\u0000\u000fpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~"
+"\u0000 t\u0000&net.sourceforge.czt.z.jaxb.gen.IffExprq\u0000~\u0000$q\u0000~\u0000\u001fsq\u0000~\u0000\b\u0002"
+"\u001c\u00ac\u001eppsq\u0000~\u0000\u0016\u0002\u001c\u00ac\u0013q\u0000~\u0000\u000fpsq\u0000~\u0000\'\u0000S\u00c4\u0005ppsr\u0000$com.sun.msv.datatype.xs"
+"d.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000,q\u0000~\u00001t\u0000\u0007booleanq\u0000~\u00005q\u0000~\u00007sq\u0000~\u0000"
+"8q\u0000~\u0001yq\u0000~\u00001sq\u0000~\u0000 t\u0000\u0006Mixfixt\u0000\u0000q\u0000~\u0000\u001fsr\u0000\"com.sun.msv.grammar.Ex"
+"pressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/Ex"
+"pressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.Expression"
+"Pool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthresholdL\u0000\u0006parentq\u0000~\u0001\u007f"
+"[\u0000\u0005tablet\u0000![Lcom/sun/msv/grammar/Expression;xp\u0000\u0000\u0000\u008c\u0000\u0000\u0000\u00e6pur\u0000!["
+"Lcom.sun.msv.grammar.Expression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0002\u00ffq\u0000~\u0000Xpppppp"
+"pppppppppppppppppppppppq\u0000~\u0000@ppppppppppppppppq\u0000~\u0000\u0005pppppppppq\u0000"
+"~\u0000hq\u0000~\u0000uq\u0000~\u0000[ppppppppppppppppppppppppppppppppppppppppppppppp"
+"pppppppppq\u0000~\u0000^q\u0000~\u0000kq\u0000~\u0000xpppppppppppppppppppppppppppppppppppp"
+"ppppppppppppppppppppq\u0000~\u0000aq\u0000~\u0000nq\u0000~\u0000{ppppppppppppppppppppppppp"
+"pppppppppq\u0000~\u0001Fq\u0000~\u0001@q\u0000~\u0001:q\u0000~\u00014q\u0000~\u0001.q\u0000~\u0001(q\u0000~\u0001\"q\u0000~\u0001\u001cq\u0000~\u0001\u0016q\u0000~\u0001\u0010q"
+"\u0000~\u0001\nq\u0000~\u0001Eq\u0000~\u0001?q\u0000~\u00019q\u0000~\u00013q\u0000~\u0001-q\u0000~\u0001\'q\u0000~\u0001!q\u0000~\u0001\u001bq\u0000~\u0001\u0015q\u0000~\u0001\u000fq\u0000~\u0001\tq"
+"\u0000~\u0000dq\u0000~\u0001\u0003q\u0000~\u0001\u0004q\u0000~\u0000\u00fdq\u0000~\u0000\u00feq\u0000~\u0000\u00f7q\u0000~\u0000\u00f8q\u0000~\u0000\u00f1q\u0000~\u0000\u00f2q\u0000~\u0000\u00ebq\u0000~\u0000\u00ecq\u0000~\u0000\u00e5q"
+"\u0000~\u0000\u00e6q\u0000~\u0000\u00dfq\u0000~\u0000\u00e0q\u0000~\u0000\u00d9q\u0000~\u0000\u00daq\u0000~\u0000\u00a3q\u0000~\u0000\u00aaq\u0000~\u0000\u00a9q\u0000~\u0000qq\u0000~\u0000\u00b0q\u0000~\u0000\u00afq\u0000~\u0000\u00b6q"
+"\u0000~\u0000\u00b5q\u0000~\u0000\u00bcq\u0000~\u0000\u00bbq\u0000~\u0000\u00c2q\u0000~\u0000\u00c1q\u0000~\u0000\u00c8q\u0000~\u0000\u00c7q\u0000~\u0000\u00ceq\u0000~\u0000\u00cdq\u0000~\u0000\u00d3q\u0000~\u0000\u0012q\u0000~\u0000Bq"
+"\u0000~\u0000Jq\u0000~\u0000\u007fq\u0000~\u0000\u0085q\u0000~\u0000\u008bq\u0000~\u0000\u0091q\u0000~\u0000\u0097q\u0000~\u0000\u009dq\u0000~\u0000\u00d4q\u0000~\u0000\u0015q\u0000~\u0000Cq\u0000~\u0000Kq\u0000~\u0000\u0080q"
+"\u0000~\u0000\u0086q\u0000~\u0000\u008cq\u0000~\u0000\u0092q\u0000~\u0000\u0098q\u0000~\u0000\u009eq\u0000~\u0000\u00a4q\u0000~\u0001Lq\u0000~\u0001Kq\u0000~\u0001Rq\u0000~\u0001Qq\u0000~\u0001Xq\u0000~\u0000gq"
+"\u0000~\u0000tq\u0000~\u0001Wq\u0000~\u0000Zq\u0000~\u0001^q\u0000~\u0001]q\u0000~\u0001dq\u0000~\u0001cq\u0000~\u0001jq\u0000~\u0001iq\u0000~\u0000Wq\u0000~\u0001pq\u0000~\u0001op"
+"ppppq\u0000~\u0000Oppppppppppppppppppppppppppppppppppppppppq\u0000~\u0000]q\u0000~\u0000jq"
+"\u0000~\u0000wpppppppppppppppppppppppppppppppppq\u0000~\u0000%ppppppppppppppq\u0000~\u0001"
+"tppq\u0000~\u0000\u0006ppppq\u0000~\u0000`q\u0000~\u0000mq\u0000~\u0000zppppppppppppppppppppppppppppppppp"
+"pppppppppppppppppppppppq\u0000~\u0000cq\u0000~\u0000pq\u0000~\u0000}q\u0000~\u0000Vq\u0000~\u0000Upppppppppq\u0000~"
+"\u0000Tppppppppppppppppppppppppppppppppppppppppppppq\u0000~\u0000fq\u0000~\u0000sq\u0000~\u0000"
+"Yppppppppppppppppppq\u0000~\u0000Hpppppppppppppppppppppppppppppppppppp"
+"pq\u0000~\u0000iq\u0000~\u0000vq\u0000~\u0000\\ppppppppppppppppppppppppppppppppppppq\u0000~\u0000\u0010ppp"
+"ppppppppppppppppq\u0000~\u0000_q\u0000~\u0000lq\u0000~\u0000yq\u0000~\u0000\tpppppppppppppppppppppppp"
+"pppppppppq\u0000~\u0000\u0007pppppppppppppppppppppq\u0000~\u0000bq\u0000~\u0000oq\u0000~\u0000|pppppppppp"
+"ppppppppppppppppppppppppppppppppppppppppppppppq\u0000~\u0000eq\u0000~\u0000r"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends net.sourceforge.czt.oz.jaxb.gen.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallingContext context) {
            super(context, "-----------");
        }

        protected Unmarshaller(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        attIdx = context.getAttribute("", "Mixfix");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  7 :
                        if (("ChannelExpr" == ___local)&&("http://czt.sourceforge.net/tcoz" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.tcoz.jaxb.gen.impl.ChannelExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.tcoz.jaxb.gen.impl.ChannelExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Expr2" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.Expr2ElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.Expr2ElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("OrExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.OrExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.OrExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("TupleSelExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("RenameExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.RenameExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RenameExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AndExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.AndExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.AndExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("HideExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.HideExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.HideExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("LambdaExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.LambdaExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.LambdaExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ImpliesExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ImpliesExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ImpliesExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SetCompExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.SetCompExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SetCompExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ForallExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ForallExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ForallExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Expr1" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.Expr1ElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.Expr1ElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("NegExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.NegExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.NegExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ThetaExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ThetaExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ThetaExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SetExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.SetExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SetExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("PreExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.PreExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.PreExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("JokerExpr" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("MuExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.MuExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.MuExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("DecorExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.DecorExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.DecorExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("QntExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.QntExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.QntExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Expr0N" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.Expr0NElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.Expr0NElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("PowerExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.PowerExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.PowerExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("RefExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.RefExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RefExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SchExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.SchExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SchExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SchExpr2" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.SchExpr2ElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SchExpr2ElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ApplExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ApplExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ApplExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Expr2N" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.Expr2NElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.Expr2NElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("BindExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.BindExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.BindExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("BindSelExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ExistsExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ExistsExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ExistsExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Qnt1Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.Qnt1ExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.Qnt1ExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("TupleExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.TupleExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.TupleExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ProdExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ProdExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ProdExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("LetExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.LetExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.LetExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("NumExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.NumExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.NumExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("CondExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.CondExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.CondExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("PipeExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.PipeExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.PipeExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Exists1Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.Exists1ExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.Exists1ExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ProjExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ProjExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ProjExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("CompExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.CompExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.CompExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("IffExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.IffExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.IffExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 9;
                            return ;
                        }
                        if (("Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 8;
                        continue outer;
                    case  5 :
                        attIdx = context.getAttribute("", "Decl");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _RefName = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 6, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Word" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _RefName = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 6, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _RefName = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 6, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  8 :
                        if (("ChannelExpr" == ___local)&&("http://czt.sourceforge.net/tcoz" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.tcoz.jaxb.gen.impl.ChannelExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.tcoz.jaxb.gen.impl.ChannelExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Expr2" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.Expr2ElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.Expr2ElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("OrExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.OrExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.OrExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("TupleSelExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("RenameExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.RenameExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RenameExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AndExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.AndExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.AndExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("HideExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.HideExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.HideExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("LambdaExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.LambdaExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.LambdaExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ImpliesExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ImpliesExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ImpliesExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SetCompExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.SetCompExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SetCompExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ForallExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ForallExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ForallExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Expr1" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.Expr1ElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.Expr1ElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("NegExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.NegExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.NegExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ThetaExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ThetaExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ThetaExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SetExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.SetExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SetExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("PreExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.PreExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.PreExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("JokerExpr" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("MuExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.MuExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.MuExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("DecorExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.DecorExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.DecorExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("QntExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.QntExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.QntExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Expr0N" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.Expr0NElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.Expr0NElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("PowerExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.PowerExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.PowerExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("RefExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.RefExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RefExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SchExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.SchExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SchExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SchExpr2" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.SchExpr2ElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SchExpr2ElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ApplExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ApplExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ApplExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Expr2N" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.Expr2NElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.Expr2NElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("BindExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.BindExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.BindExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("BindSelExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.BindSelExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ExistsExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ExistsExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ExistsExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Qnt1Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.Qnt1ExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.Qnt1ExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("TupleExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.TupleExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.TupleExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ProdExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ProdExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ProdExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("LetExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.LetExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.LetExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("NumExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.NumExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.NumExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("CondExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.CondExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.CondExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("PipeExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.PipeExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.PipeExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Exists1Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.Exists1ExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.Exists1ExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ProjExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ProjExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ProjExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("CompExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.CompExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.CompExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("IffExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.IffExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.IffExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 9;
                            return ;
                        }
                        if (("Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  9 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl.class), 10, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl.class), 10, ___uri, ___local, ___qname, __atts)));
                        return ;
                    case  3 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl)net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl)net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                        return ;
                    case  4 :
                        if (("RefName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 5;
                            return ;
                        }
                        if (("RefName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _RefName = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.RefNameElementImpl.class), 7, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Mixfix = net.sourceforge.czt.base.util.CztDatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        attIdx = context.getAttribute("", "Mixfix");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  7 :
                        state = 8;
                        continue outer;
                    case  5 :
                        attIdx = context.getAttribute("", "Decl");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _RefName = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromLeaveElement((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 6, ___uri, ___local, ___qname));
                        return ;
                    case  10 :
                        if (("Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 8;
                            return ;
                        }
                        break;
                    case  8 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  9 :
                        _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl) spawnChildFromLeaveElement((net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl.class), 10, ___uri, ___local, ___qname)));
                        return ;
                    case  3 :
                        spawnHandlerFromLeaveElement((((net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl)net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname);
                        return ;
                    case  6 :
                        if (("RefName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 7;
                            return ;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        if (("Mixfix" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  7 :
                        state = 8;
                        continue outer;
                    case  5 :
                        if (("Decl" == ___local)&&("" == ___uri)) {
                            _RefName = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 6, ___uri, ___local, ___qname));
                            return ;
                        }
                        _RefName = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 6, ___uri, ___local, ___qname));
                        return ;
                    case  8 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  9 :
                        _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl.class), 10, ___uri, ___local, ___qname)));
                        return ;
                    case  3 :
                        spawnHandlerFromEnterAttribute((((net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl)net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname);
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        attIdx = context.getAttribute("", "Mixfix");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  7 :
                        state = 8;
                        continue outer;
                    case  5 :
                        attIdx = context.getAttribute("", "Decl");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _RefName = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 6, ___uri, ___local, ___qname));
                        return ;
                    case  8 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  9 :
                        _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl.class), 10, ___uri, ___local, ___qname)));
                        return ;
                    case  3 :
                        spawnHandlerFromLeaveAttribute((((net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl)net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname);
                        return ;
                    case  2 :
                        if (("Mixfix" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  0 :
                            attIdx = context.getAttribute("", "Mixfix");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText1(v);
                                state = 3;
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                        case  7 :
                            state = 8;
                            continue outer;
                        case  5 :
                            attIdx = context.getAttribute("", "Decl");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _RefName = ((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl) spawnChildFromText((net.sourceforge.czt.z.jaxb.gen.impl.RefNameImpl.class), 6, value));
                            return ;
                        case  8 :
                            revertToParentFromText(value);
                            return ;
                        case  9 :
                            _Expr.add(((net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl) spawnChildFromText((net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl.class), 10, value)));
                            return ;
                        case  1 :
                            eatText1(value);
                            state = 2;
                            return ;
                        case  3 :
                            spawnHandlerFromText((((net.sourceforge.czt.z.jaxb.gen.impl.ExprImpl)net.sourceforge.czt.z.jaxb.gen.impl.RefExprImpl.this).new Unmarshaller(context)), 4, value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
