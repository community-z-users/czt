//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.2-b15-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2004.01.06 at 09:18:18 NZDT 
//


package net.sourceforge.czt.z.jaxb.gen.impl;

public class TupleSelExprImpl
    extends net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl
    implements net.sourceforge.czt.z.jaxb.gen.TupleSelExpr, com.sun.xml.bind.JAXBObject, net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallableObject, net.sourceforge.czt.oz.jaxb.gen.impl.runtime.XMLSerializable, net.sourceforge.czt.oz.jaxb.gen.impl.runtime.ValidatableObject
{

    protected java.lang.Integer _Select;
    public final static java.lang.Class version = (net.sourceforge.czt.z.jaxb.gen.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (net.sourceforge.czt.z.jaxb.gen.TupleSelExpr.class);
    }

    public java.lang.Integer getSelect() {
        return _Select;
    }

    public void setSelect(java.lang.Integer value) {
        _Select = value;
    }

    public net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallingEventHandler createUnmarshaller(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallingContext context) {
        return new net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.Unmarshaller(context);
    }

    public void serializeBody(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeBody(context);
    }

    public void serializeAttributes(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        context.startAttribute("", "Select");
        try {
            context.text(net.sourceforge.czt.base.util.CztDatatypeConverter.printInteger(((java.lang.Integer) _Select)), "Select");
        } catch (java.lang.Exception e) {
            net.sourceforge.czt.oz.jaxb.gen.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        super.serializeAttributes(context);
    }

    public void serializeURIs(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeURIs(context);
    }

    public java.lang.Class getPrimaryInterface() {
        return (net.sourceforge.czt.z.jaxb.gen.TupleSelExpr.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava"
+"/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp<\u000f\u00e8\u00d9ppsq\u0000~\u0000\u0000:Z}~ppsr\u0000\u001dcom"
+".sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001\u0002\u00a7\u00bd\u00f3ppsr\u0000\'com.sun"
+".msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLc"
+"om/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.Element"
+"Exp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModelq\u0000"
+"~\u0000\u0002xq\u0000~\u0000\u0003\u0002\u00a7\u00bd\u00e8sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000p\u0000sq"
+"\u0000~\u0000\u0000\u0002\u00a7\u00bd\u00ddppsq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsr\u0000 com.sun.msv.grammar.O"
+"neOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0001dw\u00e5q\u0000~\u0000\u000epsr\u0000 com.sun.msv.grammar.Attr"
+"ibuteExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\nxq\u0000~\u0000\u0003\u0001dw\u00e2q\u0000~"
+"\u0000\u000epsr\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\bsq\u0000~\u0000\r\u0001q\u0000~\u0000\u0018sr\u0000 com.sun.msv.grammar.AnyNam"
+"eClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\tq\u0000~\u0000\u0019q\u0000~\u0000\u001esr\u0000#com.sun.msv.grammar.SimpleName"
+"Class\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespac"
+"eURIq\u0000~\u0000 xq\u0000~\u0000\u001bt\u0000-net.sourceforge.czt.z.jaxb.gen.TermA.AnnsT"
+"ypet\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u0007\u0001CE\u00ddp"
+"psq\u0000~\u0000\u0015\u0001CE\u00d2q\u0000~\u0000\u000epsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L"
+"\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet"
+"\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003\u00003\u00b11ppsr\u0000\"com.sun.msv.d"
+"atatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd"
+".BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.Co"
+"ncreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatype"
+"Impl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000 L\u0000\btypeNameq\u0000~\u0000 L\u0000\nwhiteS"
+"pacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 ht"
+"tp://www.w3.org/2001/XMLSchemat\u0000\u0005QNamesr\u00005com.sun.msv.dataty"
+"pe.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.ms"
+"v.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.m"
+"sv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\n"
+"q\u0000~\u0000\u000epsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalName"
+"q\u0000~\u0000 L\u0000\fnamespaceURIq\u0000~\u0000 xpq\u0000~\u00001q\u0000~\u00000sq\u0000~\u0000\u001ft\u0000\u0004typet\u0000)http://"
+"www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000\u0004Annst\u0000\u001ehttp:"
+"//czt.sourceforge.net/zmlq\u0000~\u0000\u001esq\u0000~\u0000\u00077\u00b2\u00bf\u0086ppsq\u0000~\u0000\u00076NG\u0089ppsq\u0000~\u0000\u0007"
+"4\u00e9\u00cf\u008cppsq\u0000~\u0000\u00073\u0085W\u008fppsq\u0000~\u0000\u00072 \u00df\u0092ppsq\u0000~\u0000\u00070\u00bcg\u0095ppsq\u0000~\u0000\u0007/W\u00ef\u0098ppsq\u0000~\u0000\u0007"
+"-\u00f3w\u009bppsq\u0000~\u0000\u0007,\u008e\u00ff\u009eppsq\u0000~\u0000\u0007+*\u0087\u00a1ppsq\u0000~\u0000\u0007)\u00c6\u000f\u00a4ppsq\u0000~\u0000\u0007(a\u0097\u00a7ppsq\u0000~\u0000\u0007"
+"&\u00fd\u001f\u00aappsq\u0000~\u0000\u0007%\u0098\u00a7\u00adppsq\u0000~\u0000\u0007$4/\u00b0ppsq\u0000~\u0000\u0007\"\u00cf\u00b7\u00b3ppsq\u0000~\u0000\u0007!k?\u00b6ppsq\u0000~\u0000\u0007"
+" \u0006\u00c7\u00b9ppsq\u0000~\u0000\u0007\u001e\u00a2O\u00bcppsq\u0000~\u0000\u0007\u001d=\u00d7\u00bfppsq\u0000~\u0000\u0007\u001b\u00d9_\u00c2ppsq\u0000~\u0000\u0007\u001at\u00e7\u00c5ppsq\u0000~\u0000\u0007"
+"\u0019\u0010o\u00c8ppsq\u0000~\u0000\u0007\u0017\u00ab\u00f7\u00cbppsq\u0000~\u0000\u0007\u0016G\u007f\u00ceppsq\u0000~\u0000\u0007\u0014\u00e3\u0007\u00d1ppsq\u0000~\u0000\u0007\u0013~\u008f\u00d4ppsq\u0000~\u0000\u0007"
+"\u0012\u001a\u0017\u00d7ppsq\u0000~\u0000\u0007\u0010\u00b5\u009f\u00dappsq\u0000~\u0000\u0007\u000fQ\'\u00ddppsq\u0000~\u0000\u0007\r\u00ec\u00af\u00e0ppsq\u0000~\u0000\u0007\f\u00887\u00e3ppsq\u0000~\u0000\u0007"
+"\u000b#\u00bf\u00e6ppsq\u0000~\u0000\u0007\t\u00bfG\u00e9ppsq\u0000~\u0000\u0007\bZ\u00cf\u00ecppsq\u0000~\u0000\u0007\u0006\u00f6W\u00efppsq\u0000~\u0000\u0007\u0005\u0091\u00df\u00f2ppsq\u0000~\u0000\u0007"
+"\u0004-g\u00f5ppsq\u0000~\u0000\u0007\u0002\u00c8\u00ef\u00f8ppsq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000eps"
+"q\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000(net.sourceforge.czt.z"
+".jaxb.gen.TupleExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q"
+"\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000,net.sourceforge"
+".czt.z.jaxb.gen.Expr2NElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0pps"
+"q\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000\'net.s"
+"ourceforge.czt.z.jaxb.gen.PipeExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001d"
+"w\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000*"
+"net.sourceforge.czt.z.jaxb.gen.Exists1Exprq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000"
+"sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001es"
+"q\u0000~\u0000\u001ft\u0000&net.sourceforge.czt.z.jaxb.gen.PreExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw"
+"\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000"
+"~\u0000\u001esq\u0000~\u0000\u001ft\u0000&net.sourceforge.czt.z.jaxb.gen.SetExprq\u0000~\u0000#sq\u0000~\u0000"
+"\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~"
+"\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000\'net.sourceforge.czt.z.jaxb.gen.ProdExprq\u0000~\u0000#"
+"sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~"
+"\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000.net.sourceforge.czt.z.jaxb.gen.SchExpr2"
+"Elementq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001"
+"dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000*net.sourceforge.czt.z.jaxb."
+"gen.ImpliesExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000e"
+"psq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000(net.sourceforge.czt"
+".z.jaxb.gen.PowerExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw"
+"\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000-net.sourcefor"
+"ge.czt.z.jaxb.gen.SchExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0"
+"ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000.ne"
+"t.sourceforge.czt.z.jaxb.gen.HideExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbp"
+"p\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000"
+"\u001esq\u0000~\u0000\u001ft\u00001net.sourceforge.czt.z.jaxb.gen.BindSelExprElementq"
+"\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000e"
+"pq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000.net.sourceforge.czt.z.jaxb.gen.Appl"
+"ExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000"
+"~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000&net.sourceforge.czt.z.j"
+"axb.gen.NegExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000e"
+"psq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000)net.sourceforge.czt"
+".z.jaxb.gen.ForallExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001d"
+"w\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000*net.sourcefo"
+"rge.czt.z.jaxb.gen.SetCompExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0pp"
+"sq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00002net."
+"sourceforge.czt.z.jaxb.gen.TupleSelExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw"
+"\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000"
+"~\u0000\u001esq\u0000~\u0000\u001ft\u0000-net.sourceforge.czt.z.jaxb.gen.NumExprElementq\u0000~"
+"\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq"
+"\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000.net.sourceforge.czt.z.jaxb.gen.Qnt1Ex"
+"prElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000"
+"\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000&net.sourceforge.czt.z.jax"
+"b.gen.IffExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000eps"
+"q\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000%net.sourceforge.czt.z"
+".jaxb.gen.OrExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000"
+"\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000.net.sourceforge.cz"
+"t.z.jaxb.gen.CondExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq"
+"\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000\'net.so"
+"urceforge.czt.z.jaxb.gen.CompExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw"
+"\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000)n"
+"et.sourceforge.czt.z.jaxb.gen.ExistsExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq"
+"\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000"
+"~\u0000\u001ft\u0000)net.sourceforge.czt.z.jaxb.gen.LambdaExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001d"
+"w\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq"
+"\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00000net.sourceforge.czt.z.jaxb.gen.RenameExprElemen"
+"tq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~"
+"\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000/net.sourceforge.czt.z.jaxb.gen.De"
+"corExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000ep"
+"sq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000,net.sourceforge.czt."
+"z.jaxb.gen.Expr0NElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012"
+"\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000&net.source"
+"forge.czt.z.jaxb.gen.AndExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq"
+"\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000\'net.so"
+"urceforge.czt.z.jaxb.gen.ProjExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw"
+"\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00003n"
+"et.sourceforge.czt.zpatt.jaxb.gen.JokerExprElementq\u0000~\u0000#sq\u0000~\u0000"
+"\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~"
+"\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000/net.sourceforge.czt.z.jaxb.gen.ThetaExprElem"
+"entq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q"
+"\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000.net.sourceforge.czt.z.jaxb.gen."
+"BindExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000e"
+"psq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000-net.sourceforge.czt"
+".z.jaxb.gen.RefExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~"
+"\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000%net.sour"
+"ceforge.czt.z.jaxb.gen.MuExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0pps"
+"q\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000-net.s"
+"ourceforge.czt.z.jaxb.gen.QntExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq"
+"\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000"
+"~\u0000\u001ft\u0000&net.sourceforge.czt.z.jaxb.gen.LetExprq\u0000~\u0000#sq\u0000~\u0000\t\u0001dw\u00fbp"
+"p\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000"
+"\u001esq\u0000~\u0000\u001ft\u0000+net.sourceforge.czt.z.jaxb.gen.Expr2Elementq\u0000~\u0000#sq"
+"\u0000~\u0000\t\u0001dw\u00fbpp\u0000sq\u0000~\u0000\u0007\u0001dw\u00f0ppsq\u0000~\u0000\u0012\u0001dw\u00e5q\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0001dw\u00e2q\u0000~\u0000\u000epq\u0000~\u0000\u0018"
+"q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000+net.sourceforge.czt.z.jaxb.gen.Expr1Eleme"
+"ntq\u0000~\u0000#sq\u0000~\u0000\u0015\u0001\u00b5kVppsq\u0000~\u0000&\u0000\u00db\u0003\u00b1ppsr\u0000,com.sun.msv.datatype.xsd."
+"PositiveIntegerType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000$com.sun.msv.datatype.xsd.I"
+"ntegerType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000+com.sun.msv.datatype.xsd.IntegerDer"
+"ivedType\u0099\u00f1]\u0090&6k\u00be\u0002\u0000\u0001L\u0000\nbaseFacetst\u0000)Lcom/sun/msv/datatype/xsd"
+"/XSDatatypeImpl;xq\u0000~\u0000+q\u0000~\u00000t\u0000\u000fpositiveIntegerq\u0000~\u00004sr\u0000*com.su"
+"n.msv.datatype.xsd.MinInclusiveFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.m"
+"sv.datatype.xsd.RangeFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\nlimitValuet\u0000\u0012Ljava/l"
+"ang/Object;xr\u00009com.sun.msv.datatype.xsd.DataTypeWithValueCon"
+"straintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataType"
+"WithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bb"
+"aseTypeq\u0000~\u0001[L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/Conc"
+"reteType;L\u0000\tfacetNameq\u0000~\u0000 xq\u0000~\u0000-ppq\u0000~\u00004\u0000\u0000sr\u0000/com.sun.msv.dat"
+"atype.xsd.NonNegativeIntegerType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0001Yq\u0000~\u00000t\u0000\u0012non"
+"NegativeIntegerq\u0000~\u00004sq\u0000~\u0001^ppq\u0000~\u00004\u0000\u0000sq\u0000~\u0001Yq\u0000~\u00000t\u0000\u0007integerq\u0000~\u0000"
+"4sr\u0000,com.sun.msv.datatype.xsd.FractionDigitsFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001"
+"I\u0000\u0005scalexr\u0000;com.sun.msv.datatype.xsd.DataTypeWithLexicalCons"
+"traintFacetT\u0090\u001c>\u001azb\u00ea\u0002\u0000\u0000xq\u0000~\u0001bppq\u0000~\u00004\u0001\u0000sr\u0000#com.sun.msv.datatyp"
+"e.xsd.NumberType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000+q\u0000~\u00000t\u0000\u0007decimalq\u0000~\u00004q\u0000~\u0001ot\u0000"
+"\u000efractionDigits\u0000\u0000\u0000\u0000q\u0000~\u0001it\u0000\fminInclusivesr\u0000)com.sun.msv.datat"
+"ype.xsd.IntegerValueType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0005valueq\u0000~\u0000 xr\u0000\u0010java.lan"
+"g.Number\u0086\u00ac\u0095\u001d\u000b\u0094\u00e0\u008b\u0002\u0000\u0000xpt\u0000\u00010q\u0000~\u0001fq\u0000~\u0001rsq\u0000~\u0001st\u0000\u00011q\u0000~\u00006sq\u0000~\u00007q\u0000~\u0001"
+"]q\u0000~\u00000sq\u0000~\u0000\u001ft\u0000\u0006Selectt\u0000\u0000sr\u0000\"com.sun.msv.grammar.ExpressionPo"
+"ol\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPo"
+"ol$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$Close"
+"dHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthresholdL\u0000\u0006parentq\u0000~\u0001~[\u0000\u0005tablet\u0000"
+"![Lcom/sun/msv/grammar/Expression;xp\u0000\u0000\u0000~\u0000\u0000\u0000\u00e6pur\u0000![Lcom.sun.m"
+"sv.grammar.Expression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0002\u00ffpppppppppppq\u0000~\u0000Kppppp"
+"ppppppppppppppppppppq\u0000~\u0000Npppppppppppppppppppppppppq\u0000~\u0000Qppppp"
+"ppppppppppppppppppppq\u0000~\u0000Tpppppppppppppppppppppppppq\u0000~\u0000Wppppp"
+"ppq\u0000~\u0000\u0006pppppppppppppppppq\u0000~\u0000Zpppppppppppppppppppppppppq\u0000~\u0000]p"
+"pppppppppppq\u0000~\u0000Appppppppq\u0000~\u0000\u000fpppq\u0000~\u0000`ppppppppppppq\u0000~\u0000Dppppq\u0000"
+"~\u0000\bpq\u0000~\u0000\u0005pppppq\u0000~\u0000cpppq\u0000~\u0001@q\u0000~\u0001:q\u0000~\u00014q\u0000~\u0001.q\u0000~\u0001(q\u0000~\u0001\"q\u0000~\u0001\u001cq\u0000~"
+"\u0001\u0016q\u0000~\u0001\u0010q\u0000~\u0000Gq\u0000~\u0001\nq\u0000~\u0001?q\u0000~\u00019q\u0000~\u00013q\u0000~\u0001-q\u0000~\u0001\'q\u0000~\u0001!q\u0000~\u0001\u001bq\u0000~\u0001\u0015q\u0000~"
+"\u0001\u000fq\u0000~\u0001\tq\u0000~\u0001\u0003q\u0000~\u0001\u0004q\u0000~\u0000\u00fdq\u0000~\u0000\u00feq\u0000~\u0000\u00f7q\u0000~\u0000\u00f8q\u0000~\u0000\u00f1q\u0000~\u0000\u00f2q\u0000~\u0000\u00ebq\u0000~\u0000\u00ecq\u0000~"
+"\u0000\u00e5q\u0000~\u0000\u00e6q\u0000~\u0000\u00dfq\u0000~\u0000\u00e0q\u0000~\u0000Jq\u0000~\u0000\u00d9q\u0000~\u0000\u00daq\u0000~\u0000\u00d3q\u0000~\u0000\u00d4q\u0000~\u0000\u0014q\u0000~\u0000hq\u0000~\u0000nq\u0000~"
+"\u0000tq\u0000~\u0000zq\u0000~\u0000\u0080q\u0000~\u0000\u0086q\u0000~\u0000\u008cq\u0000~\u0000\u0011q\u0000~\u0000gq\u0000~\u0000mq\u0000~\u0000sq\u0000~\u0000yq\u0000~\u0000\u007fq\u0000~\u0000\u0085q\u0000~"
+"\u0000\u008bq\u0000~\u0000\u0091q\u0000~\u0000\u0097q\u0000~\u0000\u009dq\u0000~\u0000\u00a3q\u0000~\u0000\u00a9q\u0000~\u0000Mq\u0000~\u0000\u00afq\u0000~\u0000\u00b5q\u0000~\u0000\u00bbq\u0000~\u0000\u00c1q\u0000~\u0000\u00c7q\u0000~"
+"\u0000\u00cdq\u0000~\u0000\u0092q\u0000~\u0000\u0098q\u0000~\u0000\u009eq\u0000~\u0000\u00a4q\u0000~\u0000\u00aaq\u0000~\u0000\u00b0q\u0000~\u0000\u00b6q\u0000~\u0000\u00bcq\u0000~\u0000\u00c2q\u0000~\u0000\u00c8q\u0000~\u0000\u00ceq\u0000~"
+"\u0001Fq\u0000~\u0001Eq\u0000~\u0001Lq\u0000~\u0001Kq\u0000~\u0001Rq\u0000~\u0001Qppq\u0000~\u0000Ppppppppppppppppppppppppppq"
+"\u0000~\u0000Spppppppppppppppppppppppppq\u0000~\u0000Vpppppppppppppppppppppppppq"
+"\u0000~\u0000Ypppppppppppppppppppppppppq\u0000~\u0000\\ppppppppppppq\u0000~\u0000@ppppppppp"
+"pppq\u0000~\u0000_ppppppppppppq\u0000~\u0000Cppppppppppppq\u0000~\u0000bppppppppppppq\u0000~\u0000Fp"
+"pppppppppppq\u0000~\u0000eppppppppppppq\u0000~\u0000Ipppppppppppppppppppppppppq\u0000"
+"~\u0000Lpppppppppppppppppppppppppq\u0000~\u0000Opppppppppppppppppppppppppq\u0000"
+"~\u0000Rpppppppppppppppppppppppppq\u0000~\u0000Upppppppppppppppppppppppppq\u0000"
+"~\u0000Xpppppppppppppppppppppppppq\u0000~\u0000[ppppppppppppq\u0000~\u0000?pppppppppp"
+"ppq\u0000~\u0000^ppppppppppppq\u0000~\u0000Bpppppq\u0000~\u0000$ppppppq\u0000~\u0000appppppppppppq\u0000~"
+"\u0000Eppppppppppppq\u0000~\u0000dppppppppppppq\u0000~\u0000Hpppppppppppppp"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends net.sourceforge.czt.oz.jaxb.gen.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallingContext context) {
            super(context, "-----");
        }

        protected Unmarshaller(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("TupleExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Expr2N" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("PipeExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Exists1Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("PreExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("SetExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ProdExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("SchExpr2" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ImpliesExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("PowerExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("SchExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("HideExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("BindSelExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ApplExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("NegExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ForallExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("SetCompExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("TupleSelExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("NumExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Qnt1Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("IffExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("OrExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("CondExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("CompExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ExistsExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("LambdaExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("RenameExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("DecorExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Expr0N" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("AndExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ProjExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("JokerExpr" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ThetaExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("BindExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("RefExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("MuExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("QntExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("LetExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Expr2" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Expr1" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        spawnHandlerFromEnterElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                        return ;
                    case  0 :
                        attIdx = context.getAttribute("", "Select");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 3;
                            continue outer;
                        }
                        break;
                    case  4 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Select = net.sourceforge.czt.base.util.CztDatatypeConverter.parseInteger(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        spawnHandlerFromLeaveElement((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname);
                        return ;
                    case  0 :
                        attIdx = context.getAttribute("", "Select");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 3;
                            continue outer;
                        }
                        break;
                    case  4 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        spawnHandlerFromEnterAttribute((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname);
                        return ;
                    case  0 :
                        if (("Select" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        break;
                    case  4 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        spawnHandlerFromLeaveAttribute((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname);
                        return ;
                    case  0 :
                        attIdx = context.getAttribute("", "Select");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 3;
                            continue outer;
                        }
                        break;
                    case  2 :
                        if (("Select" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  4 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  1 :
                            eatText1(value);
                            state = 2;
                            return ;
                        case  3 :
                            spawnHandlerFromText((((net.sourceforge.czt.z.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.z.jaxb.gen.impl.TupleSelExprImpl.this).new Unmarshaller(context)), 4, value);
                            return ;
                        case  0 :
                            attIdx = context.getAttribute("", "Select");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText1(v);
                                state = 3;
                                continue outer;
                            }
                            break;
                        case  4 :
                            revertToParentFromText(value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
