
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToJaxb.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.base.ast.Term;

import net.sourceforge.czt.z.jaxb.gen.*;
import org.w3._2001.xmlschema.*;

/**
 * The marshaller responsible for serializing XML data.
 *
 * @author Gnast version 0.1
 */
public class AstToJaxb
  implements net.sourceforge.czt.z.visitor.ZVisitor,
             net.sourceforge.czt.base.visitor.TermVisitor
{
  protected boolean createElement_ = true;

  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    objectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    annsObjectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();
  private org.w3._2001.xmlschema.ObjectFactory
    anyTypeObjectFactory_ = new org.w3._2001.xmlschema.ObjectFactory();

  /**
   * A map that maps id's to the corresponding Object.
   */
  private Map hash_ = new HashMap();

  private String getClassName()
  {
    return "net.sourceforge.czt.z.jaxb.AstToJaxb";
  }

  private Logger getLogger()
  {
    return Logger.getLogger(getClassName());
  }

  public Object visitTerm(Term zedObject)
  {
    throw(new UnsupportedOperationException("Unexpected element "
                                            + zedObject.getClass().getName()));
  }


  public Object visitFreetype(net.sourceforge.czt.z.ast.Freetype zedObject)
  {
    getLogger().entering(getClassName(), "visitFreetype", zedObject);

    Freetype jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createFreetypeElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createFreetype();
      }
      createElement_ = true;
      if (zedObject.getDeclName() != null) {
        Term term = zedObject.getDeclName();
        jaxbObject.setDeclName((DeclName) term.accept(this));
      }
      {
        List list = zedObject.getBranch();
        List newlist = jaxbObject.getBranch();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Freetype to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a Freetype to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitFreetype", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitExists1Expr(net.sourceforge.czt.z.ast.Exists1Expr zedObject)
  {
    getLogger().entering(getClassName(), "visitExists1Expr", zedObject);

    Exists1Expr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createExists1Expr();
      createElement_ = true;
      if (zedObject.getSchText() != null) {
        Term term = zedObject.getSchText();
        jaxbObject.setSchText((SchText) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Exists1Expr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a Exists1Expr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitExists1Expr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParenAnn(net.sourceforge.czt.z.ast.ParenAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitParenAnn", zedObject);

    ParenAnn jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParenAnn();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParenAnn to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitParenAnn", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNameNamePair(net.sourceforge.czt.z.ast.NameNamePair zedObject)
  {
    getLogger().entering(getClassName(), "visitNameNamePair", zedObject);

    NameNamePair jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNameNamePairElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createNameNamePair();
      }
      createElement_ = false;
      if (zedObject.getOldName() != null) {
        Term term = zedObject.getOldName();
        jaxbObject.setOldName((RefName) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getNewName() != null) {
        Term term = zedObject.getNewName();
        jaxbObject.setNewName((DeclName) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NameNamePair to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitNameNamePair", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitLatexMarkupPara(net.sourceforge.czt.z.ast.LatexMarkupPara zedObject)
  {
    getLogger().entering(getClassName(), "visitLatexMarkupPara", zedObject);

    LatexMarkupPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createLatexMarkupParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createLatexMarkupPara();
      }
      {
        List list = zedObject.getDirective();
        List newlist = jaxbObject.getDirective();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a LatexMarkupPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a LatexMarkupPara to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitLatexMarkupPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitApplExpr(net.sourceforge.czt.z.ast.ApplExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitApplExpr", zedObject);

    ApplExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createApplExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createApplExpr();
      }
      createElement_ = true;
      if (zedObject.getLeftExpr() != null) {
        Term term = zedObject.getLeftExpr();
        jaxbObject.setLeftExpr((Expr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightExpr() != null) {
        Term term = zedObject.getRightExpr();
        jaxbObject.setRightExpr((Expr) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getMixfix() != null) {
        jaxbObject.setMixfix(zedObject.getMixfix());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ApplExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ApplExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitApplExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitLetExpr(net.sourceforge.czt.z.ast.LetExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitLetExpr", zedObject);

    LetExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createLetExpr();
      createElement_ = true;
      if (zedObject.getSchText() != null) {
        Term term = zedObject.getSchText();
        jaxbObject.setSchText((SchText) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a LetExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a LetExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitLetExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSignature(net.sourceforge.czt.z.ast.Signature zedObject)
  {
    getLogger().entering(getClassName(), "visitSignature", zedObject);

    Signature jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSignatureElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createSignature();
      }
      {
        List list = zedObject.getNameTypePair();
        List newlist = jaxbObject.getNameTypePair();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Signature to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSignature", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitConstDecl(net.sourceforge.czt.z.ast.ConstDecl zedObject)
  {
    getLogger().entering(getClassName(), "visitConstDecl", zedObject);

    ConstDecl jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createConstDeclElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createConstDecl();
      }
      createElement_ = true;
      if (zedObject.getDeclName() != null) {
        Term term = zedObject.getDeclName();
        jaxbObject.setDeclName((DeclName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ConstDecl to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ConstDecl to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitConstDecl", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNextStroke(net.sourceforge.czt.z.ast.NextStroke zedObject)
  {
    getLogger().entering(getClassName(), "visitNextStroke", zedObject);

    NextStroke jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNextStroke();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NextStroke to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitNextStroke", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInStroke(net.sourceforge.czt.z.ast.InStroke zedObject)
  {
    getLogger().entering(getClassName(), "visitInStroke", zedObject);

    InStroke jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInStroke();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InStroke to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitInStroke", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRefName(net.sourceforge.czt.z.ast.RefName zedObject)
  {
    getLogger().entering(getClassName(), "visitRefName", zedObject);
    try {
      RefName jaxbObject = objectFactory_.createRefNameElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createRefName();
      }
      if (zedObject.getDecl() != null) {
        String id = zedObject.getDecl().getId();
        getLogger().finer("Retrieve reference " + id);
        DeclName decl = (DeclName) hash_.get(id);
        if (decl == null) {
          getLogger().warning("Could not find reference " + id);
        }
        jaxbObject.setDecl(decl);
      }
      {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
            annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
      }
      jaxbObject.setWord((String) zedObject.getWord());
      {
        List list = zedObject.getStroke();
        List newlist = jaxbObject.getStroke();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Term term = (Term) iter.next();
          Object o = term.accept(this);
          newlist.add(o);
        }
      }
      getLogger().exiting(getClassName(), "visitRefName", jaxbObject);
      createElement_ = true;
      return jaxbObject;
    }
    catch (Exception exception) {
      String message = "class AstToJaxb: "
                       + "Cannot transform a RefName to the corresponding "
                       + "Jaxb class";
      throw new CztException(message, exception);
    }
  }

  public Object visitMemPred(net.sourceforge.czt.z.ast.MemPred zedObject)
  {
    getLogger().entering(getClassName(), "visitMemPred", zedObject);

    MemPred jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createMemPredElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createMemPred();
      }
      createElement_ = true;
      if (zedObject.getLeftExpr() != null) {
        Term term = zedObject.getLeftExpr();
        jaxbObject.setLeftExpr((Expr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightExpr() != null) {
        Term term = zedObject.getRightExpr();
        jaxbObject.setRightExpr((Expr) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getMixfix() != null) {
        jaxbObject.setMixfix(zedObject.getMixfix());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a MemPred to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a MemPred to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitMemPred", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitProdType(net.sourceforge.czt.z.ast.ProdType zedObject)
  {
    getLogger().entering(getClassName(), "visitProdType", zedObject);

    ProdType jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createProdTypeElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createProdType();
      }
      {
        List list = zedObject.getType();
        List newlist = jaxbObject.getType();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProdType to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ProdType to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitProdType", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitImpliesExpr(net.sourceforge.czt.z.ast.ImpliesExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitImpliesExpr", zedObject);

    ImpliesExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createImpliesExpr();
      createElement_ = true;
      if (zedObject.getLeftExpr() != null) {
        Term term = zedObject.getLeftExpr();
        jaxbObject.setLeftExpr((Expr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightExpr() != null) {
        Term term = zedObject.getRightExpr();
        jaxbObject.setRightExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ImpliesExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ImpliesExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitImpliesExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitMuExpr(net.sourceforge.czt.z.ast.MuExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitMuExpr", zedObject);

    MuExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createMuExpr();
      createElement_ = true;
      if (zedObject.getSchText() != null) {
        Term term = zedObject.getSchText();
        jaxbObject.setSchText((SchText) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a MuExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a MuExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitMuExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitOrPred(net.sourceforge.czt.z.ast.OrPred zedObject)
  {
    getLogger().entering(getClassName(), "visitOrPred", zedObject);

    OrPred jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createOrPred();
      createElement_ = true;
      if (zedObject.getLeftPred() != null) {
        Term term = zedObject.getLeftPred();
        jaxbObject.setLeftPred((Pred) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightPred() != null) {
        Term term = zedObject.getRightPred();
        jaxbObject.setRightPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OrPred to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a OrPred to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitOrPred", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitExistsExpr(net.sourceforge.czt.z.ast.ExistsExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitExistsExpr", zedObject);

    ExistsExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createExistsExpr();
      createElement_ = true;
      if (zedObject.getSchText() != null) {
        Term term = zedObject.getSchText();
        jaxbObject.setSchText((SchText) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExistsExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ExistsExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitExistsExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitVarDecl(net.sourceforge.czt.z.ast.VarDecl zedObject)
  {
    getLogger().entering(getClassName(), "visitVarDecl", zedObject);

    VarDecl jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createVarDeclElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createVarDecl();
      }
      {
        List list = zedObject.getDeclName();
        List newlist = jaxbObject.getDeclName();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a VarDecl to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a VarDecl to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitVarDecl", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNarrSect(net.sourceforge.czt.z.ast.NarrSect zedObject)
  {
    getLogger().entering(getClassName(), "visitNarrSect", zedObject);

    NarrSect jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNarrSectElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createNarrSect();
      }
      {
        List list = zedObject.getContent();
        if (list.size() > 0) {
          AnyType anyType =
            anyTypeObjectFactory_.createAnyType();
          List newlist = anyType.getContent();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Object o = iter.next();
            if (o instanceof Term) {
              createElement_ = false;
              o = ((Term) o).accept(this);
            }
            newlist.add(o);
          }
          jaxbObject.setContent(anyType);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NarrSect to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a NarrSect to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitNarrSect", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitFreePara(net.sourceforge.czt.z.ast.FreePara zedObject)
  {
    getLogger().entering(getClassName(), "visitFreePara", zedObject);

    FreePara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createFreeParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createFreePara();
      }
      {
        List list = zedObject.getFreetype();
        List newlist = jaxbObject.getFreetype();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a FreePara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a FreePara to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitFreePara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCompExpr(net.sourceforge.czt.z.ast.CompExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitCompExpr", zedObject);

    CompExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCompExpr();
      createElement_ = true;
      if (zedObject.getLeftExpr() != null) {
        Term term = zedObject.getLeftExpr();
        jaxbObject.setLeftExpr((Expr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightExpr() != null) {
        Term term = zedObject.getRightExpr();
        jaxbObject.setRightExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CompExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a CompExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitCompExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitBindExpr(net.sourceforge.czt.z.ast.BindExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitBindExpr", zedObject);

    BindExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createBindExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createBindExpr();
      }
      {
        List list = zedObject.getNameExprPair();
        List newlist = jaxbObject.getNameExprPair();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a BindExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a BindExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitBindExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCondExpr(net.sourceforge.czt.z.ast.CondExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitCondExpr", zedObject);

    CondExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCondExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCondExpr();
      }
      createElement_ = true;
      if (zedObject.getPred() != null) {
        Term term = zedObject.getPred();
        jaxbObject.setPred((Pred) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getLeftExpr() != null) {
        Term term = zedObject.getLeftExpr();
        jaxbObject.setLeftExpr((Expr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightExpr() != null) {
        Term term = zedObject.getRightExpr();
        jaxbObject.setRightExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CondExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a CondExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitCondExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitForallExpr(net.sourceforge.czt.z.ast.ForallExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitForallExpr", zedObject);

    ForallExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createForallExpr();
      createElement_ = true;
      if (zedObject.getSchText() != null) {
        Term term = zedObject.getSchText();
        jaxbObject.setSchText((SchText) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ForallExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ForallExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitForallExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNarrPara(net.sourceforge.czt.z.ast.NarrPara zedObject)
  {
    getLogger().entering(getClassName(), "visitNarrPara", zedObject);

    NarrPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNarrParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createNarrPara();
      }
      {
        List list = zedObject.getContent();
        if (list.size() > 0) {
          AnyType anyType =
            anyTypeObjectFactory_.createAnyType();
          List newlist = anyType.getContent();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Object o = iter.next();
            if (o instanceof Term) {
              createElement_ = false;
              o = ((Term) o).accept(this);
            }
            newlist.add(o);
          }
          jaxbObject.setContent(anyType);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NarrPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a NarrPara to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitNarrPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitTruePred(net.sourceforge.czt.z.ast.TruePred zedObject)
  {
    getLogger().entering(getClassName(), "visitTruePred", zedObject);

    TruePred jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createTruePred();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a TruePred to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a TruePred to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitTruePred", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitDirective(net.sourceforge.czt.z.ast.Directive zedObject)
  {
    getLogger().entering(getClassName(), "visitDirective", zedObject);

    Directive jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createDirectiveElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createDirective();
      }
      createElement_ = false;
      if (zedObject.getCommand() != null) {
        jaxbObject.setCommand(zedObject.getCommand());
      }
      createElement_ = false;
      if (zedObject.getUnicode() != null) {
        jaxbObject.setUnicode(zedObject.getUnicode());
      }
      createElement_ = false;
      if (zedObject.getType() != null) {
        jaxbObject.setType(zedObject.getType().toString());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Directive to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a Directive to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitDirective", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitOperator(net.sourceforge.czt.z.ast.Operator zedObject)
  {
    getLogger().entering(getClassName(), "visitOperator", zedObject);

    Operator jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createOperatorElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createOperator();
      }
      createElement_ = false;
      if (zedObject.getWord() != null) {
        jaxbObject.setWord(zedObject.getWord());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Operator to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitOperator", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNumExpr(net.sourceforge.czt.z.ast.NumExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitNumExpr", zedObject);

    NumExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNumExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createNumExpr();
      }
      createElement_ = false;
      if (zedObject.getValue() != null) {
        jaxbObject.setValue(zedObject.getValue());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NumExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a NumExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitNumExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNameExprPair(net.sourceforge.czt.z.ast.NameExprPair zedObject)
  {
    getLogger().entering(getClassName(), "visitNameExprPair", zedObject);

    NameExprPair jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNameExprPairElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createNameExprPair();
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        Term term = zedObject.getName();
        jaxbObject.setName((DeclName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NameExprPair to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitNameExprPair", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitTupleSelExpr(net.sourceforge.czt.z.ast.TupleSelExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitTupleSelExpr", zedObject);

    TupleSelExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createTupleSelExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createTupleSelExpr();
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getSelect() != null) {
        jaxbObject.setSelect(zedObject.getSelect());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a TupleSelExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a TupleSelExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitTupleSelExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitLambdaExpr(net.sourceforge.czt.z.ast.LambdaExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitLambdaExpr", zedObject);

    LambdaExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createLambdaExpr();
      createElement_ = true;
      if (zedObject.getSchText() != null) {
        Term term = zedObject.getSchText();
        jaxbObject.setSchText((SchText) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a LambdaExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a LambdaExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitLambdaExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIffExpr(net.sourceforge.czt.z.ast.IffExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitIffExpr", zedObject);

    IffExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIffExpr();
      createElement_ = true;
      if (zedObject.getLeftExpr() != null) {
        Term term = zedObject.getLeftExpr();
        jaxbObject.setLeftExpr((Expr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightExpr() != null) {
        Term term = zedObject.getRightExpr();
        jaxbObject.setRightExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IffExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a IffExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitIffExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIffPred(net.sourceforge.czt.z.ast.IffPred zedObject)
  {
    getLogger().entering(getClassName(), "visitIffPred", zedObject);

    IffPred jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIffPred();
      createElement_ = true;
      if (zedObject.getLeftPred() != null) {
        Term term = zedObject.getLeftPred();
        jaxbObject.setLeftPred((Pred) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightPred() != null) {
        Term term = zedObject.getRightPred();
        jaxbObject.setRightPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IffPred to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a IffPred to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitIffPred", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitFalsePred(net.sourceforge.czt.z.ast.FalsePred zedObject)
  {
    getLogger().entering(getClassName(), "visitFalsePred", zedObject);

    FalsePred jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createFalsePred();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a FalsePred to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a FalsePred to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitFalsePred", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitTypeEnvAnn(net.sourceforge.czt.z.ast.TypeEnvAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitTypeEnvAnn", zedObject);

    TypeEnvAnn jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createTypeEnvAnnElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createTypeEnvAnn();
      }
      {
        List list = zedObject.getNameTypePair();
        List newlist = jaxbObject.getNameTypePair();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a TypeEnvAnn to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitTypeEnvAnn", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitUnparsedZSect(net.sourceforge.czt.z.ast.UnparsedZSect zedObject)
  {
    getLogger().entering(getClassName(), "visitUnparsedZSect", zedObject);

    UnparsedZSect jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createUnparsedZSectElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createUnparsedZSect();
      }
      {
        List list = zedObject.getContent();
        if (list.size() > 0) {
          AnyType anyType =
            anyTypeObjectFactory_.createAnyType();
          List newlist = anyType.getContent();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Object o = iter.next();
            if (o instanceof Term) {
              createElement_ = false;
              o = ((Term) o).accept(this);
            }
            newlist.add(o);
          }
          jaxbObject.setContent(anyType);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a UnparsedZSect to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a UnparsedZSect to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitUnparsedZSect", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitUnparsedPara(net.sourceforge.czt.z.ast.UnparsedPara zedObject)
  {
    getLogger().entering(getClassName(), "visitUnparsedPara", zedObject);

    UnparsedPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createUnparsedParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createUnparsedPara();
      }
      {
        List list = zedObject.getContent();
        if (list.size() > 0) {
          AnyType anyType =
            anyTypeObjectFactory_.createAnyType();
          List newlist = anyType.getContent();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Object o = iter.next();
            if (o instanceof Term) {
              createElement_ = false;
              o = ((Term) o).accept(this);
            }
            newlist.add(o);
          }
          jaxbObject.setContent(anyType);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a UnparsedPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a UnparsedPara to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitUnparsedPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitImpliesPred(net.sourceforge.czt.z.ast.ImpliesPred zedObject)
  {
    getLogger().entering(getClassName(), "visitImpliesPred", zedObject);

    ImpliesPred jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createImpliesPred();
      createElement_ = true;
      if (zedObject.getLeftPred() != null) {
        Term term = zedObject.getLeftPred();
        jaxbObject.setLeftPred((Pred) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightPred() != null) {
        Term term = zedObject.getRightPred();
        jaxbObject.setRightPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ImpliesPred to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ImpliesPred to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitImpliesPred", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNameTypePair(net.sourceforge.czt.z.ast.NameTypePair zedObject)
  {
    getLogger().entering(getClassName(), "visitNameTypePair", zedObject);

    NameTypePair jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNameTypePairElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createNameTypePair();
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        Term term = zedObject.getName();
        jaxbObject.setName((DeclName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getType() != null) {
        Term term = zedObject.getType();
        jaxbObject.setType((Type) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NameTypePair to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitNameTypePair", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSchText(net.sourceforge.czt.z.ast.SchText zedObject)
  {
    getLogger().entering(getClassName(), "visitSchText", zedObject);

    SchText jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSchTextElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createSchText();
      }
      {
        List list = zedObject.getDecl();
        List newlist = jaxbObject.getDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getPred() != null) {
        Term term = zedObject.getPred();
        jaxbObject.setPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SchText to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a SchText to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitSchText", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitOperand(net.sourceforge.czt.z.ast.Operand zedObject)
  {
    getLogger().entering(getClassName(), "visitOperand", zedObject);

    Operand jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createOperandElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createOperand();
      }
      createElement_ = false;
      if (zedObject.getList() != null) {
        jaxbObject.setList(zedObject.getList());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Operand to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitOperand", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitProjExpr(net.sourceforge.czt.z.ast.ProjExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitProjExpr", zedObject);

    ProjExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createProjExpr();
      createElement_ = true;
      if (zedObject.getLeftExpr() != null) {
        Term term = zedObject.getLeftExpr();
        jaxbObject.setLeftExpr((Expr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightExpr() != null) {
        Term term = zedObject.getRightExpr();
        jaxbObject.setRightExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProjExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ProjExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitProjExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitBranch(net.sourceforge.czt.z.ast.Branch zedObject)
  {
    getLogger().entering(getClassName(), "visitBranch", zedObject);

    Branch jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createBranchElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createBranch();
      }
      createElement_ = true;
      if (zedObject.getDeclName() != null) {
        Term term = zedObject.getDeclName();
        jaxbObject.setDeclName((DeclName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Branch to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a Branch to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitBranch", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitTypeAnn(net.sourceforge.czt.z.ast.TypeAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitTypeAnn", zedObject);

    TypeAnn jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createTypeAnnElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createTypeAnn();
      }
      createElement_ = true;
      if (zedObject.getType() != null) {
        Term term = zedObject.getType();
        jaxbObject.setType((Type) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a TypeAnn to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitTypeAnn", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitGenType(net.sourceforge.czt.z.ast.GenType zedObject)
  {
    getLogger().entering(getClassName(), "visitGenType", zedObject);

    GenType jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createGenTypeElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createGenType();
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        Term term = zedObject.getName();
        jaxbObject.setName((DeclName) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a GenType to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a GenType to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitGenType", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitOptempPara(net.sourceforge.czt.z.ast.OptempPara zedObject)
  {
    getLogger().entering(getClassName(), "visitOptempPara", zedObject);

    OptempPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createOptempParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createOptempPara();
      }
      {
        List list = zedObject.getOper();
        List newlist = jaxbObject.getOper();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = false;
      if (zedObject.getCat() != null) {
        jaxbObject.setCat(zedObject.getCat().toString());
      }
      createElement_ = false;
      if (zedObject.getAssoc() != null) {
        jaxbObject.setAssoc(zedObject.getAssoc().toString());
      }
      createElement_ = false;
      if (zedObject.getPrec() != null) {
        jaxbObject.setPrec(zedObject.getPrec());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OptempPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a OptempPara to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitOptempPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitExistsPred(net.sourceforge.czt.z.ast.ExistsPred zedObject)
  {
    getLogger().entering(getClassName(), "visitExistsPred", zedObject);

    ExistsPred jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createExistsPred();
      createElement_ = true;
      if (zedObject.getSchText() != null) {
        Term term = zedObject.getSchText();
        jaxbObject.setSchText((SchText) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getPred() != null) {
        Term term = zedObject.getPred();
        jaxbObject.setPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExistsPred to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ExistsPred to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitExistsPred", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNameSectTypeTriple(net.sourceforge.czt.z.ast.NameSectTypeTriple zedObject)
  {
    getLogger().entering(getClassName(), "visitNameSectTypeTriple", zedObject);

    NameSectTypeTriple jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNameSectTypeTripleElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createNameSectTypeTriple();
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        Term term = zedObject.getName();
        jaxbObject.setName((DeclName) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getSect() != null) {
        jaxbObject.setSect(zedObject.getSect());
      }
      createElement_ = true;
      if (zedObject.getType() != null) {
        Term term = zedObject.getType();
        jaxbObject.setType((Type) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NameSectTypeTriple to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitNameSectTypeTriple", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNegPred(net.sourceforge.czt.z.ast.NegPred zedObject)
  {
    getLogger().entering(getClassName(), "visitNegPred", zedObject);

    NegPred jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNegPredElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createNegPred();
      }
      createElement_ = true;
      if (zedObject.getPred() != null) {
        Term term = zedObject.getPred();
        jaxbObject.setPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NegPred to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a NegPred to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitNegPred", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitPreExpr(net.sourceforge.czt.z.ast.PreExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitPreExpr", zedObject);

    PreExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createPreExpr();
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PreExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a PreExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitPreExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSectTypeEnvAnn(net.sourceforge.czt.z.ast.SectTypeEnvAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitSectTypeEnvAnn", zedObject);

    SectTypeEnvAnn jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSectTypeEnvAnnElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createSectTypeEnvAnn();
      }
      {
        List list = zedObject.getNameSectTypeTriple();
        List newlist = jaxbObject.getNameSectTypeTriple();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SectTypeEnvAnn to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSectTypeEnvAnn", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitExprPred(net.sourceforge.czt.z.ast.ExprPred zedObject)
  {
    getLogger().entering(getClassName(), "visitExprPred", zedObject);

    ExprPred jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createExprPredElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createExprPred();
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExprPred to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ExprPred to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitExprPred", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitGivenType(net.sourceforge.czt.z.ast.GivenType zedObject)
  {
    getLogger().entering(getClassName(), "visitGivenType", zedObject);

    GivenType jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createGivenTypeElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createGivenType();
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        Term term = zedObject.getName();
        jaxbObject.setName((DeclName) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a GivenType to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a GivenType to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitGivenType", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInclDecl(net.sourceforge.czt.z.ast.InclDecl zedObject)
  {
    getLogger().entering(getClassName(), "visitInclDecl", zedObject);

    InclDecl jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInclDeclElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createInclDecl();
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InclDecl to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a InclDecl to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitInclDecl", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSchemaType(net.sourceforge.czt.z.ast.SchemaType zedObject)
  {
    getLogger().entering(getClassName(), "visitSchemaType", zedObject);

    SchemaType jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSchemaTypeElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createSchemaType();
      }
      createElement_ = true;
      if (zedObject.getSignature() != null) {
        Term term = zedObject.getSignature();
        jaxbObject.setSignature((Signature) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SchemaType to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a SchemaType to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitSchemaType", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitBindSelExpr(net.sourceforge.czt.z.ast.BindSelExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitBindSelExpr", zedObject);

    BindSelExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createBindSelExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createBindSelExpr();
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        Term term = zedObject.getName();
        jaxbObject.setName((RefName) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a BindSelExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a BindSelExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitBindSelExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public java.lang.Object visitDeclName(net.sourceforge.czt.z.ast.DeclName zedObject)
  {
    getLogger().entering(getClassName(), "visitDeclName", zedObject);
    try {
      DeclName jaxbObject = objectFactory_.createDeclNameElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createDeclName();
      }
      if (zedObject.getId() != null) {
        getLogger().finest("Setting Id to " + zedObject.getId().toString());
        jaxbObject.setId(zedObject.getId());
        getLogger().finer("Hashing " + zedObject.getId());
        hash_.put(zedObject.getId(), jaxbObject);
      }
      {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
            annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
      }
      getLogger().finest("Setting Word to " + zedObject.getWord().toString());
      jaxbObject.setWord(zedObject.getWord());
      {
        List list = zedObject.getStroke();
        getLogger().finest("Setting strokes " + list.toString());
        List newlist = jaxbObject.getStroke();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Term term = (Term) iter.next();
          Object o = term.accept(this);
          newlist.add(o);
        }
      }
      getLogger().exiting(getClassName(), "visitDeclName", jaxbObject);
      createElement_ = true;
      return jaxbObject;
    }
    catch (Exception exception) {
      String message = "class AstToJaxb: "
                       + "Cannot transform a DeclName to the corresponding "
                       + "Jaxb class";
      throw new CztException(message, exception);
    }
  }

  public Object visitForallPred(net.sourceforge.czt.z.ast.ForallPred zedObject)
  {
    getLogger().entering(getClassName(), "visitForallPred", zedObject);

    ForallPred jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createForallPred();
      createElement_ = true;
      if (zedObject.getSchText() != null) {
        Term term = zedObject.getSchText();
        jaxbObject.setSchText((SchText) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getPred() != null) {
        Term term = zedObject.getPred();
        jaxbObject.setPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ForallPred to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ForallPred to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitForallPred", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitOrExpr(net.sourceforge.czt.z.ast.OrExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitOrExpr", zedObject);

    OrExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createOrExpr();
      createElement_ = true;
      if (zedObject.getLeftExpr() != null) {
        Term term = zedObject.getLeftExpr();
        jaxbObject.setLeftExpr((Expr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightExpr() != null) {
        Term term = zedObject.getRightExpr();
        jaxbObject.setRightExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OrExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a OrExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitOrExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSpec(net.sourceforge.czt.z.ast.Spec zedObject)
  {
    getLogger().entering(getClassName(), "visitSpec", zedObject);

    Spec jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSpecElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createSpec();
      }
      {
        List list = zedObject.getSect();
        List newlist = jaxbObject.getSect();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = false;
      if (zedObject.getVersion() != null) {
        jaxbObject.setVersion(zedObject.getVersion());
      }
      createElement_ = false;
      if (zedObject.getAuthor() != null) {
        jaxbObject.setAuthor(zedObject.getAuthor());
      }
      createElement_ = false;
      if (zedObject.getModified() != null) {
        jaxbObject.setModified(zedObject.getModified());
      }
      createElement_ = false;
      if (zedObject.getSource() != null) {
        jaxbObject.setSource(zedObject.getSource());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Spec to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a Spec to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitSpec", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitLocAnn(net.sourceforge.czt.z.ast.LocAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitLocAnn", zedObject);

    LocAnn jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createLocAnnElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createLocAnn();
      }
      createElement_ = false;
      if (zedObject.getLoc() != null) {
        jaxbObject.setLoc(zedObject.getLoc());
      }
      createElement_ = false;
      if (zedObject.getLine() != null) {
        jaxbObject.setLine(zedObject.getLine());
      }
      createElement_ = false;
      if (zedObject.getCol() != null) {
        jaxbObject.setCol(zedObject.getCol());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a LocAnn to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitLocAnn", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitPowerExpr(net.sourceforge.czt.z.ast.PowerExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitPowerExpr", zedObject);

    PowerExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createPowerExpr();
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PowerExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a PowerExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitPowerExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitHideExpr(net.sourceforge.czt.z.ast.HideExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitHideExpr", zedObject);

    HideExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createHideExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createHideExpr();
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
      {
        List list = zedObject.getName();
        List newlist = jaxbObject.getName();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a HideExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a HideExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitHideExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitGivenPara(net.sourceforge.czt.z.ast.GivenPara zedObject)
  {
    getLogger().entering(getClassName(), "visitGivenPara", zedObject);

    GivenPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createGivenParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createGivenPara();
      }
      {
        List list = zedObject.getDeclName();
        List newlist = jaxbObject.getDeclName();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a GivenPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a GivenPara to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitGivenPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitPowerType(net.sourceforge.czt.z.ast.PowerType zedObject)
  {
    getLogger().entering(getClassName(), "visitPowerType", zedObject);

    PowerType jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createPowerTypeElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createPowerType();
      }
      createElement_ = true;
      if (zedObject.getType() != null) {
        Term term = zedObject.getType();
        jaxbObject.setType((Type) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PowerType to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a PowerType to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitPowerType", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitAndExpr(net.sourceforge.czt.z.ast.AndExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitAndExpr", zedObject);

    AndExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createAndExpr();
      createElement_ = true;
      if (zedObject.getLeftExpr() != null) {
        Term term = zedObject.getLeftExpr();
        jaxbObject.setLeftExpr((Expr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightExpr() != null) {
        Term term = zedObject.getRightExpr();
        jaxbObject.setRightExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AndExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a AndExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitAndExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRenameExpr(net.sourceforge.czt.z.ast.RenameExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitRenameExpr", zedObject);

    RenameExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRenameExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createRenameExpr();
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
      {
        List list = zedObject.getNameNamePair();
        List newlist = jaxbObject.getNameNamePair();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RenameExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a RenameExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitRenameExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitAndPred(net.sourceforge.czt.z.ast.AndPred zedObject)
  {
    getLogger().entering(getClassName(), "visitAndPred", zedObject);

    AndPred jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createAndPredElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createAndPred();
      }
      createElement_ = true;
      if (zedObject.getLeftPred() != null) {
        Term term = zedObject.getLeftPred();
        jaxbObject.setLeftPred((Pred) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightPred() != null) {
        Term term = zedObject.getRightPred();
        jaxbObject.setRightPred((Pred) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getOp() != null) {
        jaxbObject.setOp(zedObject.getOp().toString());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AndPred to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a AndPred to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitAndPred", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitConjPara(net.sourceforge.czt.z.ast.ConjPara zedObject)
  {
    getLogger().entering(getClassName(), "visitConjPara", zedObject);

    ConjPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createConjParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createConjPara();
      }
      {
        List list = zedObject.getDeclName();
        List newlist = jaxbObject.getDeclName();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getPred() != null) {
        Term term = zedObject.getPred();
        jaxbObject.setPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ConjPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ConjPara to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitConjPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNumStroke(net.sourceforge.czt.z.ast.NumStroke zedObject)
  {
    getLogger().entering(getClassName(), "visitNumStroke", zedObject);

    NumStroke jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNumStrokeElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createNumStroke();
      }
      createElement_ = false;
      if (zedObject.getNumber() != null) {
        jaxbObject.setNumber(zedObject.getNumber());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NumStroke to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitNumStroke", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitZSect(net.sourceforge.czt.z.ast.ZSect zedObject)
  {
    getLogger().entering(getClassName(), "visitZSect", zedObject);

    ZSect jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createZSectElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createZSect();
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
      {
        List list = zedObject.getParent();
        List newlist = jaxbObject.getParent();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getPara();
        List newlist = jaxbObject.getPara();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ZSect to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ZSect to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitZSect", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitThetaExpr(net.sourceforge.czt.z.ast.ThetaExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitThetaExpr", zedObject);

    ThetaExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createThetaExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createThetaExpr();
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
      {
        List list = zedObject.getStroke();
        List newlist = jaxbObject.getStroke();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ThetaExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ThetaExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitThetaExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSetExpr(net.sourceforge.czt.z.ast.SetExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitSetExpr", zedObject);

    SetExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSetExpr();
      {
        List list = zedObject.getExpr();
        List newlist = jaxbObject.getExpr();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SetExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a SetExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitSetExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSetCompExpr(net.sourceforge.czt.z.ast.SetCompExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitSetCompExpr", zedObject);

    SetCompExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSetCompExpr();
      createElement_ = true;
      if (zedObject.getSchText() != null) {
        Term term = zedObject.getSchText();
        jaxbObject.setSchText((SchText) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SetCompExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a SetCompExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitSetCompExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitPipeExpr(net.sourceforge.czt.z.ast.PipeExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitPipeExpr", zedObject);

    PipeExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createPipeExpr();
      createElement_ = true;
      if (zedObject.getLeftExpr() != null) {
        Term term = zedObject.getLeftExpr();
        jaxbObject.setLeftExpr((Expr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightExpr() != null) {
        Term term = zedObject.getRightExpr();
        jaxbObject.setRightExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PipeExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a PipeExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitPipeExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRefExpr(net.sourceforge.czt.z.ast.RefExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitRefExpr", zedObject);

    RefExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRefExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createRefExpr();
      }
      createElement_ = true;
      if (zedObject.getRefName() != null) {
        Term term = zedObject.getRefName();
        jaxbObject.setRefName((RefName) term.accept(this));
      }
      {
        List list = zedObject.getExpr();
        List newlist = jaxbObject.getExpr();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = false;
      if (zedObject.getMixfix() != null) {
        jaxbObject.setMixfix(zedObject.getMixfix());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RefExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a RefExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitRefExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNegExpr(net.sourceforge.czt.z.ast.NegExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitNegExpr", zedObject);

    NegExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNegExpr();
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NegExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a NegExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitNegExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitProdExpr(net.sourceforge.czt.z.ast.ProdExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitProdExpr", zedObject);

    ProdExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createProdExpr();
      {
        List list = zedObject.getExpr();
        List newlist = jaxbObject.getExpr();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProdExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a ProdExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitProdExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitDecorExpr(net.sourceforge.czt.z.ast.DecorExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitDecorExpr", zedObject);

    DecorExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createDecorExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createDecorExpr();
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getStroke() != null) {
        Term term = zedObject.getStroke();
        jaxbObject.setStroke((Stroke) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a DecorExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a DecorExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitDecorExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitOutStroke(net.sourceforge.czt.z.ast.OutStroke zedObject)
  {
    getLogger().entering(getClassName(), "visitOutStroke", zedObject);

    OutStroke jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createOutStroke();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OutStroke to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitOutStroke", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParent(net.sourceforge.czt.z.ast.Parent zedObject)
  {
    getLogger().entering(getClassName(), "visitParent", zedObject);

    Parent jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParentElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createParent();
      }
      createElement_ = false;
      if (zedObject.getWord() != null) {
        jaxbObject.setWord(zedObject.getWord());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Parent to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a Parent to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitParent", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitExists1Pred(net.sourceforge.czt.z.ast.Exists1Pred zedObject)
  {
    getLogger().entering(getClassName(), "visitExists1Pred", zedObject);

    Exists1Pred jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createExists1Pred();
      createElement_ = true;
      if (zedObject.getSchText() != null) {
        Term term = zedObject.getSchText();
        jaxbObject.setSchText((SchText) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getPred() != null) {
        Term term = zedObject.getPred();
        jaxbObject.setPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Exists1Pred to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a Exists1Pred to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitExists1Pred", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitAxPara(net.sourceforge.czt.z.ast.AxPara zedObject)
  {
    getLogger().entering(getClassName(), "visitAxPara", zedObject);

    AxPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createAxParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createAxPara();
      }
      {
        List list = zedObject.getDeclName();
        List newlist = jaxbObject.getDeclName();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getSchText() != null) {
        Term term = zedObject.getSchText();
        jaxbObject.setSchText((SchText) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getBox() != null) {
        jaxbObject.setBox(zedObject.getBox().toString());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AxPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a AxPara to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitAxPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSchExpr(net.sourceforge.czt.z.ast.SchExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitSchExpr", zedObject);

    SchExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSchExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createSchExpr();
      }
      createElement_ = true;
      if (zedObject.getSchText() != null) {
        Term term = zedObject.getSchText();
        jaxbObject.setSchText((SchText) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SchExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a SchExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitSchExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitTupleExpr(net.sourceforge.czt.z.ast.TupleExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitTupleExpr", zedObject);

    TupleExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createTupleExpr();
      {
        List list = zedObject.getExpr();
        List newlist = jaxbObject.getExpr();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a TupleExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    if (zedObject.getAnns() != null) {
      List list = zedObject.getAnns();
      if (list.size() > 0) {
        try {
          net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
                           annsObjectFactory_.createTermAAnnsType();
          List newlist = anns.getany();
          for (Iterator iter = list.iterator(); iter.hasNext();) {
            Term term = (Term) iter.next();
            createElement_ = true;
            Object o = term.accept(this);
            newlist.add(o);
          }
          jaxbObject.setAnns(anns);
        }
        catch (Exception exception) {
          String message = "class AstToJaxb: "
                    + "Cannot transform a TupleExpr to the corresponding "
                    + "Jaxb class";
          throw new CztException(message, exception);
        }
      }
    }

    getLogger().exiting(getClassName(), "visitTupleExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }
}
