
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE JaxbToAst.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.util.ReflectiveVisitor;
import net.sourceforge.czt.z.ast.*;

/**
 * The unmarshaller responsible for deserializing XML data.
 *
 * @author Gnast version 0.1
 */
public class JaxbToAst extends ReflectiveVisitor
{
  protected ZFactory mZFactory_;

  public JaxbToAst()
  {
    mZFactory_ =
      new net.sourceforge.czt.z.impl.ZFactoryImpl();
  }

  public JaxbToAst(ZFactory vZFactory)
  {
    mZFactory_ = vZFactory;
  }

  private static Logger getLogger()
  {
    return Logger.getLogger("net.sourceforge.czt.z.jaxb.JaxbToAst");
  }

  public Object visitObject(Object object)
  {
    getLogger().fine("Visit " + object.getClass().toString());
    if (object instanceof String
        || object instanceof Boolean
        || object instanceof List
        || object instanceof Integer
        || object instanceof java.math.BigInteger) {
      return object;
    }
    throw new UnsupportedOperationException("Unexpected element "
                                            + object.getClass().getName());
  }

  public Object visitFreetype(net.sourceforge.czt.z.jaxb.gen.Freetype jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitFreetype", jaxbObject);
    DeclName declName =
      (DeclName) dispatch(jaxbObject.getDeclName());
    List branch = new Vector();
    for (Iterator iter = jaxbObject.getBranch().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      branch.add(o);
    }
    Freetype erg = mZFactory_.createFreetype(declName, branch);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitFreetype", erg);
    return erg;
  }

  public Object visitExists1Expr(net.sourceforge.czt.z.jaxb.gen.Exists1Expr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExists1Expr", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    Exists1Expr erg = mZFactory_.createExists1Expr(schText, expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitExists1Expr", erg);
    return erg;
  }

  public Object visitParenAnn(net.sourceforge.czt.z.jaxb.gen.ParenAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParenAnn", jaxbObject);
    ParenAnn erg = mZFactory_.createParenAnn();
    getLogger().exiting("JaxbToAst", "visitParenAnn", erg);
    return erg;
  }

  public Object visitNameNamePair(net.sourceforge.czt.z.jaxb.gen.NameNamePair jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNameNamePair", jaxbObject);
    RefName oldName =
      (RefName) dispatch(jaxbObject.getOldName());
    DeclName newName =
      (DeclName) dispatch(jaxbObject.getNewName());
    NameNamePair erg = mZFactory_.createNameNamePair(oldName, newName);
    getLogger().exiting("JaxbToAst", "visitNameNamePair", erg);
    return erg;
  }

  public Object visitLatexMarkupPara(net.sourceforge.czt.z.jaxb.gen.LatexMarkupPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitLatexMarkupPara", jaxbObject);
    List directive = new Vector();
    for (Iterator iter = jaxbObject.getDirective().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      directive.add(o);
    }
    LatexMarkupPara erg = mZFactory_.createLatexMarkupPara(directive);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitLatexMarkupPara", erg);
    return erg;
  }

  public Object visitApplExpr(net.sourceforge.czt.z.jaxb.gen.ApplExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitApplExpr", jaxbObject);
    Expr leftExpr =
      (Expr) dispatch(jaxbObject.getLeftExpr());
    Expr rightExpr =
      (Expr) dispatch(jaxbObject.getRightExpr());
    Boolean mixfix =
      (Boolean) dispatch(jaxbObject.getMixfix());
    ApplExpr erg = mZFactory_.createApplExpr(leftExpr, rightExpr, mixfix);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitApplExpr", erg);
    return erg;
  }

  public Object visitLetExpr(net.sourceforge.czt.z.jaxb.gen.LetExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitLetExpr", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    LetExpr erg = mZFactory_.createLetExpr(schText, expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitLetExpr", erg);
    return erg;
  }

  public Object visitSignature(net.sourceforge.czt.z.jaxb.gen.Signature jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSignature", jaxbObject);
    List nameTypePair = new Vector();
    for (Iterator iter = jaxbObject.getNameTypePair().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      nameTypePair.add(o);
    }
    Signature erg = mZFactory_.createSignature(nameTypePair);
    getLogger().exiting("JaxbToAst", "visitSignature", erg);
    return erg;
  }

  public Object visitConstDecl(net.sourceforge.czt.z.jaxb.gen.ConstDecl jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitConstDecl", jaxbObject);
    DeclName declName =
      (DeclName) dispatch(jaxbObject.getDeclName());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    ConstDecl erg = mZFactory_.createConstDecl(declName, expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitConstDecl", erg);
    return erg;
  }

  public Object visitNextStroke(net.sourceforge.czt.z.jaxb.gen.NextStroke jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNextStroke", jaxbObject);
    NextStroke erg = mZFactory_.createNextStroke();
    getLogger().exiting("JaxbToAst", "visitNextStroke", erg);
    return erg;
  }

  public Object visitInStroke(net.sourceforge.czt.z.jaxb.gen.InStroke jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInStroke", jaxbObject);
    InStroke erg = mZFactory_.createInStroke();
    getLogger().exiting("JaxbToAst", "visitInStroke", erg);
    return erg;
  }

  public Object visitRefName(net.sourceforge.czt.z.jaxb.gen.RefName jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRefName", jaxbObject);
    String word =
      (String) dispatch(jaxbObject.getWord());
    List stroke = new Vector();
    for (Iterator iter = jaxbObject.getStroke().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      stroke.add(o);
    }
    DeclName decl =
      (DeclName) dispatch(jaxbObject.getDecl());
    RefName erg = mZFactory_.createRefName(word, stroke, decl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitRefName", erg);
    return erg;
  }

  public Object visitMemPred(net.sourceforge.czt.z.jaxb.gen.MemPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitMemPred", jaxbObject);
    Expr leftExpr =
      (Expr) dispatch(jaxbObject.getLeftExpr());
    Expr rightExpr =
      (Expr) dispatch(jaxbObject.getRightExpr());
    Boolean mixfix =
      (Boolean) dispatch(jaxbObject.getMixfix());
    MemPred erg = mZFactory_.createMemPred(leftExpr, rightExpr, mixfix);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitMemPred", erg);
    return erg;
  }

  public Object visitProdType(net.sourceforge.czt.z.jaxb.gen.ProdType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProdType", jaxbObject);
    List type = new Vector();
    for (Iterator iter = jaxbObject.getType().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      type.add(o);
    }
    ProdType erg = mZFactory_.createProdType(type);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitProdType", erg);
    return erg;
  }

  public Object visitImpliesExpr(net.sourceforge.czt.z.jaxb.gen.ImpliesExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitImpliesExpr", jaxbObject);
    Expr leftExpr =
      (Expr) dispatch(jaxbObject.getLeftExpr());
    Expr rightExpr =
      (Expr) dispatch(jaxbObject.getRightExpr());
    ImpliesExpr erg = mZFactory_.createImpliesExpr(leftExpr, rightExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitImpliesExpr", erg);
    return erg;
  }

  public Object visitMuExpr(net.sourceforge.czt.z.jaxb.gen.MuExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitMuExpr", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    MuExpr erg = mZFactory_.createMuExpr(schText, expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitMuExpr", erg);
    return erg;
  }

  public Object visitOrPred(net.sourceforge.czt.z.jaxb.gen.OrPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOrPred", jaxbObject);
    Pred leftPred =
      (Pred) dispatch(jaxbObject.getLeftPred());
    Pred rightPred =
      (Pred) dispatch(jaxbObject.getRightPred());
    OrPred erg = mZFactory_.createOrPred(leftPred, rightPred);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitOrPred", erg);
    return erg;
  }

  public Object visitExistsExpr(net.sourceforge.czt.z.jaxb.gen.ExistsExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExistsExpr", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    ExistsExpr erg = mZFactory_.createExistsExpr(schText, expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitExistsExpr", erg);
    return erg;
  }

  public Object visitVarDecl(net.sourceforge.czt.z.jaxb.gen.VarDecl jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitVarDecl", jaxbObject);
    List declName = new Vector();
    for (Iterator iter = jaxbObject.getDeclName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      declName.add(o);
    }
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    VarDecl erg = mZFactory_.createVarDecl(declName, expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitVarDecl", erg);
    return erg;
  }

  public Object visitNarrSect(net.sourceforge.czt.z.jaxb.gen.NarrSect jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNarrSect", jaxbObject);
    List content = new java.util.Vector();
    if (jaxbObject.getContent() != null
        && jaxbObject.getContent().getContent() != null) {
      for (Iterator iter = jaxbObject.getContent().getContent().iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        content.add(o);
      }
    }
    NarrSect erg = mZFactory_.createNarrSect(content);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitNarrSect", erg);
    return erg;
  }

  public Object visitFreePara(net.sourceforge.czt.z.jaxb.gen.FreePara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitFreePara", jaxbObject);
    List freetype = new Vector();
    for (Iterator iter = jaxbObject.getFreetype().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      freetype.add(o);
    }
    FreePara erg = mZFactory_.createFreePara(freetype);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitFreePara", erg);
    return erg;
  }

  public Object visitCompExpr(net.sourceforge.czt.z.jaxb.gen.CompExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCompExpr", jaxbObject);
    Expr leftExpr =
      (Expr) dispatch(jaxbObject.getLeftExpr());
    Expr rightExpr =
      (Expr) dispatch(jaxbObject.getRightExpr());
    CompExpr erg = mZFactory_.createCompExpr(leftExpr, rightExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitCompExpr", erg);
    return erg;
  }

  public Object visitBindExpr(net.sourceforge.czt.z.jaxb.gen.BindExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitBindExpr", jaxbObject);
    List nameExprPair = new Vector();
    for (Iterator iter = jaxbObject.getNameExprPair().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      nameExprPair.add(o);
    }
    BindExpr erg = mZFactory_.createBindExpr(nameExprPair);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitBindExpr", erg);
    return erg;
  }

  public Object visitCondExpr(net.sourceforge.czt.z.jaxb.gen.CondExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCondExpr", jaxbObject);
    Pred pred =
      (Pred) dispatch(jaxbObject.getPred());
    Expr leftExpr =
      (Expr) dispatch(jaxbObject.getLeftExpr());
    Expr rightExpr =
      (Expr) dispatch(jaxbObject.getRightExpr());
    CondExpr erg = mZFactory_.createCondExpr(pred, leftExpr, rightExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitCondExpr", erg);
    return erg;
  }

  public Object visitForallExpr(net.sourceforge.czt.z.jaxb.gen.ForallExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitForallExpr", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    ForallExpr erg = mZFactory_.createForallExpr(schText, expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitForallExpr", erg);
    return erg;
  }

  public Object visitNarrPara(net.sourceforge.czt.z.jaxb.gen.NarrPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNarrPara", jaxbObject);
    List content = new java.util.Vector();
    if (jaxbObject.getContent() != null
        && jaxbObject.getContent().getContent() != null) {
      for (Iterator iter = jaxbObject.getContent().getContent().iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        content.add(o);
      }
    }
    NarrPara erg = mZFactory_.createNarrPara(content);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitNarrPara", erg);
    return erg;
  }

  public Object visitTruePred(net.sourceforge.czt.z.jaxb.gen.TruePred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTruePred", jaxbObject);
    TruePred erg = mZFactory_.createTruePred();
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitTruePred", erg);
    return erg;
  }

  public Object visitDirective(net.sourceforge.czt.z.jaxb.gen.Directive jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDirective", jaxbObject);
    String command =
      (String) dispatch(jaxbObject.getCommand());
    String unicode =
      (String) dispatch(jaxbObject.getUnicode());
    DirectiveType type = null;
    String typeJaxb = jaxbObject.getType();
    if (typeJaxb != null) {
      type =
        DirectiveType.fromString(typeJaxb);
    }
    Directive erg = mZFactory_.createDirective(command, unicode, type);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitDirective", erg);
    return erg;
  }

  public Object visitOperator(net.sourceforge.czt.z.jaxb.gen.Operator jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOperator", jaxbObject);
    String word =
      (String) dispatch(jaxbObject.getWord());
    Operator erg = mZFactory_.createOperator(word);
    getLogger().exiting("JaxbToAst", "visitOperator", erg);
    return erg;
  }

  public Object visitNumExpr(net.sourceforge.czt.z.jaxb.gen.NumExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNumExpr", jaxbObject);
    java.math.BigInteger value =
      (java.math.BigInteger) dispatch(jaxbObject.getValue());
    NumExpr erg = mZFactory_.createNumExpr(value);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitNumExpr", erg);
    return erg;
  }

  public Object visitNameExprPair(net.sourceforge.czt.z.jaxb.gen.NameExprPair jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNameExprPair", jaxbObject);
    DeclName name =
      (DeclName) dispatch(jaxbObject.getName());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    NameExprPair erg = mZFactory_.createNameExprPair(name, expr);
    getLogger().exiting("JaxbToAst", "visitNameExprPair", erg);
    return erg;
  }

  public Object visitTupleSelExpr(net.sourceforge.czt.z.jaxb.gen.TupleSelExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTupleSelExpr", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    Integer select =
      (Integer) dispatch(jaxbObject.getSelect());
    TupleSelExpr erg = mZFactory_.createTupleSelExpr(expr, select);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitTupleSelExpr", erg);
    return erg;
  }

  public Object visitLambdaExpr(net.sourceforge.czt.z.jaxb.gen.LambdaExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitLambdaExpr", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    LambdaExpr erg = mZFactory_.createLambdaExpr(schText, expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitLambdaExpr", erg);
    return erg;
  }

  public Object visitIffExpr(net.sourceforge.czt.z.jaxb.gen.IffExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIffExpr", jaxbObject);
    Expr leftExpr =
      (Expr) dispatch(jaxbObject.getLeftExpr());
    Expr rightExpr =
      (Expr) dispatch(jaxbObject.getRightExpr());
    IffExpr erg = mZFactory_.createIffExpr(leftExpr, rightExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIffExpr", erg);
    return erg;
  }

  public Object visitIffPred(net.sourceforge.czt.z.jaxb.gen.IffPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIffPred", jaxbObject);
    Pred leftPred =
      (Pred) dispatch(jaxbObject.getLeftPred());
    Pred rightPred =
      (Pred) dispatch(jaxbObject.getRightPred());
    IffPred erg = mZFactory_.createIffPred(leftPred, rightPred);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIffPred", erg);
    return erg;
  }

  public Object visitFalsePred(net.sourceforge.czt.z.jaxb.gen.FalsePred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitFalsePred", jaxbObject);
    FalsePred erg = mZFactory_.createFalsePred();
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitFalsePred", erg);
    return erg;
  }

  public Object visitTypeEnvAnn(net.sourceforge.czt.z.jaxb.gen.TypeEnvAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTypeEnvAnn", jaxbObject);
    List nameTypePair = new Vector();
    for (Iterator iter = jaxbObject.getNameTypePair().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      nameTypePair.add(o);
    }
    TypeEnvAnn erg = mZFactory_.createTypeEnvAnn(nameTypePair);
    getLogger().exiting("JaxbToAst", "visitTypeEnvAnn", erg);
    return erg;
  }

  public Object visitUnparsedZSect(net.sourceforge.czt.z.jaxb.gen.UnparsedZSect jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitUnparsedZSect", jaxbObject);
    List content = new java.util.Vector();
    if (jaxbObject.getContent() != null
        && jaxbObject.getContent().getContent() != null) {
      for (Iterator iter = jaxbObject.getContent().getContent().iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        content.add(o);
      }
    }
    UnparsedZSect erg = mZFactory_.createUnparsedZSect(content);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitUnparsedZSect", erg);
    return erg;
  }

  public Object visitUnparsedPara(net.sourceforge.czt.z.jaxb.gen.UnparsedPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitUnparsedPara", jaxbObject);
    List content = new java.util.Vector();
    if (jaxbObject.getContent() != null
        && jaxbObject.getContent().getContent() != null) {
      for (Iterator iter = jaxbObject.getContent().getContent().iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        content.add(o);
      }
    }
    UnparsedPara erg = mZFactory_.createUnparsedPara(content);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitUnparsedPara", erg);
    return erg;
  }

  public Object visitImpliesPred(net.sourceforge.czt.z.jaxb.gen.ImpliesPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitImpliesPred", jaxbObject);
    Pred leftPred =
      (Pred) dispatch(jaxbObject.getLeftPred());
    Pred rightPred =
      (Pred) dispatch(jaxbObject.getRightPred());
    ImpliesPred erg = mZFactory_.createImpliesPred(leftPred, rightPred);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitImpliesPred", erg);
    return erg;
  }

  public Object visitNameTypePair(net.sourceforge.czt.z.jaxb.gen.NameTypePair jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNameTypePair", jaxbObject);
    DeclName name =
      (DeclName) dispatch(jaxbObject.getName());
    Type type =
      (Type) dispatch(jaxbObject.getType());
    NameTypePair erg = mZFactory_.createNameTypePair(name, type);
    getLogger().exiting("JaxbToAst", "visitNameTypePair", erg);
    return erg;
  }

  public Object visitSchText(net.sourceforge.czt.z.jaxb.gen.SchText jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSchText", jaxbObject);
    List decl = new Vector();
    for (Iterator iter = jaxbObject.getDecl().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      decl.add(o);
    }
    Pred pred =
      (Pred) dispatch(jaxbObject.getPred());
    SchText erg = mZFactory_.createSchText(decl, pred);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSchText", erg);
    return erg;
  }

  public Object visitOperand(net.sourceforge.czt.z.jaxb.gen.Operand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOperand", jaxbObject);
    Boolean list =
      (Boolean) dispatch(jaxbObject.getList());
    Operand erg = mZFactory_.createOperand(list);
    getLogger().exiting("JaxbToAst", "visitOperand", erg);
    return erg;
  }

  public Object visitProjExpr(net.sourceforge.czt.z.jaxb.gen.ProjExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProjExpr", jaxbObject);
    Expr leftExpr =
      (Expr) dispatch(jaxbObject.getLeftExpr());
    Expr rightExpr =
      (Expr) dispatch(jaxbObject.getRightExpr());
    ProjExpr erg = mZFactory_.createProjExpr(leftExpr, rightExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitProjExpr", erg);
    return erg;
  }

  public Object visitBranch(net.sourceforge.czt.z.jaxb.gen.Branch jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitBranch", jaxbObject);
    DeclName declName =
      (DeclName) dispatch(jaxbObject.getDeclName());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    Branch erg = mZFactory_.createBranch(declName, expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitBranch", erg);
    return erg;
  }

  public Object visitTypeAnn(net.sourceforge.czt.z.jaxb.gen.TypeAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTypeAnn", jaxbObject);
    Type type =
      (Type) dispatch(jaxbObject.getType());
    TypeAnn erg = mZFactory_.createTypeAnn(type);
    getLogger().exiting("JaxbToAst", "visitTypeAnn", erg);
    return erg;
  }

  public Object visitGenType(net.sourceforge.czt.z.jaxb.gen.GenType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitGenType", jaxbObject);
    DeclName name =
      (DeclName) dispatch(jaxbObject.getName());
    GenType erg = mZFactory_.createGenType(name);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitGenType", erg);
    return erg;
  }

  public Object visitOptempPara(net.sourceforge.czt.z.jaxb.gen.OptempPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOptempPara", jaxbObject);
    List oper = new Vector();
    for (Iterator iter = jaxbObject.getOper().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      oper.add(o);
    }
    Cat cat = null;
    String catJaxb = jaxbObject.getCat();
    if (catJaxb != null) {
      cat =
        Cat.fromString(catJaxb);
    }
    Assoc assoc = null;
    String assocJaxb = jaxbObject.getAssoc();
    if (assocJaxb != null) {
      assoc =
        Assoc.fromString(assocJaxb);
    }
    Integer prec =
      (Integer) dispatch(jaxbObject.getPrec());
    OptempPara erg = mZFactory_.createOptempPara(oper, cat, assoc, prec);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitOptempPara", erg);
    return erg;
  }

  public Object visitExistsPred(net.sourceforge.czt.z.jaxb.gen.ExistsPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExistsPred", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Pred pred =
      (Pred) dispatch(jaxbObject.getPred());
    ExistsPred erg = mZFactory_.createExistsPred(schText, pred);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitExistsPred", erg);
    return erg;
  }

  public Object visitNameSectTypeTriple(net.sourceforge.czt.z.jaxb.gen.NameSectTypeTriple jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNameSectTypeTriple", jaxbObject);
    DeclName name =
      (DeclName) dispatch(jaxbObject.getName());
    String sect =
      (String) dispatch(jaxbObject.getSect());
    Type type =
      (Type) dispatch(jaxbObject.getType());
    NameSectTypeTriple erg = mZFactory_.createNameSectTypeTriple(name, sect, type);
    getLogger().exiting("JaxbToAst", "visitNameSectTypeTriple", erg);
    return erg;
  }

  public Object visitNegPred(net.sourceforge.czt.z.jaxb.gen.NegPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNegPred", jaxbObject);
    Pred pred =
      (Pred) dispatch(jaxbObject.getPred());
    NegPred erg = mZFactory_.createNegPred(pred);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitNegPred", erg);
    return erg;
  }

  public Object visitPreExpr(net.sourceforge.czt.z.jaxb.gen.PreExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPreExpr", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    PreExpr erg = mZFactory_.createPreExpr(expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitPreExpr", erg);
    return erg;
  }

  public Object visitSectTypeEnvAnn(net.sourceforge.czt.z.jaxb.gen.SectTypeEnvAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSectTypeEnvAnn", jaxbObject);
    List nameSectTypeTriple = new Vector();
    for (Iterator iter = jaxbObject.getNameSectTypeTriple().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      nameSectTypeTriple.add(o);
    }
    SectTypeEnvAnn erg = mZFactory_.createSectTypeEnvAnn(nameSectTypeTriple);
    getLogger().exiting("JaxbToAst", "visitSectTypeEnvAnn", erg);
    return erg;
  }

  public Object visitExprPred(net.sourceforge.czt.z.jaxb.gen.ExprPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExprPred", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    ExprPred erg = mZFactory_.createExprPred(expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitExprPred", erg);
    return erg;
  }

  public Object visitGivenType(net.sourceforge.czt.z.jaxb.gen.GivenType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitGivenType", jaxbObject);
    DeclName name =
      (DeclName) dispatch(jaxbObject.getName());
    GivenType erg = mZFactory_.createGivenType(name);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitGivenType", erg);
    return erg;
  }

  public Object visitInclDecl(net.sourceforge.czt.z.jaxb.gen.InclDecl jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInclDecl", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    InclDecl erg = mZFactory_.createInclDecl(expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitInclDecl", erg);
    return erg;
  }

  public Object visitSchemaType(net.sourceforge.czt.z.jaxb.gen.SchemaType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSchemaType", jaxbObject);
    Signature signature =
      (Signature) dispatch(jaxbObject.getSignature());
    SchemaType erg = mZFactory_.createSchemaType(signature);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSchemaType", erg);
    return erg;
  }

  public Object visitBindSelExpr(net.sourceforge.czt.z.jaxb.gen.BindSelExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitBindSelExpr", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    RefName name =
      (RefName) dispatch(jaxbObject.getName());
    BindSelExpr erg = mZFactory_.createBindSelExpr(expr, name);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitBindSelExpr", erg);
    return erg;
  }

  public Object visitDeclName(net.sourceforge.czt.z.jaxb.gen.DeclName jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDeclName", jaxbObject);
    String word =
      (String) dispatch(jaxbObject.getWord());
    List stroke = new Vector();
    for (Iterator iter = jaxbObject.getStroke().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      stroke.add(o);
    }
    String id =
      (String) dispatch(jaxbObject.getId());
    DeclName erg = mZFactory_.createDeclName(word, stroke, id);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitDeclName", erg);
    return erg;
  }

  public Object visitForallPred(net.sourceforge.czt.z.jaxb.gen.ForallPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitForallPred", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Pred pred =
      (Pred) dispatch(jaxbObject.getPred());
    ForallPred erg = mZFactory_.createForallPred(schText, pred);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitForallPred", erg);
    return erg;
  }

  public Object visitOrExpr(net.sourceforge.czt.z.jaxb.gen.OrExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOrExpr", jaxbObject);
    Expr leftExpr =
      (Expr) dispatch(jaxbObject.getLeftExpr());
    Expr rightExpr =
      (Expr) dispatch(jaxbObject.getRightExpr());
    OrExpr erg = mZFactory_.createOrExpr(leftExpr, rightExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitOrExpr", erg);
    return erg;
  }

  public Object visitSpec(net.sourceforge.czt.z.jaxb.gen.Spec jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSpec", jaxbObject);
    List sect = new Vector();
    for (Iterator iter = jaxbObject.getSect().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      sect.add(o);
    }
    String version =
      (String) dispatch(jaxbObject.getVersion());
    String author =
      (String) dispatch(jaxbObject.getAuthor());
    java.util.Calendar modified =
      (java.util.Calendar) dispatch(jaxbObject.getModified());
    String source =
      (String) dispatch(jaxbObject.getSource());
    Spec erg = mZFactory_.createSpec(sect, version, author, modified, source);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSpec", erg);
    return erg;
  }

  public Object visitLocAnn(net.sourceforge.czt.z.jaxb.gen.LocAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitLocAnn", jaxbObject);
    String loc =
      (String) dispatch(jaxbObject.getLoc());
    Integer line =
      (Integer) dispatch(jaxbObject.getLine());
    Integer col =
      (Integer) dispatch(jaxbObject.getCol());
    LocAnn erg = mZFactory_.createLocAnn(loc, line, col);
    getLogger().exiting("JaxbToAst", "visitLocAnn", erg);
    return erg;
  }

  public Object visitPowerExpr(net.sourceforge.czt.z.jaxb.gen.PowerExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPowerExpr", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    PowerExpr erg = mZFactory_.createPowerExpr(expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitPowerExpr", erg);
    return erg;
  }

  public Object visitHideExpr(net.sourceforge.czt.z.jaxb.gen.HideExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitHideExpr", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    List name = new Vector();
    for (Iterator iter = jaxbObject.getName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      name.add(o);
    }
    HideExpr erg = mZFactory_.createHideExpr(expr, name);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitHideExpr", erg);
    return erg;
  }

  public Object visitGivenPara(net.sourceforge.czt.z.jaxb.gen.GivenPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitGivenPara", jaxbObject);
    List declName = new Vector();
    for (Iterator iter = jaxbObject.getDeclName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      declName.add(o);
    }
    GivenPara erg = mZFactory_.createGivenPara(declName);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitGivenPara", erg);
    return erg;
  }

  public Object visitPowerType(net.sourceforge.czt.z.jaxb.gen.PowerType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPowerType", jaxbObject);
    Type type =
      (Type) dispatch(jaxbObject.getType());
    PowerType erg = mZFactory_.createPowerType(type);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitPowerType", erg);
    return erg;
  }

  public Object visitAndExpr(net.sourceforge.czt.z.jaxb.gen.AndExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAndExpr", jaxbObject);
    Expr leftExpr =
      (Expr) dispatch(jaxbObject.getLeftExpr());
    Expr rightExpr =
      (Expr) dispatch(jaxbObject.getRightExpr());
    AndExpr erg = mZFactory_.createAndExpr(leftExpr, rightExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitAndExpr", erg);
    return erg;
  }

  public Object visitRenameExpr(net.sourceforge.czt.z.jaxb.gen.RenameExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRenameExpr", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    List nameNamePair = new Vector();
    for (Iterator iter = jaxbObject.getNameNamePair().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      nameNamePair.add(o);
    }
    RenameExpr erg = mZFactory_.createRenameExpr(expr, nameNamePair);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitRenameExpr", erg);
    return erg;
  }

  public Object visitAndPred(net.sourceforge.czt.z.jaxb.gen.AndPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAndPred", jaxbObject);
    Pred leftPred =
      (Pred) dispatch(jaxbObject.getLeftPred());
    Pred rightPred =
      (Pred) dispatch(jaxbObject.getRightPred());
    Op op = null;
    String opJaxb = jaxbObject.getOp();
    if (opJaxb != null) {
      op =
        Op.fromString(opJaxb);
    }
    AndPred erg = mZFactory_.createAndPred(leftPred, rightPred, op);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitAndPred", erg);
    return erg;
  }

  public Object visitConjPara(net.sourceforge.czt.z.jaxb.gen.ConjPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitConjPara", jaxbObject);
    List declName = new Vector();
    for (Iterator iter = jaxbObject.getDeclName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      declName.add(o);
    }
    Pred pred =
      (Pred) dispatch(jaxbObject.getPred());
    ConjPara erg = mZFactory_.createConjPara(declName, pred);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitConjPara", erg);
    return erg;
  }

  public Object visitNumStroke(net.sourceforge.czt.z.jaxb.gen.NumStroke jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNumStroke", jaxbObject);
    Integer number =
      (Integer) dispatch(jaxbObject.getNumber());
    NumStroke erg = mZFactory_.createNumStroke(number);
    getLogger().exiting("JaxbToAst", "visitNumStroke", erg);
    return erg;
  }

  public Object visitZSect(net.sourceforge.czt.z.jaxb.gen.ZSect jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitZSect", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    List parent = new Vector();
    for (Iterator iter = jaxbObject.getParent().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      parent.add(o);
    }
    List para = new Vector();
    for (Iterator iter = jaxbObject.getPara().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      para.add(o);
    }
    ZSect erg = mZFactory_.createZSect(name, parent, para);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitZSect", erg);
    return erg;
  }

  public Object visitThetaExpr(net.sourceforge.czt.z.jaxb.gen.ThetaExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitThetaExpr", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    List stroke = new Vector();
    for (Iterator iter = jaxbObject.getStroke().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      stroke.add(o);
    }
    ThetaExpr erg = mZFactory_.createThetaExpr(expr, stroke);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitThetaExpr", erg);
    return erg;
  }

  public Object visitSetExpr(net.sourceforge.czt.z.jaxb.gen.SetExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSetExpr", jaxbObject);
    List expr = new Vector();
    for (Iterator iter = jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    SetExpr erg = mZFactory_.createSetExpr(expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSetExpr", erg);
    return erg;
  }

  public Object visitSetCompExpr(net.sourceforge.czt.z.jaxb.gen.SetCompExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSetCompExpr", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    SetCompExpr erg = mZFactory_.createSetCompExpr(schText, expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSetCompExpr", erg);
    return erg;
  }

  public Object visitPipeExpr(net.sourceforge.czt.z.jaxb.gen.PipeExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPipeExpr", jaxbObject);
    Expr leftExpr =
      (Expr) dispatch(jaxbObject.getLeftExpr());
    Expr rightExpr =
      (Expr) dispatch(jaxbObject.getRightExpr());
    PipeExpr erg = mZFactory_.createPipeExpr(leftExpr, rightExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitPipeExpr", erg);
    return erg;
  }

  public Object visitRefExpr(net.sourceforge.czt.z.jaxb.gen.RefExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRefExpr", jaxbObject);
    RefName refName =
      (RefName) dispatch(jaxbObject.getRefName());
    List expr = new Vector();
    for (Iterator iter = jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    Boolean mixfix =
      (Boolean) dispatch(jaxbObject.getMixfix());
    RefExpr erg = mZFactory_.createRefExpr(refName, expr, mixfix);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitRefExpr", erg);
    return erg;
  }

  public Object visitNegExpr(net.sourceforge.czt.z.jaxb.gen.NegExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNegExpr", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    NegExpr erg = mZFactory_.createNegExpr(expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitNegExpr", erg);
    return erg;
  }

  public Object visitProdExpr(net.sourceforge.czt.z.jaxb.gen.ProdExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProdExpr", jaxbObject);
    List expr = new Vector();
    for (Iterator iter = jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    ProdExpr erg = mZFactory_.createProdExpr(expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitProdExpr", erg);
    return erg;
  }

  public Object visitDecorExpr(net.sourceforge.czt.z.jaxb.gen.DecorExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDecorExpr", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    Stroke stroke =
      (Stroke) dispatch(jaxbObject.getStroke());
    DecorExpr erg = mZFactory_.createDecorExpr(expr, stroke);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitDecorExpr", erg);
    return erg;
  }

  public Object visitOutStroke(net.sourceforge.czt.z.jaxb.gen.OutStroke jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOutStroke", jaxbObject);
    OutStroke erg = mZFactory_.createOutStroke();
    getLogger().exiting("JaxbToAst", "visitOutStroke", erg);
    return erg;
  }

  public Object visitParent(net.sourceforge.czt.z.jaxb.gen.Parent jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParent", jaxbObject);
    String word =
      (String) dispatch(jaxbObject.getWord());
    Parent erg = mZFactory_.createParent(word);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitParent", erg);
    return erg;
  }

  public Object visitExists1Pred(net.sourceforge.czt.z.jaxb.gen.Exists1Pred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExists1Pred", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Pred pred =
      (Pred) dispatch(jaxbObject.getPred());
    Exists1Pred erg = mZFactory_.createExists1Pred(schText, pred);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitExists1Pred", erg);
    return erg;
  }

  public Object visitAxPara(net.sourceforge.czt.z.jaxb.gen.AxPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAxPara", jaxbObject);
    List declName = new Vector();
    for (Iterator iter = jaxbObject.getDeclName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      declName.add(o);
    }
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Box box = null;
    String boxJaxb = jaxbObject.getBox();
    if (boxJaxb != null) {
      box =
        Box.fromString(boxJaxb);
    }
    AxPara erg = mZFactory_.createAxPara(declName, schText, box);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitAxPara", erg);
    return erg;
  }

  public Object visitSchExpr(net.sourceforge.czt.z.jaxb.gen.SchExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSchExpr", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    SchExpr erg = mZFactory_.createSchExpr(schText);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSchExpr", erg);
    return erg;
  }

  public Object visitTupleExpr(net.sourceforge.czt.z.jaxb.gen.TupleExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTupleExpr", jaxbObject);
    List expr = new Vector();
    for (Iterator iter = jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    TupleExpr erg = mZFactory_.createTupleExpr(expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitTupleExpr", erg);
    return erg;
  }
}
