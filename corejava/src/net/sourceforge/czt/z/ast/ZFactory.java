
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.ast;

/**
 * <p>The object factory for the AST.
 * This interface contains factory methods
 * for each concrete Z term.</p>
 *
 * <p>This object factory allows the programmer to programatically
 * construct new instances of concrete Z terms.
 * There is a factory method that does not require arguments
 * (called default factory method)
 * and a factory method where all the children (except annotations)
 * of that particular Z term can be provided.</p>
 *
 * @author Gnast version 0.1
 */
public interface ZFactory
{
  /**
   * Creates an instance of {@link Freetype}.
   *
   * @return the new instance of Freetype.
   */
  Freetype createFreetype();

  /**
   * Creates an instance of {@link Freetype} with the given children.
   *
   * @return the new instance of Freetype.
   */
  Freetype createFreetype(DeclName declName, java.util.List branch);

  /**
   * Creates an instance of {@link Exists1Expr}.
   *
   * @return the new instance of Exists1Expr.
   */
  Exists1Expr createExists1Expr();

  /**
   * Creates an instance of {@link Exists1Expr} with the given children.
   *
   * @return the new instance of Exists1Expr.
   */
  Exists1Expr createExists1Expr(SchText schText, Expr expr);

  /**
   * Creates an instance of {@link ParenAnn}.
   *
   * @return the new instance of ParenAnn.
   */
  ParenAnn createParenAnn();

  /**
   * Creates an instance of {@link NameNamePair}.
   *
   * @return the new instance of NameNamePair.
   */
  NameNamePair createNameNamePair();

  /**
   * Creates an instance of {@link NameNamePair} with the given children.
   *
   * @return the new instance of NameNamePair.
   */
  NameNamePair createNameNamePair(RefName oldName, DeclName newName);

  /**
   * Creates an instance of {@link LatexMarkupPara}.
   *
   * @return the new instance of LatexMarkupPara.
   */
  LatexMarkupPara createLatexMarkupPara();

  /**
   * Creates an instance of {@link LatexMarkupPara} with the given children.
   *
   * @return the new instance of LatexMarkupPara.
   */
  LatexMarkupPara createLatexMarkupPara(java.util.List directive);

  /**
   * Creates an instance of {@link ApplExpr}.
   *
   * @return the new instance of ApplExpr.
   */
  ApplExpr createApplExpr();

  /**
   * Creates an instance of {@link ApplExpr} with the given children.
   *
   * @return the new instance of ApplExpr.
   */
  ApplExpr createApplExpr(Expr leftExpr, Expr rightExpr, Boolean mixfix);

  /**
   * Creates an instance of {@link LetExpr}.
   *
   * @return the new instance of LetExpr.
   */
  LetExpr createLetExpr();

  /**
   * Creates an instance of {@link LetExpr} with the given children.
   *
   * @return the new instance of LetExpr.
   */
  LetExpr createLetExpr(SchText schText, Expr expr);

  /**
   * Creates an instance of {@link Signature}.
   *
   * @return the new instance of Signature.
   */
  Signature createSignature();

  /**
   * Creates an instance of {@link Signature} with the given children.
   *
   * @return the new instance of Signature.
   */
  Signature createSignature(java.util.List nameTypePair);

  /**
   * Creates an instance of {@link ConstDecl}.
   *
   * @return the new instance of ConstDecl.
   */
  ConstDecl createConstDecl();

  /**
   * Creates an instance of {@link ConstDecl} with the given children.
   *
   * @return the new instance of ConstDecl.
   */
  ConstDecl createConstDecl(DeclName declName, Expr expr);

  /**
   * Creates an instance of {@link NextStroke}.
   *
   * @return the new instance of NextStroke.
   */
  NextStroke createNextStroke();

  /**
   * Creates an instance of {@link InStroke}.
   *
   * @return the new instance of InStroke.
   */
  InStroke createInStroke();

  /**
   * Creates an instance of {@link RefName}.
   *
   * @return the new instance of RefName.
   */
  RefName createRefName();

  /**
   * Creates an instance of {@link RefName} with the given children.
   *
   * @return the new instance of RefName.
   */
  RefName createRefName(String word, java.util.List stroke, DeclName decl);

  /**
   * Creates an instance of {@link MemPred}.
   *
   * @return the new instance of MemPred.
   */
  MemPred createMemPred();

  /**
   * Creates an instance of {@link MemPred} with the given children.
   *
   * @return the new instance of MemPred.
   */
  MemPred createMemPred(Expr leftExpr, Expr rightExpr, Boolean mixfix);

  /**
   * Creates an instance of {@link ProdType}.
   *
   * @return the new instance of ProdType.
   */
  ProdType createProdType();

  /**
   * Creates an instance of {@link ProdType} with the given children.
   *
   * @return the new instance of ProdType.
   */
  ProdType createProdType(java.util.List type);

  /**
   * Creates an instance of {@link ImpliesExpr}.
   *
   * @return the new instance of ImpliesExpr.
   */
  ImpliesExpr createImpliesExpr();

  /**
   * Creates an instance of {@link ImpliesExpr} with the given children.
   *
   * @return the new instance of ImpliesExpr.
   */
  ImpliesExpr createImpliesExpr(Expr leftExpr, Expr rightExpr);

  /**
   * Creates an instance of {@link MuExpr}.
   *
   * @return the new instance of MuExpr.
   */
  MuExpr createMuExpr();

  /**
   * Creates an instance of {@link MuExpr} with the given children.
   *
   * @return the new instance of MuExpr.
   */
  MuExpr createMuExpr(SchText schText, Expr expr);

  /**
   * Creates an instance of {@link OrPred}.
   *
   * @return the new instance of OrPred.
   */
  OrPred createOrPred();

  /**
   * Creates an instance of {@link OrPred} with the given children.
   *
   * @return the new instance of OrPred.
   */
  OrPred createOrPred(Pred leftPred, Pred rightPred);

  /**
   * Creates an instance of {@link ExistsExpr}.
   *
   * @return the new instance of ExistsExpr.
   */
  ExistsExpr createExistsExpr();

  /**
   * Creates an instance of {@link ExistsExpr} with the given children.
   *
   * @return the new instance of ExistsExpr.
   */
  ExistsExpr createExistsExpr(SchText schText, Expr expr);

  /**
   * Creates an instance of {@link VarDecl}.
   *
   * @return the new instance of VarDecl.
   */
  VarDecl createVarDecl();

  /**
   * Creates an instance of {@link VarDecl} with the given children.
   *
   * @return the new instance of VarDecl.
   */
  VarDecl createVarDecl(java.util.List declName, Expr expr);

  /**
   * Creates an instance of {@link NarrSect}.
   *
   * @return the new instance of NarrSect.
   */
  NarrSect createNarrSect();

  /**
   * Creates an instance of {@link NarrSect} with the given children.
   *
   * @return the new instance of NarrSect.
   */
  NarrSect createNarrSect(java.util.List content);

  /**
   * Creates an instance of {@link FreePara}.
   *
   * @return the new instance of FreePara.
   */
  FreePara createFreePara();

  /**
   * Creates an instance of {@link FreePara} with the given children.
   *
   * @return the new instance of FreePara.
   */
  FreePara createFreePara(java.util.List freetype);

  /**
   * Creates an instance of {@link CompExpr}.
   *
   * @return the new instance of CompExpr.
   */
  CompExpr createCompExpr();

  /**
   * Creates an instance of {@link CompExpr} with the given children.
   *
   * @return the new instance of CompExpr.
   */
  CompExpr createCompExpr(Expr leftExpr, Expr rightExpr);

  /**
   * Creates an instance of {@link BindExpr}.
   *
   * @return the new instance of BindExpr.
   */
  BindExpr createBindExpr();

  /**
   * Creates an instance of {@link BindExpr} with the given children.
   *
   * @return the new instance of BindExpr.
   */
  BindExpr createBindExpr(java.util.List nameExprPair);

  /**
   * Creates an instance of {@link CondExpr}.
   *
   * @return the new instance of CondExpr.
   */
  CondExpr createCondExpr();

  /**
   * Creates an instance of {@link CondExpr} with the given children.
   *
   * @return the new instance of CondExpr.
   */
  CondExpr createCondExpr(Pred pred, Expr leftExpr, Expr rightExpr);

  /**
   * Creates an instance of {@link ForallExpr}.
   *
   * @return the new instance of ForallExpr.
   */
  ForallExpr createForallExpr();

  /**
   * Creates an instance of {@link ForallExpr} with the given children.
   *
   * @return the new instance of ForallExpr.
   */
  ForallExpr createForallExpr(SchText schText, Expr expr);

  /**
   * Creates an instance of {@link NarrPara}.
   *
   * @return the new instance of NarrPara.
   */
  NarrPara createNarrPara();

  /**
   * Creates an instance of {@link NarrPara} with the given children.
   *
   * @return the new instance of NarrPara.
   */
  NarrPara createNarrPara(java.util.List content);

  /**
   * Creates an instance of {@link TruePred}.
   *
   * @return the new instance of TruePred.
   */
  TruePred createTruePred();

  /**
   * Creates an instance of {@link Directive}.
   *
   * @return the new instance of Directive.
   */
  Directive createDirective();

  /**
   * Creates an instance of {@link Directive} with the given children.
   *
   * @return the new instance of Directive.
   */
  Directive createDirective(String command, String unicode, DirectiveType type);

  /**
   * Creates an instance of {@link Operator}.
   *
   * @return the new instance of Operator.
   */
  Operator createOperator();

  /**
   * Creates an instance of {@link Operator} with the given children.
   *
   * @return the new instance of Operator.
   */
  Operator createOperator(String word);

  /**
   * Creates an instance of {@link NumExpr}.
   *
   * @return the new instance of NumExpr.
   */
  NumExpr createNumExpr();

  /**
   * Creates an instance of {@link NumExpr} with the given children.
   *
   * @return the new instance of NumExpr.
   */
  NumExpr createNumExpr(java.math.BigInteger value);

  /**
   * Creates an instance of {@link NameExprPair}.
   *
   * @return the new instance of NameExprPair.
   */
  NameExprPair createNameExprPair();

  /**
   * Creates an instance of {@link NameExprPair} with the given children.
   *
   * @return the new instance of NameExprPair.
   */
  NameExprPair createNameExprPair(DeclName name, Expr expr);

  /**
   * Creates an instance of {@link TupleSelExpr}.
   *
   * @return the new instance of TupleSelExpr.
   */
  TupleSelExpr createTupleSelExpr();

  /**
   * Creates an instance of {@link TupleSelExpr} with the given children.
   *
   * @return the new instance of TupleSelExpr.
   */
  TupleSelExpr createTupleSelExpr(Expr expr, Integer select);

  /**
   * Creates an instance of {@link LambdaExpr}.
   *
   * @return the new instance of LambdaExpr.
   */
  LambdaExpr createLambdaExpr();

  /**
   * Creates an instance of {@link LambdaExpr} with the given children.
   *
   * @return the new instance of LambdaExpr.
   */
  LambdaExpr createLambdaExpr(SchText schText, Expr expr);

  /**
   * Creates an instance of {@link IffExpr}.
   *
   * @return the new instance of IffExpr.
   */
  IffExpr createIffExpr();

  /**
   * Creates an instance of {@link IffExpr} with the given children.
   *
   * @return the new instance of IffExpr.
   */
  IffExpr createIffExpr(Expr leftExpr, Expr rightExpr);

  /**
   * Creates an instance of {@link IffPred}.
   *
   * @return the new instance of IffPred.
   */
  IffPred createIffPred();

  /**
   * Creates an instance of {@link IffPred} with the given children.
   *
   * @return the new instance of IffPred.
   */
  IffPred createIffPred(Pred leftPred, Pred rightPred);

  /**
   * Creates an instance of {@link FalsePred}.
   *
   * @return the new instance of FalsePred.
   */
  FalsePred createFalsePred();

  /**
   * Creates an instance of {@link TypeEnvAnn}.
   *
   * @return the new instance of TypeEnvAnn.
   */
  TypeEnvAnn createTypeEnvAnn();

  /**
   * Creates an instance of {@link TypeEnvAnn} with the given children.
   *
   * @return the new instance of TypeEnvAnn.
   */
  TypeEnvAnn createTypeEnvAnn(java.util.List nameTypePair);

  /**
   * Creates an instance of {@link UnparsedZSect}.
   *
   * @return the new instance of UnparsedZSect.
   */
  UnparsedZSect createUnparsedZSect();

  /**
   * Creates an instance of {@link UnparsedZSect} with the given children.
   *
   * @return the new instance of UnparsedZSect.
   */
  UnparsedZSect createUnparsedZSect(java.util.List content);

  /**
   * Creates an instance of {@link UnparsedPara}.
   *
   * @return the new instance of UnparsedPara.
   */
  UnparsedPara createUnparsedPara();

  /**
   * Creates an instance of {@link UnparsedPara} with the given children.
   *
   * @return the new instance of UnparsedPara.
   */
  UnparsedPara createUnparsedPara(java.util.List content);

  /**
   * Creates an instance of {@link ImpliesPred}.
   *
   * @return the new instance of ImpliesPred.
   */
  ImpliesPred createImpliesPred();

  /**
   * Creates an instance of {@link ImpliesPred} with the given children.
   *
   * @return the new instance of ImpliesPred.
   */
  ImpliesPred createImpliesPred(Pred leftPred, Pred rightPred);

  /**
   * Creates an instance of {@link NameTypePair}.
   *
   * @return the new instance of NameTypePair.
   */
  NameTypePair createNameTypePair();

  /**
   * Creates an instance of {@link NameTypePair} with the given children.
   *
   * @return the new instance of NameTypePair.
   */
  NameTypePair createNameTypePair(DeclName name, Type type);

  /**
   * Creates an instance of {@link SchText}.
   *
   * @return the new instance of SchText.
   */
  SchText createSchText();

  /**
   * Creates an instance of {@link SchText} with the given children.
   *
   * @return the new instance of SchText.
   */
  SchText createSchText(java.util.List decl, Pred pred);

  /**
   * Creates an instance of {@link Operand}.
   *
   * @return the new instance of Operand.
   */
  Operand createOperand();

  /**
   * Creates an instance of {@link Operand} with the given children.
   *
   * @return the new instance of Operand.
   */
  Operand createOperand(Boolean list);

  /**
   * Creates an instance of {@link ProjExpr}.
   *
   * @return the new instance of ProjExpr.
   */
  ProjExpr createProjExpr();

  /**
   * Creates an instance of {@link ProjExpr} with the given children.
   *
   * @return the new instance of ProjExpr.
   */
  ProjExpr createProjExpr(Expr leftExpr, Expr rightExpr);

  /**
   * Creates an instance of {@link Branch}.
   *
   * @return the new instance of Branch.
   */
  Branch createBranch();

  /**
   * Creates an instance of {@link Branch} with the given children.
   *
   * @return the new instance of Branch.
   */
  Branch createBranch(DeclName declName, Expr expr);

  /**
   * Creates an instance of {@link TypeAnn}.
   *
   * @return the new instance of TypeAnn.
   */
  TypeAnn createTypeAnn();

  /**
   * Creates an instance of {@link TypeAnn} with the given children.
   *
   * @return the new instance of TypeAnn.
   */
  TypeAnn createTypeAnn(Type type);

  /**
   * Creates an instance of {@link GenType}.
   *
   * @return the new instance of GenType.
   */
  GenType createGenType();

  /**
   * Creates an instance of {@link GenType} with the given children.
   *
   * @return the new instance of GenType.
   */
  GenType createGenType(DeclName name);

  /**
   * Creates an instance of {@link OptempPara}.
   *
   * @return the new instance of OptempPara.
   */
  OptempPara createOptempPara();

  /**
   * Creates an instance of {@link OptempPara} with the given children.
   *
   * @return the new instance of OptempPara.
   */
  OptempPara createOptempPara(java.util.List oper, Cat cat, Assoc assoc, Integer prec);

  /**
   * Creates an instance of {@link ExistsPred}.
   *
   * @return the new instance of ExistsPred.
   */
  ExistsPred createExistsPred();

  /**
   * Creates an instance of {@link ExistsPred} with the given children.
   *
   * @return the new instance of ExistsPred.
   */
  ExistsPred createExistsPred(SchText schText, Pred pred);

  /**
   * Creates an instance of {@link NameSectTypeTriple}.
   *
   * @return the new instance of NameSectTypeTriple.
   */
  NameSectTypeTriple createNameSectTypeTriple();

  /**
   * Creates an instance of {@link NameSectTypeTriple} with the given children.
   *
   * @return the new instance of NameSectTypeTriple.
   */
  NameSectTypeTriple createNameSectTypeTriple(DeclName name, String sect, Type type);

  /**
   * Creates an instance of {@link NegPred}.
   *
   * @return the new instance of NegPred.
   */
  NegPred createNegPred();

  /**
   * Creates an instance of {@link NegPred} with the given children.
   *
   * @return the new instance of NegPred.
   */
  NegPred createNegPred(Pred pred);

  /**
   * Creates an instance of {@link PreExpr}.
   *
   * @return the new instance of PreExpr.
   */
  PreExpr createPreExpr();

  /**
   * Creates an instance of {@link PreExpr} with the given children.
   *
   * @return the new instance of PreExpr.
   */
  PreExpr createPreExpr(Expr expr);

  /**
   * Creates an instance of {@link SectTypeEnvAnn}.
   *
   * @return the new instance of SectTypeEnvAnn.
   */
  SectTypeEnvAnn createSectTypeEnvAnn();

  /**
   * Creates an instance of {@link SectTypeEnvAnn} with the given children.
   *
   * @return the new instance of SectTypeEnvAnn.
   */
  SectTypeEnvAnn createSectTypeEnvAnn(java.util.List nameSectTypeTriple);

  /**
   * Creates an instance of {@link ExprPred}.
   *
   * @return the new instance of ExprPred.
   */
  ExprPred createExprPred();

  /**
   * Creates an instance of {@link ExprPred} with the given children.
   *
   * @return the new instance of ExprPred.
   */
  ExprPred createExprPred(Expr expr);

  /**
   * Creates an instance of {@link GivenType}.
   *
   * @return the new instance of GivenType.
   */
  GivenType createGivenType();

  /**
   * Creates an instance of {@link GivenType} with the given children.
   *
   * @return the new instance of GivenType.
   */
  GivenType createGivenType(DeclName name);

  /**
   * Creates an instance of {@link InclDecl}.
   *
   * @return the new instance of InclDecl.
   */
  InclDecl createInclDecl();

  /**
   * Creates an instance of {@link InclDecl} with the given children.
   *
   * @return the new instance of InclDecl.
   */
  InclDecl createInclDecl(Expr expr);

  /**
   * Creates an instance of {@link SchemaType}.
   *
   * @return the new instance of SchemaType.
   */
  SchemaType createSchemaType();

  /**
   * Creates an instance of {@link SchemaType} with the given children.
   *
   * @return the new instance of SchemaType.
   */
  SchemaType createSchemaType(Signature signature);

  /**
   * Creates an instance of {@link BindSelExpr}.
   *
   * @return the new instance of BindSelExpr.
   */
  BindSelExpr createBindSelExpr();

  /**
   * Creates an instance of {@link BindSelExpr} with the given children.
   *
   * @return the new instance of BindSelExpr.
   */
  BindSelExpr createBindSelExpr(Expr expr, RefName name);

  /**
   * Creates an instance of {@link DeclName}.
   *
   * @return the new instance of DeclName.
   */
  DeclName createDeclName();

  /**
   * Creates an instance of {@link DeclName} with the given children.
   *
   * @return the new instance of DeclName.
   */
  DeclName createDeclName(String word, java.util.List stroke, String id);

  /**
   * Creates an instance of {@link ForallPred}.
   *
   * @return the new instance of ForallPred.
   */
  ForallPred createForallPred();

  /**
   * Creates an instance of {@link ForallPred} with the given children.
   *
   * @return the new instance of ForallPred.
   */
  ForallPred createForallPred(SchText schText, Pred pred);

  /**
   * Creates an instance of {@link OrExpr}.
   *
   * @return the new instance of OrExpr.
   */
  OrExpr createOrExpr();

  /**
   * Creates an instance of {@link OrExpr} with the given children.
   *
   * @return the new instance of OrExpr.
   */
  OrExpr createOrExpr(Expr leftExpr, Expr rightExpr);

  /**
   * Creates an instance of {@link Spec}.
   *
   * @return the new instance of Spec.
   */
  Spec createSpec();

  /**
   * Creates an instance of {@link Spec} with the given children.
   *
   * @return the new instance of Spec.
   */
  Spec createSpec(java.util.List sect, String version, String author, java.util.Calendar modified, String source);

  /**
   * Creates an instance of {@link LocAnn}.
   *
   * @return the new instance of LocAnn.
   */
  LocAnn createLocAnn();

  /**
   * Creates an instance of {@link LocAnn} with the given children.
   *
   * @return the new instance of LocAnn.
   */
  LocAnn createLocAnn(String loc, Integer line, Integer col);

  /**
   * Creates an instance of {@link PowerExpr}.
   *
   * @return the new instance of PowerExpr.
   */
  PowerExpr createPowerExpr();

  /**
   * Creates an instance of {@link PowerExpr} with the given children.
   *
   * @return the new instance of PowerExpr.
   */
  PowerExpr createPowerExpr(Expr expr);

  /**
   * Creates an instance of {@link HideExpr}.
   *
   * @return the new instance of HideExpr.
   */
  HideExpr createHideExpr();

  /**
   * Creates an instance of {@link HideExpr} with the given children.
   *
   * @return the new instance of HideExpr.
   */
  HideExpr createHideExpr(Expr expr, java.util.List name);

  /**
   * Creates an instance of {@link GivenPara}.
   *
   * @return the new instance of GivenPara.
   */
  GivenPara createGivenPara();

  /**
   * Creates an instance of {@link GivenPara} with the given children.
   *
   * @return the new instance of GivenPara.
   */
  GivenPara createGivenPara(java.util.List declName);

  /**
   * Creates an instance of {@link PowerType}.
   *
   * @return the new instance of PowerType.
   */
  PowerType createPowerType();

  /**
   * Creates an instance of {@link PowerType} with the given children.
   *
   * @return the new instance of PowerType.
   */
  PowerType createPowerType(Type type);

  /**
   * Creates an instance of {@link AndExpr}.
   *
   * @return the new instance of AndExpr.
   */
  AndExpr createAndExpr();

  /**
   * Creates an instance of {@link AndExpr} with the given children.
   *
   * @return the new instance of AndExpr.
   */
  AndExpr createAndExpr(Expr leftExpr, Expr rightExpr);

  /**
   * Creates an instance of {@link RenameExpr}.
   *
   * @return the new instance of RenameExpr.
   */
  RenameExpr createRenameExpr();

  /**
   * Creates an instance of {@link RenameExpr} with the given children.
   *
   * @return the new instance of RenameExpr.
   */
  RenameExpr createRenameExpr(Expr expr, java.util.List nameNamePair);

  /**
   * Creates an instance of {@link AndPred}.
   *
   * @return the new instance of AndPred.
   */
  AndPred createAndPred();

  /**
   * Creates an instance of {@link AndPred} with the given children.
   *
   * @return the new instance of AndPred.
   */
  AndPred createAndPred(Pred leftPred, Pred rightPred, Op op);

  /**
   * Creates an instance of {@link ConjPara}.
   *
   * @return the new instance of ConjPara.
   */
  ConjPara createConjPara();

  /**
   * Creates an instance of {@link ConjPara} with the given children.
   *
   * @return the new instance of ConjPara.
   */
  ConjPara createConjPara(java.util.List declName, Pred pred);

  /**
   * Creates an instance of {@link NumStroke}.
   *
   * @return the new instance of NumStroke.
   */
  NumStroke createNumStroke();

  /**
   * Creates an instance of {@link NumStroke} with the given children.
   *
   * @return the new instance of NumStroke.
   */
  NumStroke createNumStroke(Integer number);

  /**
   * Creates an instance of {@link ZSect}.
   *
   * @return the new instance of ZSect.
   */
  ZSect createZSect();

  /**
   * Creates an instance of {@link ZSect} with the given children.
   *
   * @return the new instance of ZSect.
   */
  ZSect createZSect(String name, java.util.List parent, java.util.List para);

  /**
   * Creates an instance of {@link ThetaExpr}.
   *
   * @return the new instance of ThetaExpr.
   */
  ThetaExpr createThetaExpr();

  /**
   * Creates an instance of {@link ThetaExpr} with the given children.
   *
   * @return the new instance of ThetaExpr.
   */
  ThetaExpr createThetaExpr(Expr expr, java.util.List stroke);

  /**
   * Creates an instance of {@link SetExpr}.
   *
   * @return the new instance of SetExpr.
   */
  SetExpr createSetExpr();

  /**
   * Creates an instance of {@link SetExpr} with the given children.
   *
   * @return the new instance of SetExpr.
   */
  SetExpr createSetExpr(java.util.List expr);

  /**
   * Creates an instance of {@link SetCompExpr}.
   *
   * @return the new instance of SetCompExpr.
   */
  SetCompExpr createSetCompExpr();

  /**
   * Creates an instance of {@link SetCompExpr} with the given children.
   *
   * @return the new instance of SetCompExpr.
   */
  SetCompExpr createSetCompExpr(SchText schText, Expr expr);

  /**
   * Creates an instance of {@link PipeExpr}.
   *
   * @return the new instance of PipeExpr.
   */
  PipeExpr createPipeExpr();

  /**
   * Creates an instance of {@link PipeExpr} with the given children.
   *
   * @return the new instance of PipeExpr.
   */
  PipeExpr createPipeExpr(Expr leftExpr, Expr rightExpr);

  /**
   * Creates an instance of {@link RefExpr}.
   *
   * @return the new instance of RefExpr.
   */
  RefExpr createRefExpr();

  /**
   * Creates an instance of {@link RefExpr} with the given children.
   *
   * @return the new instance of RefExpr.
   */
  RefExpr createRefExpr(RefName refName, java.util.List expr, Boolean mixfix);

  /**
   * Creates an instance of {@link NegExpr}.
   *
   * @return the new instance of NegExpr.
   */
  NegExpr createNegExpr();

  /**
   * Creates an instance of {@link NegExpr} with the given children.
   *
   * @return the new instance of NegExpr.
   */
  NegExpr createNegExpr(Expr expr);

  /**
   * Creates an instance of {@link ProdExpr}.
   *
   * @return the new instance of ProdExpr.
   */
  ProdExpr createProdExpr();

  /**
   * Creates an instance of {@link ProdExpr} with the given children.
   *
   * @return the new instance of ProdExpr.
   */
  ProdExpr createProdExpr(java.util.List expr);

  /**
   * Creates an instance of {@link DecorExpr}.
   *
   * @return the new instance of DecorExpr.
   */
  DecorExpr createDecorExpr();

  /**
   * Creates an instance of {@link DecorExpr} with the given children.
   *
   * @return the new instance of DecorExpr.
   */
  DecorExpr createDecorExpr(Expr expr, Stroke stroke);

  /**
   * Creates an instance of {@link OutStroke}.
   *
   * @return the new instance of OutStroke.
   */
  OutStroke createOutStroke();

  /**
   * Creates an instance of {@link Parent}.
   *
   * @return the new instance of Parent.
   */
  Parent createParent();

  /**
   * Creates an instance of {@link Parent} with the given children.
   *
   * @return the new instance of Parent.
   */
  Parent createParent(String word);

  /**
   * Creates an instance of {@link Exists1Pred}.
   *
   * @return the new instance of Exists1Pred.
   */
  Exists1Pred createExists1Pred();

  /**
   * Creates an instance of {@link Exists1Pred} with the given children.
   *
   * @return the new instance of Exists1Pred.
   */
  Exists1Pred createExists1Pred(SchText schText, Pred pred);

  /**
   * Creates an instance of {@link AxPara}.
   *
   * @return the new instance of AxPara.
   */
  AxPara createAxPara();

  /**
   * Creates an instance of {@link AxPara} with the given children.
   *
   * @return the new instance of AxPara.
   */
  AxPara createAxPara(java.util.List declName, SchText schText, Box box);

  /**
   * Creates an instance of {@link SchExpr}.
   *
   * @return the new instance of SchExpr.
   */
  SchExpr createSchExpr();

  /**
   * Creates an instance of {@link SchExpr} with the given children.
   *
   * @return the new instance of SchExpr.
   */
  SchExpr createSchExpr(SchText schText);

  /**
   * Creates an instance of {@link TupleExpr}.
   *
   * @return the new instance of TupleExpr.
   */
  TupleExpr createTupleExpr();

  /**
   * Creates an instance of {@link TupleExpr} with the given children.
   *
   * @return the new instance of TupleExpr.
   */
  TupleExpr createTupleExpr(java.util.List expr);


  /**
   * Creates a MemPred that represents equality
   * between the two given expressions.
   */
  MemPred createEquality(Expr left, Expr right);

  /**
   * Creates a binary ProdExpr.
   */
  ProdExpr createProdExpr(Expr left, Expr right);

  /**
   * Creates a RefName which refers to the given DeclName.
   */
  RefName createRefName(DeclName declName);

  /**
   * Creates a pair, that is a tuple expression with exactly
   * two elements.
   */
  TupleExpr createTupleExpr(Expr left, Expr right);

}
