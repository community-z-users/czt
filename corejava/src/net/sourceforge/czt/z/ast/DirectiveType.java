
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE Enum.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.ast;

/**
 * A typesafe enumeration.
 *
 * @author Gnast version 0.1
 */
public final class DirectiveType
{
  public static final DirectiveType NONE = new DirectiveType("NONE");
  public static final DirectiveType IN = new DirectiveType("IN");
  public static final DirectiveType PRE = new DirectiveType("PRE");
  public static final DirectiveType POST = new DirectiveType("POST");
  private final String name_;

  /**
   * Only this class can construct instances.
   */
  private DirectiveType(String name)
  {
    name_ = name;
  }

  public String toString()
  {
    return name_;
  }

  public int hashCode()
  {
    return super.hashCode();
  }

  public boolean equals(java.lang.Object o)
  {
    return super.equals(o);
  }

  public static DirectiveType fromString(java.lang.String value)
  {
    if (value.equals("NONE")) {
      return NONE;
    }
    if (value.equals("IN")) {
      return IN;
    }
    if (value.equals("PRE")) {
      return PRE;
    }
    if (value.equals("POST")) {
      return POST;
    }
    throw new IllegalArgumentException();
  }
}
