
/*
THIS FILE WAS GENERATED BY GNAST.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

************************************************************

Copyright 2003 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.z.impl;

import java.util.*;
import java.util.logging.*;

import net.sourceforge.czt.base.impl.*;
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.visitor.*;

import net.sourceforge.czt.z.visitor.RefNameVisitor;

/**
 * An implementation of the interface
 * {@link RefName}.
 *
 * @author Gnast version 0.1
 */
public class RefNameImpl
extends NameImpl implements RefName
{
  /**
   * The default constructor.
   *
   * Do not use it explicitly, unless you are extending this class.
   * If you want to create an instance of this class, please use the
   * {@link CoreFactory object factory}.
   */
  protected RefNameImpl() { }

  /**
   * Compares the specified object with this RefNameImpl
   * for equality.  Returns true if and only if the specified object is
   * also a(n) RefNameImpl and all the getter methods except getAnns
   * return equal objects.
   */
  public boolean equals(Object obj)
  {
    if(obj != null &&
       this.getClass().equals(obj.getClass()) &&
       super.equals(obj)) {
      RefNameImpl object = (RefNameImpl) obj;
      if((mDecl == null && object.mDecl != null) ||
         (mDecl != null &&
         ! mDecl.equals(object.mDecl))) return false;
      if(mDecl == null && object.mDecl != null)
        return false;
      return true;
    }
    return false;
  }

  /**
   * Returns the hash code value for this RefNameImpl.
   * The hash code of a RefNameImpl is defined to be
   * the result of the following calculation:
   *
   * @czt.todo Write the calculation procedure for method hashCode().
   */
  public int hashCode()
  {
    int hashCode = super.hashCode();
    hashCode += "RefNameImpl".hashCode();
    if(mDecl != null) {
      hashCode += 31*mDecl.hashCode();
    }
    return hashCode;
  }

  /**
   * Accepts a visitor.
   */
  public Object accept(net.sourceforge.czt.util.Visitor v)
  {
    if (v instanceof RefNameVisitor)
    {
      RefNameVisitor visitor = (RefNameVisitor) v;
      return visitor.visitRefName(this);
    }
    return super.accept(v);
  }

  /**
   * Returns a new object of this class.
   */
  public net.sourceforge.czt.base.ast.Term create(Object[] args) {
    RefName zedObject = null;
    try {
      DeclName decl = (DeclName) args[0];
      String word = (String) args[1];
      java.util.List stroke = (java.util.List) args[2];
      zedObject = new RefNameImpl();
      zedObject.setDecl(decl);
      zedObject.setWord(word);
      if(stroke != null) {
        zedObject.getStroke().addAll(stroke);
      }
    } catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException();
    } catch (ClassCastException e) {
      throw new IllegalArgumentException();
    }
    return zedObject;
  }

  public Object[] getChildren()
  {
    Object[] erg = { getDecl(), getWord(), getStroke() };
    return erg;
  }

  private DeclName mDecl;

  public DeclName getDecl()
  {
    return mDecl;
  }

  public void setDecl(DeclName decl)
  {
    mDecl = decl;
  }
}
