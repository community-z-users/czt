
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstClass.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.impl;

import java.util.*;
import java.util.logging.*;

import net.sourceforge.czt.base.impl.*;
import net.sourceforge.czt.util.TypesafeList;
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.visitor.*;

import net.sourceforge.czt.z.visitor.AxParaVisitor;

/**
 * An implementation of the interface
 * {@link AxPara}.
 *
 * @author Gnast version 0.1
 */
public class AxParaImpl
  extends ParaImpl   implements AxPara
{
  /**
   * The default constructor.
   *
   * Do not use it explicitly, unless you are extending this class.
   * If you want to create an instance of this class, please use the
   * {@link net.sourceforge.czt.z.ast.ZFactory object factory}.
   */
  protected AxParaImpl()
  {
  }

  /**
   * Compares the specified object with this AxParaImpl
   * for equality.  Returns true if and only if the specified object is
   * also a(n) AxParaImpl and all the getter methods except getAnns
   * return equal objects.
   */
  public boolean equals(Object obj)
  {
    if (obj != null) {
      if (this.getClass().equals(obj.getClass()) && super.equals(obj)) {
        AxParaImpl object = (AxParaImpl) obj;
        if (declName_ != null) {
          if (!declName_.equals(object.declName_)) {
            return false;
          }
        }
        else {
          if (object.declName_ != null) {
            return false;
          }
        }
        if (schText_ != null) {
          if (!schText_.equals(object.schText_)) {
            return false;
          }
        }
        else {
          if (object.schText_ != null) {
            return false;
          }
        }
        if (box_ != null) {
          if (!box_.equals(object.box_)) {
            return false;
          }
        }
        else {
          if (object.box_ != null) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }

  /**
   * Returns the hash code value for this AxParaImpl.
   */
  public int hashCode()
  {
    final int constant = 31;

    int hashCode = super.hashCode();
    hashCode += "AxParaImpl".hashCode();
    if (declName_ != null) {
      hashCode += constant * declName_.hashCode();
    }
    if (schText_ != null) {
      hashCode += constant * schText_.hashCode();
    }
    if (box_ != null) {
      hashCode += constant * box_.hashCode();
    }
    return hashCode;
  }

  /**
   * Accepts a visitor.
   */
  public Object accept(net.sourceforge.czt.util.Visitor v)
  {
    if (v instanceof AxParaVisitor) {
      AxParaVisitor visitor = (AxParaVisitor) v;
      return visitor.visitAxPara(this);
    }
    return super.accept(v);
  }

  /**
   * Returns a new object of this class.
   */
  public net.sourceforge.czt.base.ast.Term create(Object[] args)
  {
    AxPara zedObject = null;
    try {
      java.util.List declName = (java.util.List) args[0];
      SchText schText = (SchText) args[1];
      Box box = (Box) args[2];
      zedObject = new AxParaImpl();
      if (declName != null) {
        zedObject.getDeclName().addAll(declName);
      }
      zedObject.setSchText(schText);
      zedObject.setBox(box);
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException();
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException();
    }
    return zedObject;
  }

  public Object[] getChildren()
  {
    Object[] erg = { getDeclName(), getSchText(), getBox() };
    return erg;
  }


  private net.sourceforge.czt.base.ast.ListTerm declName_ =
    new net.sourceforge.czt.base.impl.ListTermImpl(DeclName.class);

  public net.sourceforge.czt.base.ast.ListTerm getDeclName()
  {
    return declName_;
  }

  private SchText schText_;

  public SchText getSchText()
  {
    return schText_;
  }

  public void setSchText(SchText schText)
  {
    schText_ = schText;
  }

  private Box box_;

  public Box getBox()
  {
    return box_;
  }

  public void setBox(Box box)
  {
    box_ = box;
  }
}
