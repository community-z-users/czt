
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstClass.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.impl;

import java.util.*;
import java.util.logging.*;

import net.sourceforge.czt.base.impl.*;
import net.sourceforge.czt.util.TypesafeList;
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.visitor.*;

import net.sourceforge.czt.z.visitor.NameVisitor;

/**
 * An implementation of the interface
 * {@link Name}.
 *
 * @author Gnast version 0.1
 */
public abstract class NameImpl
  extends TermAImpl   implements Name
{

  /**
   * Compares the specified object with this NameImpl
   * for equality.  Returns true if and only if the specified object is
   * also a(n) NameImpl and all the getter methods except getAnns
   * return equal objects.
   */
  public boolean equals(Object obj)
  {
    if (obj != null) {
      if (this.getClass().equals(obj.getClass()) && super.equals(obj)) {
        NameImpl object = (NameImpl) obj;
        if (word_ != null) {
          if (!word_.equals(object.word_)) {
            return false;
          }
        }
        else {
          if (object.word_ != null) {
            return false;
          }
        }
        if (stroke_ != null) {
          if (!stroke_.equals(object.stroke_)) {
            return false;
          }
        }
        else {
          if (object.stroke_ != null) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }

  /**
   * Returns the hash code value for this NameImpl.
   */
  public int hashCode()
  {
    final int constant = 31;

    int hashCode = super.hashCode();
    hashCode += "NameImpl".hashCode();
    if (word_ != null) {
      hashCode += constant * word_.hashCode();
    }
    if (stroke_ != null) {
      hashCode += constant * stroke_.hashCode();
    }
    return hashCode;
  }

  /**
   * Accepts a visitor.
   */
  public Object accept(net.sourceforge.czt.util.Visitor v)
  {
    if (v instanceof NameVisitor) {
      NameVisitor visitor = (NameVisitor) v;
      return visitor.visitName(this);
    }
    return super.accept(v);
  }


  private String word_;

  public String getWord()
  {
    return word_;
  }

  public void setWord(String word)
  {
    word_ = word;
  }


  private net.sourceforge.czt.base.ast.ListTerm stroke_ =
    new net.sourceforge.czt.base.impl.ListTermImpl(Stroke.class);

  public net.sourceforge.czt.base.ast.ListTerm getStroke()
  {
    return stroke_;
  }

  public String toString()
  {
    StringBuffer result = new StringBuffer();
    result.append(getWord());
    for (Iterator iter = getStroke().iterator(); iter.hasNext(); ) {
      Stroke stroke = (Stroke) iter.next();
      result.append(stroke.toString());
    }
    return result.toString();
  }

  public net.sourceforge.czt.z.util.OperatorName getOperatorName()
  {
    try {
      return new net.sourceforge.czt.z.util.OperatorName(this);
    }
    catch(net.sourceforge.czt.z.util.OperatorName.OperatorNameException e) {
      return null;
    }
  }
}
