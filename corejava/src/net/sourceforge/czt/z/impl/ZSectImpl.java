
/*
THIS FILE WAS GENERATED BY GNAST.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

************************************************************

Copyright 2003 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.z.impl;

import java.util.*;
import java.util.logging.*;

import net.sourceforge.czt.base.impl.*;
import net.sourceforge.czt.util.TypesafeList;
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.visitor.*;

import net.sourceforge.czt.z.visitor.ZSectVisitor;

/**
 * An implementation of the interface
 * {@link ZSect}.
 *
 * @author Gnast version 0.1
 */
public class ZSectImpl
  extends SectImpl   implements ZSect
{
  /**
   * The default constructor.
   *
   * Do not use it explicitly, unless you are extending this class.
   * If you want to create an instance of this class, please use the
   * {@link net.sourceforge.czt.z.ast.ZFactory object factory}.
   */
  protected ZSectImpl()
  {
  }

  /**
   * Compares the specified object with this ZSectImpl
   * for equality.  Returns true if and only if the specified object is
   * also a(n) ZSectImpl and all the getter methods except getAnns
   * return equal objects.
   */
  public boolean equals(Object obj)
  {
    if (obj != null) {
      if (this.getClass().equals(obj.getClass()) && super.equals(obj)) {
        ZSectImpl object = (ZSectImpl) obj;
        if (name_ != null) {
          if (!name_.equals(object.name_)) {
            return false;
          }
        }
        else {
          if (object.name_ != null) {
            return false;
          }
        }
        if (parent_ != null) {
          if (!parent_.equals(object.parent_)) {
            return false;
          }
        }
        else {
          if (object.parent_ != null) {
            return false;
          }
        }
        if (para_ != null) {
          if (!para_.equals(object.para_)) {
            return false;
          }
        }
        else {
          if (object.para_ != null) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }

  /**
   * Returns the hash code value for this ZSectImpl.
   * The hash code of a ZSectImpl is defined to be
   * the result of the following calculation:
   *
   * @czt.todo Write the calculation procedure for method hashCode().
   */
  public int hashCode()
  {
    final int constant = 31;

    int hashCode = super.hashCode();
    hashCode += "ZSectImpl".hashCode();
    if (name_ != null) {
      hashCode += constant * name_.hashCode();
    }
    if (parent_ != null) {
      hashCode += constant * parent_.hashCode();
    }
    if (para_ != null) {
      hashCode += constant * para_.hashCode();
    }
    return hashCode;
  }

  /**
   * Accepts a visitor.
   */
  public Object accept(net.sourceforge.czt.util.Visitor v)
  {
    if (v instanceof ZSectVisitor) {
      ZSectVisitor visitor = (ZSectVisitor) v;
      return visitor.visitZSect(this);
    }
    return super.accept(v);
  }

  /**
   * Returns a new object of this class.
   */
  public net.sourceforge.czt.base.ast.Term create(Object[] args)
  {
    ZSect zedObject = null;
    try {
      String name = (String) args[0];
      java.util.List parent = (java.util.List) args[1];
      java.util.List para = (java.util.List) args[2];
      zedObject = new ZSectImpl();
      zedObject.setName(name);
      if (parent != null) {
        zedObject.getParent().addAll(parent);
      }
      if (para != null) {
        zedObject.getPara().addAll(para);
      }
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException();
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException();
    }
    return zedObject;
  }

  public Object[] getChildren()
  {
    Object[] erg = { getName(), getParent(), getPara() };
    return erg;
  }

  private String name_;

  public String getName()
  {
    return name_;
  }

  public void setName(String name)
  {
    name_ = name;
  }


  private java.util.List parent_ =
    new TypesafeList(Parent.class);

  public java.util.List getParent()
  {
    return parent_;
  }


  private java.util.List para_ =
    new TypesafeList(Para.class);

  public java.util.List getPara()
  {
    return para_;
  }
}
