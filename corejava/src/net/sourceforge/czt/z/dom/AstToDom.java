
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToDom.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.dom;

import java.util.logging.Logger;
import java.util.*;
import org.w3c.dom.*;

import net.sourceforge.czt.base.ast.ListTerm;
import net.sourceforge.czt.base.ast.Term;

import net.sourceforge.czt.util.CztException;

import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.visitor.*;

/**
 * Transformer from AST classes to a DOM tree.
 *
 * @author Gnast version 0.1
 */
public class AstToDom
  implements net.sourceforge.czt.base.dom.DomVisitor,
             net.sourceforge.czt.z.visitor.ZVisitor,
    net.sourceforge.czt.base.visitor.TermVisitor
{
  private Logger getLogger()
  {
    return Logger.getLogger("net.sourceforge.czt.z.dom.AstToDom");
  }

  private Document document_;

  public Document getDocument()
  {
    return document_;
  }

  public void setDocument(Document document)
  {
    document_ = document;
  }

  public Object visitTerm(Term zedObject)
  {
    throw(new UnsupportedOperationException("Unexpected element "
                                            + zedObject.getClass().getName()));
  }



  public Object visitFreetype(Freetype zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitFreetype", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "Freetype");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getDeclName() != null) {
        Term term = (Term) zedObject.getDeclName();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      for (Iterator iter = zedObject.getBranch().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a Freetype to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitFreetype", elem);
    return elem;
  }

  public Object visitExists1Expr(Exists1Expr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitExists1Expr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "Exists1Expr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getSchText() != null) {
        Term term = (Term) zedObject.getSchText();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a Exists1Expr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitExists1Expr", elem);
    return elem;
  }

  public Object visitParenAnn(ParenAnn zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitParenAnn", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ParenAnn");
    try {
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ParenAnn to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitParenAnn", elem);
    return elem;
  }

  public Object visitNameNamePair(NameNamePair zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitNameNamePair", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "NameNamePair");
    try {
      if (zedObject.getOldName() != null) {
        Term term = (Term) zedObject.getOldName();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getNewName() != null) {
        Term term = (Term) zedObject.getNewName();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a NameNamePair to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitNameNamePair", elem);
    return elem;
  }

  public Object visitLatexMarkupPara(LatexMarkupPara zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitLatexMarkupPara", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "LatexMarkupPara");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getDirective().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a LatexMarkupPara to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitLatexMarkupPara", elem);
    return elem;
  }

  public Object visitApplExpr(ApplExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitApplExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ApplExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftExpr() != null) {
        Term term = (Term) zedObject.getLeftExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightExpr() != null) {
        Term term = (Term) zedObject.getRightExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getMixfix() != null) {
        elem.setAttributeNS(ns, "Mixfix", zedObject.getMixfix().toString());
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ApplExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitApplExpr", elem);
    return elem;
  }

  public Object visitPred2(Pred2 zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitLetExpr(LetExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitLetExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "LetExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getSchText() != null) {
        Term term = (Term) zedObject.getSchText();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a LetExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitLetExpr", elem);
    return elem;
  }

  public Object visitSignature(Signature zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitSignature", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "Signature");
    try {
      for (Iterator iter = zedObject.getNameTypePair().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a Signature to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitSignature", elem);
    return elem;
  }

  public Object visitConstDecl(ConstDecl zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitConstDecl", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ConstDecl");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getDeclName() != null) {
        Term term = (Term) zedObject.getDeclName();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ConstDecl to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitConstDecl", elem);
    return elem;
  }

  public Object visitNextStroke(NextStroke zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitNextStroke", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "NextStroke");
    try {
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a NextStroke to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitNextStroke", elem);
    return elem;
  }

  public Object visitInStroke(InStroke zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitInStroke", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "InStroke");
    try {
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a InStroke to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitInStroke", elem);
    return elem;
  }

  public Object visitRefName(RefName zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitRefName", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "RefName");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getWord() != null) {
        Element child = getDocument().createElementNS(ns, "Word");
        String string = zedObject.getWord().toString();
        child.appendChild(getDocument().createTextNode(string));
        elem.appendChild(child);
      }
      for (Iterator iter = zedObject.getStroke().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      if (zedObject.getDecl() != null) {
        elem.setAttributeNS(ns, "Decl", zedObject.getDecl().getId());
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a RefName to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitRefName", elem);
    return elem;
  }

  public Object visitMemPred(MemPred zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitMemPred", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "MemPred");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftExpr() != null) {
        Term term = (Term) zedObject.getLeftExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightExpr() != null) {
        Term term = (Term) zedObject.getRightExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getMixfix() != null) {
        elem.setAttributeNS(ns, "Mixfix", zedObject.getMixfix().toString());
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a MemPred to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitMemPred", elem);
    return elem;
  }

  public Object visitProdType(ProdType zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitProdType", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ProdType");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getType().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ProdType to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitProdType", elem);
    return elem;
  }

  public Object visitDecl(Decl zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitImpliesExpr(ImpliesExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitImpliesExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ImpliesExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftExpr() != null) {
        Term term = (Term) zedObject.getLeftExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightExpr() != null) {
        Term term = (Term) zedObject.getRightExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ImpliesExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitImpliesExpr", elem);
    return elem;
  }

  public Object visitMuExpr(MuExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitMuExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "MuExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getSchText() != null) {
        Term term = (Term) zedObject.getSchText();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a MuExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitMuExpr", elem);
    return elem;
  }

  public Object visitSchExpr2(SchExpr2 zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitExpr2(Expr2 zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitOper(Oper zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitOrPred(OrPred zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitOrPred", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "OrPred");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftPred() != null) {
        Term term = (Term) zedObject.getLeftPred();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightPred() != null) {
        Term term = (Term) zedObject.getRightPred();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a OrPred to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitOrPred", elem);
    return elem;
  }

  public Object visitExistsExpr(ExistsExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitExistsExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ExistsExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getSchText() != null) {
        Term term = (Term) zedObject.getSchText();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ExistsExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitExistsExpr", elem);
    return elem;
  }

  public Object visitExpr(Expr zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitVarDecl(VarDecl zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitVarDecl", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "VarDecl");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getDeclName().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a VarDecl to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitVarDecl", elem);
    return elem;
  }

  public Object visitQntPred(QntPred zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitType(Type zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitNarrSect(NarrSect zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitNarrSect", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "NarrSect");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      Node content = getDocument().createElementNS(ns, "Content");
      for (Iterator iter = zedObject.getContent().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          content.appendChild(node);
        }
        else {
          content.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      elem.appendChild(content);
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a NarrSect to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitNarrSect", elem);
    return elem;
  }

  public Object visitFreePara(FreePara zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitFreePara", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "FreePara");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getFreetype().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a FreePara to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitFreePara", elem);
    return elem;
  }

  public Object visitCompExpr(CompExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitCompExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "CompExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftExpr() != null) {
        Term term = (Term) zedObject.getLeftExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightExpr() != null) {
        Term term = (Term) zedObject.getRightExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a CompExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitCompExpr", elem);
    return elem;
  }

  public Object visitBindExpr(BindExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitBindExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "BindExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getNameExprPair().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a BindExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitBindExpr", elem);
    return elem;
  }

  public Object visitFact(Fact zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitCondExpr(CondExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitCondExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "CondExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getPred() != null) {
        Term term = (Term) zedObject.getPred();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getLeftExpr() != null) {
        Term term = (Term) zedObject.getLeftExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightExpr() != null) {
        Term term = (Term) zedObject.getRightExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a CondExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitCondExpr", elem);
    return elem;
  }

  public Object visitForallExpr(ForallExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitForallExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ForallExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getSchText() != null) {
        Term term = (Term) zedObject.getSchText();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ForallExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitForallExpr", elem);
    return elem;
  }

  public Object visitNarrPara(NarrPara zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitNarrPara", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "NarrPara");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      Node content = getDocument().createElementNS(ns, "Content");
      for (Iterator iter = zedObject.getContent().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          content.appendChild(node);
        }
        else {
          content.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      elem.appendChild(content);
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a NarrPara to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitNarrPara", elem);
    return elem;
  }

  public Object visitTruePred(TruePred zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitTruePred", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "TruePred");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a TruePred to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitTruePred", elem);
    return elem;
  }

  public Object visitDirective(Directive zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitDirective", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "Directive");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getCommand() != null) {
        Element child = getDocument().createElementNS(ns, "Command");
        String string = zedObject.getCommand().toString();
        child.appendChild(getDocument().createTextNode(string));
        elem.appendChild(child);
      }
      if (zedObject.getUnicode() != null) {
        Element child = getDocument().createElementNS(ns, "Unicode");
        String string = zedObject.getUnicode().toString();
        child.appendChild(getDocument().createTextNode(string));
        elem.appendChild(child);
      }
      if (zedObject.getType() != null) {
        elem.setAttributeNS(ns, "Type", zedObject.getType().toString());
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a Directive to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitDirective", elem);
    return elem;
  }

  public Object visitOperator(Operator zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitOperator", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "Operator");
    try {
      if (zedObject.getWord() != null) {
        Element child = getDocument().createElementNS(ns, "Word");
        String string = zedObject.getWord().toString();
        child.appendChild(getDocument().createTextNode(string));
        elem.appendChild(child);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a Operator to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitOperator", elem);
    return elem;
  }

  public Object visitName(Name zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitNumExpr(NumExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitNumExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "NumExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getValue() != null) {
        elem.setAttributeNS(ns, "Value", zedObject.getValue().toString());
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a NumExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitNumExpr", elem);
    return elem;
  }

  public Object visitNameExprPair(NameExprPair zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitNameExprPair", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "NameExprPair");
    try {
      if (zedObject.getName() != null) {
        Term term = (Term) zedObject.getName();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a NameExprPair to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitNameExprPair", elem);
    return elem;
  }

  public Object visitTupleSelExpr(TupleSelExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitTupleSelExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "TupleSelExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getSelect() != null) {
        elem.setAttributeNS(ns, "Select", zedObject.getSelect().toString());
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a TupleSelExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitTupleSelExpr", elem);
    return elem;
  }

  public Object visitLambdaExpr(LambdaExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitLambdaExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "LambdaExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getSchText() != null) {
        Term term = (Term) zedObject.getSchText();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a LambdaExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitLambdaExpr", elem);
    return elem;
  }

  public Object visitIffExpr(IffExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitIffExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "IffExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftExpr() != null) {
        Term term = (Term) zedObject.getLeftExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightExpr() != null) {
        Term term = (Term) zedObject.getRightExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a IffExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitIffExpr", elem);
    return elem;
  }

  public Object visitIffPred(IffPred zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitIffPred", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "IffPred");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftPred() != null) {
        Term term = (Term) zedObject.getLeftPred();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightPred() != null) {
        Term term = (Term) zedObject.getRightPred();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a IffPred to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitIffPred", elem);
    return elem;
  }

  public Object visitFalsePred(FalsePred zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitFalsePred", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "FalsePred");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a FalsePred to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitFalsePred", elem);
    return elem;
  }

  public Object visitTypeEnvAnn(TypeEnvAnn zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitTypeEnvAnn", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "TypeEnvAnn");
    try {
      for (Iterator iter = zedObject.getNameTypePair().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a TypeEnvAnn to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitTypeEnvAnn", elem);
    return elem;
  }

  public Object visitQntExpr(QntExpr zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitUnparsedZSect(UnparsedZSect zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitUnparsedZSect", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "UnparsedZSect");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      Node content = getDocument().createElementNS(ns, "Content");
      for (Iterator iter = zedObject.getContent().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          content.appendChild(node);
        }
        else {
          content.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      elem.appendChild(content);
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a UnparsedZSect to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitUnparsedZSect", elem);
    return elem;
  }

  public Object visitUnparsedPara(UnparsedPara zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitUnparsedPara", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "UnparsedPara");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      Node content = getDocument().createElementNS(ns, "Content");
      for (Iterator iter = zedObject.getContent().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          content.appendChild(node);
        }
        else {
          content.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      elem.appendChild(content);
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a UnparsedPara to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitUnparsedPara", elem);
    return elem;
  }

  public Object visitImpliesPred(ImpliesPred zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitImpliesPred", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ImpliesPred");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftPred() != null) {
        Term term = (Term) zedObject.getLeftPred();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightPred() != null) {
        Term term = (Term) zedObject.getRightPred();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ImpliesPred to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitImpliesPred", elem);
    return elem;
  }

  public Object visitNameTypePair(NameTypePair zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitNameTypePair", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "NameTypePair");
    try {
      if (zedObject.getName() != null) {
        Term term = (Term) zedObject.getName();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getType() != null) {
        Term term = (Term) zedObject.getType();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a NameTypePair to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitNameTypePair", elem);
    return elem;
  }

  public Object visitSect(Sect zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitSchText(SchText zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitSchText", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "SchText");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getDecl().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      if (zedObject.getPred() != null) {
        Term term = (Term) zedObject.getPred();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a SchText to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitSchText", elem);
    return elem;
  }

  public Object visitOperand(Operand zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitOperand", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "Operand");
    try {
      if (zedObject.getList() != null) {
        elem.setAttributeNS(ns, "List", zedObject.getList().toString());
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a Operand to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitOperand", elem);
    return elem;
  }

  public Object visitQnt1Expr(Qnt1Expr zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitProjExpr(ProjExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitProjExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ProjExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftExpr() != null) {
        Term term = (Term) zedObject.getLeftExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightExpr() != null) {
        Term term = (Term) zedObject.getRightExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ProjExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitProjExpr", elem);
    return elem;
  }

  public Object visitBranch(Branch zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitBranch", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "Branch");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getDeclName() != null) {
        Term term = (Term) zedObject.getDeclName();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a Branch to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitBranch", elem);
    return elem;
  }

  public Object visitTypeAnn(TypeAnn zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitTypeAnn", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "TypeAnn");
    try {
      if (zedObject.getType() != null) {
        Term term = (Term) zedObject.getType();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a TypeAnn to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitTypeAnn", elem);
    return elem;
  }

  public Object visitGenType(GenType zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitGenType", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "GenType");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getName() != null) {
        Term term = (Term) zedObject.getName();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a GenType to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitGenType", elem);
    return elem;
  }

  public Object visitPara(Para zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitOptempPara(OptempPara zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitOptempPara", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "OptempPara");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getOper().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      if (zedObject.getCat() != null) {
        elem.setAttributeNS(ns, "Cat", zedObject.getCat().toString());
      }
      if (zedObject.getAssoc() != null) {
        elem.setAttributeNS(ns, "Assoc", zedObject.getAssoc().toString());
      }
      if (zedObject.getPrec() != null) {
        elem.setAttributeNS(ns, "Prec", zedObject.getPrec().toString());
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a OptempPara to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitOptempPara", elem);
    return elem;
  }

  public Object visitExistsPred(ExistsPred zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitExistsPred", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ExistsPred");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getSchText() != null) {
        Term term = (Term) zedObject.getSchText();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getPred() != null) {
        Term term = (Term) zedObject.getPred();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ExistsPred to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitExistsPred", elem);
    return elem;
  }

  public Object visitNameSectTypeTriple(NameSectTypeTriple zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitNameSectTypeTriple", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "NameSectTypeTriple");
    try {
      if (zedObject.getName() != null) {
        Term term = (Term) zedObject.getName();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getSect() != null) {
        Element child = getDocument().createElementNS(ns, "Sect");
        String string = zedObject.getSect().toString();
        child.appendChild(getDocument().createTextNode(string));
        elem.appendChild(child);
      }
      if (zedObject.getType() != null) {
        Term term = (Term) zedObject.getType();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a NameSectTypeTriple to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitNameSectTypeTriple", elem);
    return elem;
  }

  public Object visitExpr1(Expr1 zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitNegPred(NegPred zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitNegPred", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "NegPred");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getPred() != null) {
        Term term = (Term) zedObject.getPred();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a NegPred to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitNegPred", elem);
    return elem;
  }

  public Object visitPreExpr(PreExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitPreExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "PreExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a PreExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitPreExpr", elem);
    return elem;
  }

  public Object visitSectTypeEnvAnn(SectTypeEnvAnn zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitSectTypeEnvAnn", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "SectTypeEnvAnn");
    try {
      for (Iterator iter = zedObject.getNameSectTypeTriple().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a SectTypeEnvAnn to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitSectTypeEnvAnn", elem);
    return elem;
  }

  public Object visitExprPred(ExprPred zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitExprPred", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ExprPred");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ExprPred to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitExprPred", elem);
    return elem;
  }

  public Object visitGivenType(GivenType zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitGivenType", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "GivenType");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getName() != null) {
        Term term = (Term) zedObject.getName();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a GivenType to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitGivenType", elem);
    return elem;
  }

  public Object visitInclDecl(InclDecl zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitInclDecl", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "InclDecl");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a InclDecl to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitInclDecl", elem);
    return elem;
  }

  public Object visitPred(Pred zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitSchemaType(SchemaType zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitSchemaType", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "SchemaType");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getSignature() != null) {
        Term term = (Term) zedObject.getSignature();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a SchemaType to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitSchemaType", elem);
    return elem;
  }

  public Object visitBindSelExpr(BindSelExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitBindSelExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "BindSelExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getName() != null) {
        Term term = (Term) zedObject.getName();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a BindSelExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitBindSelExpr", elem);
    return elem;
  }

  public Object visitDeclName(DeclName zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitDeclName", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "DeclName");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getWord() != null) {
        Element child = getDocument().createElementNS(ns, "Word");
        String string = zedObject.getWord().toString();
        child.appendChild(getDocument().createTextNode(string));
        elem.appendChild(child);
      }
      for (Iterator iter = zedObject.getStroke().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      if (zedObject.getId() != null) {
        elem.setAttributeNS(ns, "Id", zedObject.getId().toString());
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a DeclName to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitDeclName", elem);
    return elem;
  }

  public Object visitForallPred(ForallPred zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitForallPred", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ForallPred");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getSchText() != null) {
        Term term = (Term) zedObject.getSchText();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getPred() != null) {
        Term term = (Term) zedObject.getPred();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ForallPred to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitForallPred", elem);
    return elem;
  }

  public Object visitOrExpr(OrExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitOrExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "OrExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftExpr() != null) {
        Term term = (Term) zedObject.getLeftExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightExpr() != null) {
        Term term = (Term) zedObject.getRightExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a OrExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitOrExpr", elem);
    return elem;
  }

  public Object visitSpec(Spec zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitSpec", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "Spec");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getSect().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      if (zedObject.getVersion() != null) {
        elem.setAttributeNS(ns, "Version", zedObject.getVersion().toString());
      }
      if (zedObject.getAuthor() != null) {
        elem.setAttributeNS(ns, "Author", zedObject.getAuthor().toString());
      }
      if (zedObject.getModified() != null) {
        Term term = (Term) zedObject.getModified();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getSource() != null) {
        elem.setAttributeNS(ns, "Source", zedObject.getSource().toString());
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a Spec to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitSpec", elem);
    return elem;
  }

  public Object visitLocAnn(LocAnn zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitLocAnn", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "LocAnn");
    try {
      if (zedObject.getLoc() != null) {
        elem.setAttributeNS(ns, "Loc", zedObject.getLoc().toString());
      }
      if (zedObject.getLine() != null) {
        elem.setAttributeNS(ns, "Line", zedObject.getLine().toString());
      }
      if (zedObject.getCol() != null) {
        elem.setAttributeNS(ns, "Col", zedObject.getCol().toString());
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a LocAnn to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitLocAnn", elem);
    return elem;
  }

  public Object visitPowerExpr(PowerExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitPowerExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "PowerExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a PowerExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitPowerExpr", elem);
    return elem;
  }

  public Object visitHideExpr(HideExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitHideExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "HideExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      for (Iterator iter = zedObject.getName().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a HideExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitHideExpr", elem);
    return elem;
  }

  public Object visitGivenPara(GivenPara zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitGivenPara", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "GivenPara");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getDeclName().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a GivenPara to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitGivenPara", elem);
    return elem;
  }

  public Object visitPowerType(PowerType zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitPowerType", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "PowerType");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getType() != null) {
        Term term = (Term) zedObject.getType();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a PowerType to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitPowerType", elem);
    return elem;
  }

  public Object visitAndExpr(AndExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitAndExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "AndExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftExpr() != null) {
        Term term = (Term) zedObject.getLeftExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightExpr() != null) {
        Term term = (Term) zedObject.getRightExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a AndExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitAndExpr", elem);
    return elem;
  }

  public Object visitRenameExpr(RenameExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitRenameExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "RenameExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      for (Iterator iter = zedObject.getNameNamePair().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a RenameExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitRenameExpr", elem);
    return elem;
  }

  public Object visitAndPred(AndPred zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitAndPred", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "AndPred");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftPred() != null) {
        Term term = (Term) zedObject.getLeftPred();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightPred() != null) {
        Term term = (Term) zedObject.getRightPred();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getOp() != null) {
        elem.setAttributeNS(ns, "Op", zedObject.getOp().toString());
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a AndPred to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitAndPred", elem);
    return elem;
  }

  public Object visitConjPara(ConjPara zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitConjPara", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ConjPara");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getDeclName().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      if (zedObject.getPred() != null) {
        Term term = (Term) zedObject.getPred();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ConjPara to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitConjPara", elem);
    return elem;
  }

  public Object visitNumStroke(NumStroke zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitNumStroke", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "NumStroke");
    try {
      if (zedObject.getNumber() != null) {
        elem.setAttributeNS(ns, "Number", zedObject.getNumber().toString());
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a NumStroke to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitNumStroke", elem);
    return elem;
  }

  public Object visitZSect(ZSect zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitZSect", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ZSect");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getName() != null) {
        Element child = getDocument().createElementNS(ns, "Name");
        String string = zedObject.getName().toString();
        child.appendChild(getDocument().createTextNode(string));
        elem.appendChild(child);
      }
      for (Iterator iter = zedObject.getParent().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      for (Iterator iter = zedObject.getPara().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ZSect to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitZSect", elem);
    return elem;
  }

  public Object visitStroke(Stroke zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitExpr2N(Expr2N zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitThetaExpr(ThetaExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitThetaExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ThetaExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      for (Iterator iter = zedObject.getStroke().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ThetaExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitThetaExpr", elem);
    return elem;
  }

  public Object visitSetExpr(SetExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitSetExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "SetExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getExpr().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a SetExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitSetExpr", elem);
    return elem;
  }

  public Object visitExpr0N(Expr0N zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitSetCompExpr(SetCompExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitSetCompExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "SetCompExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getSchText() != null) {
        Term term = (Term) zedObject.getSchText();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a SetCompExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitSetCompExpr", elem);
    return elem;
  }

  public Object visitPipeExpr(PipeExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitPipeExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "PipeExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getLeftExpr() != null) {
        Term term = (Term) zedObject.getLeftExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getRightExpr() != null) {
        Term term = (Term) zedObject.getRightExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a PipeExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitPipeExpr", elem);
    return elem;
  }

  public Object visitRefExpr(RefExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitRefExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "RefExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getRefName() != null) {
        Term term = (Term) zedObject.getRefName();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      for (Iterator iter = zedObject.getExpr().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      if (zedObject.getMixfix() != null) {
        elem.setAttributeNS(ns, "Mixfix", zedObject.getMixfix().toString());
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a RefExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitRefExpr", elem);
    return elem;
  }

  public Object visitNegExpr(NegExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitNegExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "NegExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a NegExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitNegExpr", elem);
    return elem;
  }

  public Object visitProdExpr(ProdExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitProdExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "ProdExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getExpr().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a ProdExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitProdExpr", elem);
    return elem;
  }

  public Object visitDecorExpr(DecorExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitDecorExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "DecorExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getExpr() != null) {
        Term term = (Term) zedObject.getExpr();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getStroke() != null) {
        Term term = (Term) zedObject.getStroke();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a DecorExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitDecorExpr", elem);
    return elem;
  }

  public Object visitOutStroke(OutStroke zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitOutStroke", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "OutStroke");
    try {
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a OutStroke to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitOutStroke", elem);
    return elem;
  }

  public Object visitParent(Parent zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitParent", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "Parent");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getWord() != null) {
        Element child = getDocument().createElementNS(ns, "Word");
        String string = zedObject.getWord().toString();
        child.appendChild(getDocument().createTextNode(string));
        elem.appendChild(child);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a Parent to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitParent", elem);
    return elem;
  }

  public Object visitExists1Pred(Exists1Pred zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitExists1Pred", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "Exists1Pred");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getSchText() != null) {
        Term term = (Term) zedObject.getSchText();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getPred() != null) {
        Term term = (Term) zedObject.getPred();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a Exists1Pred to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitExists1Pred", elem);
    return elem;
  }

  public Object visitAxPara(AxPara zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitAxPara", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "AxPara");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getDeclName().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
      if (zedObject.getSchText() != null) {
        Term term = (Term) zedObject.getSchText();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
      if (zedObject.getBox() != null) {
        elem.setAttributeNS(ns, "Box", zedObject.getBox().toString());
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a AxPara to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitAxPara", elem);
    return elem;
  }

  public Object visitSchExpr(SchExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitSchExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "SchExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      if (zedObject.getSchText() != null) {
        Term term = (Term) zedObject.getSchText();
        Node node = (Node) term.accept(this);
        elem.appendChild(node);
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a SchExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitSchExpr", elem);
    return elem;
  }

  public Object visitTupleExpr(TupleExpr zedObject)
  {
    getLogger().entering("dom.AstToDom", "visitTupleExpr", zedObject);
    final String ns = "http://czt.sourceforge.net/zml";
    Element elem = getDocument().createElementNS(ns, "TupleExpr");
    try {
      if (zedObject.getAnns().size() > 0) {
        Node anns = getDocument().createElementNS(ns, "Anns");
        for (Iterator iter = zedObject.getAnns().iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            Node node = (Node) ((Term) o).accept(this);
            anns.appendChild(node);
          }
          else {
            anns.appendChild(getDocument().createTextNode(o.toString()));
          }
        }
        elem.appendChild(anns);
      }
      for (Iterator iter = zedObject.getExpr().iterator(); iter.hasNext();) {
        Object o = iter.next();
        if (o instanceof Term) {
          Node node = (Node) ((Term) o).accept(this);
          elem.appendChild(node);
        }
        else {
          elem.appendChild(getDocument().createTextNode(o.toString()));
        }
      }
    }
    catch (Exception exception) {
      String message = "class AstToDom: "
                       + "Cannot transform a TupleExpr to the corresponding "
                       + "DOM object";
      throw new CztException(message, exception);
    }

    getLogger().exiting("dom.AstToDom", "visitTupleExpr", elem);
    return elem;
  }
}
