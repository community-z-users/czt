
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE JaxbToAst.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.zpatt.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.util.ReflectiveVisitor;
import net.sourceforge.czt.zpatt.ast.*;
import net.sourceforge.czt.z.ast.*;

/**
 * The unmarshaller responsible for deserializing XML data.
 *
 * @author Gnast version 0.1
 */
public class JaxbToAst extends net.sourceforge.czt.z.jaxb.JaxbToAst
{
  protected ZpattFactory mZpattFactory_;

  public JaxbToAst()
  {
    mZpattFactory_ =
      new net.sourceforge.czt.zpatt.impl.ZpattFactoryImpl();
  }

  public JaxbToAst(net.sourceforge.czt.z.ast.ZFactory vZFactory, ZpattFactory vZpattFactory)
  {
    super(vZFactory);
    mZpattFactory_ = vZpattFactory;
  }

  private static Logger getLogger()
  {
    return Logger.getLogger("net.sourceforge.czt.zpatt.jaxb.JaxbToAst");
  }

  public Object visitObject(Object object)
  {
    getLogger().fine("Visit " + object.getClass().toString());
    if (object instanceof String
        || object instanceof Boolean
        || object instanceof List
        || object instanceof Integer
        || object instanceof java.math.BigInteger) {
      return object;
    }
    throw new UnsupportedOperationException("Unexpected element "
                                            + object.getClass().getName());
  }

  public Object visitJokerName(net.sourceforge.czt.zpatt.jaxb.gen.JokerName jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerName", jaxbObject);
    String word =
      (String) dispatch(jaxbObject.getWord());
    List stroke = new Vector();
    for (Iterator iter = jaxbObject.getStroke().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      stroke.add(o);
    }
    String id =
      (String) dispatch(jaxbObject.getId());
    String name =
      (String) dispatch(jaxbObject.getName());
    JokerName erg = mZpattFactory_.createJokerName(word, stroke, id, name);
    getLogger().exiting("JaxbToAst", "visitJokerName", erg);
    return erg;
  }

  public Object visitPredSequent(net.sourceforge.czt.zpatt.jaxb.gen.PredSequent jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPredSequent", jaxbObject);
    SequentContext sequentContext =
      (SequentContext) dispatch(jaxbObject.getSequentContext());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    Deduction deduction =
      (Deduction) dispatch(jaxbObject.getDeduction());
    PredSequent erg = mZpattFactory_.createPredSequent(sequentContext, pred, deduction);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitPredSequent", erg);
    return erg;
  }

  public Object visitJokerExpr(net.sourceforge.czt.zpatt.jaxb.gen.JokerExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerExpr", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    JokerExpr erg = mZpattFactory_.createJokerExpr(name);
    getLogger().exiting("JaxbToAst", "visitJokerExpr", erg);
    return erg;
  }

  public Object visitJokerExprListBinding(net.sourceforge.czt.zpatt.jaxb.gen.JokerExprListBinding jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerExprListBinding", jaxbObject);
    JokerExprList jokerExprList =
      (JokerExprList) dispatch(jaxbObject.getJokerExprList());
    List expr = new Vector();
    for (Iterator iter = jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    JokerExprListBinding erg = mZpattFactory_.createJokerExprListBinding(jokerExprList, expr);
    getLogger().exiting("JaxbToAst", "visitJokerExprListBinding", erg);
    return erg;
  }

  public Object visitTypeSequent(net.sourceforge.czt.zpatt.jaxb.gen.TypeSequent jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTypeSequent", jaxbObject);
    SequentContext sequentContext =
      (SequentContext) dispatch(jaxbObject.getSequentContext());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.Type type =
      (net.sourceforge.czt.z.ast.Type) dispatch(jaxbObject.getType());
    TypeSequent erg = mZpattFactory_.createTypeSequent(sequentContext, expr, type);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitTypeSequent", erg);
    return erg;
  }

  public Object visitJokerExprBinding(net.sourceforge.czt.zpatt.jaxb.gen.JokerExprBinding jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerExprBinding", jaxbObject);
    JokerExpr jokerExpr =
      (JokerExpr) dispatch(jaxbObject.getJokerExpr());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    JokerExprBinding erg = mZpattFactory_.createJokerExprBinding(jokerExpr, expr);
    getLogger().exiting("JaxbToAst", "visitJokerExprBinding", erg);
    return erg;
  }

  public Object visitJokerExprList(net.sourceforge.czt.zpatt.jaxb.gen.JokerExprList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerExprList", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    JokerExprList erg = mZpattFactory_.createJokerExprList(name);
    getLogger().exiting("JaxbToAst", "visitJokerExprList", erg);
    return erg;
  }

  public Object visitSequentContext(net.sourceforge.czt.zpatt.jaxb.gen.SequentContext jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSequentContext", jaxbObject);
    SequentContext erg = mZpattFactory_.createSequentContext();
    getLogger().exiting("JaxbToAst", "visitSequentContext", erg);
    return erg;
  }

  public Object visitJokerNameBinding(net.sourceforge.czt.zpatt.jaxb.gen.JokerNameBinding jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerNameBinding", jaxbObject);
    JokerName jokerName =
      (JokerName) dispatch(jaxbObject.getJokerName());
    net.sourceforge.czt.z.ast.DeclName declName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getDeclName());
    JokerNameBinding erg = mZpattFactory_.createJokerNameBinding(jokerName, declName);
    getLogger().exiting("JaxbToAst", "visitJokerNameBinding", erg);
    return erg;
  }

  public Object visitDeduction(net.sourceforge.czt.zpatt.jaxb.gen.Deduction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDeduction", jaxbObject);
    List binding = new Vector();
    for (Iterator iter = jaxbObject.getBinding().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      binding.add(o);
    }
    List sequent = new Vector();
    for (Iterator iter = jaxbObject.getSequent().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      sequent.add(o);
    }
    String name =
      (String) dispatch(jaxbObject.getName());
    Deduction erg = mZpattFactory_.createDeduction(binding, sequent, name);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitDeduction", erg);
    return erg;
  }

  public Object visitRule(net.sourceforge.czt.zpatt.jaxb.gen.Rule jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRule", jaxbObject);
    List sequent = new Vector();
    for (Iterator iter = jaxbObject.getSequent().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      sequent.add(o);
    }
    String name =
      (String) dispatch(jaxbObject.getName());
    Rule erg = mZpattFactory_.createRule(sequent, name);
    getLogger().exiting("JaxbToAst", "visitRule", erg);
    return erg;
  }

  public Object visitJokerDeclList(net.sourceforge.czt.zpatt.jaxb.gen.JokerDeclList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerDeclList", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    JokerDeclList erg = mZpattFactory_.createJokerDeclList(name);
    getLogger().exiting("JaxbToAst", "visitJokerDeclList", erg);
    return erg;
  }

  public Object visitBinding(net.sourceforge.czt.zpatt.jaxb.gen.Binding jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitBinding", jaxbObject);
    Binding erg = mZpattFactory_.createBinding();
    getLogger().exiting("JaxbToAst", "visitBinding", erg);
    return erg;
  }

  public Object visitJokerDeclListBinding(net.sourceforge.czt.zpatt.jaxb.gen.JokerDeclListBinding jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerDeclListBinding", jaxbObject);
    JokerDeclList jokerDeclList =
      (JokerDeclList) dispatch(jaxbObject.getJokerDeclList());
    List decl = new Vector();
    for (Iterator iter = jaxbObject.getDecl().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      decl.add(o);
    }
    JokerDeclListBinding erg = mZpattFactory_.createJokerDeclListBinding(jokerDeclList, decl);
    getLogger().exiting("JaxbToAst", "visitJokerDeclListBinding", erg);
    return erg;
  }

  public Object visitDefnSequent(net.sourceforge.czt.zpatt.jaxb.gen.DefnSequent jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDefnSequent", jaxbObject);
    SequentContext sequentContext =
      (SequentContext) dispatch(jaxbObject.getSequentContext());
    net.sourceforge.czt.z.ast.DeclName declName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getDeclName());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    DefnSequent erg = mZpattFactory_.createDefnSequent(sequentContext, declName, expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitDefnSequent", erg);
    return erg;
  }

  public Object visitJokers(net.sourceforge.czt.zpatt.jaxb.gen.Jokers jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokers", jaxbObject);
    List name = new Vector();
    for (Iterator iter = jaxbObject.getName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      name.add(o);
    }
    String kind =
      (String) dispatch(jaxbObject.getKind());
    Jokers erg = mZpattFactory_.createJokers(name, kind);
    getLogger().exiting("JaxbToAst", "visitJokers", erg);
    return erg;
  }

  public Object visitJokerPred(net.sourceforge.czt.zpatt.jaxb.gen.JokerPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerPred", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    JokerPred erg = mZpattFactory_.createJokerPred(name);
    getLogger().exiting("JaxbToAst", "visitJokerPred", erg);
    return erg;
  }

  public Object visitJokerPredBinding(net.sourceforge.czt.zpatt.jaxb.gen.JokerPredBinding jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerPredBinding", jaxbObject);
    JokerPred jokerPred =
      (JokerPred) dispatch(jaxbObject.getJokerPred());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    JokerPredBinding erg = mZpattFactory_.createJokerPredBinding(jokerPred, pred);
    getLogger().exiting("JaxbToAst", "visitJokerPredBinding", erg);
    return erg;
  }
}
