
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE JaxbToAst.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.zpatt.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.util.ReflectiveVisitor;
import net.sourceforge.czt.zpatt.ast.*;
import net.sourceforge.czt.z.ast.*;

/**
 * The unmarshaller responsible for deserializing XML data.
 *
 * @author Gnast version 0.1
 */
public class JaxbToAst extends net.sourceforge.czt.z.jaxb.JaxbToAst
{
  protected ZpattFactory mZpattFactory_;

  public JaxbToAst()
  {
    mZpattFactory_ =
      new net.sourceforge.czt.zpatt.impl.ZpattFactoryImpl();
  }

  public JaxbToAst(net.sourceforge.czt.z.ast.ZFactory vZFactory, ZpattFactory vZpattFactory)
  {
    super(vZFactory);
    mZpattFactory_ = vZpattFactory;
  }

  private static Logger getLogger()
  {
    return Logger.getLogger("net.sourceforge.czt.zpatt.jaxb.JaxbToAst");
  }

  public Object visitObject(Object object)
  {
    getLogger().fine("Visit " + object.getClass().toString());
    if (object instanceof String
        || object instanceof Boolean
        || object instanceof List
        || object instanceof Integer
        || object instanceof java.math.BigInteger) {
      return object;
    }
    throw new UnsupportedOperationException("Unexpected element "
                                            + object.getClass().getName());
  }

  public Object visitPredTransform(net.sourceforge.czt.zpatt.jaxb.gen.PredTransform jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPredTransform", jaxbObject);
    net.sourceforge.czt.z.ast.Pred leftPred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getLeftPred());
    net.sourceforge.czt.z.ast.Expr rightPred =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getRightPred());
    PredTransform erg = mZpattFactory_.createPredTransform(leftPred, rightPred);
    getLogger().exiting("JaxbToAst", "visitPredTransform", erg);
    return erg;
  }

  public Object visitJokerExpr(net.sourceforge.czt.zpatt.jaxb.gen.JokerExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerExpr", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    JokerExpr erg = mZpattFactory_.createJokerExpr(name);
    getLogger().exiting("JaxbToAst", "visitJokerExpr", erg);
    return erg;
  }

  public Object visitJokerPred(net.sourceforge.czt.zpatt.jaxb.gen.JokerPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerPred", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    JokerPred erg = mZpattFactory_.createJokerPred(name);
    getLogger().exiting("JaxbToAst", "visitJokerPred", erg);
    return erg;
  }

  public Object visitExprTransform(net.sourceforge.czt.zpatt.jaxb.gen.ExprTransform jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExprTransform", jaxbObject);
    net.sourceforge.czt.z.ast.Expr leftExpr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getLeftExpr());
    net.sourceforge.czt.z.ast.Expr rightExpr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getRightExpr());
    ExprTransform erg = mZpattFactory_.createExprTransform(leftExpr, rightExpr);
    getLogger().exiting("JaxbToAst", "visitExprTransform", erg);
    return erg;
  }

  public Object visitTransformList(net.sourceforge.czt.zpatt.jaxb.gen.TransformList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTransformList", jaxbObject);
    List transform = new Vector();
    for (Iterator iter = jaxbObject.getTransform().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      transform.add(o);
    }
    TransformList erg = mZpattFactory_.createTransformList(transform);
    getLogger().exiting("JaxbToAst", "visitTransformList", erg);
    return erg;
  }
}
