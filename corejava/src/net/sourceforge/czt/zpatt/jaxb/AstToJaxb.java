
/*
THIS FILE WAS GENERATED BY GNAST.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

************************************************************

Copyright 2003 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.zpatt.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.core.jaxb.gen.*;
import net.sourceforge.czt.zpatt.jaxb.gen.*;
import org.w3._2001.xmlschema.*;

/**
 * The marshaller responsible for serializing XML data.
 *
 * @author Gnast version 0.1
 */
public class AstToJaxb
  extends net.sourceforge.czt.core.jaxb.AstToJaxb
  implements net.sourceforge.czt.zpatt.visitor.ZPattVisitor,
             net.sourceforge.czt.core.visitor.TermVisitor
{
  private static final Logger sLogger =
    Logger.getLogger("net.sourceforge.czt.zpatt.jaxb.AstToJaxb");

  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  protected net.sourceforge.czt.zpatt.jaxb.gen.ObjectFactory
    mObjectFactory = new net.sourceforge.czt.zpatt.jaxb.gen.ObjectFactory();
  protected net.sourceforge.czt.core.jaxb.gen.ObjectFactory
    mAnnsObjectFactory = new net.sourceforge.czt.core.jaxb.gen.ObjectFactory();
  protected org.w3._2001.xmlschema.ObjectFactory
    mAnyTypeObjectFactory = new org.w3._2001.xmlschema.ObjectFactory();

  /**
   * A map that maps id's to the corresponding Object
   */
  protected Map mHash = new HashMap();

  public Object visitTerm(net.sourceforge.czt.core.ast.Term zedObject)
  {
    throw(new UnsupportedOperationException());
  }


  public Object visitJokerExpr(net.sourceforge.czt.zpatt.ast.JokerExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.zpatt.jaxb.AstToJaxb", "visitJokerExpr", zedObject);

    JokerExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createJokerExprElement();
      if (zedObject.getName()!=null) {
        jaxbObject.setName(zedObject.getName());
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.zpatt.jaxb.AstToJaxb", "visitJokerExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitSubstitute(net.sourceforge.czt.zpatt.ast.Substitute zedObject)
  {
    sLogger.entering("net.sourceforge.czt.zpatt.jaxb.AstToJaxb", "visitSubstitute", zedObject);

    Substitute jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createSubstituteElement();
      {
        java.util.List list = zedObject.getExpr();
        java.util.List newlist = jaxbObject.getExpr();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
      {
        java.util.List list = zedObject.getPred();
        java.util.List newlist = jaxbObject.getPred();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.zpatt.jaxb.AstToJaxb", "visitSubstitute", jaxbObject);
    return jaxbObject;
  }

  public Object visitJokerPred(net.sourceforge.czt.zpatt.ast.JokerPred zedObject)
  {
    sLogger.entering("net.sourceforge.czt.zpatt.jaxb.AstToJaxb", "visitJokerPred", zedObject);

    JokerPred jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createJokerPredElement();
      if (zedObject.getName()!=null) {
        jaxbObject.setName(zedObject.getName());
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.zpatt.jaxb.AstToJaxb", "visitJokerPred", jaxbObject);
    return jaxbObject;
  }

  public Object visitSubstList(net.sourceforge.czt.zpatt.ast.SubstList zedObject)
  {
    sLogger.entering("net.sourceforge.czt.zpatt.jaxb.AstToJaxb", "visitSubstList", zedObject);

    SubstList jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createSubstListElement();
      {
        java.util.List list = zedObject.getSubstitute();
        java.util.List newlist = jaxbObject.getSubstitute();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.zpatt.jaxb.AstToJaxb", "visitSubstList", jaxbObject);
    return jaxbObject;
  }
}
