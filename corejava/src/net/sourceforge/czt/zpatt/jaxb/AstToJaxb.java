
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToJaxb.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.zpatt.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.base.ast.Term;

import net.sourceforge.czt.z.jaxb.gen.*;
import net.sourceforge.czt.zpatt.jaxb.gen.*;
import org.w3._2001.xmlschema.*;

/**
 * The marshaller responsible for serializing XML data.
 *
 * @author Gnast version 0.1
 */
public class AstToJaxb
  extends net.sourceforge.czt.z.jaxb.AstToJaxb
  implements net.sourceforge.czt.zpatt.visitor.ZpattVisitor,
             net.sourceforge.czt.base.visitor.TermVisitor
{

  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  private net.sourceforge.czt.zpatt.jaxb.gen.ObjectFactory
    objectFactory_ = new net.sourceforge.czt.zpatt.jaxb.gen.ObjectFactory();
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    annsObjectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();
  private org.w3._2001.xmlschema.ObjectFactory
    anyTypeObjectFactory_ = new org.w3._2001.xmlschema.ObjectFactory();

  /**
   * A map that maps id's to the corresponding Object.
   */
  private Map hash_ = new HashMap();

  private String getClassName()
  {
    return "net.sourceforge.czt.zpatt.jaxb.AstToJaxb";
  }

  private Logger getLogger()
  {
    return Logger.getLogger(getClassName());
  }

  private net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType visitAnnotations(List list)
    throws javax.xml.bind.JAXBException
  {
      net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
        annsObjectFactory_.createTermAAnnsType();
    List newlist = anns.getany();
    for (Iterator iter = list.iterator(); iter.hasNext();) {
      Object obj = iter.next();
      if (obj instanceof Term) {
        Term term = (Term) obj;
        try {
          createElement_ = true;
          Object visitedTerm = term.accept(this);
          newlist.add(visitedTerm);
        }
        catch (Exception e) {
          String message = "Annotation " + term + " cannot be handled; " +
            "drop it.";
          getLogger().warning(message);
        }
      }
    }
    return anns;
  }


  public Object visitTerm(Term zedObject)
  {
    String message = "Unexpected element " + zedObject.getClass().getName();
    // getLogger().warning(message);
    // return null;
    throw(new UnsupportedOperationException(message));
  }


  public Object visitJokerName(net.sourceforge.czt.zpatt.ast.JokerName zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerName", zedObject);

    JokerName jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createJokerNameElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createJokerName();
      }
      createElement_ = false;
      if (zedObject.getWord() != null) {
        jaxbObject.setWord(zedObject.getWord());
      }
      {
        List list = zedObject.getStroke();
        List newlist = jaxbObject.getStroke();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = false;
      if (zedObject.getId() != null) {
        jaxbObject.setId(zedObject.getId());
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerName to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitJokerName", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitPredSequent(net.sourceforge.czt.zpatt.ast.PredSequent zedObject)
  {
    getLogger().entering(getClassName(), "visitPredSequent", zedObject);

    PredSequent jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createPredSequentElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createPredSequent();
      }
      createElement_ = true;
      if (zedObject.getSequentContext() != null) {
        Term term = zedObject.getSequentContext();
        jaxbObject.setSequentContext((SequentContext) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getPred() != null) {
        Term term = zedObject.getPred();
        jaxbObject.setPred((Pred) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeduction() != null) {
        Term term = zedObject.getDeduction();
        jaxbObject.setDeduction((Deduction) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PredSequent to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a PredSequent to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitPredSequent", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitJokerExpr(net.sourceforge.czt.zpatt.ast.JokerExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerExpr", zedObject);

    JokerExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createJokerExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createJokerExpr();
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitJokerExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitJokerExprListBinding(net.sourceforge.czt.zpatt.ast.JokerExprListBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerExprListBinding", zedObject);

    JokerExprListBinding jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createJokerExprListBindingElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createJokerExprListBinding();
      }
      createElement_ = true;
      if (zedObject.getJokerExprList() != null) {
        Term term = zedObject.getJokerExprList();
        jaxbObject.setJokerExprList((JokerExprList) term.accept(this));
      }
      {
        List list = zedObject.getExpr();
        List newlist = jaxbObject.getExpr();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerExprListBinding to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitJokerExprListBinding", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitJokerExprBinding(net.sourceforge.czt.zpatt.ast.JokerExprBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerExprBinding", zedObject);

    JokerExprBinding jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createJokerExprBindingElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createJokerExprBinding();
      }
      createElement_ = true;
      if (zedObject.getJokerExpr() != null) {
        Term term = zedObject.getJokerExpr();
        jaxbObject.setJokerExpr((JokerExpr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerExprBinding to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitJokerExprBinding", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitLookupConstDeclProviso(net.sourceforge.czt.zpatt.ast.LookupConstDeclProviso zedObject)
  {
    getLogger().entering(getClassName(), "visitLookupConstDeclProviso", zedObject);

    LookupConstDeclProviso jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createLookupConstDeclProvisoElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createLookupConstDeclProviso();
      }
      createElement_ = true;
      if (zedObject.getSequentContext() != null) {
        Term term = zedObject.getSequentContext();
        jaxbObject.setSequentContext((SequentContext) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getLeftExpr() != null) {
        Term term = zedObject.getLeftExpr();
        jaxbObject.setLeftExpr((Expr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightExpr() != null) {
        Term term = zedObject.getRightExpr();
        jaxbObject.setRightExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a LookupConstDeclProviso to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a LookupConstDeclProviso to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitLookupConstDeclProviso", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitJokerExprList(net.sourceforge.czt.zpatt.ast.JokerExprList zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerExprList", zedObject);

    JokerExprList jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createJokerExprListElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createJokerExprList();
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerExprList to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitJokerExprList", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitLookupPredProviso(net.sourceforge.czt.zpatt.ast.LookupPredProviso zedObject)
  {
    getLogger().entering(getClassName(), "visitLookupPredProviso", zedObject);

    LookupPredProviso jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createLookupPredProvisoElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createLookupPredProviso();
      }
      createElement_ = true;
      if (zedObject.getSequentContext() != null) {
        Term term = zedObject.getSequentContext();
        jaxbObject.setSequentContext((SequentContext) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getPred() != null) {
        Term term = zedObject.getPred();
        jaxbObject.setPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a LookupPredProviso to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a LookupPredProviso to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitLookupPredProviso", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCalculateProviso(net.sourceforge.czt.zpatt.ast.CalculateProviso zedObject)
  {
    getLogger().entering(getClassName(), "visitCalculateProviso", zedObject);

    CalculateProviso jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCalculateProvisoElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCalculateProviso();
      }
      createElement_ = true;
      if (zedObject.getSequentContext() != null) {
        Term term = zedObject.getSequentContext();
        jaxbObject.setSequentContext((SequentContext) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getLeftExpr() != null) {
        Term term = zedObject.getLeftExpr();
        jaxbObject.setLeftExpr((Expr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightExpr() != null) {
        Term term = zedObject.getRightExpr();
        jaxbObject.setRightExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CalculateProviso to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a CalculateProviso to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCalculateProviso", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSequentContext(net.sourceforge.czt.zpatt.ast.SequentContext zedObject)
  {
    getLogger().entering(getClassName(), "visitSequentContext", zedObject);

    SequentContext jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSequentContextElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createSequentContext();
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SequentContext to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSequentContext", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitJokerNameBinding(net.sourceforge.czt.zpatt.ast.JokerNameBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerNameBinding", zedObject);

    JokerNameBinding jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createJokerNameBindingElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createJokerNameBinding();
      }
      createElement_ = true;
      if (zedObject.getJokerName() != null) {
        Term term = zedObject.getJokerName();
        jaxbObject.setJokerName((JokerName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclName() != null) {
        Term term = zedObject.getDeclName();
        jaxbObject.setDeclName((DeclName) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerNameBinding to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitJokerNameBinding", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitDeduction(net.sourceforge.czt.zpatt.ast.Deduction zedObject)
  {
    getLogger().entering(getClassName(), "visitDeduction", zedObject);

    Deduction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createDeductionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createDeduction();
      }
      {
        List list = zedObject.getBinding();
        List newlist = jaxbObject.getBinding();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getSequent();
        List newlist = jaxbObject.getSequent();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Deduction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a Deduction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitDeduction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRule(net.sourceforge.czt.zpatt.ast.Rule zedObject)
  {
    getLogger().entering(getClassName(), "visitRule", zedObject);

    Rule jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRuleElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createRule();
      }
      {
        List list = zedObject.getSequent();
        List newlist = jaxbObject.getSequent();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Rule to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitRule", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCheckProviso(net.sourceforge.czt.zpatt.ast.CheckProviso zedObject)
  {
    getLogger().entering(getClassName(), "visitCheckProviso", zedObject);

    CheckProviso jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCheckProvisoElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCheckProviso();
      }
      createElement_ = true;
      if (zedObject.getSequentContext() != null) {
        Term term = zedObject.getSequentContext();
        jaxbObject.setSequentContext((SequentContext) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getPred() != null) {
        Term term = zedObject.getPred();
        jaxbObject.setPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CheckProviso to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a CheckProviso to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCheckProviso", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitJokerDeclList(net.sourceforge.czt.zpatt.ast.JokerDeclList zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerDeclList", zedObject);

    JokerDeclList jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createJokerDeclListElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createJokerDeclList();
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerDeclList to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitJokerDeclList", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitBinding(net.sourceforge.czt.zpatt.ast.Binding zedObject)
  {
    getLogger().entering(getClassName(), "visitBinding", zedObject);

    Binding jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createBindingElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createBinding();
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Binding to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitBinding", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitTypeProviso(net.sourceforge.czt.zpatt.ast.TypeProviso zedObject)
  {
    getLogger().entering(getClassName(), "visitTypeProviso", zedObject);

    TypeProviso jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createTypeProvisoElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createTypeProviso();
      }
      createElement_ = true;
      if (zedObject.getSequentContext() != null) {
        Term term = zedObject.getSequentContext();
        jaxbObject.setSequentContext((SequentContext) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getType() != null) {
        Term term = zedObject.getType();
        jaxbObject.setType((Type) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a TypeProviso to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a TypeProviso to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitTypeProviso", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitJokerDeclListBinding(net.sourceforge.czt.zpatt.ast.JokerDeclListBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerDeclListBinding", zedObject);

    JokerDeclListBinding jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createJokerDeclListBindingElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createJokerDeclListBinding();
      }
      createElement_ = true;
      if (zedObject.getJokerDeclList() != null) {
        Term term = zedObject.getJokerDeclList();
        jaxbObject.setJokerDeclList((JokerDeclList) term.accept(this));
      }
      {
        List list = zedObject.getDecl();
        List newlist = jaxbObject.getDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerDeclListBinding to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitJokerDeclListBinding", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitJokers(net.sourceforge.czt.zpatt.ast.Jokers zedObject)
  {
    getLogger().entering(getClassName(), "visitJokers", zedObject);

    Jokers jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createJokersElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createJokers();
      }
      {
        List list = zedObject.getName();
        List newlist = jaxbObject.getName();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = false;
      if (zedObject.getKind() != null) {
        jaxbObject.setKind(zedObject.getKind());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Jokers to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitJokers", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitJokerPred(net.sourceforge.czt.zpatt.ast.JokerPred zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerPred", zedObject);

    JokerPred jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createJokerPredElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createJokerPred();
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerPred to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitJokerPred", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitJokerPredBinding(net.sourceforge.czt.zpatt.ast.JokerPredBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerPredBinding", zedObject);

    JokerPredBinding jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createJokerPredBindingElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createJokerPredBinding();
      }
      createElement_ = true;
      if (zedObject.getJokerPred() != null) {
        Term term = zedObject.getJokerPred();
        jaxbObject.setJokerPred((JokerPred) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getPred() != null) {
        Term term = zedObject.getPred();
        jaxbObject.setPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerPredBinding to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitJokerPredBinding", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }
}
