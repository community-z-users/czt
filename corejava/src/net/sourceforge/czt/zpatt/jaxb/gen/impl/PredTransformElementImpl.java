//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b18-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.02.13 at 10:27:41 GMT 
//


package net.sourceforge.czt.zpatt.jaxb.gen.impl;

public class PredTransformElementImpl
    extends net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl
    implements net.sourceforge.czt.zpatt.jaxb.gen.PredTransformElement, com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject, net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallableObject, net.sourceforge.czt.oz.jaxb.gen.impl.runtime.XMLSerializable, net.sourceforge.czt.oz.jaxb.gen.impl.runtime.ValidatableObject
{

    public final static java.lang.Class version = (net.sourceforge.czt.zpatt.jaxb.gen.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (net.sourceforge.czt.zpatt.jaxb.gen.PredTransformElement.class);
    }

    public java.lang.String ____jaxb_ri____getNamespaceURI() {
        return "http://czt.sourceforge.net/zpatt";
    }

    public java.lang.String ____jaxb_ri____getLocalName() {
        return "PredTransform";
    }

    public net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallingEventHandler createUnmarshaller(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallingContext context) {
        return new net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.Unmarshaller(context);
    }

    public void serializeBody(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        context.startElement("http://czt.sourceforge.net/zpatt", "PredTransform");
        super.serializeURIs(context);
        context.endNamespaceDecls();
        super.serializeAttributes(context);
        context.endAttributes();
        super.serializeBody(context);
        context.endElement();
    }

    public void serializeAttributes(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
    }

    public void serializeURIs(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
    }

    public java.lang.Class getPrimaryInterface() {
        return (net.sourceforge.czt.zpatt.jaxb.gen.PredTransformElement.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
+"grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
+"\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
+"msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
+"ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
+"mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsr\u0000\u001dcom.s"
+"un.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsq\u0000~\u0000\u000bppsq\u0000~\u0000\u000bpps"
+"q\u0000~\u0000\u000bppsq\u0000~\u0000\u000bppsq\u0000~\u0000\u000bppsq\u0000~\u0000\u000bppsq\u0000~\u0000\u000bppsq\u0000~\u0000\u000bppsq\u0000~\u0000\u000bppsq\u0000~\u0000"
+"\u000bppsq\u0000~\u0000\u000bppsq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bppsr\u0000 com.sun.msv.grammar.OneOrMor"
+"eExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\u0003expq\u0000~\u0000\u0003xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000ps"
+"r\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\t"
+"nameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004q\u0000~\u0000\u001epsr\u00002com.sun.msv.grammar.Expression"
+"$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000\u001d\u0001q\u0000~\u0000\"sr\u0000 com.sun"
+".msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar."
+"NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$Eps"
+"ilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004q\u0000~\u0000#q\u0000~\u0000(sr\u0000#com.sun.msv.gra"
+"mmar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/Str"
+"ing;L\u0000\fnamespaceURIq\u0000~\u0000*xq\u0000~\u0000%t\u0000)net.sourceforge.czt.z.jaxb."
+"gen.ForallPredt\u0000+http://java.sun.com/jaxb/xjc/dummy-elements"
+"sq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~"
+"\u0000)t\u0000&net.sourceforge.czt.z.jaxb.gen.IffPredq\u0000~\u0000-sq\u0000~\u0000\u0000pp\u0000sq\u0000"
+"~\u0000\u000bppsq\u0000~\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)t\u0000(net.sou"
+"rceforge.czt.z.jaxb.gen.FalsePredq\u0000~\u0000-sq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000"
+"\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)t\u00003net.sourceforge.c"
+"zt.zpatt.jaxb.gen.JokerPredElementq\u0000~\u0000-sq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000~"
+"\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)t\u0000\'net.sourceforge."
+"czt.z.jaxb.gen.TruePredq\u0000~\u0000-sq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u001aq\u0000~\u0000\u001epsq\u0000"
+"~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)t\u0000*net.sourceforge.czt.z.jaxb."
+"gen.Exists1Predq\u0000~\u0000-sq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001e"
+"pq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)t\u0000.net.sourceforge.czt.z.jaxb.gen.Expr"
+"PredElementq\u0000~\u0000-sq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~"
+"\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)t\u0000%net.sourceforge.czt.z.jaxb.gen.OrPredq\u0000"
+"~\u0000-sq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(s"
+"q\u0000~\u0000)t\u0000*net.sourceforge.czt.z.jaxb.gen.ImpliesPredq\u0000~\u0000-sq\u0000~\u0000"
+"\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)t\u0000-"
+"net.sourceforge.czt.z.jaxb.gen.NegPredElementq\u0000~\u0000-sq\u0000~\u0000\u0000pp\u0000s"
+"q\u0000~\u0000\u000bppsq\u0000~\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)t\u0000-net.s"
+"ourceforge.czt.z.jaxb.gen.AndPredElementq\u0000~\u0000-sq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000b"
+"ppsq\u0000~\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)t\u0000-net.source"
+"forge.czt.z.jaxb.gen.MemPredElementq\u0000~\u0000-sq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000"
+"~\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)t\u0000)net.sourceforge"
+".czt.z.jaxb.gen.ExistsPredq\u0000~\u0000-sq\u0000~\u0000\u000bppsq\u0000~\u0000\u000bppsq\u0000~\u0000\u000bppsq\u0000~\u0000"
+"\u000bppsq\u0000~\u0000\u000bppsq\u0000~\u0000\u000bppsq\u0000~\u0000\u000bppsq\u0000~\u0000\u000bppsq\u0000~\u0000\u000bppsq\u0000~\u0000\u000bppsq\u0000~\u0000\u000bpps"
+"q\u0000~\u0000\u000bppsq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000"
+"~\u0000(sq\u0000~\u0000)q\u0000~\u0000,q\u0000~\u0000-sq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001ep"
+"q\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u00003q\u0000~\u0000-sq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u001aq\u0000~\u0000\u001ep"
+"sq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u00009q\u0000~\u0000-sq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bpp"
+"sq\u0000~\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u0000?q\u0000~\u0000-sq\u0000~\u0000"
+"\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)q\u0000~"
+"\u0000Eq\u0000~\u0000-sq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000"
+"~\u0000(sq\u0000~\u0000)q\u0000~\u0000Kq\u0000~\u0000-sq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001ep"
+"q\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u0000Qq\u0000~\u0000-sq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u001aq\u0000~\u0000\u001ep"
+"sq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u0000Wq\u0000~\u0000-sq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bpp"
+"sq\u0000~\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u0000]q\u0000~\u0000-sq\u0000~\u0000"
+"\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)q\u0000~"
+"\u0000cq\u0000~\u0000-sq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000"
+"~\u0000(sq\u0000~\u0000)q\u0000~\u0000iq\u0000~\u0000-sq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u001aq\u0000~\u0000\u001epsq\u0000~\u0000\u001fq\u0000~\u0000\u001ep"
+"q\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u0000oq\u0000~\u0000-sq\u0000~\u0000\u0000pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\u001aq\u0000~\u0000\u001ep"
+"sq\u0000~\u0000\u001fq\u0000~\u0000\u001epq\u0000~\u0000\"q\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u0000uq\u0000~\u0000-sq\u0000~\u0000\u000bppsq\u0000~\u0000\u001fq\u0000~"
+"\u0000\u001epsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/re"
+"laxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv"
+"/util/StringPair;xq\u0000~\u0000\u0004ppsr\u0000\"com.sun.msv.datatype.xsd.QnameT"
+"ype\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\f"
+"namespaceUriq\u0000~\u0000*L\u0000\btypeNameq\u0000~\u0000*L\u0000\nwhiteSpacet\u0000.Lcom/sun/ms"
+"v/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/20"
+"01/XMLSchemat\u0000\u0005QNamesr\u00005com.sun.msv.datatype.xsd.WhiteSpaceP"
+"rocessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.Whi"
+"teSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Express"
+"ion$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004q\u0000~\u0000\u001epsr\u0000\u001bcom.sun.msv."
+"util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000*L\u0000\fnamespaceURIq\u0000"
+"~\u0000*xpq\u0000~\u0000\u00d0q\u0000~\u0000\u00cfsq\u0000~\u0000)t\u0000\u0004typet\u0000)http://www.w3.org/2001/XMLSch"
+"ema-instanceq\u0000~\u0000(sq\u0000~\u0000)t\u0000\rPredTransformt\u0000 http://czt.sourcef"
+"orge.net/zpattsr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedH"
+"ash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef"
+"\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/gramm"
+"ar/ExpressionPool;xp\u0000\u0000\u0000O\u0001pq\u0000~\u0000\u00a1q\u0000~\u0000\u009cq\u0000~\u0000\u0097q\u0000~\u0000\u0092q\u0000~\u0000\u008dq\u0000~\u0000\u0088q\u0000~\u0000"
+"\u0083q\u0000~\u0000qq\u0000~\u0000kq\u0000~\u0000eq\u0000~\u0000_q\u0000~\u0000Yq\u0000~\u0000Sq\u0000~\u0000Mq\u0000~\u0000Gq\u0000~\u0000Aq\u0000~\u0000;q\u0000~\u00005q\u0000~\u0000"
+"/q\u0000~\u0000\u0019q\u0000~\u0000\u00a6q\u0000~\u0000\u00abq\u0000~\u0000\u00b0q\u0000~\u0000\u00b5q\u0000~\u0000\u00baq\u0000~\u0000\u00bfq\u0000~\u0000\u00c3q\u0000~\u0000\rq\u0000~\u0000wq\u0000~\u0000\u0011q\u0000~\u0000"
+"{q\u0000~\u0000\nq\u0000~\u0000\u0081q\u0000~\u0000\u0017q\u0000~\u0000\tq\u0000~\u0000\u0012q\u0000~\u0000|q\u0000~\u0000\u0080q\u0000~\u0000\u0016q\u0000~\u0000\u007fq\u0000~\u0000\u0015q\u0000~\u0000\fq\u0000~\u0000"
+"vq\u0000~\u0000\u00a2q\u0000~\u0000\u0010q\u0000~\u0000\u009dq\u0000~\u0000\u0098q\u0000~\u0000~q\u0000~\u0000\u0014q\u0000~\u0000\u0093q\u0000~\u0000\u008eq\u0000~\u0000\u0089q\u0000~\u0000\u0084q\u0000~\u0000rq\u0000~\u0000"
+"lq\u0000~\u0000fq\u0000~\u0000`q\u0000~\u0000Zq\u0000~\u0000Tq\u0000~\u0000Nq\u0000~\u0000Hq\u0000~\u0000Bq\u0000~\u0000<q\u0000~\u00006q\u0000~\u00000q\u0000~\u0000\u001cq\u0000~\u0000"
+"\u00a7q\u0000~\u0000\u00acq\u0000~\u0000zq\u0000~\u0000\u00b1q\u0000~\u0000\u00b6q\u0000~\u0000\u00bbq\u0000~\u0000\u00c0q\u0000~\u0000\u000fq\u0000~\u0000yq\u0000~\u0000}q\u0000~\u0000\u0013q\u0000~\u0000\u000eq\u0000~\u0000"
+"xx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends net.sourceforge.czt.oz.jaxb.gen.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallingContext context) {
            super(context, "----");
        }

        protected Unmarshaller(net.sourceforge.czt.oz.jaxb.gen.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  1 :
                        if (("ForallPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("IffPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("FalsePred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("JokerPred" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("TruePred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Exists1Pred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ExprPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("OrPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ImpliesPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("NegPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("AndPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("MemPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ExistsPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Pred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Pred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        spawnHandlerFromEnterElement((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                        return ;
                    case  0 :
                        if (("PredTransform" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 1;
                            return ;
                        }
                        break;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  2 :
                        if (("PredTransform" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            context.popAttributes();
                            state = 3;
                            return ;
                        }
                        break;
                    case  3 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  1 :
                        spawnHandlerFromLeaveElement((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                        return ;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  1 :
                        spawnHandlerFromEnterAttribute((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  1 :
                        spawnHandlerFromLeaveAttribute((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  3 :
                            revertToParentFromText(value);
                            return ;
                        case  1 :
                            spawnHandlerFromText((((net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformImpl)net.sourceforge.czt.zpatt.jaxb.gen.impl.PredTransformElementImpl.this).new Unmarshaller(context)), 2, value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
