
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.zpatt.ast;
import net.sourceforge.czt.z.ast.*;

/**
 * <p>An object factory for the AST.
 *
 * <p>This object factory allows the programmer
 * to programatically construct new instances of concrete Z terms.
 * </p>
 *
 * @author Gnast version 0.1
 */
public class Factory
  extends net.sourceforge.czt.z.ast.Factory
{
  private net.sourceforge.czt.zpatt.ast.ZpattFactory factory_ =
    new net.sourceforge.czt.zpatt.impl.ZpattFactoryImpl();

  /**
   * Creates a new convenience factory that uses the standard factory
   * implementation for creating AST terms.
   */
  public Factory()
  {
    super();
  }

  /**
   * Creates a new convenience factory that uses the given base factory
   * for creating AST terms.
   */
  public Factory(net.sourceforge.czt.zpatt.ast.ZpattFactory factory)
  {
    super(factory);
    factory_ = factory;
  }

  /**
   * Creates an instance of {@link PredTransform}.
   *
   * @return the new instance of PredTransform.
   */
  public PredTransform createPredTransform()
  {
    return factory_.createPredTransform();
  }

  /**
   * Creates an instance of {@link PredTransform} with the given children.
   *
   * @return the new instance of PredTransform.
   */
  public PredTransform createPredTransform(net.sourceforge.czt.z.ast.Pred leftPred, net.sourceforge.czt.z.ast.Expr rightPred)
  {
    return factory_.createPredTransform(leftPred, rightPred);
  }

  /**
   * Creates an instance of {@link JokerExpr}.
   *
   * @return the new instance of JokerExpr.
   */
  public JokerExpr createJokerExpr()
  {
    return factory_.createJokerExpr();
  }

  /**
   * Creates an instance of {@link JokerExpr} with the given children.
   *
   * @return the new instance of JokerExpr.
   */
  public JokerExpr createJokerExpr(String name)
  {
    return factory_.createJokerExpr(name);
  }

  /**
   * Creates an instance of {@link JokerPred}.
   *
   * @return the new instance of JokerPred.
   */
  public JokerPred createJokerPred()
  {
    return factory_.createJokerPred();
  }

  /**
   * Creates an instance of {@link JokerPred} with the given children.
   *
   * @return the new instance of JokerPred.
   */
  public JokerPred createJokerPred(String name)
  {
    return factory_.createJokerPred(name);
  }

  /**
   * Creates an instance of {@link ExprTransform}.
   *
   * @return the new instance of ExprTransform.
   */
  public ExprTransform createExprTransform()
  {
    return factory_.createExprTransform();
  }

  /**
   * Creates an instance of {@link ExprTransform} with the given children.
   *
   * @return the new instance of ExprTransform.
   */
  public ExprTransform createExprTransform(net.sourceforge.czt.z.ast.Expr leftExpr, net.sourceforge.czt.z.ast.Expr rightExpr)
  {
    return factory_.createExprTransform(leftExpr, rightExpr);
  }

  /**
   * Creates an instance of {@link TransformList}.
   *
   * @return the new instance of TransformList.
   */
  public TransformList createTransformList()
  {
    return factory_.createTransformList();
  }

  /**
   * Creates an instance of {@link TransformList} with the given children.
   *
   * @return the new instance of TransformList.
   */
  public TransformList createTransformList(java.util.List transform)
  {
    return factory_.createTransformList(transform);
  }


  /**
   * Creates a list of size one with the given object as element.
   */
  public java.util.List list(Object o)
  {
    java.util.List result = new java.util.ArrayList();
    result.add(o);
    return result;
  }

  /**
   * Creates a list with the two objects as elements.
   */
  public java.util.List list(Object first, Object second)
  {
    java.util.List result = new java.util.ArrayList();
    result.add(first);
    result.add(second);
    return result;
  }

  /**
   * Creates a member predicate that represents equality
   * between the two given expressions.
   */
  public MemPred createEquality(Expr left, Expr right)
  {
    return createMemPred(left, createSetExpr(list(right)), Boolean.TRUE);
  }

  /**
   * Creates a binary product expression.
   */
  public ProdExpr createProdExpr(Expr left, Expr right)
  {
    return createProdExpr(list(left, right));
  }

  /**
   * Creates a referencing name that refers to the given
   * declaring name.
   */
  public RefName createRefName(DeclName declName)
  {
    return createRefName(declName.getWord(), declName.getStroke(), declName);
  }

  /**
   * Creates a pair, that is a tuple expression with two elements.
   */
  public TupleExpr createTupleExpr(Expr left, Expr right)
  {
    return createTupleExpr(list(left, right));
  }



  
}
