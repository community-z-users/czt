
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactoryImpl.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.zpatt.impl;

import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.zpatt.ast.*;

/**
 * <p>An implementation of the object factory for constructing
 * concrete Z terms.  Each factory method returns an instance
 * of the corresponding class provided in this package.</p>
 *
 * @author Gnast version 0.1
 */
public class ZpattFactoryImpl
  extends net.sourceforge.czt.z.impl.ZFactoryImpl
  implements net.sourceforge.czt.zpatt.ast.ZpattFactory
{
  public JokerName createJokerName()
  {
    JokerName zedObject = new JokerNameImpl();
    return zedObject;
  }

  public JokerName createJokerName(String word, java.util.List stroke, String id, String name)
  {
    JokerName zedObject = createJokerName();
    zedObject.setWord(word);
    if (stroke != null) {
      zedObject.getStroke().addAll(stroke);
    }
    zedObject.setId(id);
    zedObject.setName(name);
    return zedObject;
  }

  public PredSequent createPredSequent()
  {
    PredSequent zedObject = new PredSequentImpl();
    return zedObject;
  }

  public PredSequent createPredSequent(SequentContext sequentContext, net.sourceforge.czt.z.ast.Pred pred, Deduction deduction)
  {
    PredSequent zedObject = createPredSequent();
    zedObject.setSequentContext(sequentContext);
    zedObject.setPred(pred);
    zedObject.setDeduction(deduction);
    return zedObject;
  }

  public JokerExpr createJokerExpr()
  {
    JokerExpr zedObject = new JokerExprImpl();
    return zedObject;
  }

  public JokerExpr createJokerExpr(String name)
  {
    JokerExpr zedObject = createJokerExpr();
    zedObject.setName(name);
    return zedObject;
  }

  public JokerExprListBinding createJokerExprListBinding()
  {
    JokerExprListBinding zedObject = new JokerExprListBindingImpl();
    return zedObject;
  }

  public JokerExprListBinding createJokerExprListBinding(JokerExprList jokerExprList, java.util.List expr)
  {
    JokerExprListBinding zedObject = createJokerExprListBinding();
    zedObject.setJokerExprList(jokerExprList);
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    return zedObject;
  }

  public JokerExprBinding createJokerExprBinding()
  {
    JokerExprBinding zedObject = new JokerExprBindingImpl();
    return zedObject;
  }

  public JokerExprBinding createJokerExprBinding(JokerExpr jokerExpr, net.sourceforge.czt.z.ast.Expr expr)
  {
    JokerExprBinding zedObject = createJokerExprBinding();
    zedObject.setJokerExpr(jokerExpr);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public LookupConstDeclProviso createLookupConstDeclProviso()
  {
    LookupConstDeclProviso zedObject = new LookupConstDeclProvisoImpl();
    return zedObject;
  }

  public LookupConstDeclProviso createLookupConstDeclProviso(SequentContext sequentContext, net.sourceforge.czt.z.ast.Expr leftExpr, net.sourceforge.czt.z.ast.Expr rightExpr)
  {
    LookupConstDeclProviso zedObject = createLookupConstDeclProviso();
    zedObject.setSequentContext(sequentContext);
    zedObject.setLeftExpr(leftExpr);
    zedObject.setRightExpr(rightExpr);
    return zedObject;
  }

  public JokerExprList createJokerExprList()
  {
    JokerExprList zedObject = new JokerExprListImpl();
    return zedObject;
  }

  public JokerExprList createJokerExprList(String name)
  {
    JokerExprList zedObject = createJokerExprList();
    zedObject.setName(name);
    return zedObject;
  }

  public LookupPredProviso createLookupPredProviso()
  {
    LookupPredProviso zedObject = new LookupPredProvisoImpl();
    return zedObject;
  }

  public LookupPredProviso createLookupPredProviso(SequentContext sequentContext, net.sourceforge.czt.z.ast.Pred pred)
  {
    LookupPredProviso zedObject = createLookupPredProviso();
    zedObject.setSequentContext(sequentContext);
    zedObject.setPred(pred);
    return zedObject;
  }

  public CalculateProviso createCalculateProviso()
  {
    CalculateProviso zedObject = new CalculateProvisoImpl();
    return zedObject;
  }

  public CalculateProviso createCalculateProviso(SequentContext sequentContext, net.sourceforge.czt.z.ast.Expr leftExpr, net.sourceforge.czt.z.ast.Expr rightExpr)
  {
    CalculateProviso zedObject = createCalculateProviso();
    zedObject.setSequentContext(sequentContext);
    zedObject.setLeftExpr(leftExpr);
    zedObject.setRightExpr(rightExpr);
    return zedObject;
  }

  public SequentContext createSequentContext()
  {
    SequentContext zedObject = new SequentContextImpl();
    return zedObject;
  }

  public JokerNameBinding createJokerNameBinding()
  {
    JokerNameBinding zedObject = new JokerNameBindingImpl();
    return zedObject;
  }

  public JokerNameBinding createJokerNameBinding(JokerName jokerName, net.sourceforge.czt.z.ast.DeclName declName)
  {
    JokerNameBinding zedObject = createJokerNameBinding();
    zedObject.setJokerName(jokerName);
    zedObject.setDeclName(declName);
    return zedObject;
  }

  public Deduction createDeduction()
  {
    Deduction zedObject = new DeductionImpl();
    return zedObject;
  }

  public Deduction createDeduction(java.util.List binding, java.util.List sequent, String name)
  {
    Deduction zedObject = createDeduction();
    if (binding != null) {
      zedObject.getBinding().addAll(binding);
    }
    if (sequent != null) {
      zedObject.getSequent().addAll(sequent);
    }
    zedObject.setName(name);
    return zedObject;
  }

  public Rule createRule()
  {
    Rule zedObject = new RuleImpl();
    return zedObject;
  }

  public Rule createRule(java.util.List sequent, String name)
  {
    Rule zedObject = createRule();
    if (sequent != null) {
      zedObject.getSequent().addAll(sequent);
    }
    zedObject.setName(name);
    return zedObject;
  }

  public CheckProviso createCheckProviso()
  {
    CheckProviso zedObject = new CheckProvisoImpl();
    return zedObject;
  }

  public CheckProviso createCheckProviso(SequentContext sequentContext, net.sourceforge.czt.z.ast.Pred pred)
  {
    CheckProviso zedObject = createCheckProviso();
    zedObject.setSequentContext(sequentContext);
    zedObject.setPred(pred);
    return zedObject;
  }

  public JokerDeclList createJokerDeclList()
  {
    JokerDeclList zedObject = new JokerDeclListImpl();
    return zedObject;
  }

  public JokerDeclList createJokerDeclList(String name)
  {
    JokerDeclList zedObject = createJokerDeclList();
    zedObject.setName(name);
    return zedObject;
  }

  public Binding createBinding()
  {
    Binding zedObject = new BindingImpl();
    return zedObject;
  }

  public TypeProviso createTypeProviso()
  {
    TypeProviso zedObject = new TypeProvisoImpl();
    return zedObject;
  }

  public TypeProviso createTypeProviso(SequentContext sequentContext, net.sourceforge.czt.z.ast.Expr expr, net.sourceforge.czt.z.ast.Type type)
  {
    TypeProviso zedObject = createTypeProviso();
    zedObject.setSequentContext(sequentContext);
    zedObject.setExpr(expr);
    zedObject.setType(type);
    return zedObject;
  }

  public JokerDeclListBinding createJokerDeclListBinding()
  {
    JokerDeclListBinding zedObject = new JokerDeclListBindingImpl();
    return zedObject;
  }

  public JokerDeclListBinding createJokerDeclListBinding(JokerDeclList jokerDeclList, java.util.List decl)
  {
    JokerDeclListBinding zedObject = createJokerDeclListBinding();
    zedObject.setJokerDeclList(jokerDeclList);
    if (decl != null) {
      zedObject.getDecl().addAll(decl);
    }
    return zedObject;
  }

  public Jokers createJokers()
  {
    Jokers zedObject = new JokersImpl();
    return zedObject;
  }

  public Jokers createJokers(java.util.List name, String kind)
  {
    Jokers zedObject = createJokers();
    if (name != null) {
      zedObject.getName().addAll(name);
    }
    zedObject.setKind(kind);
    return zedObject;
  }

  public JokerPred createJokerPred()
  {
    JokerPred zedObject = new JokerPredImpl();
    return zedObject;
  }

  public JokerPred createJokerPred(String name)
  {
    JokerPred zedObject = createJokerPred();
    zedObject.setName(name);
    return zedObject;
  }

  public JokerPredBinding createJokerPredBinding()
  {
    JokerPredBinding zedObject = new JokerPredBindingImpl();
    return zedObject;
  }

  public JokerPredBinding createJokerPredBinding(JokerPred jokerPred, net.sourceforge.czt.z.ast.Pred pred)
  {
    JokerPredBinding zedObject = createJokerPredBinding();
    zedObject.setJokerPred(jokerPred);
    zedObject.setPred(pred);
    return zedObject;
  }

}
