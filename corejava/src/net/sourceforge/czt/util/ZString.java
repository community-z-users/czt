
/**
Copyright 2003 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.util;

/**
 * An interface for commonly used Z characters.
 *
 * @author generated by Gnast XSL script zchar2stringclass.xsl
 */
public interface ZString
{


  /**
   * Greek capital letter delta.
   */
  String DELTA = String.valueOf(ZChar.DELTA);

  /**
   * Greek capital letter xi.
   */
  String XI = String.valueOf(ZChar.XI);

  /**
   * Greek small letter theta.
   */
  String THETA = String.valueOf(ZChar.THETA);

  /**
   * Greek small letter lambda.
   */
  String LAMBDA = String.valueOf(ZChar.LAMBDA);

  /**
   * Greek small letter mu.
   */
  String MU = String.valueOf(ZChar.MU);

  /**
   * double-struck capital A (currently just A).
   */
  String ARITHMOS = String.valueOf(ZChar.ARITHMOS);

  /**
   * double-struck capital N.
   */
  String NAT = String.valueOf(ZChar.NAT);

  /**
   * double-struck capital P.
   */
  String POWER = String.valueOf(ZChar.POWER);

  /**
   * prime.
   */
  String PRIME = String.valueOf(ZChar.PRIME);

  /**
   * exclamation mark.
   */
  String OUTSTROKE = String.valueOf(ZChar.OUTSTROKE);

  /**
   * question mark.
   */
  String INSTROKE = String.valueOf(ZChar.INSTROKE);

  /**
   * north east arrow.
   */
  String NE = String.valueOf(ZChar.NE);

  /**
   * south west arrow.
   */
  String SW = String.valueOf(ZChar.SW);

  /**
   * south east arrow.
   */
  String SE = String.valueOf(ZChar.SE);

  /**
   * north west arrow.
   */
  String NW = String.valueOf(ZChar.NW);

  /**
   * low line.
   */
  String LL = String.valueOf(ZChar.LL);

  /**
   * left parenthesis.
   */
  String LPAREN = String.valueOf(ZChar.LPAREN);

  /**
   * right parenthesis.
   */
  String RPAREN = String.valueOf(ZChar.RPAREN);

  /**
   * left square bracket.
   */
  String LSQUARE = String.valueOf(ZChar.LSQUARE);

  /**
   * right square bracket.
   */
  String RSQUARE = String.valueOf(ZChar.RSQUARE);

  /**
   * left curly bracket.
   */
  String LBRACE = String.valueOf(ZChar.LBRACE);

  /**
   * right curly bracket.
   */
  String RBRACE = String.valueOf(ZChar.RBRACE);

  /**
   * left binding bracket.
   */
  String LBIND = String.valueOf(ZChar.LBIND);

  /**
   * right binding bracket.
   */
  String RBIND = String.valueOf(ZChar.RBIND);

  /**
   * mathmatical left double angle bracket.
   */
  String LDATA = String.valueOf(ZChar.LDATA);

  /**
   * mathmatical right double angle bracket.
   */
  String RDATA = String.valueOf(ZChar.RDATA);

  /**
   * box drawings light horizontal.
   */
  String ZEDCHAR = String.valueOf(ZChar.ZEDCHAR);

  /**
   * box drawings light down.
   */
  String AXCHAR = String.valueOf(ZChar.AXCHAR);

  /**
   * box drawings light down and right.
   */
  String SCHCHAR = String.valueOf(ZChar.SCHCHAR);

  /**
   * box drawings double horizontal.
   */
  String GENCHAR = String.valueOf(ZChar.GENCHAR);

  /**
   * paragraph separator.
   */
  String ENDCHAR = String.valueOf(ZChar.ENDCHAR);

  /**
   * line seperator.
   */
  String NLCHAR = String.valueOf(ZChar.NLCHAR);

  /**
   * space.
   */
  String SPACE = String.valueOf(ZChar.SPACE);

  /**
   * vertical line.
   */
  String VL = String.valueOf(ZChar.VL);

  /**
   * ampersand.
   */
  String AMP = String.valueOf(ZChar.AMP);

  /**
   * right tack.
   */
  String VDASH = String.valueOf(ZChar.VDASH);

  /**
   * logical and.
   */
  String AND = String.valueOf(ZChar.AND);

  /**
   * logical or.
   */
  String OR = String.valueOf(ZChar.OR);

  /**
   * rightwards double arrow.
   */
  String IMP = String.valueOf(ZChar.IMP);

  /**
   * left right double arrow.
   */
  String IFF = String.valueOf(ZChar.IFF);

  /**
   * not sign.
   */
  String NOT = String.valueOf(ZChar.NOT);

  /**
   * for all.
   */
  String ALL = String.valueOf(ZChar.ALL);

  /**
   * there exists.
   */
  String EXI = String.valueOf(ZChar.EXI);

  /**
   * multiplication sign.
   */
  String CROSS = String.valueOf(ZChar.CROSS);

  /**
   * solidus.
   */
  String SOLIDUS = String.valueOf(ZChar.SOLIDUS);

  /**
   * equals sign.
   */
  String EQUALS = String.valueOf(ZChar.EQUALS);

  /**
   * element of.
   */
  String MEM = String.valueOf(ZChar.MEM);

  /**
   * colon.
   */
  String COLON = String.valueOf(ZChar.COLON);

  /**
   * semicolon.
   */
  String SEMICOLON = String.valueOf(ZChar.SEMICOLON);

  /**
   * comma.
   */
  String COMMA = String.valueOf(ZChar.COMMA);

  /**
   * full stop.
   */
  String DOT = String.valueOf(ZChar.DOT);

  /**
   * Z notation spot.
   */
  String SPOT = String.valueOf(ZChar.SPOT);

  /**
   * big reverse solidus.
   */
  String ZHIDE = String.valueOf(ZChar.ZHIDE);

  /**
   * schema projection.
   */
  String ZPROJ = String.valueOf(ZChar.ZPROJ);

  /**
   * schema composition.
   */
  String ZCOMP = String.valueOf(ZChar.ZCOMP);

  /**
   * schema piping.
   */
  String ZPIPE = String.valueOf(ZChar.ZPIPE);

  /**
   * plus sign.
   */
  String PLUS = String.valueOf(ZChar.PLUS);

  /**
   * Z notation type colon.
   */
  String TYPECOLON = String.valueOf(ZChar.TYPECOLON);

  /**
   * left right arrow.
   */
  String REL = String.valueOf(ZChar.REL);

  /**
   * rightwards arrow.
   */
  String FUN = String.valueOf(ZChar.FUN);

  /**
   * not equal to.
   */
  String NEQ = String.valueOf(ZChar.NEQ);

  /**
   * not an element of.
   */
  String NOTMEM = String.valueOf(ZChar.NOTMEM);

  /**
   * empty set.
   */
  String EMPTYSET = String.valueOf(ZChar.EMPTYSET);

  /**
   * subset of or equal to.
   */
  String SUBSETEQ = String.valueOf(ZChar.SUBSETEQ);

  /**
   * subset of.
   */
  String SUBSET = String.valueOf(ZChar.SUBSET);

  /**
   * union.
   */
  String CUP = String.valueOf(ZChar.CUP);

  /**
   * intersection.
   */
  String CAP = String.valueOf(ZChar.CAP);

  /**
   * reverse solidus.
   */
  String SETMINUS = String.valueOf(ZChar.SETMINUS);

  /**
   * circled minus.
   */
  String SYMDIFF = String.valueOf(ZChar.SYMDIFF);

  /**
   * n-ary union.
   */
  String BIGCUP = String.valueOf(ZChar.BIGCUP);

  /**
   * n-ary intersection.
   */
  String BIGCAP = String.valueOf(ZChar.BIGCAP);

  /**
   * mathmematical double-struck capital F (currently just F).
   */
  String FINSET = String.valueOf(ZChar.FINSET);

  /**
   * rightwards arrow from bar.
   */
  String MAPSTO = String.valueOf(ZChar.MAPSTO);

  /**
   * relational composition.
   */
  String COMP = String.valueOf(ZChar.COMP);

  /**
   * ring operator.
   */
  String CIRC = String.valueOf(ZChar.CIRC);

  /**
   * white left-pointing triangle.
   */
  String DRES = String.valueOf(ZChar.DRES);

  /**
   * white right-pointing triangle.
   */
  String RRES = String.valueOf(ZChar.RRES);

  /**
   * domain antirestriction.
   */
  String NDRES = String.valueOf(ZChar.NDRES);

  /**
   * range antirestriction.
   */
  String NRRES = String.valueOf(ZChar.NRRES);

  /**
   * tilde operator.
   */
  String TILDE = String.valueOf(ZChar.TILDE);

  /**
   * left image bracket.
   */
  String LIMG = String.valueOf(ZChar.LIMG);

  /**
   * right image bracket.
   */
  String RIMG = String.valueOf(ZChar.RIMG);

  /**
   * circled plus.
   */
  String OPLUS = String.valueOf(ZChar.OPLUS);

  /**
   * rightwards arrow with vertical stroke.
   */
  String PFUN = String.valueOf(ZChar.PFUN);

  /**
   * rightwards arrow with tail with vertical stroke.
   */
  String PINJ = String.valueOf(ZChar.PINJ);

  /**
   * rightwards arrow with tail.
   */
  String INJ = String.valueOf(ZChar.INJ);

  /**
   * rightwards two-headed arrow with vertical stroke.
   */
  String PSURJ = String.valueOf(ZChar.PSURJ);

  /**
   * rightwards two-headed arrow.
   */
  String SURJ = String.valueOf(ZChar.SURJ);

  /**
   * rightwards two-headed arrow with tail.
   */
  String BIJ = String.valueOf(ZChar.BIJ);

  /**
   * rightwards arrow with double vertical stroke.
   */
  String FFUN = String.valueOf(ZChar.FFUN);

  /**
   * rightwards arrow with tail with double vertical stroke.
   */
  String FINJ = String.valueOf(ZChar.FINJ);

  /**
   * double-struck capital Z.
   */
  String NUM = String.valueOf(ZChar.NUM);

  /**
   * hyphen-minus.
   */
  String NEG = String.valueOf(ZChar.NEG);

  /**
   * minus sign.
   */
  String MINUS = String.valueOf(ZChar.MINUS);

  /**
   * less-than or equal to.
   */
  String LEQ = String.valueOf(ZChar.LEQ);

  /**
   * less-than sign.
   */
  String LESS = String.valueOf(ZChar.LESS);

  /**
   * greater=than or equal to.
   */
  String GEQ = String.valueOf(ZChar.GEQ);

  /**
   * greater=than sign.
   */
  String GREATER = String.valueOf(ZChar.GREATER);

  /**
   * number sign.
   */
  String NUMBER = String.valueOf(ZChar.NUMBER);

  /**
   * mathmatical left angle bracket.
   */
  String LANGLE = String.valueOf(ZChar.LANGLE);

  /**
   * mathmatical right angle bracket.
   */
  String RANGLE = String.valueOf(ZChar.RANGLE);

  /**
   * character tie.
   */
  String CAT = String.valueOf(ZChar.CAT);

  /**
   * upwards harpoon with barb leftwards.
   */
  String EXTRACT = String.valueOf(ZChar.EXTRACT);

  /**
   * upwards harpoon with barb rightwards.
   */
  String FILTER = String.valueOf(ZChar.FILTER);
  String SUB1 = SE + "1" + NW;
  String SUP1 = NE + "1" + SW;
  String ZED = ZEDCHAR;
  String AX = AXCHAR;
  String SCH = SCHCHAR;
  String GENAX = AXCHAR + GENCHAR;
  String GENSCH = SCHCHAR + GENCHAR;
  String END = ENDCHAR;
  String NL = NLCHAR;
  String CONJECTURE = VDASH + "?";
}
