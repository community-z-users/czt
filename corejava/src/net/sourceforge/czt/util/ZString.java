
/**
Copyright 2003 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.util;

/**
 * An interface for commonly used Z characters.
 *
 * @author generated by Gnast XSL script zchar2stringclass.xsl
 */
public interface ZString
{


  /**
   * Greek capital letter delta
   */
  static final String DELTA = String.valueOf(ZChar.DELTA);

  /**
   * Greek capital letter xi
   */
  static final String XI = String.valueOf(ZChar.XI);

  /**
   * Greek small letter theta
   */
  static final String THETA = String.valueOf(ZChar.THETA);

  /**
   * Greek small letter lambda
   */
  static final String LAMBDA = String.valueOf(ZChar.LAMBDA);

  /**
   * Greek small letter mu
   */
  static final String MU = String.valueOf(ZChar.MU);

  /**
   * double-struck capital N
   */
  static final String NAT = String.valueOf(ZChar.NAT);

  /**
   * double-struck capital P
   */
  static final String POWER = String.valueOf(ZChar.POWER);

  /**
   * modifier letter prime
   */
  static final String PRIME = String.valueOf(ZChar.PRIME);

  /**
   * exclamation mark
   */
  static final String OUTSTROKE = String.valueOf(ZChar.OUTSTROKE);

  /**
   * question mark
   */
  static final String INSTROKE = String.valueOf(ZChar.INSTROKE);

  /**
   * north east arrow
   */
  static final String NE = String.valueOf(ZChar.NE);

  /**
   * south west arrow
   */
  static final String SW = String.valueOf(ZChar.SW);

  /**
   * south east arrow
   */
  static final String SE = String.valueOf(ZChar.SE);

  /**
   * north west arrow
   */
  static final String NW = String.valueOf(ZChar.NW);

  /**
   * low line
   */
  static final String LL = String.valueOf(ZChar.LL);

  /**
   * left parenthesis
   */
  static final String LPAREN = String.valueOf(ZChar.LPAREN);

  /**
   * right parenthesis
   */
  static final String RPAREN = String.valueOf(ZChar.RPAREN);

  /**
   * left square bracket
   */
  static final String LSQUARE = String.valueOf(ZChar.LSQUARE);

  /**
   * right square bracket
   */
  static final String RSQUARE = String.valueOf(ZChar.RSQUARE);

  /**
   * left curly bracket
   */
  static final String LBRACE = String.valueOf(ZChar.LBRACE);

  /**
   * right curly bracket
   */
  static final String RBRACE = String.valueOf(ZChar.RBRACE);

  /**
   * left binding bracket
   */
  static final String LBIND = String.valueOf(ZChar.LBIND);

  /**
   * right binding bracket
   */
  static final String RBIND = String.valueOf(ZChar.RBIND);

  /**
   * left double angle bracket
   */
  static final String LDATA = String.valueOf(ZChar.LDATA);

  /**
   * right double angle bracket
   */
  static final String RDATA = String.valueOf(ZChar.RDATA);

  /**
   * line separator
   */
  static final String ZEDCHAR = String.valueOf(ZChar.ZEDCHAR);

  /**
   * box drawings light down
   */
  static final String AXCHAR = String.valueOf(ZChar.AXCHAR);

  /**
   * box drawings light down and right
   */
  static final String SCHCHAR = String.valueOf(ZChar.SCHCHAR);

  /**
   * box drawings double horizontal
   */
  static final String GENCHAR = String.valueOf(ZChar.GENCHAR);

  /**
   * paragraph separator
   */
  static final String ENDCHAR = String.valueOf(ZChar.ENDCHAR);

  /**
   * line feed
   */
  static final String NLCHAR = String.valueOf(ZChar.NLCHAR);

  /**
   * space
   */
  static final String SPACE = String.valueOf(ZChar.SPACE);

  /**
   * vertical line
   */
  static final String VL = String.valueOf(ZChar.VL);

  /**
   * ampersand
   */
  static final String AMP = String.valueOf(ZChar.AMP);

  /**
   * right tack
   */
  static final String VDASH = String.valueOf(ZChar.VDASH);

  /**
   * logical and
   */
  static final String AND = String.valueOf(ZChar.AND);

  /**
   * logical or
   */
  static final String OR = String.valueOf(ZChar.OR);

  /**
   * rightwards double arrow
   */
  static final String IMP = String.valueOf(ZChar.IMP);

  /**
   * left right double arrow
   */
  static final String IFF = String.valueOf(ZChar.IFF);

  /**
   * not sign
   */
  static final String NOT = String.valueOf(ZChar.NOT);

  /**
   * for all
   */
  static final String ALL = String.valueOf(ZChar.ALL);

  /**
   * there exists
   */
  static final String EXI = String.valueOf(ZChar.EXI);

  /**
   * multiplication sign
   */
  static final String CROSS = String.valueOf(ZChar.CROSS);

  /**
   * solidus
   */
  static final String SOLIDUS = String.valueOf(ZChar.SOLIDUS);

  /**
   * equals sign
   */
  static final String EQUALS = String.valueOf(ZChar.EQUALS);

  /**
   * element of
   */
  static final String MEM = String.valueOf(ZChar.MEM);

  /**
   * colon
   */
  static final String COLON = String.valueOf(ZChar.COLON);

  /**
   * semicolon
   */
  static final String SEMICOLON = String.valueOf(ZChar.SEMICOLON);

  /**
   * comma
   */
  static final String COMMA = String.valueOf(ZChar.COMMA);

  /**
   * full stop
   */
  static final String DOT = String.valueOf(ZChar.DOT);

  /**
   * Z notation spot
   */
  static final String SPOT = String.valueOf(ZChar.SPOT);

  /**
   * big reverse solidus
   */
  static final String ZHIDE = String.valueOf(ZChar.ZHIDE);

  /**
   * schema projection
   */
  static final String ZPROJ = String.valueOf(ZChar.ZPROJ);

  /**
   * schema composition
   */
  static final String ZCOMP = String.valueOf(ZChar.ZCOMP);

  /**
   * schema piping
   */
  static final String ZPIPE = String.valueOf(ZChar.ZPIPE);

  /**
   * plus sign
   */
  static final String PLUS = String.valueOf(ZChar.PLUS);

  /**
   * Z notation type colon
   */
  static final String TYPECOLON = String.valueOf(ZChar.TYPECOLON);

  /**
   * left right arrow
   */
  static final String REL = String.valueOf(ZChar.REL);

  /**
   * rightwards arrow
   */
  static final String FUN = String.valueOf(ZChar.FUN);

  /**
   * not equal to
   */
  static final String NEQ = String.valueOf(ZChar.NEQ);

  /**
   * not an element of
   */
  static final String NOTMEM = String.valueOf(ZChar.NOTMEM);

  /**
   * empty set
   */
  static final String EMPTYSET = String.valueOf(ZChar.EMPTYSET);

  /**
   * subset of or equal to
   */
  static final String SUBSETEQ = String.valueOf(ZChar.SUBSETEQ);

  /**
   * subset of
   */
  static final String SUBSET = String.valueOf(ZChar.SUBSET);

  /**
   * union
   */
  static final String CUP = String.valueOf(ZChar.CUP);

  /**
   * intersection
   */
  static final String CAP = String.valueOf(ZChar.CAP);

  /**
   * reverse solidus
   */
  static final String SETMINUS = String.valueOf(ZChar.SETMINUS);

  /**
   * circled minus
   */
  static final String SYMDIFF = String.valueOf(ZChar.SYMDIFF);

  /**
   * n-ary union
   */
  static final String BIGCUP = String.valueOf(ZChar.BIGCUP);

  /**
   * n-ary intersection
   */
  static final String BIGCAP = String.valueOf(ZChar.BIGCAP);

  /**
   * rightwards arrow from bar
   */
  static final String MAPSTO = String.valueOf(ZChar.MAPSTO);

  /**
   * relational composition
   */
  static final String COMP = String.valueOf(ZChar.COMP);

  /**
   * ring operator
   */
  static final String CIRC = String.valueOf(ZChar.CIRC);

  /**
   * white left-pointing triangle
   */
  static final String DRES = String.valueOf(ZChar.DRES);

  /**
   * white right-pointing triangle
   */
  static final String RRES = String.valueOf(ZChar.RRES);

  /**
   * domain antirestriction
   */
  static final String NDRES = String.valueOf(ZChar.NDRES);

  /**
   * range antirestriction
   */
  static final String NRRES = String.valueOf(ZChar.NRRES);

  /**
   * tilde operator
   */
  static final String TILDE = String.valueOf(ZChar.TILDE);

  /**
   * left image bracket
   */
  static final String LIMG = String.valueOf(ZChar.LIMG);

  /**
   * right image bracket
   */
  static final String RIMG = String.valueOf(ZChar.RIMG);

  /**
   * circled plus
   */
  static final String OPLUS = String.valueOf(ZChar.OPLUS);

  /**
   * rightwards arrow with vertical stroke
   */
  static final String PFUN = String.valueOf(ZChar.PFUN);

  /**
   * rightwards arrow with tail with vertical stroke
   */
  static final String PINJ = String.valueOf(ZChar.PINJ);

  /**
   * rightwards arrow with tail
   */
  static final String INJ = String.valueOf(ZChar.INJ);

  /**
   * rightwards two-headed arrow with vertical stroke
   */
  static final String PSURJ = String.valueOf(ZChar.PSURJ);

  /**
   * rightwards two-headed arrow
   */
  static final String SURJ = String.valueOf(ZChar.SURJ);

  /**
   * rightwards two-headed arrow with tail
   */
  static final String BIJ = String.valueOf(ZChar.BIJ);

  /**
   * rightwards arrow with double vertical stroke
   */
  static final String FFUN = String.valueOf(ZChar.FFUN);

  /**
   * rightwards arrow with tail with double vertical stroke
   */
  static final String FINJ = String.valueOf(ZChar.FINJ);

  /**
   * double-struck capital Z
   */
  static final String NUM = String.valueOf(ZChar.NUM);

  /**
   * hyphen-minus
   */
  static final String NEG = String.valueOf(ZChar.NEG);

  /**
   * minus sign
   */
  static final String MINUS = String.valueOf(ZChar.MINUS);

  /**
   * less-than or equal to
   */
  static final String LEQ = String.valueOf(ZChar.LEQ);

  /**
   * less-than sign
   */
  static final String LESS = String.valueOf(ZChar.LESS);

  /**
   * greater=than or equal to
   */
  static final String GEQ = String.valueOf(ZChar.GEQ);

  /**
   * greater=than sign
   */
  static final String GREATER = String.valueOf(ZChar.GREATER);

  /**
   * number sign
   */
  static final String NUMBER = String.valueOf(ZChar.NUMBER);

  /**
   * left angle bracket
   */
  static final String LANGLE = String.valueOf(ZChar.LANGLE);

  /**
   * right angle bracket
   */
  static final String RANGLE = String.valueOf(ZChar.RANGLE);

  /**
   * character tie
   */
  static final String CAT = String.valueOf(ZChar.CAT);

  /**
   * upwards harpoon with barb leftwards
   */
  static final String EXTRACT = String.valueOf(ZChar.EXTRACT);

  /**
   * upwards harpoon with barb rightwards
   */
  static final String FILTER = String.valueOf(ZChar.FILTER);
  static final String SUB1 = SE + "1" + NW;
  static final String SUP1 = NE + "1" + SW;
}
