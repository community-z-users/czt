
/**
Copyright 2003 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.util;

/**
 * An interface for commonly used Z characters.
 *
 * @author generated by Gnast XSL script zchar2class.xsl
 */
public interface ZChar
{


  /**
   * Greek capital letter delta.
   */
  char DELTA = '\u0394';

  /**
   * Greek capital letter xi.
   */
  char XI = '\u039E';

  /**
   * Greek small letter theta.
   */
  char THETA = '\u03B8';

  /**
   * Greek small letter lambda.
   */
  char LAMBDA = '\u03BB';

  /**
   * Greek small letter mu.
   */
  char MU = '\u03BC';

  /**
   * double-struck capital A (currently just a strange A).
   */
  char ARITHMOS = '\u0391';

  /**
   * double-struck capital N.
   */
  char NAT = '\u2115';

  /**
   * double-struck capital P.
   */
  char POWER = '\u2119';

  /**
   * prime.
   */
  char PRIME = '\u2032';

  /**
   * exclamation mark.
   */
  char OUTSTROKE = '\u0021';

  /**
   * question mark.
   */
  char INSTROKE = '\u003F';

  /**
   * north east arrow.
   */
  char NE = '\u2197';

  /**
   * south west arrow.
   */
  char SW = '\u2199';

  /**
   * south east arrow.
   */
  char SE = '\u2198';

  /**
   * north west arrow.
   */
  char NW = '\u2196';

  /**
   * low line.
   */
  char LL = '\u005F';

  /**
   * left parenthesis.
   */
  char LPAREN = '\u0028';

  /**
   * right parenthesis.
   */
  char RPAREN = '\u0029';

  /**
   * left square bracket.
   */
  char LSQUARE = '\u005B';

  /**
   * right square bracket.
   */
  char RSQUARE = '\u005D';

  /**
   * left curly bracket.
   */
  char LBRACE = '\u007B';

  /**
   * right curly bracket.
   */
  char RBRACE = '\u007D';

  /**
   * left binding bracket.
   */
  char LBIND = '\u2989';

  /**
   * right binding bracket.
   */
  char RBIND = '\u298A';

  /**
   * mathmatical left double angle bracket.
   */
  char LDATA = '\u27EA';

  /**
   * mathmatical right double angle bracket.
   */
  char RDATA = '\u27EB';

  /**
   * box drawings light horizontal.
   */
  char ZEDCHAR = '\u2500';

  /**
   * box drawings light down.
   */
  char AXCHAR = '\u2577';

  /**
   * box drawings light down and right.
   */
  char SCHCHAR = '\u250C';

  /**
   * box drawings double horizontal.
   */
  char GENCHAR = '\u2550';

  /**
   * paragraph separator.
   */
  char ENDCHAR = '\u2029';

  /**
   * line seperator.
   */
  char NLCHAR = '\u2028';

  /**
   * space.
   */
  char SPACE = '\u0020';

  /**
   * vertical line.
   */
  char VL = '\u007C';

  /**
   * ampersand.
   */
  char AMP = '\u0026';

  /**
   * right tack.
   */
  char VDASH = '\u22A2';

  /**
   * logical and.
   */
  char AND = '\u2227';

  /**
   * logical or.
   */
  char OR = '\u2228';

  /**
   * rightwards double arrow.
   */
  char IMP = '\u21D2';

  /**
   * left right double arrow.
   */
  char IFF = '\u21D4';

  /**
   * not sign.
   */
  char NOT = '\u00AC';

  /**
   * for all.
   */
  char ALL = '\u2200';

  /**
   * there exists.
   */
  char EXI = '\u2203';

  /**
   * multiplication sign.
   */
  char CROSS = '\u00D7';

  /**
   * solidus.
   */
  char SOLIDUS = '\u002F';

  /**
   * equals sign.
   */
  char EQUALS = '\u003D';

  /**
   * element of.
   */
  char MEM = '\u2208';

  /**
   * colon.
   */
  char COLON = '\u003A';

  /**
   * semicolon.
   */
  char SEMICOLON = '\u003B';

  /**
   * comma.
   */
  char COMMA = '\u002C';

  /**
   * full stop.
   */
  char DOT = '\u002E';

  /**
   * Z notation spot.
   */
  char SPOT = '\u2981';

  /**
   * big reverse solidus.
   */
  char ZHIDE = '\u2055';

  /**
   * schema projection.
   */
  char ZPROJ = '\u2A21';

  /**
   * schema composition.
   */
  char ZCOMP = '\u2A1F';

  /**
   * schema piping.
   */
  char ZPIPE = '\u2A20';

  /**
   * plus sign.
   */
  char PLUS = '\u002B';

  /**
   * Z notation type colon.
   */
  char TYPECOLON = '\u2982';

  /**
   * left right arrow.
   */
  char REL = '\u2194';

  /**
   * rightwards arrow.
   */
  char FUN = '\u2192';

  /**
   * not equal to.
   */
  char NEQ = '\u2260';

  /**
   * not an element of.
   */
  char NOTMEM = '\u2209';

  /**
   * empty set.
   */
  char EMPTYSET = '\u2205';

  /**
   * subset of or equal to.
   */
  char SUBSETEQ = '\u2286';

  /**
   * subset of.
   */
  char SUBSET = '\u2282';

  /**
   * union.
   */
  char CUP = '\u222A';

  /**
   * intersection.
   */
  char CAP = '\u2229';

  /**
   * reverse solidus.
   */
  char SETMINUS = '\\';

  /**
   * circled minus.
   */
  char SYMDIFF = '\u2296';

  /**
   * n-ary union.
   */
  char BIGCUP = '\u22C3';

  /**
   * n-ary intersection.
   */
  char BIGCAP = '\u22C2';

  /**
   * mathmematical double-struck capital F (currently just a strange F).
   */
  char FINSET = '\u0396';

  /**
   * rightwards arrow from bar.
   */
  char MAPSTO = '\u21A6';

  /**
   * relational composition.
   */
  char COMP = '\u2A3E';

  /**
   * ring operator.
   */
  char CIRC = '\u2218';

  /**
   * white left-pointing triangle.
   */
  char DRES = '\u25C1';

  /**
   * white right-pointing triangle.
   */
  char RRES = '\u25B7';

  /**
   * domain antirestriction.
   */
  char NDRES = '\u2A64';

  /**
   * range antirestriction.
   */
  char NRRES = '\u2A65';

  /**
   * tilde operator.
   */
  char TILDE = '\u223C';

  /**
   * left image bracket.
   */
  char LIMG = '\u2987';

  /**
   * right image bracket.
   */
  char RIMG = '\u2988';

  /**
   * circled plus.
   */
  char OPLUS = '\u2295';

  /**
   * rightwards arrow with vertical stroke.
   */
  char PFUN = '\u21F8';

  /**
   * rightwards arrow with tail with vertical stroke.
   */
  char PINJ = '\u2914';

  /**
   * rightwards arrow with tail.
   */
  char INJ = '\u21A3';

  /**
   * rightwards two-headed arrow with vertical stroke.
   */
  char PSURJ = '\u2900';

  /**
   * rightwards two-headed arrow.
   */
  char SURJ = '\u21A0';

  /**
   * rightwards two-headed arrow with tail.
   */
  char BIJ = '\u2916';

  /**
   * rightwards arrow with double vertical stroke.
   */
  char FFUN = '\u21FB';

  /**
   * rightwards arrow with tail with double vertical stroke.
   */
  char FINJ = '\u2915';

  /**
   * double-struck capital Z.
   */
  char NUM = '\u2124';

  /**
   * hyphen-minus.
   */
  char NEG = '\u002D';

  /**
   * minus sign.
   */
  char MINUS = '\u2212';

  /**
   * less-than or equal to.
   */
  char LEQ = '\u2264';

  /**
   * less-than sign.
   */
  char LESS = '\u003C';

  /**
   * greater=than or equal to.
   */
  char GEQ = '\u2265';

  /**
   * greater=than sign.
   */
  char GREATER = '\u003E';

  /**
   * number sign.
   */
  char NUMBER = '\u0023';

  /**
   * mathmatical left angle bracket.
   */
  char LANGLE = '\u27E8';

  /**
   * mathmatical right angle bracket.
   */
  char RANGLE = '\u27E9';

  /**
   * character tie.
   */
  char CAT = '\u2040';

  /**
   * upwards harpoon with barb leftwards.
   */
  char EXTRACT = '\u21BF';

  /**
   * upwards harpoon with barb rightwards.
   */
  char FILTER = '\u21BE';
}
