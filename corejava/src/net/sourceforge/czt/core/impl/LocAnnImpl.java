
/*
THIS FILE WAS GENERATED BY GNAST.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

************************************************************

Copyright 2003 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.core.impl;

import java.util.*;
import java.util.logging.*;

import net.sourceforge.czt.core.ast.*;
import net.sourceforge.czt.core.util.*;

/**
 * An implementation of the interface
 * {@link LocAnn}.
 *
 * @author Gnast version 0.1
 */
public class LocAnnImpl
extends TermImpl implements LocAnn
{
  private static final Logger sLogger =
    Logger.getLogger("net.sourceforge.czt.core.impl.LocAnnImpl");

  /**
   * The default constructor.
   *
   * Do not use it explicitly, unless you are extending this class.
   * If you want to create an instance of this class, please use the
   * {@link CoreFactory object factory}.
   */
  protected LocAnnImpl() { }

  /**
   * Compares the specified object with this LocAnnImpl
   * for equality.  Returns true if and only if the specified object is
   * also a(n) LocAnnImpl and all the getter methods except getAnns
   * return equal objects.
   */
  public boolean equals(Object obj)
  {
    if(obj != null &&
       this.getClass().equals(obj.getClass()) &&
       super.equals(obj)) {
      LocAnnImpl object = (LocAnnImpl) obj;
      if((mLoc == null && object.mLoc != null) ||
         (mLoc != null &&
         ! mLoc.equals(object.mLoc))) return false;
      if(mLoc == null && object.mLoc != null)
        return false;
      if((mLine == null && object.mLine != null) ||
         (mLine != null &&
         ! mLine.equals(object.mLine))) return false;
      if(mLine == null && object.mLine != null)
        return false;
      if((mCol == null && object.mCol != null) ||
         (mCol != null &&
         ! mCol.equals(object.mCol))) return false;
      if(mCol == null && object.mCol != null)
        return false;
      return true;
    }
    return false;
  }

  /**
   * Returns the hash code value for this LocAnnImpl.
   * The hash code of a LocAnnImpl is defined to be
   * the result of the following calculation:
   *
   * @czt.todo Write the calculation procedure for method hashCode().
   */
  public int hashCode()
  {
    int hashCode = super.hashCode();
    hashCode += "LocAnnImpl".hashCode();
    if(mLoc != null) {
      hashCode += 31*mLoc.hashCode();
    }
    if(mLine != null) {
      hashCode += 31*mLine.hashCode();
    }
    if(mCol != null) {
      hashCode += 31*mCol.hashCode();
    }
    return hashCode;
  }

  /**
   * Accepts a visitor.
   */
  public Object accept(AstVisitor v) {
    return v.visitLocAnn(this);
  }

  /**
   * Returns a new object of this class.
   */
  public Term create(Object[] args) {
    sLogger.entering("LocAnnImpl", "create", args);
    LocAnn zedObject = null;
    try {
      String loc = (String) args[0];
      Integer line = (Integer) args[1];
      Integer col = (Integer) args[2];
      zedObject = new LocAnnImpl();
      zedObject.setLoc(loc);
      zedObject.setLine(line);
      zedObject.setCol(col);
    } catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException();
    } catch (ClassCastException e) {
      throw new IllegalArgumentException();
    }
    sLogger.exiting("LocAnnImpl", "create", zedObject);
    return zedObject;
  }

  public Object[] getChildren()
  {
    sLogger.entering("LocAnnImpl", "getChildren");
    Object[] erg = { getLoc(), getLine(), getCol() };
    sLogger.exiting("LocAnnImpl", "getChildren", erg);
    return erg;
  }

  private String mLoc;

  public String getLoc()
  {
    return mLoc;
  }

  public void setLoc(String loc)
  {
    mLoc = loc;
  }

  private Integer mLine;

  public Integer getLine()
  {
    return mLine;
  }

  public void setLine(Integer line)
  {
    mLine = line;
  }

  private Integer mCol;

  public Integer getCol()
  {
    return mCol;
  }

  public void setCol(Integer col)
  {
    mCol = col;
  }
}
