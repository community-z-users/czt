
/*
THIS FILE WAS GENERATED BY GNAST.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

************************************************************

Copyright 2003 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
package net.sourceforge.czt.core.util;

import net.sourceforge.czt.core.ast.*;

/**
 * <p>The visitor interface for visiting
 * {@link net.sourceforge.czt.core.ast.Term Z terms}.</p>
 *
 * <p>This interface provides a way of implementing
 * the visitor design pattern.  See, for instance,
 * Erich Gamma, Richard Helm, Ralph Johnson,
 * John Vissides: "Design Patterns : Elements of Reusable Object-Oriented
 * Software." for an introduction to the visitor design
 * pattern.</p>
 *
 * <p>To implement a visitor of the AST for standard Z,
 * the programmer needs to implement all methods of this interface.
 * There is a visit method for each AST interface.  If an AST interface
 * does not have a corresponding create method in the {link CoreFactory},
 * (like, for instance, {link Expr}), none of the
 * {link net.sourceforge.czt.core.ast.impl AST (core) classes}
 * will ever call this method.  However, they may be called by
 * terms defined in one of the Z extensions.
 * For instance, <code>visitExpr(Expr)</code> may be called by an Object Z
 * expression defined in an Object Z extension.</p>
 * 
 * <p>The programmer implementing this interface should think
 * about how to handle possible Z extensions.
 * A visitor implementation
 * may throw an <code>UnsupportedOperationException</code>
 * for all visit methods visiting interfaces without a corresponding
 * create method.  This ensures that only
 * {@link net.sourceforge.czt.core.ast core Z terms}
 * are processed.  Another possibility is to handle Z extensions
 * as good as possible by exploiting the information provided by
 * the core interfaces.</p>
 *
 * @author Gnast version 0.1
 */
public interface AstVisitor
{
  /**
   * Visits a term.
   * @param  zedObject the Term to be visited.
   * @return some kind of <code>Object</code>.
   *
   * @throws UnsupportedOperationException
   *         if the visit method is not supported by this visitor.
   */
  public Object visitTerm(Term zedObject);

  /**
   * Visits an annotated term.
   * @param  zedObject the TermA to be visited.
   * @return some kind of <code>Object</code>.
   *
   * @throws UnsupportedOperationException
   *         if the visit method is not supported by this visitor.
   */
  public Object visitTermA(TermA zedObject);

  /**
   * Visits a(n) Freetype.
   * @param  zedObject the Freetype to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitFreetype(Freetype zedObject);

  /**
   * Visits a(n) Exists1Expr.
   * @param  zedObject the Exists1Expr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitExists1Expr(Exists1Expr zedObject);

  /**
   * Visits a(n) ParenAnn.
   * @param  zedObject the ParenAnn to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitParenAnn(ParenAnn zedObject);

  /**
   * Visits a(n) NameNamePair.
   * @param  zedObject the NameNamePair to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitNameNamePair(NameNamePair zedObject);

  /**
   * Visits a(n) ApplExpr.
   * @param  zedObject the ApplExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitApplExpr(ApplExpr zedObject);

  /**
   * Visits a(n) Pred2.
   * @param  zedObject the Pred2 to be visited.
   * @return some kind of <code>Object</code>.
   * @throws UnsupportedOperationException
   *         if the visit method is not supported by this visitor.
   */
  public Object visitPred2(Pred2 zedObject);

  /**
   * Visits a(n) LetExpr.
   * @param  zedObject the LetExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitLetExpr(LetExpr zedObject);

  /**
   * Visits a(n) Signature.
   * @param  zedObject the Signature to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitSignature(Signature zedObject);

  /**
   * Visits a(n) ConstDecl.
   * @param  zedObject the ConstDecl to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitConstDecl(ConstDecl zedObject);

  /**
   * Visits a(n) NextStroke.
   * @param  zedObject the NextStroke to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitNextStroke(NextStroke zedObject);

  /**
   * Visits a(n) InStroke.
   * @param  zedObject the InStroke to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitInStroke(InStroke zedObject);

  /**
   * Visits a(n) RefName.
   * @param  zedObject the RefName to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitRefName(RefName zedObject);

  /**
   * Visits a(n) MemPred.
   * @param  zedObject the MemPred to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitMemPred(MemPred zedObject);

  /**
   * Visits a(n) ProdType.
   * @param  zedObject the ProdType to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitProdType(ProdType zedObject);

  /**
   * Visits a(n) Decl.
   * @param  zedObject the Decl to be visited.
   * @return some kind of <code>Object</code>.
   * @throws UnsupportedOperationException
   *         if the visit method is not supported by this visitor.
   */
  public Object visitDecl(Decl zedObject);

  /**
   * Visits a(n) ImpliesExpr.
   * @param  zedObject the ImpliesExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitImpliesExpr(ImpliesExpr zedObject);

  /**
   * Visits a(n) MuExpr.
   * @param  zedObject the MuExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitMuExpr(MuExpr zedObject);

  /**
   * Visits a(n) SchExpr2.
   * @param  zedObject the SchExpr2 to be visited.
   * @return some kind of <code>Object</code>.
   * @throws UnsupportedOperationException
   *         if the visit method is not supported by this visitor.
   */
  public Object visitSchExpr2(SchExpr2 zedObject);

  /**
   * Visits a(n) Expr2.
   * @param  zedObject the Expr2 to be visited.
   * @return some kind of <code>Object</code>.
   * @throws UnsupportedOperationException
   *         if the visit method is not supported by this visitor.
   */
  public Object visitExpr2(Expr2 zedObject);

  /**
   * Visits a(n) OrPred.
   * @param  zedObject the OrPred to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitOrPred(OrPred zedObject);

  /**
   * Visits a(n) ExistsExpr.
   * @param  zedObject the ExistsExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitExistsExpr(ExistsExpr zedObject);

  /**
   * Visits a(n) Expr.
   * @param  zedObject the Expr to be visited.
   * @return some kind of <code>Object</code>.
   * @throws UnsupportedOperationException
   *         if the visit method is not supported by this visitor.
   */
  public Object visitExpr(Expr zedObject);

  /**
   * Visits a(n) VarDecl.
   * @param  zedObject the VarDecl to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitVarDecl(VarDecl zedObject);

  /**
   * Visits a(n) QntPred.
   * @param  zedObject the QntPred to be visited.
   * @return some kind of <code>Object</code>.
   * @throws UnsupportedOperationException
   *         if the visit method is not supported by this visitor.
   */
  public Object visitQntPred(QntPred zedObject);

  /**
   * Visits a(n) Type.
   * @param  zedObject the Type to be visited.
   * @return some kind of <code>Object</code>.
   * @throws UnsupportedOperationException
   *         if the visit method is not supported by this visitor.
   */
  public Object visitType(Type zedObject);

  /**
   * Visits a(n) NarrSect.
   * @param  zedObject the NarrSect to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitNarrSect(NarrSect zedObject);

  /**
   * Visits a(n) FreePara.
   * @param  zedObject the FreePara to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitFreePara(FreePara zedObject);

  /**
   * Visits a(n) CompExpr.
   * @param  zedObject the CompExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitCompExpr(CompExpr zedObject);

  /**
   * Visits a(n) BindExpr.
   * @param  zedObject the BindExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitBindExpr(BindExpr zedObject);

  /**
   * Visits a(n) Fact.
   * @param  zedObject the Fact to be visited.
   * @return some kind of <code>Object</code>.
   * @throws UnsupportedOperationException
   *         if the visit method is not supported by this visitor.
   */
  public Object visitFact(Fact zedObject);

  /**
   * Visits a(n) CondExpr.
   * @param  zedObject the CondExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitCondExpr(CondExpr zedObject);

  /**
   * Visits a(n) ForallExpr.
   * @param  zedObject the ForallExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitForallExpr(ForallExpr zedObject);

  /**
   * Visits a(n) NarrPara.
   * @param  zedObject the NarrPara to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitNarrPara(NarrPara zedObject);

  /**
   * Visits a(n) TruePred.
   * @param  zedObject the TruePred to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitTruePred(TruePred zedObject);

  /**
   * Visits a(n) Name.
   * @param  zedObject the Name to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitName(Name zedObject);

  /**
   * Visits a(n) NumExpr.
   * @param  zedObject the NumExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitNumExpr(NumExpr zedObject);

  /**
   * Visits a(n) NameExprPair.
   * @param  zedObject the NameExprPair to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitNameExprPair(NameExprPair zedObject);

  /**
   * Visits a(n) TupleSelExpr.
   * @param  zedObject the TupleSelExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitTupleSelExpr(TupleSelExpr zedObject);

  /**
   * Visits a(n) LambdaExpr.
   * @param  zedObject the LambdaExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitLambdaExpr(LambdaExpr zedObject);

  /**
   * Visits a(n) IffExpr.
   * @param  zedObject the IffExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitIffExpr(IffExpr zedObject);

  /**
   * Visits a(n) IffPred.
   * @param  zedObject the IffPred to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitIffPred(IffPred zedObject);

  /**
   * Visits a(n) FalsePred.
   * @param  zedObject the FalsePred to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitFalsePred(FalsePred zedObject);

  /**
   * Visits a(n) TypeEnvAnn.
   * @param  zedObject the TypeEnvAnn to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitTypeEnvAnn(TypeEnvAnn zedObject);

  /**
   * Visits a(n) QntExpr.
   * @param  zedObject the QntExpr to be visited.
   * @return some kind of <code>Object</code>.
   * @throws UnsupportedOperationException
   *         if the visit method is not supported by this visitor.
   */
  public Object visitQntExpr(QntExpr zedObject);

  /**
   * Visits a(n) UnparsedZSect.
   * @param  zedObject the UnparsedZSect to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitUnparsedZSect(UnparsedZSect zedObject);

  /**
   * Visits a(n) UnparsedPara.
   * @param  zedObject the UnparsedPara to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitUnparsedPara(UnparsedPara zedObject);

  /**
   * Visits a(n) ImpliesPred.
   * @param  zedObject the ImpliesPred to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitImpliesPred(ImpliesPred zedObject);

  /**
   * Visits a(n) NameTypePair.
   * @param  zedObject the NameTypePair to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitNameTypePair(NameTypePair zedObject);

  /**
   * Visits a(n) Sect.
   * @param  zedObject the Sect to be visited.
   * @return some kind of <code>Object</code>.
   * @throws UnsupportedOperationException
   *         if the visit method is not supported by this visitor.
   */
  public Object visitSect(Sect zedObject);

  /**
   * Visits a(n) SchText.
   * @param  zedObject the SchText to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitSchText(SchText zedObject);

  /**
   * Visits a(n) Qnt1Expr.
   * @param  zedObject the Qnt1Expr to be visited.
   * @return some kind of <code>Object</code>.
   * @throws UnsupportedOperationException
   *         if the visit method is not supported by this visitor.
   */
  public Object visitQnt1Expr(Qnt1Expr zedObject);

  /**
   * Visits a(n) ProjExpr.
   * @param  zedObject the ProjExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitProjExpr(ProjExpr zedObject);

  /**
   * Visits a(n) Branch.
   * @param  zedObject the Branch to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitBranch(Branch zedObject);

  /**
   * Visits a(n) TypeAnn.
   * @param  zedObject the TypeAnn to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitTypeAnn(TypeAnn zedObject);

  /**
   * Visits a(n) GenType.
   * @param  zedObject the GenType to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitGenType(GenType zedObject);

  /**
   * Visits a(n) Para.
   * @param  zedObject the Para to be visited.
   * @return some kind of <code>Object</code>.
   * @throws UnsupportedOperationException
   *         if the visit method is not supported by this visitor.
   */
  public Object visitPara(Para zedObject);

  /**
   * Visits a(n) OptempPara.
   * @param  zedObject the OptempPara to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitOptempPara(OptempPara zedObject);

  /**
   * Visits a(n) ExistsPred.
   * @param  zedObject the ExistsPred to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitExistsPred(ExistsPred zedObject);

  /**
   * Visits a(n) NameSectTypeTriple.
   * @param  zedObject the NameSectTypeTriple to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitNameSectTypeTriple(NameSectTypeTriple zedObject);

  /**
   * Visits a(n) Expr1.
   * @param  zedObject the Expr1 to be visited.
   * @return some kind of <code>Object</code>.
   * @throws UnsupportedOperationException
   *         if the visit method is not supported by this visitor.
   */
  public Object visitExpr1(Expr1 zedObject);

  /**
   * Visits a(n) NegPred.
   * @param  zedObject the NegPred to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitNegPred(NegPred zedObject);

  /**
   * Visits a(n) PreExpr.
   * @param  zedObject the PreExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitPreExpr(PreExpr zedObject);

  /**
   * Visits a(n) SectTypeEnvAnn.
   * @param  zedObject the SectTypeEnvAnn to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitSectTypeEnvAnn(SectTypeEnvAnn zedObject);

  /**
   * Visits a(n) ExprPred.
   * @param  zedObject the ExprPred to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitExprPred(ExprPred zedObject);

  /**
   * Visits a(n) GivenType.
   * @param  zedObject the GivenType to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitGivenType(GivenType zedObject);

  /**
   * Visits a(n) InclDecl.
   * @param  zedObject the InclDecl to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitInclDecl(InclDecl zedObject);

  /**
   * Visits a(n) Pred.
   * @param  zedObject the Pred to be visited.
   * @return some kind of <code>Object</code>.
   * @throws UnsupportedOperationException
   *         if the visit method is not supported by this visitor.
   */
  public Object visitPred(Pred zedObject);

  /**
   * Visits a(n) SchemaType.
   * @param  zedObject the SchemaType to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitSchemaType(SchemaType zedObject);

  /**
   * Visits a(n) BindSelExpr.
   * @param  zedObject the BindSelExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitBindSelExpr(BindSelExpr zedObject);

  /**
   * Visits a(n) DeclName.
   * @param  zedObject the DeclName to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitDeclName(DeclName zedObject);

  /**
   * Visits a(n) ForallPred.
   * @param  zedObject the ForallPred to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitForallPred(ForallPred zedObject);

  /**
   * Visits a(n) OrExpr.
   * @param  zedObject the OrExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitOrExpr(OrExpr zedObject);

  /**
   * Visits a(n) Spec.
   * @param  zedObject the Spec to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitSpec(Spec zedObject);

  /**
   * Visits a(n) LocAnn.
   * @param  zedObject the LocAnn to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitLocAnn(LocAnn zedObject);

  /**
   * Visits a(n) PowerExpr.
   * @param  zedObject the PowerExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitPowerExpr(PowerExpr zedObject);

  /**
   * Visits a(n) HideExpr.
   * @param  zedObject the HideExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitHideExpr(HideExpr zedObject);

  /**
   * Visits a(n) GivenPara.
   * @param  zedObject the GivenPara to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitGivenPara(GivenPara zedObject);

  /**
   * Visits a(n) PowerType.
   * @param  zedObject the PowerType to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitPowerType(PowerType zedObject);

  /**
   * Visits a(n) AndExpr.
   * @param  zedObject the AndExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitAndExpr(AndExpr zedObject);

  /**
   * Visits a(n) RenameExpr.
   * @param  zedObject the RenameExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitRenameExpr(RenameExpr zedObject);

  /**
   * Visits a(n) AndPred.
   * @param  zedObject the AndPred to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitAndPred(AndPred zedObject);

  /**
   * Visits a(n) ConjPara.
   * @param  zedObject the ConjPara to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitConjPara(ConjPara zedObject);

  /**
   * Visits a(n) NumStroke.
   * @param  zedObject the NumStroke to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitNumStroke(NumStroke zedObject);

  /**
   * Visits a(n) ZSect.
   * @param  zedObject the ZSect to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitZSect(ZSect zedObject);

  /**
   * Visits a(n) Stroke.
   * @param  zedObject the Stroke to be visited.
   * @return some kind of <code>Object</code>.
   * @throws UnsupportedOperationException
   *         if the visit method is not supported by this visitor.
   */
  public Object visitStroke(Stroke zedObject);

  /**
   * Visits a(n) Expr2N.
   * @param  zedObject the Expr2N to be visited.
   * @return some kind of <code>Object</code>.
   * @throws UnsupportedOperationException
   *         if the visit method is not supported by this visitor.
   */
  public Object visitExpr2N(Expr2N zedObject);

  /**
   * Visits a(n) ThetaExpr.
   * @param  zedObject the ThetaExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitThetaExpr(ThetaExpr zedObject);

  /**
   * Visits a(n) SetExpr.
   * @param  zedObject the SetExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitSetExpr(SetExpr zedObject);

  /**
   * Visits a(n) Expr0N.
   * @param  zedObject the Expr0N to be visited.
   * @return some kind of <code>Object</code>.
   * @throws UnsupportedOperationException
   *         if the visit method is not supported by this visitor.
   */
  public Object visitExpr0N(Expr0N zedObject);

  /**
   * Visits a(n) SetCompExpr.
   * @param  zedObject the SetCompExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitSetCompExpr(SetCompExpr zedObject);

  /**
   * Visits a(n) PipeExpr.
   * @param  zedObject the PipeExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitPipeExpr(PipeExpr zedObject);

  /**
   * Visits a(n) RefExpr.
   * @param  zedObject the RefExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitRefExpr(RefExpr zedObject);

  /**
   * Visits a(n) NegExpr.
   * @param  zedObject the NegExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitNegExpr(NegExpr zedObject);

  /**
   * Visits a(n) ProdExpr.
   * @param  zedObject the ProdExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitProdExpr(ProdExpr zedObject);

  /**
   * Visits a(n) DecorExpr.
   * @param  zedObject the DecorExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitDecorExpr(DecorExpr zedObject);

  /**
   * Visits a(n) OutStroke.
   * @param  zedObject the OutStroke to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitOutStroke(OutStroke zedObject);

  /**
   * Visits a(n) Parent.
   * @param  zedObject the Parent to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitParent(Parent zedObject);

  /**
   * Visits a(n) Exists1Pred.
   * @param  zedObject the Exists1Pred to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitExists1Pred(Exists1Pred zedObject);

  /**
   * Visits a(n) AxPara.
   * @param  zedObject the AxPara to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitAxPara(AxPara zedObject);

  /**
   * Visits a(n) SchExpr.
   * @param  zedObject the SchExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitSchExpr(SchExpr zedObject);

  /**
   * Visits a(n) TupleExpr.
   * @param  zedObject the TupleExpr to be visited.
   * @return some kind of <code>Object</code>.
   */
  public Object visitTupleExpr(TupleExpr zedObject);
}
