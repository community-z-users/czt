
/*
THIS FILE WAS GENERATED BY GNAST.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

************************************************************

Copyright 2003 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.core.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.core.ast.*;

/**
 * The unmarshaller responsible for deserializing XML data.
 *
 * @author Gnast version 0.1
 */
public class JaxbToAst extends ReflectiveVisitor
{
  private static final Logger sLogger =
    Logger.getLogger("net.sourceforge.czt.core.jaxb.JaxbToAst");
  protected CoreFactory mObjectFactory;

  public JaxbToAst()
  {
    mObjectFactory =
      new net.sourceforge.czt.core.impl.CoreFactoryImpl();
  }

  public JaxbToAst(CoreFactory factory)
  {
    mObjectFactory = factory;
  }

  public Object visitObject(Object o) {
    sLogger.fine("Visit " + o.getClass().toString());
    return o;
  }

  public Object visitFreetype(net.sourceforge.czt.core.jaxb.gen.Freetype jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitFreetype", jaxbObject);
    DeclName declName =
      (DeclName) dispatch(jaxbObject.getDeclName());
    java.util.List branch = new java.util.Vector();
    for(Iterator iter=jaxbObject.getBranch().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      branch.add(o);
    }
    Freetype erg = mObjectFactory.createFreetype(declName, branch);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitFreetype", erg);
    return erg;
  }

  public Object visitExists1Expr(net.sourceforge.czt.core.jaxb.gen.Exists1Expr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitExists1Expr", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    Exists1Expr erg = mObjectFactory.createExists1Expr(schText, expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitExists1Expr", erg);
    return erg;
  }

  public Object visitParenAnn(net.sourceforge.czt.core.jaxb.gen.ParenAnn jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitParenAnn", jaxbObject);
    ParenAnn erg = mObjectFactory.createParenAnn();
    sLogger.exiting(this.getClass().toString(), "visitParenAnn", erg);
    return erg;
  }

  public Object visitNameNamePair(net.sourceforge.czt.core.jaxb.gen.NameNamePair jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitNameNamePair", jaxbObject);
    RefName oldName =
      (RefName) dispatch(jaxbObject.getOldName());
    DeclName newName =
      (DeclName) dispatch(jaxbObject.getNewName());
    NameNamePair erg = mObjectFactory.createNameNamePair(oldName, newName);
    sLogger.exiting(this.getClass().toString(), "visitNameNamePair", erg);
    return erg;
  }

  public Object visitApplExpr(net.sourceforge.czt.core.jaxb.gen.ApplExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitApplExpr", jaxbObject);
    Boolean mixfix =
      (Boolean) dispatch(jaxbObject.getMixfix());
    java.util.List expr = new java.util.Vector();
    for(Iterator iter=jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    ApplExpr erg = mObjectFactory.createApplExpr(mixfix, expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitApplExpr", erg);
    return erg;
  }

  public Object visitLetExpr(net.sourceforge.czt.core.jaxb.gen.LetExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitLetExpr", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    LetExpr erg = mObjectFactory.createLetExpr(schText, expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitLetExpr", erg);
    return erg;
  }

  public Object visitSignature(net.sourceforge.czt.core.jaxb.gen.Signature jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitSignature", jaxbObject);
    java.util.List nameTypePair = new java.util.Vector();
    for(Iterator iter=jaxbObject.getNameTypePair().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      nameTypePair.add(o);
    }
    Signature erg = mObjectFactory.createSignature(nameTypePair);
    sLogger.exiting(this.getClass().toString(), "visitSignature", erg);
    return erg;
  }

  public Object visitConstDecl(net.sourceforge.czt.core.jaxb.gen.ConstDecl jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitConstDecl", jaxbObject);
    DeclName declName =
      (DeclName) dispatch(jaxbObject.getDeclName());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    ConstDecl erg = mObjectFactory.createConstDecl(declName, expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitConstDecl", erg);
    return erg;
  }

  public Object visitNextStroke(net.sourceforge.czt.core.jaxb.gen.NextStroke jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitNextStroke", jaxbObject);
    NextStroke erg = mObjectFactory.createNextStroke();
    sLogger.exiting(this.getClass().toString(), "visitNextStroke", erg);
    return erg;
  }

  public Object visitInStroke(net.sourceforge.czt.core.jaxb.gen.InStroke jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitInStroke", jaxbObject);
    InStroke erg = mObjectFactory.createInStroke();
    sLogger.exiting(this.getClass().toString(), "visitInStroke", erg);
    return erg;
  }

  public Object visitRefName(net.sourceforge.czt.core.jaxb.gen.RefName jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitRefName", jaxbObject);
    DeclName decl =
      (DeclName) dispatch(jaxbObject.getDecl());
    String word =
      (String) dispatch(jaxbObject.getWord());
    java.util.List stroke = new java.util.Vector();
    for(Iterator iter=jaxbObject.getStroke().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      stroke.add(o);
    }
    RefName erg = mObjectFactory.createRefName(decl, word, stroke);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitRefName", erg);
    return erg;
  }

  public Object visitMemPred(net.sourceforge.czt.core.jaxb.gen.MemPred jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitMemPred", jaxbObject);
    java.util.List expr = new java.util.Vector();
    for(Iterator iter=jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    Boolean mixfix =
      (Boolean) dispatch(jaxbObject.getMixfix());
    MemPred erg = mObjectFactory.createMemPred(expr, mixfix);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitMemPred", erg);
    return erg;
  }

  public Object visitProdType(net.sourceforge.czt.core.jaxb.gen.ProdType jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitProdType", jaxbObject);
    java.util.List type = new java.util.Vector();
    for(Iterator iter=jaxbObject.getType().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      type.add(o);
    }
    ProdType erg = mObjectFactory.createProdType(type);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitProdType", erg);
    return erg;
  }

  public Object visitImpliesExpr(net.sourceforge.czt.core.jaxb.gen.ImpliesExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitImpliesExpr", jaxbObject);
    java.util.List expr = new java.util.Vector();
    for(Iterator iter=jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    ImpliesExpr erg = mObjectFactory.createImpliesExpr(expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitImpliesExpr", erg);
    return erg;
  }

  public Object visitMuExpr(net.sourceforge.czt.core.jaxb.gen.MuExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitMuExpr", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    MuExpr erg = mObjectFactory.createMuExpr(schText, expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitMuExpr", erg);
    return erg;
  }

  public Object visitOrPred(net.sourceforge.czt.core.jaxb.gen.OrPred jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitOrPred", jaxbObject);
    java.util.List pred = new java.util.Vector();
    for(Iterator iter=jaxbObject.getPred().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      pred.add(o);
    }
    OrPred erg = mObjectFactory.createOrPred(pred);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitOrPred", erg);
    return erg;
  }

  public Object visitExistsExpr(net.sourceforge.czt.core.jaxb.gen.ExistsExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitExistsExpr", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    ExistsExpr erg = mObjectFactory.createExistsExpr(schText, expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitExistsExpr", erg);
    return erg;
  }

  public Object visitVarDecl(net.sourceforge.czt.core.jaxb.gen.VarDecl jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitVarDecl", jaxbObject);
    java.util.List declName = new java.util.Vector();
    for(Iterator iter=jaxbObject.getDeclName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      declName.add(o);
    }
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    VarDecl erg = mObjectFactory.createVarDecl(declName, expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitVarDecl", erg);
    return erg;
  }

  public Object visitNarrSect(net.sourceforge.czt.core.jaxb.gen.NarrSect jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitNarrSect", jaxbObject);
    java.util.List content = new java.util.Vector();
    if(jaxbObject.getContent() != null &&
       jaxbObject.getContent().getContent() != null) {
      for(Iterator iter=jaxbObject.getContent().getContent().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	content.add(o);
      }
    }
    NarrSect erg = mObjectFactory.createNarrSect(content);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitNarrSect", erg);
    return erg;
  }

  public Object visitFreePara(net.sourceforge.czt.core.jaxb.gen.FreePara jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitFreePara", jaxbObject);
    java.util.List freetype = new java.util.Vector();
    for(Iterator iter=jaxbObject.getFreetype().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      freetype.add(o);
    }
    FreePara erg = mObjectFactory.createFreePara(freetype);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitFreePara", erg);
    return erg;
  }

  public Object visitCompExpr(net.sourceforge.czt.core.jaxb.gen.CompExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitCompExpr", jaxbObject);
    java.util.List expr = new java.util.Vector();
    for(Iterator iter=jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    CompExpr erg = mObjectFactory.createCompExpr(expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitCompExpr", erg);
    return erg;
  }

  public Object visitBindExpr(net.sourceforge.czt.core.jaxb.gen.BindExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitBindExpr", jaxbObject);
    java.util.List nameExprPair = new java.util.Vector();
    for(Iterator iter=jaxbObject.getNameExprPair().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      nameExprPair.add(o);
    }
    BindExpr erg = mObjectFactory.createBindExpr(nameExprPair);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitBindExpr", erg);
    return erg;
  }

  public Object visitCondExpr(net.sourceforge.czt.core.jaxb.gen.CondExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitCondExpr", jaxbObject);
    Pred pred =
      (Pred) dispatch(jaxbObject.getPred());
    java.util.List expr = new java.util.Vector();
    for(Iterator iter=jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    CondExpr erg = mObjectFactory.createCondExpr(pred, expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitCondExpr", erg);
    return erg;
  }

  public Object visitForallExpr(net.sourceforge.czt.core.jaxb.gen.ForallExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitForallExpr", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    ForallExpr erg = mObjectFactory.createForallExpr(schText, expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitForallExpr", erg);
    return erg;
  }

  public Object visitNarrPara(net.sourceforge.czt.core.jaxb.gen.NarrPara jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitNarrPara", jaxbObject);
    java.util.List content = new java.util.Vector();
    if(jaxbObject.getContent() != null &&
       jaxbObject.getContent().getContent() != null) {
      for(Iterator iter=jaxbObject.getContent().getContent().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	content.add(o);
      }
    }
    NarrPara erg = mObjectFactory.createNarrPara(content);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitNarrPara", erg);
    return erg;
  }

  public Object visitTruePred(net.sourceforge.czt.core.jaxb.gen.TruePred jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitTruePred", jaxbObject);
    TruePred erg = mObjectFactory.createTruePred();
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitTruePred", erg);
    return erg;
  }

  public Object visitName(net.sourceforge.czt.core.jaxb.gen.Name jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitName", jaxbObject);
    String word =
      (String) dispatch(jaxbObject.getWord());
    java.util.List stroke = new java.util.Vector();
    for(Iterator iter=jaxbObject.getStroke().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      stroke.add(o);
    }
    Name erg = mObjectFactory.createName(word, stroke);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitName", erg);
    return erg;
  }

  public Object visitNumExpr(net.sourceforge.czt.core.jaxb.gen.NumExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitNumExpr", jaxbObject);
    java.math.BigInteger value =
      (java.math.BigInteger) dispatch(jaxbObject.getValue());
    NumExpr erg = mObjectFactory.createNumExpr(value);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitNumExpr", erg);
    return erg;
  }

  public Object visitNameExprPair(net.sourceforge.czt.core.jaxb.gen.NameExprPair jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitNameExprPair", jaxbObject);
    DeclName name =
      (DeclName) dispatch(jaxbObject.getName());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    NameExprPair erg = mObjectFactory.createNameExprPair(name, expr);
    sLogger.exiting(this.getClass().toString(), "visitNameExprPair", erg);
    return erg;
  }

  public Object visitTupleSelExpr(net.sourceforge.czt.core.jaxb.gen.TupleSelExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitTupleSelExpr", jaxbObject);
    Integer select =
      (Integer) dispatch(jaxbObject.getSelect());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    TupleSelExpr erg = mObjectFactory.createTupleSelExpr(select, expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitTupleSelExpr", erg);
    return erg;
  }

  public Object visitLambdaExpr(net.sourceforge.czt.core.jaxb.gen.LambdaExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitLambdaExpr", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    LambdaExpr erg = mObjectFactory.createLambdaExpr(schText, expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitLambdaExpr", erg);
    return erg;
  }

  public Object visitIffExpr(net.sourceforge.czt.core.jaxb.gen.IffExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitIffExpr", jaxbObject);
    java.util.List expr = new java.util.Vector();
    for(Iterator iter=jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    IffExpr erg = mObjectFactory.createIffExpr(expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitIffExpr", erg);
    return erg;
  }

  public Object visitIffPred(net.sourceforge.czt.core.jaxb.gen.IffPred jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitIffPred", jaxbObject);
    java.util.List pred = new java.util.Vector();
    for(Iterator iter=jaxbObject.getPred().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      pred.add(o);
    }
    IffPred erg = mObjectFactory.createIffPred(pred);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitIffPred", erg);
    return erg;
  }

  public Object visitFalsePred(net.sourceforge.czt.core.jaxb.gen.FalsePred jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitFalsePred", jaxbObject);
    FalsePred erg = mObjectFactory.createFalsePred();
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitFalsePred", erg);
    return erg;
  }

  public Object visitTypeEnvAnn(net.sourceforge.czt.core.jaxb.gen.TypeEnvAnn jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitTypeEnvAnn", jaxbObject);
    java.util.List nameTypePair = new java.util.Vector();
    for(Iterator iter=jaxbObject.getNameTypePair().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      nameTypePair.add(o);
    }
    TypeEnvAnn erg = mObjectFactory.createTypeEnvAnn(nameTypePair);
    sLogger.exiting(this.getClass().toString(), "visitTypeEnvAnn", erg);
    return erg;
  }

  public Object visitUnparsedZSect(net.sourceforge.czt.core.jaxb.gen.UnparsedZSect jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitUnparsedZSect", jaxbObject);
    java.util.List content = new java.util.Vector();
    if(jaxbObject.getContent() != null &&
       jaxbObject.getContent().getContent() != null) {
      for(Iterator iter=jaxbObject.getContent().getContent().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	content.add(o);
      }
    }
    UnparsedZSect erg = mObjectFactory.createUnparsedZSect(content);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitUnparsedZSect", erg);
    return erg;
  }

  public Object visitUnparsedPara(net.sourceforge.czt.core.jaxb.gen.UnparsedPara jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitUnparsedPara", jaxbObject);
    java.util.List content = new java.util.Vector();
    if(jaxbObject.getContent() != null &&
       jaxbObject.getContent().getContent() != null) {
      for(Iterator iter=jaxbObject.getContent().getContent().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	content.add(o);
      }
    }
    UnparsedPara erg = mObjectFactory.createUnparsedPara(content);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitUnparsedPara", erg);
    return erg;
  }

  public Object visitImpliesPred(net.sourceforge.czt.core.jaxb.gen.ImpliesPred jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitImpliesPred", jaxbObject);
    java.util.List pred = new java.util.Vector();
    for(Iterator iter=jaxbObject.getPred().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      pred.add(o);
    }
    ImpliesPred erg = mObjectFactory.createImpliesPred(pred);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitImpliesPred", erg);
    return erg;
  }

  public Object visitNameTypePair(net.sourceforge.czt.core.jaxb.gen.NameTypePair jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitNameTypePair", jaxbObject);
    DeclName name =
      (DeclName) dispatch(jaxbObject.getName());
    Type type =
      (Type) dispatch(jaxbObject.getType());
    NameTypePair erg = mObjectFactory.createNameTypePair(name, type);
    sLogger.exiting(this.getClass().toString(), "visitNameTypePair", erg);
    return erg;
  }

  public Object visitSchText(net.sourceforge.czt.core.jaxb.gen.SchText jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitSchText", jaxbObject);
    java.util.List decl = new java.util.Vector();
    for(Iterator iter=jaxbObject.getDecl().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      decl.add(o);
    }
    Pred pred =
      (Pred) dispatch(jaxbObject.getPred());
    SchText erg = mObjectFactory.createSchText(decl, pred);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitSchText", erg);
    return erg;
  }

  public Object visitProjExpr(net.sourceforge.czt.core.jaxb.gen.ProjExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitProjExpr", jaxbObject);
    java.util.List expr = new java.util.Vector();
    for(Iterator iter=jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    ProjExpr erg = mObjectFactory.createProjExpr(expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitProjExpr", erg);
    return erg;
  }

  public Object visitBranch(net.sourceforge.czt.core.jaxb.gen.Branch jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitBranch", jaxbObject);
    DeclName declName =
      (DeclName) dispatch(jaxbObject.getDeclName());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    Branch erg = mObjectFactory.createBranch(declName, expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitBranch", erg);
    return erg;
  }

  public Object visitTypeAnn(net.sourceforge.czt.core.jaxb.gen.TypeAnn jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitTypeAnn", jaxbObject);
    Type type =
      (Type) dispatch(jaxbObject.getType());
    TypeAnn erg = mObjectFactory.createTypeAnn(type);
    sLogger.exiting(this.getClass().toString(), "visitTypeAnn", erg);
    return erg;
  }

  public Object visitGenType(net.sourceforge.czt.core.jaxb.gen.GenType jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitGenType", jaxbObject);
    DeclName name =
      (DeclName) dispatch(jaxbObject.getName());
    GenType erg = mObjectFactory.createGenType(name);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitGenType", erg);
    return erg;
  }

  public Object visitOptempPara(net.sourceforge.czt.core.jaxb.gen.OptempPara jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitOptempPara", jaxbObject);
    java.util.List wordOrOperandOrOperandList = new java.util.Vector();
    for(Iterator iter=jaxbObject.getWordOrOperandOrOperandList().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      wordOrOperandOrOperandList.add(o);
    }
    Cat cat = Cat.fromString(jaxbObject.getCat());
    Assoc assoc = Assoc.fromString(jaxbObject.getAssoc());
    Integer prec =
      (Integer) dispatch(jaxbObject.getPrec());
    OptempPara erg = mObjectFactory.createOptempPara(wordOrOperandOrOperandList, cat, assoc, prec);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitOptempPara", erg);
    return erg;
  }

  public Object visitExistsPred(net.sourceforge.czt.core.jaxb.gen.ExistsPred jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitExistsPred", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Pred pred =
      (Pred) dispatch(jaxbObject.getPred());
    ExistsPred erg = mObjectFactory.createExistsPred(schText, pred);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitExistsPred", erg);
    return erg;
  }

  public Object visitNameSectTypeTriple(net.sourceforge.czt.core.jaxb.gen.NameSectTypeTriple jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitNameSectTypeTriple", jaxbObject);
    DeclName name =
      (DeclName) dispatch(jaxbObject.getName());
    String sect =
      (String) dispatch(jaxbObject.getSect());
    Type type =
      (Type) dispatch(jaxbObject.getType());
    NameSectTypeTriple erg = mObjectFactory.createNameSectTypeTriple(name, sect, type);
    sLogger.exiting(this.getClass().toString(), "visitNameSectTypeTriple", erg);
    return erg;
  }

  public Object visitNegPred(net.sourceforge.czt.core.jaxb.gen.NegPred jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitNegPred", jaxbObject);
    Pred pred =
      (Pred) dispatch(jaxbObject.getPred());
    NegPred erg = mObjectFactory.createNegPred(pred);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitNegPred", erg);
    return erg;
  }

  public Object visitPreExpr(net.sourceforge.czt.core.jaxb.gen.PreExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitPreExpr", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    PreExpr erg = mObjectFactory.createPreExpr(expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitPreExpr", erg);
    return erg;
  }

  public Object visitSectTypeEnvAnn(net.sourceforge.czt.core.jaxb.gen.SectTypeEnvAnn jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitSectTypeEnvAnn", jaxbObject);
    java.util.List nameSectTypeTriple = new java.util.Vector();
    for(Iterator iter=jaxbObject.getNameSectTypeTriple().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      nameSectTypeTriple.add(o);
    }
    SectTypeEnvAnn erg = mObjectFactory.createSectTypeEnvAnn(nameSectTypeTriple);
    sLogger.exiting(this.getClass().toString(), "visitSectTypeEnvAnn", erg);
    return erg;
  }

  public Object visitExprPred(net.sourceforge.czt.core.jaxb.gen.ExprPred jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitExprPred", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    ExprPred erg = mObjectFactory.createExprPred(expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitExprPred", erg);
    return erg;
  }

  public Object visitGivenType(net.sourceforge.czt.core.jaxb.gen.GivenType jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitGivenType", jaxbObject);
    DeclName name =
      (DeclName) dispatch(jaxbObject.getName());
    GivenType erg = mObjectFactory.createGivenType(name);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitGivenType", erg);
    return erg;
  }

  public Object visitInclDecl(net.sourceforge.czt.core.jaxb.gen.InclDecl jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitInclDecl", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    InclDecl erg = mObjectFactory.createInclDecl(expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitInclDecl", erg);
    return erg;
  }

  public Object visitSchemaType(net.sourceforge.czt.core.jaxb.gen.SchemaType jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitSchemaType", jaxbObject);
    Signature signature =
      (Signature) dispatch(jaxbObject.getSignature());
    SchemaType erg = mObjectFactory.createSchemaType(signature);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitSchemaType", erg);
    return erg;
  }

  public Object visitBindSelExpr(net.sourceforge.czt.core.jaxb.gen.BindSelExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitBindSelExpr", jaxbObject);
    RefName name =
      (RefName) dispatch(jaxbObject.getName());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    BindSelExpr erg = mObjectFactory.createBindSelExpr(name, expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitBindSelExpr", erg);
    return erg;
  }

  public Object visitDeclName(net.sourceforge.czt.core.jaxb.gen.DeclName jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitDeclName", jaxbObject);
    String id =
      (String) dispatch(jaxbObject.getId());
    String word =
      (String) dispatch(jaxbObject.getWord());
    java.util.List stroke = new java.util.Vector();
    for(Iterator iter=jaxbObject.getStroke().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      stroke.add(o);
    }
    DeclName erg = mObjectFactory.createDeclName(id, word, stroke);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitDeclName", erg);
    return erg;
  }

  public Object visitForallPred(net.sourceforge.czt.core.jaxb.gen.ForallPred jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitForallPred", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Pred pred =
      (Pred) dispatch(jaxbObject.getPred());
    ForallPred erg = mObjectFactory.createForallPred(schText, pred);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitForallPred", erg);
    return erg;
  }

  public Object visitOrExpr(net.sourceforge.czt.core.jaxb.gen.OrExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitOrExpr", jaxbObject);
    java.util.List expr = new java.util.Vector();
    for(Iterator iter=jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    OrExpr erg = mObjectFactory.createOrExpr(expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitOrExpr", erg);
    return erg;
  }

  public Object visitSpec(net.sourceforge.czt.core.jaxb.gen.Spec jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitSpec", jaxbObject);
    java.util.List sect = new java.util.Vector();
    for(Iterator iter=jaxbObject.getSect().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      sect.add(o);
    }
    Spec erg = mObjectFactory.createSpec(sect);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitSpec", erg);
    return erg;
  }

  public Object visitLocAnn(net.sourceforge.czt.core.jaxb.gen.LocAnn jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitLocAnn", jaxbObject);
    String loc =
      (String) dispatch(jaxbObject.getLoc());
    Integer line =
      (Integer) dispatch(jaxbObject.getLine());
    Integer col =
      (Integer) dispatch(jaxbObject.getCol());
    LocAnn erg = mObjectFactory.createLocAnn(loc, line, col);
    sLogger.exiting(this.getClass().toString(), "visitLocAnn", erg);
    return erg;
  }

  public Object visitPowerExpr(net.sourceforge.czt.core.jaxb.gen.PowerExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitPowerExpr", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    PowerExpr erg = mObjectFactory.createPowerExpr(expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitPowerExpr", erg);
    return erg;
  }

  public Object visitHideExpr(net.sourceforge.czt.core.jaxb.gen.HideExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitHideExpr", jaxbObject);
    java.util.List name = new java.util.Vector();
    for(Iterator iter=jaxbObject.getName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      name.add(o);
    }
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    HideExpr erg = mObjectFactory.createHideExpr(name, expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitHideExpr", erg);
    return erg;
  }

  public Object visitGivenPara(net.sourceforge.czt.core.jaxb.gen.GivenPara jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitGivenPara", jaxbObject);
    java.util.List declName = new java.util.Vector();
    for(Iterator iter=jaxbObject.getDeclName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      declName.add(o);
    }
    GivenPara erg = mObjectFactory.createGivenPara(declName);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitGivenPara", erg);
    return erg;
  }

  public Object visitPowerType(net.sourceforge.czt.core.jaxb.gen.PowerType jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitPowerType", jaxbObject);
    Type type =
      (Type) dispatch(jaxbObject.getType());
    PowerType erg = mObjectFactory.createPowerType(type);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitPowerType", erg);
    return erg;
  }

  public Object visitAndExpr(net.sourceforge.czt.core.jaxb.gen.AndExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitAndExpr", jaxbObject);
    java.util.List expr = new java.util.Vector();
    for(Iterator iter=jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    AndExpr erg = mObjectFactory.createAndExpr(expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitAndExpr", erg);
    return erg;
  }

  public Object visitRenameExpr(net.sourceforge.czt.core.jaxb.gen.RenameExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitRenameExpr", jaxbObject);
    java.util.List nameNamePair = new java.util.Vector();
    for(Iterator iter=jaxbObject.getNameNamePair().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      nameNamePair.add(o);
    }
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    RenameExpr erg = mObjectFactory.createRenameExpr(nameNamePair, expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitRenameExpr", erg);
    return erg;
  }

  public Object visitAndPred(net.sourceforge.czt.core.jaxb.gen.AndPred jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitAndPred", jaxbObject);
    Op op = Op.fromString(jaxbObject.getOp());
    java.util.List pred = new java.util.Vector();
    for(Iterator iter=jaxbObject.getPred().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      pred.add(o);
    }
    AndPred erg = mObjectFactory.createAndPred(op, pred);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitAndPred", erg);
    return erg;
  }

  public Object visitConjPara(net.sourceforge.czt.core.jaxb.gen.ConjPara jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitConjPara", jaxbObject);
    java.util.List declName = new java.util.Vector();
    for(Iterator iter=jaxbObject.getDeclName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      declName.add(o);
    }
    Pred pred =
      (Pred) dispatch(jaxbObject.getPred());
    ConjPara erg = mObjectFactory.createConjPara(declName, pred);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitConjPara", erg);
    return erg;
  }

  public Object visitNumStroke(net.sourceforge.czt.core.jaxb.gen.NumStroke jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitNumStroke", jaxbObject);
    Integer number =
      (Integer) dispatch(jaxbObject.getNumber());
    NumStroke erg = mObjectFactory.createNumStroke(number);
    sLogger.exiting(this.getClass().toString(), "visitNumStroke", erg);
    return erg;
  }

  public Object visitZSect(net.sourceforge.czt.core.jaxb.gen.ZSect jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitZSect", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    java.util.List parent = new java.util.Vector();
    for(Iterator iter=jaxbObject.getParent().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      parent.add(o);
    }
    java.util.List para = new java.util.Vector();
    for(Iterator iter=jaxbObject.getPara().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      para.add(o);
    }
    ZSect erg = mObjectFactory.createZSect(name, parent, para);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitZSect", erg);
    return erg;
  }

  public Object visitThetaExpr(net.sourceforge.czt.core.jaxb.gen.ThetaExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitThetaExpr", jaxbObject);
    java.util.List stroke = new java.util.Vector();
    for(Iterator iter=jaxbObject.getStroke().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      stroke.add(o);
    }
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    ThetaExpr erg = mObjectFactory.createThetaExpr(stroke, expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitThetaExpr", erg);
    return erg;
  }

  public Object visitSetExpr(net.sourceforge.czt.core.jaxb.gen.SetExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitSetExpr", jaxbObject);
    java.util.List expr = new java.util.Vector();
    for(Iterator iter=jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    SetExpr erg = mObjectFactory.createSetExpr(expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitSetExpr", erg);
    return erg;
  }

  public Object visitSetCompExpr(net.sourceforge.czt.core.jaxb.gen.SetCompExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitSetCompExpr", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    SetCompExpr erg = mObjectFactory.createSetCompExpr(schText, expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitSetCompExpr", erg);
    return erg;
  }

  public Object visitPipeExpr(net.sourceforge.czt.core.jaxb.gen.PipeExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitPipeExpr", jaxbObject);
    java.util.List expr = new java.util.Vector();
    for(Iterator iter=jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    PipeExpr erg = mObjectFactory.createPipeExpr(expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitPipeExpr", erg);
    return erg;
  }

  public Object visitRefExpr(net.sourceforge.czt.core.jaxb.gen.RefExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitRefExpr", jaxbObject);
    RefName refName =
      (RefName) dispatch(jaxbObject.getRefName());
    java.util.List expr = new java.util.Vector();
    for(Iterator iter=jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    Boolean mixfix =
      (Boolean) dispatch(jaxbObject.getMixfix());
    RefExpr erg = mObjectFactory.createRefExpr(refName, expr, mixfix);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitRefExpr", erg);
    return erg;
  }

  public Object visitNegExpr(net.sourceforge.czt.core.jaxb.gen.NegExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitNegExpr", jaxbObject);
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    NegExpr erg = mObjectFactory.createNegExpr(expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitNegExpr", erg);
    return erg;
  }

  public Object visitProdExpr(net.sourceforge.czt.core.jaxb.gen.ProdExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitProdExpr", jaxbObject);
    java.util.List expr = new java.util.Vector();
    for(Iterator iter=jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    ProdExpr erg = mObjectFactory.createProdExpr(expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitProdExpr", erg);
    return erg;
  }

  public Object visitDecorExpr(net.sourceforge.czt.core.jaxb.gen.DecorExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitDecorExpr", jaxbObject);
    Stroke stroke =
      (Stroke) dispatch(jaxbObject.getStroke());
    Expr expr =
      (Expr) dispatch(jaxbObject.getExpr());
    DecorExpr erg = mObjectFactory.createDecorExpr(stroke, expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitDecorExpr", erg);
    return erg;
  }

  public Object visitOutStroke(net.sourceforge.czt.core.jaxb.gen.OutStroke jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitOutStroke", jaxbObject);
    OutStroke erg = mObjectFactory.createOutStroke();
    sLogger.exiting(this.getClass().toString(), "visitOutStroke", erg);
    return erg;
  }

  public Object visitParent(net.sourceforge.czt.core.jaxb.gen.Parent jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitParent", jaxbObject);
    String word =
      (String) dispatch(jaxbObject.getWord());
    Parent erg = mObjectFactory.createParent(word);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitParent", erg);
    return erg;
  }

  public Object visitExists1Pred(net.sourceforge.czt.core.jaxb.gen.Exists1Pred jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitExists1Pred", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Pred pred =
      (Pred) dispatch(jaxbObject.getPred());
    Exists1Pred erg = mObjectFactory.createExists1Pred(schText, pred);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitExists1Pred", erg);
    return erg;
  }

  public Object visitAxPara(net.sourceforge.czt.core.jaxb.gen.AxPara jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitAxPara", jaxbObject);
    java.util.List declName = new java.util.Vector();
    for(Iterator iter=jaxbObject.getDeclName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      declName.add(o);
    }
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    Box box = Box.fromString(jaxbObject.getBox());
    AxPara erg = mObjectFactory.createAxPara(declName, schText, box);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitAxPara", erg);
    return erg;
  }

  public Object visitSchExpr(net.sourceforge.czt.core.jaxb.gen.SchExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitSchExpr", jaxbObject);
    SchText schText =
      (SchText) dispatch(jaxbObject.getSchText());
    SchExpr erg = mObjectFactory.createSchExpr(schText);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitSchExpr", erg);
    return erg;
  }

  public Object visitTupleExpr(net.sourceforge.czt.core.jaxb.gen.TupleExpr jaxbObject)
  {
    sLogger.entering(this.getClass().toString(), "visitTupleExpr", jaxbObject);
    java.util.List expr = new java.util.Vector();
    for(Iterator iter=jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    TupleExpr erg = mObjectFactory.createTupleExpr(expr);
    if (jaxbObject.getAnns() != null &&
	jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      for(Iterator iter=jaxbObject.getAnns().getany().iterator(); iter.hasNext();) {
	Object obj = iter.next();
	Object o = dispatch(obj);
	annsList.add(o);
      }
    }
    sLogger.exiting(this.getClass().toString(), "visitTupleExpr", erg);
    return erg;
  }
}
