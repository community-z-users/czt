
/*
THIS FILE WAS GENERATED BY GNAST.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

************************************************************

Copyright 2003 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.core.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.core.jaxb.gen.*;
import org.w3._2001.xmlschema.*;

/**
 * The marshaller responsible for serializing XML data.
 *
 * @author Gnast version 0.1
 */
public class AstToJaxb
  implements net.sourceforge.czt.core.visitor.CoreVisitor,
             net.sourceforge.czt.core.visitor.TermVisitor
{
  private static final Logger sLogger =
    Logger.getLogger("net.sourceforge.czt.core.jaxb.AstToJaxb");

  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  protected net.sourceforge.czt.core.jaxb.gen.ObjectFactory
    mObjectFactory = new net.sourceforge.czt.core.jaxb.gen.ObjectFactory();
  protected net.sourceforge.czt.core.jaxb.gen.ObjectFactory
    mAnnsObjectFactory = new net.sourceforge.czt.core.jaxb.gen.ObjectFactory();
  protected org.w3._2001.xmlschema.ObjectFactory
    mAnyTypeObjectFactory = new org.w3._2001.xmlschema.ObjectFactory();

  /**
   * A map that maps id's to the corresponding Object
   */
  protected Map mHash = new HashMap();

  public Object visitTerm(net.sourceforge.czt.core.ast.Term zedObject)
  {
    throw(new UnsupportedOperationException());
  }


  public Object visitFreetype(net.sourceforge.czt.core.ast.Freetype zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitFreetype", zedObject);

    Freetype jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createFreetypeElement();
      if (zedObject.getDeclName()!=null) {
        jaxbObject.setDeclName((DeclName) zedObject.getDeclName().accept(this));
      }
      {
        java.util.List list = zedObject.getBranch();
        java.util.List newlist = jaxbObject.getBranch();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitFreetype", jaxbObject);
    return jaxbObject;
  }

  public Object visitExists1Expr(net.sourceforge.czt.core.ast.Exists1Expr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitExists1Expr", zedObject);

    Exists1Expr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createExists1Expr();
      if (zedObject.getSchText()!=null) {
        jaxbObject.setSchText((SchText) zedObject.getSchText().accept(this));
      }
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitExists1Expr", jaxbObject);
    return jaxbObject;
  }

  public Object visitParenAnn(net.sourceforge.czt.core.ast.ParenAnn zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitParenAnn", zedObject);

    ParenAnn jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createParenAnn();
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitParenAnn", jaxbObject);
    return jaxbObject;
  }

  public Object visitNameNamePair(net.sourceforge.czt.core.ast.NameNamePair zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNameNamePair", zedObject);

    NameNamePair jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createNameNamePairElement();
      if (zedObject.getOldName()!=null) {
        jaxbObject.setOldName((RefName) zedObject.getOldName().accept(this));
      }
      if (zedObject.getNewName()!=null) {
        jaxbObject.setNewName((DeclName) zedObject.getNewName().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNameNamePair", jaxbObject);
    return jaxbObject;
  }

  public Object visitApplExpr(net.sourceforge.czt.core.ast.ApplExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitApplExpr", zedObject);

    ApplExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createApplExprElement();
      if (zedObject.getMixfix()!=null) {
        jaxbObject.setMixfix(zedObject.getMixfix());
      }
      if (zedObject.getLeftExpr()!=null) {
        jaxbObject.setLeftExpr((Expr) zedObject.getLeftExpr().accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        jaxbObject.setRightExpr((Expr) zedObject.getRightExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitApplExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitLetExpr(net.sourceforge.czt.core.ast.LetExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitLetExpr", zedObject);

    LetExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createLetExpr();
      if (zedObject.getSchText()!=null) {
        jaxbObject.setSchText((SchText) zedObject.getSchText().accept(this));
      }
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitLetExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitSignature(net.sourceforge.czt.core.ast.Signature zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitSignature", zedObject);

    Signature jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createSignatureElement();
      {
        java.util.List list = zedObject.getNameTypePair();
        java.util.List newlist = jaxbObject.getNameTypePair();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitSignature", jaxbObject);
    return jaxbObject;
  }

  public Object visitConstDecl(net.sourceforge.czt.core.ast.ConstDecl zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitConstDecl", zedObject);

    ConstDecl jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createConstDeclElement();
      if (zedObject.getDeclName()!=null) {
        jaxbObject.setDeclName((DeclName) zedObject.getDeclName().accept(this));
      }
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitConstDecl", jaxbObject);
    return jaxbObject;
  }

  public Object visitNextStroke(net.sourceforge.czt.core.ast.NextStroke zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNextStroke", zedObject);

    NextStroke jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createNextStroke();
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNextStroke", jaxbObject);
    return jaxbObject;
  }

  public Object visitInStroke(net.sourceforge.czt.core.ast.InStroke zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitInStroke", zedObject);

    InStroke jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createInStroke();
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitInStroke", jaxbObject);
    return jaxbObject;
  }

  public Object visitRefName(net.sourceforge.czt.core.ast.RefName zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitRefName", zedObject);
    try {
      RefName jaxbObject = mObjectFactory.createRefNameElement();
      if (zedObject.getDecl() != null) {
	String id = zedObject.getDecl().getId();
        sLogger.finer("Retrieve reference " + id);
        DeclName decl = (DeclName) mHash.get(id);
	if(decl == null) {
	  sLogger.warning("Could not find reference " + id);
	}
	jaxbObject.setDecl(decl);
      }
      {
        java.util.List list = zedObject.getAnns();
        if(list.size() > 0) {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
	    mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
            Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
        }
      }
      jaxbObject.setWord((String) zedObject.getWord());
      {
        java.util.List list = zedObject.getStroke();
        java.util.List newlist = jaxbObject.getStroke();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
	  net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          Object o = term.accept(this);
          newlist.add(o);
        }
      }
      sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitRefName", jaxbObject);
      return jaxbObject;
    } catch( Exception e) { e.printStackTrace(); return null; }
  }

  public Object visitMemPred(net.sourceforge.czt.core.ast.MemPred zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitMemPred", zedObject);

    MemPred jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createMemPredElement();
      if (zedObject.getLeftExpr()!=null) {
        jaxbObject.setLeftExpr((Expr) zedObject.getLeftExpr().accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        jaxbObject.setRightExpr((Expr) zedObject.getRightExpr().accept(this));
      }
      if (zedObject.getMixfix()!=null) {
        jaxbObject.setMixfix(zedObject.getMixfix());
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitMemPred", jaxbObject);
    return jaxbObject;
  }

  public Object visitProdType(net.sourceforge.czt.core.ast.ProdType zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitProdType", zedObject);

    ProdType jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createProdTypeElement();
      {
        java.util.List list = zedObject.getType();
        java.util.List newlist = jaxbObject.getType();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitProdType", jaxbObject);
    return jaxbObject;
  }

  public Object visitImpliesExpr(net.sourceforge.czt.core.ast.ImpliesExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitImpliesExpr", zedObject);

    ImpliesExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createImpliesExpr();
      if (zedObject.getLeftExpr()!=null) {
        jaxbObject.setLeftExpr((Expr) zedObject.getLeftExpr().accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        jaxbObject.setRightExpr((Expr) zedObject.getRightExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitImpliesExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitMuExpr(net.sourceforge.czt.core.ast.MuExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitMuExpr", zedObject);

    MuExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createMuExpr();
      if (zedObject.getSchText()!=null) {
        jaxbObject.setSchText((SchText) zedObject.getSchText().accept(this));
      }
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitMuExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitOrPred(net.sourceforge.czt.core.ast.OrPred zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitOrPred", zedObject);

    OrPred jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createOrPred();
      if (zedObject.getLeftPred()!=null) {
        jaxbObject.setLeftPred((Pred) zedObject.getLeftPred().accept(this));
      }
      if (zedObject.getRightPred()!=null) {
        jaxbObject.setRightPred((Pred) zedObject.getRightPred().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitOrPred", jaxbObject);
    return jaxbObject;
  }

  public Object visitExistsExpr(net.sourceforge.czt.core.ast.ExistsExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitExistsExpr", zedObject);

    ExistsExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createExistsExpr();
      if (zedObject.getSchText()!=null) {
        jaxbObject.setSchText((SchText) zedObject.getSchText().accept(this));
      }
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitExistsExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitVarDecl(net.sourceforge.czt.core.ast.VarDecl zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitVarDecl", zedObject);

    VarDecl jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createVarDeclElement();
      {
        java.util.List list = zedObject.getDeclName();
        java.util.List newlist = jaxbObject.getDeclName();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitVarDecl", jaxbObject);
    return jaxbObject;
  }

  public Object visitNarrSect(net.sourceforge.czt.core.ast.NarrSect zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNarrSect", zedObject);

    NarrSect jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createNarrSectElement();
      {
        java.util.List list = zedObject.getContent();
        if(list.size() > 0) {
          AnyType anyType =
	    mAnyTypeObjectFactory.createAnyType();
	  java.util.List newlist = anyType.getContent();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    Object o = iter.next();
	    if (o instanceof net.sourceforge.czt.core.ast.Term) {
	      o = ((net.sourceforge.czt.core.ast.Term) o).accept(this);
	    }
            newlist.add(o);
	  }
	  jaxbObject.setContent(anyType);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNarrSect", jaxbObject);
    return jaxbObject;
  }

  public Object visitFreePara(net.sourceforge.czt.core.ast.FreePara zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitFreePara", zedObject);

    FreePara jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createFreeParaElement();
      {
        java.util.List list = zedObject.getFreetype();
        java.util.List newlist = jaxbObject.getFreetype();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitFreePara", jaxbObject);
    return jaxbObject;
  }

  public Object visitCompExpr(net.sourceforge.czt.core.ast.CompExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitCompExpr", zedObject);

    CompExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createCompExpr();
      if (zedObject.getLeftExpr()!=null) {
        jaxbObject.setLeftExpr((Expr) zedObject.getLeftExpr().accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        jaxbObject.setRightExpr((Expr) zedObject.getRightExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitCompExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitBindExpr(net.sourceforge.czt.core.ast.BindExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitBindExpr", zedObject);

    BindExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createBindExprElement();
      {
        java.util.List list = zedObject.getNameExprPair();
        java.util.List newlist = jaxbObject.getNameExprPair();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitBindExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitCondExpr(net.sourceforge.czt.core.ast.CondExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitCondExpr", zedObject);

    CondExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createCondExprElement();
      if (zedObject.getPred()!=null) {
        jaxbObject.setPred((Pred) zedObject.getPred().accept(this));
      }
      if (zedObject.getLeftExpr()!=null) {
        jaxbObject.setLeftExpr((Expr) zedObject.getLeftExpr().accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        jaxbObject.setRightExpr((Expr) zedObject.getRightExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitCondExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitForallExpr(net.sourceforge.czt.core.ast.ForallExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitForallExpr", zedObject);

    ForallExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createForallExpr();
      if (zedObject.getSchText()!=null) {
        jaxbObject.setSchText((SchText) zedObject.getSchText().accept(this));
      }
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitForallExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitNarrPara(net.sourceforge.czt.core.ast.NarrPara zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNarrPara", zedObject);

    NarrPara jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createNarrParaElement();
      {
        java.util.List list = zedObject.getContent();
        if(list.size() > 0) {
          AnyType anyType =
	    mAnyTypeObjectFactory.createAnyType();
	  java.util.List newlist = anyType.getContent();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    Object o = iter.next();
	    if (o instanceof net.sourceforge.czt.core.ast.Term) {
	      o = ((net.sourceforge.czt.core.ast.Term) o).accept(this);
	    }
            newlist.add(o);
	  }
	  jaxbObject.setContent(anyType);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNarrPara", jaxbObject);
    return jaxbObject;
  }

  public Object visitTruePred(net.sourceforge.czt.core.ast.TruePred zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitTruePred", zedObject);

    TruePred jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createTruePred();
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitTruePred", jaxbObject);
    return jaxbObject;
  }

  public Object visitName(net.sourceforge.czt.core.ast.Name zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitName", zedObject);

    Name jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createNameElement();
      if (zedObject.getWord()!=null) {
        jaxbObject.setWord(zedObject.getWord());
      }
      {
        java.util.List list = zedObject.getStroke();
        java.util.List newlist = jaxbObject.getStroke();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitName", jaxbObject);
    return jaxbObject;
  }

  public Object visitNumExpr(net.sourceforge.czt.core.ast.NumExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNumExpr", zedObject);

    NumExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createNumExprElement();
      if (zedObject.getValue()!=null) {
        jaxbObject.setValue(zedObject.getValue());
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNumExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitNameExprPair(net.sourceforge.czt.core.ast.NameExprPair zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNameExprPair", zedObject);

    NameExprPair jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createNameExprPairElement();
      if (zedObject.getName()!=null) {
        jaxbObject.setName((DeclName) zedObject.getName().accept(this));
      }
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNameExprPair", jaxbObject);
    return jaxbObject;
  }

  public Object visitTupleSelExpr(net.sourceforge.czt.core.ast.TupleSelExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitTupleSelExpr", zedObject);

    TupleSelExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createTupleSelExprElement();
      if (zedObject.getSelect()!=null) {
        jaxbObject.setSelect(zedObject.getSelect());
      }
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitTupleSelExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitLambdaExpr(net.sourceforge.czt.core.ast.LambdaExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitLambdaExpr", zedObject);

    LambdaExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createLambdaExpr();
      if (zedObject.getSchText()!=null) {
        jaxbObject.setSchText((SchText) zedObject.getSchText().accept(this));
      }
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitLambdaExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitIffExpr(net.sourceforge.czt.core.ast.IffExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitIffExpr", zedObject);

    IffExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createIffExpr();
      if (zedObject.getLeftExpr()!=null) {
        jaxbObject.setLeftExpr((Expr) zedObject.getLeftExpr().accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        jaxbObject.setRightExpr((Expr) zedObject.getRightExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitIffExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitIffPred(net.sourceforge.czt.core.ast.IffPred zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitIffPred", zedObject);

    IffPred jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createIffPred();
      if (zedObject.getLeftPred()!=null) {
        jaxbObject.setLeftPred((Pred) zedObject.getLeftPred().accept(this));
      }
      if (zedObject.getRightPred()!=null) {
        jaxbObject.setRightPred((Pred) zedObject.getRightPred().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitIffPred", jaxbObject);
    return jaxbObject;
  }

  public Object visitFalsePred(net.sourceforge.czt.core.ast.FalsePred zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitFalsePred", zedObject);

    FalsePred jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createFalsePred();
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitFalsePred", jaxbObject);
    return jaxbObject;
  }

  public Object visitTypeEnvAnn(net.sourceforge.czt.core.ast.TypeEnvAnn zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitTypeEnvAnn", zedObject);

    TypeEnvAnn jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createTypeEnvAnnElement();
      {
        java.util.List list = zedObject.getNameTypePair();
        java.util.List newlist = jaxbObject.getNameTypePair();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitTypeEnvAnn", jaxbObject);
    return jaxbObject;
  }

  public Object visitUnparsedZSect(net.sourceforge.czt.core.ast.UnparsedZSect zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitUnparsedZSect", zedObject);

    UnparsedZSect jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createUnparsedZSectElement();
      {
        java.util.List list = zedObject.getContent();
        if(list.size() > 0) {
          AnyType anyType =
	    mAnyTypeObjectFactory.createAnyType();
	  java.util.List newlist = anyType.getContent();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    Object o = iter.next();
	    if (o instanceof net.sourceforge.czt.core.ast.Term) {
	      o = ((net.sourceforge.czt.core.ast.Term) o).accept(this);
	    }
            newlist.add(o);
	  }
	  jaxbObject.setContent(anyType);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitUnparsedZSect", jaxbObject);
    return jaxbObject;
  }

  public Object visitUnparsedPara(net.sourceforge.czt.core.ast.UnparsedPara zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitUnparsedPara", zedObject);

    UnparsedPara jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createUnparsedParaElement();
      {
        java.util.List list = zedObject.getContent();
        if(list.size() > 0) {
          AnyType anyType =
	    mAnyTypeObjectFactory.createAnyType();
	  java.util.List newlist = anyType.getContent();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    Object o = iter.next();
	    if (o instanceof net.sourceforge.czt.core.ast.Term) {
	      o = ((net.sourceforge.czt.core.ast.Term) o).accept(this);
	    }
            newlist.add(o);
	  }
	  jaxbObject.setContent(anyType);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitUnparsedPara", jaxbObject);
    return jaxbObject;
  }

  public Object visitImpliesPred(net.sourceforge.czt.core.ast.ImpliesPred zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitImpliesPred", zedObject);

    ImpliesPred jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createImpliesPred();
      if (zedObject.getLeftPred()!=null) {
        jaxbObject.setLeftPred((Pred) zedObject.getLeftPred().accept(this));
      }
      if (zedObject.getRightPred()!=null) {
        jaxbObject.setRightPred((Pred) zedObject.getRightPred().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitImpliesPred", jaxbObject);
    return jaxbObject;
  }

  public Object visitNameTypePair(net.sourceforge.czt.core.ast.NameTypePair zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNameTypePair", zedObject);

    NameTypePair jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createNameTypePairElement();
      if (zedObject.getName()!=null) {
        jaxbObject.setName((DeclName) zedObject.getName().accept(this));
      }
      if (zedObject.getType()!=null) {
        jaxbObject.setType((Type) zedObject.getType().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNameTypePair", jaxbObject);
    return jaxbObject;
  }

  public Object visitSchText(net.sourceforge.czt.core.ast.SchText zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitSchText", zedObject);

    SchText jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createSchTextElement();
      {
        java.util.List list = zedObject.getDecl();
        java.util.List newlist = jaxbObject.getDecl();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
      if (zedObject.getPred()!=null) {
        jaxbObject.setPred((Pred) zedObject.getPred().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitSchText", jaxbObject);
    return jaxbObject;
  }

  public Object visitOperand(net.sourceforge.czt.core.ast.Operand zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitOperand", zedObject);

    Operand jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createOperandElement();
      if (zedObject.getList()!=null) {
        jaxbObject.setList(zedObject.getList());
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitOperand", jaxbObject);
    return jaxbObject;
  }

  public Object visitProjExpr(net.sourceforge.czt.core.ast.ProjExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitProjExpr", zedObject);

    ProjExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createProjExpr();
      if (zedObject.getLeftExpr()!=null) {
        jaxbObject.setLeftExpr((Expr) zedObject.getLeftExpr().accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        jaxbObject.setRightExpr((Expr) zedObject.getRightExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitProjExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitBranch(net.sourceforge.czt.core.ast.Branch zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitBranch", zedObject);

    Branch jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createBranchElement();
      if (zedObject.getDeclName()!=null) {
        jaxbObject.setDeclName((DeclName) zedObject.getDeclName().accept(this));
      }
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitBranch", jaxbObject);
    return jaxbObject;
  }

  public Object visitTypeAnn(net.sourceforge.czt.core.ast.TypeAnn zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitTypeAnn", zedObject);

    TypeAnn jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createTypeAnnElement();
      if (zedObject.getType()!=null) {
        jaxbObject.setType((Type) zedObject.getType().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitTypeAnn", jaxbObject);
    return jaxbObject;
  }

  public Object visitGenType(net.sourceforge.czt.core.ast.GenType zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitGenType", zedObject);

    GenType jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createGenTypeElement();
      if (zedObject.getName()!=null) {
        jaxbObject.setName((DeclName) zedObject.getName().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitGenType", jaxbObject);
    return jaxbObject;
  }

  public Object visitOptempPara(net.sourceforge.czt.core.ast.OptempPara zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitOptempPara", zedObject);

    OptempPara jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createOptempParaElement();
      {
        java.util.List list = zedObject.getWordOrOperand();
        java.util.List newlist = jaxbObject.getWordOrOperand();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
      if (zedObject.getCat()!=null) {
        jaxbObject.setCat(zedObject.getCat().toString());
      }
      if (zedObject.getAssoc()!=null) {
        jaxbObject.setAssoc(zedObject.getAssoc().toString());
      }
      if (zedObject.getPrec()!=null) {
        jaxbObject.setPrec(zedObject.getPrec());
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitOptempPara", jaxbObject);
    return jaxbObject;
  }

  public Object visitExistsPred(net.sourceforge.czt.core.ast.ExistsPred zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitExistsPred", zedObject);

    ExistsPred jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createExistsPred();
      if (zedObject.getSchText()!=null) {
        jaxbObject.setSchText((SchText) zedObject.getSchText().accept(this));
      }
      if (zedObject.getPred()!=null) {
        jaxbObject.setPred((Pred) zedObject.getPred().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitExistsPred", jaxbObject);
    return jaxbObject;
  }

  public Object visitNameSectTypeTriple(net.sourceforge.czt.core.ast.NameSectTypeTriple zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNameSectTypeTriple", zedObject);

    NameSectTypeTriple jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createNameSectTypeTripleElement();
      if (zedObject.getName()!=null) {
        jaxbObject.setName((DeclName) zedObject.getName().accept(this));
      }
      if (zedObject.getSect()!=null) {
        jaxbObject.setSect(zedObject.getSect());
      }
      if (zedObject.getType()!=null) {
        jaxbObject.setType((Type) zedObject.getType().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNameSectTypeTriple", jaxbObject);
    return jaxbObject;
  }

  public Object visitNegPred(net.sourceforge.czt.core.ast.NegPred zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNegPred", zedObject);

    NegPred jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createNegPredElement();
      if (zedObject.getPred()!=null) {
        jaxbObject.setPred((Pred) zedObject.getPred().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNegPred", jaxbObject);
    return jaxbObject;
  }

  public Object visitPreExpr(net.sourceforge.czt.core.ast.PreExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitPreExpr", zedObject);

    PreExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createPreExpr();
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitPreExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitSectTypeEnvAnn(net.sourceforge.czt.core.ast.SectTypeEnvAnn zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitSectTypeEnvAnn", zedObject);

    SectTypeEnvAnn jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createSectTypeEnvAnnElement();
      {
        java.util.List list = zedObject.getNameSectTypeTriple();
        java.util.List newlist = jaxbObject.getNameSectTypeTriple();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitSectTypeEnvAnn", jaxbObject);
    return jaxbObject;
  }

  public Object visitExprPred(net.sourceforge.czt.core.ast.ExprPred zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitExprPred", zedObject);

    ExprPred jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createExprPredElement();
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitExprPred", jaxbObject);
    return jaxbObject;
  }

  public Object visitGivenType(net.sourceforge.czt.core.ast.GivenType zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitGivenType", zedObject);

    GivenType jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createGivenTypeElement();
      if (zedObject.getName()!=null) {
        jaxbObject.setName((DeclName) zedObject.getName().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitGivenType", jaxbObject);
    return jaxbObject;
  }

  public Object visitInclDecl(net.sourceforge.czt.core.ast.InclDecl zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitInclDecl", zedObject);

    InclDecl jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createInclDeclElement();
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitInclDecl", jaxbObject);
    return jaxbObject;
  }

  public Object visitSchemaType(net.sourceforge.czt.core.ast.SchemaType zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitSchemaType", zedObject);

    SchemaType jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createSchemaTypeElement();
      if (zedObject.getSignature()!=null) {
        jaxbObject.setSignature((Signature) zedObject.getSignature().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitSchemaType", jaxbObject);
    return jaxbObject;
  }

  public Object visitBindSelExpr(net.sourceforge.czt.core.ast.BindSelExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitBindSelExpr", zedObject);

    BindSelExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createBindSelExprElement();
      if (zedObject.getName()!=null) {
        jaxbObject.setName((RefName) zedObject.getName().accept(this));
      }
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitBindSelExpr", jaxbObject);
    return jaxbObject;
  }

  public java.lang.Object visitDeclName(net.sourceforge.czt.core.ast.DeclName zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitDeclName", zedObject);
    try {
      DeclName jaxbObject = mObjectFactory.createDeclNameElement();
      if (zedObject.getId() != null) {
        sLogger.finest("Setting Id to " + zedObject.getId().toString());
	jaxbObject.setId(zedObject.getId());
        sLogger.finer("Hashing " + zedObject.getId());
        mHash.put(zedObject.getId(), jaxbObject);
      }
      {
        java.util.List list = zedObject.getAnns();
        if(list.size() > 0) {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
	    mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
            Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
        }
      }
      sLogger.finest("Setting Word to " + zedObject.getWord().toString());
      jaxbObject.setWord(zedObject.getWord());
      {
        java.util.List list = zedObject.getStroke();
        sLogger.finest("Setting strokes " + list.toString());
        java.util.List newlist = jaxbObject.getStroke();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
	  net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          Object o = term.accept(this);
          newlist.add(o);
        }
      }
      sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitDeclName", jaxbObject);
      return jaxbObject;
    } catch( Exception e) { e.printStackTrace(); return null; }
  }

  public Object visitForallPred(net.sourceforge.czt.core.ast.ForallPred zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitForallPred", zedObject);

    ForallPred jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createForallPred();
      if (zedObject.getSchText()!=null) {
        jaxbObject.setSchText((SchText) zedObject.getSchText().accept(this));
      }
      if (zedObject.getPred()!=null) {
        jaxbObject.setPred((Pred) zedObject.getPred().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitForallPred", jaxbObject);
    return jaxbObject;
  }

  public Object visitOrExpr(net.sourceforge.czt.core.ast.OrExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitOrExpr", zedObject);

    OrExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createOrExpr();
      if (zedObject.getLeftExpr()!=null) {
        jaxbObject.setLeftExpr((Expr) zedObject.getLeftExpr().accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        jaxbObject.setRightExpr((Expr) zedObject.getRightExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitOrExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitSpec(net.sourceforge.czt.core.ast.Spec zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitSpec", zedObject);

    Spec jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createSpecElement();
      {
        java.util.List list = zedObject.getSect();
        java.util.List newlist = jaxbObject.getSect();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
      if (zedObject.getVersion()!=null) {
        jaxbObject.setVersion(zedObject.getVersion());
      }
      if (zedObject.getAuthor()!=null) {
        jaxbObject.setAuthor(zedObject.getAuthor());
      }
      if (zedObject.getModified()!=null) {
        jaxbObject.setModified(zedObject.getModified());
      }
      if (zedObject.getSource()!=null) {
        jaxbObject.setSource(zedObject.getSource());
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitSpec", jaxbObject);
    return jaxbObject;
  }

  public Object visitLocAnn(net.sourceforge.czt.core.ast.LocAnn zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitLocAnn", zedObject);

    LocAnn jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createLocAnnElement();
      if (zedObject.getLoc()!=null) {
        jaxbObject.setLoc(zedObject.getLoc());
      }
      if (zedObject.getLine()!=null) {
        jaxbObject.setLine(zedObject.getLine());
      }
      if (zedObject.getCol()!=null) {
        jaxbObject.setCol(zedObject.getCol());
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitLocAnn", jaxbObject);
    return jaxbObject;
  }

  public Object visitPowerExpr(net.sourceforge.czt.core.ast.PowerExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitPowerExpr", zedObject);

    PowerExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createPowerExpr();
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitPowerExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitHideExpr(net.sourceforge.czt.core.ast.HideExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitHideExpr", zedObject);

    HideExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createHideExprElement();
      {
        java.util.List list = zedObject.getName();
        java.util.List newlist = jaxbObject.getName();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitHideExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitGivenPara(net.sourceforge.czt.core.ast.GivenPara zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitGivenPara", zedObject);

    GivenPara jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createGivenParaElement();
      {
        java.util.List list = zedObject.getDeclName();
        java.util.List newlist = jaxbObject.getDeclName();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitGivenPara", jaxbObject);
    return jaxbObject;
  }

  public Object visitPowerType(net.sourceforge.czt.core.ast.PowerType zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitPowerType", zedObject);

    PowerType jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createPowerTypeElement();
      if (zedObject.getType()!=null) {
        jaxbObject.setType((Type) zedObject.getType().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitPowerType", jaxbObject);
    return jaxbObject;
  }

  public Object visitAndExpr(net.sourceforge.czt.core.ast.AndExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitAndExpr", zedObject);

    AndExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createAndExpr();
      if (zedObject.getLeftExpr()!=null) {
        jaxbObject.setLeftExpr((Expr) zedObject.getLeftExpr().accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        jaxbObject.setRightExpr((Expr) zedObject.getRightExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitAndExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitRenameExpr(net.sourceforge.czt.core.ast.RenameExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitRenameExpr", zedObject);

    RenameExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createRenameExprElement();
      {
        java.util.List list = zedObject.getNameNamePair();
        java.util.List newlist = jaxbObject.getNameNamePair();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitRenameExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitAndPred(net.sourceforge.czt.core.ast.AndPred zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitAndPred", zedObject);

    AndPred jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createAndPredElement();
      if (zedObject.getOp()!=null) {
        jaxbObject.setOp(zedObject.getOp().toString());
      }
      if (zedObject.getLeftPred()!=null) {
        jaxbObject.setLeftPred((Pred) zedObject.getLeftPred().accept(this));
      }
      if (zedObject.getRightPred()!=null) {
        jaxbObject.setRightPred((Pred) zedObject.getRightPred().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitAndPred", jaxbObject);
    return jaxbObject;
  }

  public Object visitConjPara(net.sourceforge.czt.core.ast.ConjPara zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitConjPara", zedObject);

    ConjPara jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createConjParaElement();
      {
        java.util.List list = zedObject.getDeclName();
        java.util.List newlist = jaxbObject.getDeclName();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
      if (zedObject.getPred()!=null) {
        jaxbObject.setPred((Pred) zedObject.getPred().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitConjPara", jaxbObject);
    return jaxbObject;
  }

  public Object visitNumStroke(net.sourceforge.czt.core.ast.NumStroke zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNumStroke", zedObject);

    NumStroke jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createNumStrokeElement();
      if (zedObject.getNumber()!=null) {
        jaxbObject.setNumber(zedObject.getNumber());
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNumStroke", jaxbObject);
    return jaxbObject;
  }

  public Object visitZSect(net.sourceforge.czt.core.ast.ZSect zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitZSect", zedObject);

    ZSect jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createZSectElement();
      if (zedObject.getName()!=null) {
        jaxbObject.setName(zedObject.getName());
      }
      {
        java.util.List list = zedObject.getParent();
        java.util.List newlist = jaxbObject.getParent();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
      {
        java.util.List list = zedObject.getPara();
        java.util.List newlist = jaxbObject.getPara();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitZSect", jaxbObject);
    return jaxbObject;
  }

  public Object visitThetaExpr(net.sourceforge.czt.core.ast.ThetaExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitThetaExpr", zedObject);

    ThetaExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createThetaExprElement();
      {
        java.util.List list = zedObject.getStroke();
        java.util.List newlist = jaxbObject.getStroke();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitThetaExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitSetExpr(net.sourceforge.czt.core.ast.SetExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitSetExpr", zedObject);

    SetExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createSetExpr();
      {
        java.util.List list = zedObject.getExpr();
        java.util.List newlist = jaxbObject.getExpr();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitSetExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitSetCompExpr(net.sourceforge.czt.core.ast.SetCompExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitSetCompExpr", zedObject);

    SetCompExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createSetCompExpr();
      if (zedObject.getSchText()!=null) {
        jaxbObject.setSchText((SchText) zedObject.getSchText().accept(this));
      }
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitSetCompExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitPipeExpr(net.sourceforge.czt.core.ast.PipeExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitPipeExpr", zedObject);

    PipeExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createPipeExpr();
      if (zedObject.getLeftExpr()!=null) {
        jaxbObject.setLeftExpr((Expr) zedObject.getLeftExpr().accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        jaxbObject.setRightExpr((Expr) zedObject.getRightExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitPipeExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitRefExpr(net.sourceforge.czt.core.ast.RefExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitRefExpr", zedObject);

    RefExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createRefExprElement();
      if (zedObject.getRefName()!=null) {
        jaxbObject.setRefName((RefName) zedObject.getRefName().accept(this));
      }
      {
        java.util.List list = zedObject.getExpr();
        java.util.List newlist = jaxbObject.getExpr();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
      if (zedObject.getMixfix()!=null) {
        jaxbObject.setMixfix(zedObject.getMixfix());
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitRefExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitNegExpr(net.sourceforge.czt.core.ast.NegExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNegExpr", zedObject);

    NegExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createNegExpr();
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitNegExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitProdExpr(net.sourceforge.czt.core.ast.ProdExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitProdExpr", zedObject);

    ProdExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createProdExpr();
      {
        java.util.List list = zedObject.getExpr();
        java.util.List newlist = jaxbObject.getExpr();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitProdExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitDecorExpr(net.sourceforge.czt.core.ast.DecorExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitDecorExpr", zedObject);

    DecorExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createDecorExprElement();
      if (zedObject.getStroke()!=null) {
        jaxbObject.setStroke((Stroke) zedObject.getStroke().accept(this));
      }
      if (zedObject.getExpr()!=null) {
        jaxbObject.setExpr((Expr) zedObject.getExpr().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitDecorExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitOutStroke(net.sourceforge.czt.core.ast.OutStroke zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitOutStroke", zedObject);

    OutStroke jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createOutStroke();
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitOutStroke", jaxbObject);
    return jaxbObject;
  }

  public Object visitParent(net.sourceforge.czt.core.ast.Parent zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitParent", zedObject);

    Parent jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createParentElement();
      if (zedObject.getWord()!=null) {
        jaxbObject.setWord(zedObject.getWord());
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitParent", jaxbObject);
    return jaxbObject;
  }

  public Object visitExists1Pred(net.sourceforge.czt.core.ast.Exists1Pred zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitExists1Pred", zedObject);

    Exists1Pred jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createExists1Pred();
      if (zedObject.getSchText()!=null) {
        jaxbObject.setSchText((SchText) zedObject.getSchText().accept(this));
      }
      if (zedObject.getPred()!=null) {
        jaxbObject.setPred((Pred) zedObject.getPred().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitExists1Pred", jaxbObject);
    return jaxbObject;
  }

  public Object visitAxPara(net.sourceforge.czt.core.ast.AxPara zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitAxPara", zedObject);

    AxPara jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createAxParaElement();
      {
        java.util.List list = zedObject.getDeclName();
        java.util.List newlist = jaxbObject.getDeclName();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
      if (zedObject.getSchText()!=null) {
        jaxbObject.setSchText((SchText) zedObject.getSchText().accept(this));
      }
      if (zedObject.getBox()!=null) {
        jaxbObject.setBox(zedObject.getBox().toString());
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitAxPara", jaxbObject);
    return jaxbObject;
  }

  public Object visitSchExpr(net.sourceforge.czt.core.ast.SchExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitSchExpr", zedObject);

    SchExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createSchExprElement();
      if (zedObject.getSchText()!=null) {
        jaxbObject.setSchText((SchText) zedObject.getSchText().accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitSchExpr", jaxbObject);
    return jaxbObject;
  }

  public Object visitTupleExpr(net.sourceforge.czt.core.ast.TupleExpr zedObject)
  {
    sLogger.entering("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitTupleExpr", zedObject);

    TupleExpr jaxbObject = null;
    try {
      jaxbObject = mObjectFactory.createTupleExpr();
      {
        java.util.List list = zedObject.getExpr();
        java.util.List newlist = jaxbObject.getExpr();
        for(Iterator iter=list.iterator(); iter.hasNext();) {
          net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
          java.lang.Object o = term.accept(this);
	  newlist.add(o);
        }
      }
    } catch(Exception e) { e.printStackTrace(); }
    if (zedObject.getAnns() != null) {
      java.util.List list = zedObject.getAnns();
      if(list.size() > 0) {
	try {
	  net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType anns =
			   mAnnsObjectFactory.createTermAAnnsType();
	  java.util.List newlist = anns.getany();
	  for(Iterator iter=list.iterator(); iter.hasNext();) {
	    net.sourceforge.czt.core.ast.Term term = (net.sourceforge.czt.core.ast.Term) iter.next();
	    Object o = term.accept(this);
	    newlist.add(o);
	  }
	  jaxbObject.setAnns(anns);
	} catch(Exception e) { e.printStackTrace(); return null; }
      }
    }

    sLogger.exiting("net.sourceforge.czt.core.jaxb.AstToJaxb", "visitTupleExpr", jaxbObject);
    return jaxbObject;
  }
}
