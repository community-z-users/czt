//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.1-05/30/2003 05:06 AM(java_re)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2003.08.25 at 04:40:49 NZST 
//


package net.sourceforge.czt.core.jaxb.gen.impl;

public class RefExprImpl
    extends net.sourceforge.czt.core.jaxb.gen.impl.ExprImpl
    implements net.sourceforge.czt.core.jaxb.gen.RefExpr, com.sun.xml.bind.JAXBObject, net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallableObject, net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializable, net.sourceforge.czt.core.jaxb.gen.impl.runtime.ValidatableObject
{

    protected java.lang.Boolean _Mixfix;
    protected com.sun.xml.bind.util.ListImpl _Expr = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    protected net.sourceforge.czt.core.jaxb.gen.RefName _RefName;
    public final static java.lang.Class version = (net.sourceforge.czt.core.jaxb.gen.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (net.sourceforge.czt.core.jaxb.gen.RefExpr.class);
    }

    public java.lang.Boolean getMixfix() {
        if (_Mixfix == null) {
            return net.sourceforge.czt.core.jaxb.CztDatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("false"));
        } else {
            return _Mixfix;
        }
    }

    public void setMixfix(java.lang.Boolean value) {
        _Mixfix = value;
    }

    public java.util.List getExpr() {
        return _Expr;
    }

    public net.sourceforge.czt.core.jaxb.gen.RefName getRefName() {
        return _RefName;
    }

    public void setRefName(net.sourceforge.czt.core.jaxb.gen.RefName value) {
        _RefName = value;
    }

    public net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingEventHandler createUnmarshaller(net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingContext context) {
        return new net.sourceforge.czt.core.jaxb.gen.impl.RefExprImpl.Unmarshaller(context);
    }

    public void serializeElementBody(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = _Expr.size();
        super.serializeElementBody(context);
        if (_RefName instanceof javax.xml.bind.Element) {
            context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _RefName));
        } else {
            context.startElement("http://czt.sourceforge.net/zml", "RefName");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _RefName));
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _RefName));
            context.endAttributes();
            context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _RefName));
            context.endElement();
        }
        while (idx2 != len2) {
            context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Expr.get(idx2 ++)));
        }
    }

    public void serializeAttributes(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = _Expr.size();
        if (_Mixfix!= null) {
            context.startAttribute("", "Mixfix");
            try {
                context.text(net.sourceforge.czt.core.jaxb.CztDatatypeConverter.printBoolean(((java.lang.Boolean) _Mixfix)));
            } catch (java.lang.Exception e) {
                net.sourceforge.czt.core.jaxb.gen.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        super.serializeAttributes(context);
        while (idx2 != len2) {
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Expr.get(idx2 ++)));
        }
    }

    public void serializeAttributeBody(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = _Expr.size();
        super.serializeAttributeBody(context);
        if (_RefName instanceof javax.xml.bind.Element) {
            context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _RefName));
        } else {
            context.startElement("http://czt.sourceforge.net/zml", "RefName");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _RefName));
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _RefName));
            context.endAttributes();
            context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _RefName));
            context.endElement();
        }
        while (idx2 != len2) {
            context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Expr.get(idx2 ++)));
        }
    }

    public void serializeURIs(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = _Expr.size();
        super.serializeURIs(context);
        while (idx2 != len2) {
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Expr.get(idx2 ++)));
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (net.sourceforge.czt.core.jaxb.gen.RefExpr.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava"
+"/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp6\u00a7\u00c1\u001eppsq\u0000~\u0000\u00005\u008dm\u0094ppsq\u0000~\u0000\u0000\u0004"
+"\u0097\u0018#ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001\u0001\u0087\u00b2\u00bfp"
+"psr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tna"
+"meClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.gra"
+"mmar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fco"
+"ntentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0001\u0087\u00b2\u00b4sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005"
+"valuexp\u0000p\u0000sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9pp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsr\u0000 com.sun.msv.grammar.O"
+"neOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsr\u0000 com.sun.msv.grammar.Attr"
+"ibuteExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u000bxq\u0000~\u0000\u0003\u0001\u0087\u00b2\u0090q\u0000~"
+"\u0000\u000fpsr\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\bsq\u0000~\u0000\u000e\u0001q\u0000~\u0000\u0018sr\u0000 com.sun.msv.grammar.AnyNam"
+"eClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\tq\u0000~\u0000\u0019q\u0000~\u0000\u001esr\u0000#com.sun.msv.grammar.SimpleName"
+"Class\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespac"
+"eURIq\u0000~\u0000 xq\u0000~\u0000\u001bt\u00000net.sourceforge.czt.core.jaxb.gen.TermA.An"
+"nsTypet\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u001ft\u0000"
+"\u0004Annst\u0000\u001ehttp://czt.sourceforge.net/zmlq\u0000~\u0000\u001esq\u0000~\u0000\b\u0003\u000fe_ppsq\u0000~\u0000"
+"\n\u0001\u0087\u00b2\u00b4pp\u0000sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9pp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q"
+"\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000)net.sourceforge.czt.core.jaxb.g"
+"en.RefNameq\u0000~\u0000#sq\u0000~\u0000\u001ft\u0000\u0007RefNameq\u0000~\u0000&sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9pp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009ep"
+"psq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00000net"
+".sourceforge.czt.core.jaxb.gen.RefNameElementq\u0000~\u0000#sq\u0000~\u0000\b0\u00f6Ul"
+"ppsq\u0000~\u0000\u00120\u00f6Uaq\u0000~\u0000\u000fpsq\u0000~\u0000\b0\u00f6U^q\u0000~\u0000\u000fpsq\u0000~\u0000\b/n\u00a2\u00b3q\u0000~\u0000\u000fpsq\u0000~\u0000\b-\u00e6\u00f0\b"
+"q\u0000~\u0000\u000fpsq\u0000~\u0000\b,_=]q\u0000~\u0000\u000fpsq\u0000~\u0000\b*\u00d7\u008a\u00b2q\u0000~\u0000\u000fpsq\u0000~\u0000\b)O\u00d8\u0007q\u0000~\u0000\u000fpsq\u0000~\u0000\b"
+"\'\u00c8%\\q\u0000~\u0000\u000fpsq\u0000~\u0000\b&@r\u00b1q\u0000~\u0000\u000fpsq\u0000~\u0000\b$\u00b8\u00c0\u0006q\u0000~\u0000\u000fpsq\u0000~\u0000\b#1\r[q\u0000~\u0000\u000fpsq"
+"\u0000~\u0000\b!\u00a9Z\u00b0q\u0000~\u0000\u000fpsq\u0000~\u0000\b !\u00a8\u0005q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u001e\u0099\u00f5Zq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u001d\u0012B\u00afq\u0000~\u0000"
+"\u000fpsq\u0000~\u0000\b\u001b\u008a\u0090\u0004q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u001a\u0002\u00ddYq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0018{*\u00aeq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0016\u00f3x\u0003"
+"q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0015k\u00c5Xq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0013\u00e4\u0012\u00adq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0012\\`\u0002q\u0000~\u0000\u000fpsq\u0000~\u0000\b"
+"\u0010\u00d4\u00adWq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u000fL\u00fa\u00acq\u0000~\u0000\u000fpsq\u0000~\u0000\b\r\u00c5H\u0001q\u0000~\u0000\u000fpsq\u0000~\u0000\b\f=\u0095Vq\u0000~\u0000\u000fpsq"
+"\u0000~\u0000\b\n\u00b5\u00e2\u00abq\u0000~\u0000\u000fpsq\u0000~\u0000\b\t.0\u0000q\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0007\u00a6}Uq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0006\u001e\u00ca\u00aaq\u0000~\u0000"
+"\u000fpsq\u0000~\u0000\b\u0004\u0097\u0017\u00ffq\u0000~\u0000\u000fpsq\u0000~\u0000\b\u0003\u000feTq\u0000~\u0000\u000fpsq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2"
+"\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00004n"
+"et.sourceforge.czt.core.jaxb.gen.BindSelExprElementq\u0000~\u0000#sq\u0000~"
+"\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~"
+"\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00002net.sourceforge.czt.core.jaxb.gen.Decor"
+"ExprElementq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000f"
+"psq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00001net.sourceforge.czt"
+".core.jaxb.gen.HideExprElementq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087"
+"\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000)"
+"net.sourceforge.czt.core.jaxb.gen.NegExprq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000"
+"\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~"
+"\u0000\u001esq\u0000~\u0000\u001ft\u0000+net.sourceforge.czt.core.jaxb.gen.PowerExprq\u0000~\u0000#s"
+"q\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fp"
+"q\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000)net.sourceforge.czt.core.jaxb.gen.Pr"
+"eExprq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000"
+"\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00003net.sourceforge.czt.core."
+"jaxb.gen.RenameExprElementq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009epp"
+"sq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00002net."
+"sourceforge.czt.core.jaxb.gen.ThetaExprElementq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2"
+"\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~"
+"\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00005net.sourceforge.czt.core.jaxb.gen.TupleSelEx"
+"prElementq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fps"
+"q\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000*net.sourceforge.czt.c"
+"ore.jaxb.gen.CompExprq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000"
+"\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000*net.sourc"
+"eforge.czt.core.jaxb.gen.PipeExprq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000"
+"\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001f"
+"t\u0000*net.sourceforge.czt.core.jaxb.gen.ProjExprq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9"
+"q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000"
+"\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000)net.sourceforge.czt.core.jaxb.gen.AndExprq\u0000~\u0000"
+"#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000"
+"\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000(net.sourceforge.czt.core.jaxb.gen."
+"OrExprq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~"
+"\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000-net.sourceforge.czt.core"
+".jaxb.gen.ImpliesExprq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000"
+"\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000)net.sourc"
+"eforge.czt.core.jaxb.gen.IffExprq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b"
+"\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft"
+"\u00001net.sourceforge.czt.core.jaxb.gen.ApplExprElementq\u0000~\u0000#sq\u0000~"
+"\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~"
+"\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000*net.sourceforge.czt.core.jaxb.gen.ProdE"
+"xprq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001"
+"\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000+net.sourceforge.czt.core.ja"
+"xb.gen.TupleExprq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093"
+"q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000)net.sourceforg"
+"e.czt.core.jaxb.gen.SetExprq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009ep"
+"psq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000,net"
+".sourceforge.czt.core.jaxb.gen.ExistsExprq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000"
+"\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~"
+"\u0000\u001esq\u0000~\u0000\u001ft\u0000-net.sourceforge.czt.core.jaxb.gen.Exists1Exprq\u0000~\u0000"
+"#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000"
+"\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000,net.sourceforge.czt.core.jaxb.gen."
+"ForallExprq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fp"
+"sq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000,net.sourceforge.czt."
+"core.jaxb.gen.LambdaExprq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq"
+"\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000)net.so"
+"urceforge.czt.core.jaxb.gen.LetExprq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000"
+"~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~"
+"\u0000\u001ft\u0000(net.sourceforge.czt.core.jaxb.gen.MuExprq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9"
+"q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000"
+"\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000-net.sourceforge.czt.core.jaxb.gen.SetCompExpr"
+"q\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090"
+"q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00001net.sourceforge.czt.core.jaxb."
+"gen.BindExprElementq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001"
+"\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00001net.sourcef"
+"orge.czt.core.jaxb.gen.CondExprElementq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000"
+"sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001es"
+"q\u0000~\u0000\u001ft\u00000net.sourceforge.czt.core.jaxb.gen.NumExprElementq\u0000~\u0000"
+"#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000"
+"\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00000net.sourceforge.czt.core.jaxb.gen."
+"RefExprElementq\u0000~\u0000#sq\u0000~\u0000\n\u0001\u0087\u00b2\u00a9q\u0000~\u0000\u000fp\u0000sq\u0000~\u0000\b\u0001\u0087\u00b2\u009eppsq\u0000~\u0000\u0012\u0001\u0087\u00b2\u0093q\u0000"
+"~\u0000\u000fpsq\u0000~\u0000\u0015\u0001\u0087\u00b2\u0090q\u0000~\u0000\u000fpq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00000net.sourceforge."
+"czt.core.jaxb.gen.SchExprElementq\u0000~\u0000#q\u0000~\u0000\u001esq\u0000~\u0000\b\u0001\u001aS\u0085ppsq\u0000~\u0000\u0015"
+"\u0001\u001aSzq\u0000~\u0000\u000fpsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001f"
+"Lorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/"
+"sun/msv/util/StringPair;xq\u0000~\u0000\u0003\u0000\u00c3\u00e8;ppsr\u0000$com.sun.msv.datatype"
+".xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.Buil"
+"tinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.Concret"
+"eType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000 L\u0000\btypeNameq\u0000~\u0000 L\u0000\nwhiteSpacet"
+"\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://"
+"www.w3.org/2001/XMLSchemat\u0000\u0007booleansr\u00005com.sun.msv.datatype."
+"xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.d"
+"atatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv."
+"grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\nq\u0000~"
+"\u0000\u000fpsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~"
+"\u0000 L\u0000\fnamespaceURIq\u0000~\u0000 xpq\u0000~\u0001%q\u0000~\u0001$sq\u0000~\u0000\u001ft\u0000\u0006Mixfixt\u0000\u0000q\u0000~\u0000\u001esr\u0000"
+"\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/"
+"Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun"
+".msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\t"
+"thresholdL\u0000\u0006parentq\u0000~\u00011[\u0000\u0005tablet\u0000![Lcom/sun/msv/grammar/Expr"
+"ession;xp\u0000\u0000\u0000m\u0000\u0000\u0000rpur\u0000![Lcom.sun.msv.grammar.Expression;\u00d68D\u00c3]"
+"\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0001\u007fpppppppppq\u0000~\u0000@ppppppppppq\u0000~\u0000\u0007ppq\u0000~\u0000Cpppppppppppp"
+"pq\u0000~\u0000Fpppppppppppppq\u0000~\u0000Ipppppppppppppq\u0000~\u0000Lpppppppppppppq\u0000~\u0000O"
+"pppppppppppppq\u0000~\u0000Rpppppq\u0000~\u0000\u00baq\u0000~\u0000\u00b4q\u0000~\u0000\u00aeq\u0000~\u0000\u00a8q\u0000~\u0000\u00a2q\u0000~\u0000\u009cq\u0000~\u0000\u0096q\u0000"
+"~\u0000\u0090q\u0000~\u0000\u008aq\u0000~\u0000\u0084q\u0000~\u0000~q\u0000~\u0000\u00b3q\u0000~\u0000\u00adq\u0000~\u0000\u00a7q\u0000~\u0000\u00a1q\u0000~\u0000\u009bq\u0000~\u0000\u0095q\u0000~\u0000\u008fq\u0000~\u0000\u0089q\u0000"
+"~\u0000\u0083q\u0000~\u0000}q\u0000~\u0000wq\u0000~\u0000qq\u0000~\u0000kq\u0000~\u0000eq\u0000~\u0000_q\u0000~\u0000Yq\u0000~\u00002q\u0000~\u0000*q\u0000~\u0000\u0011q\u0000~\u0000xq\u0000"
+"~\u0000rq\u0000~\u0000lq\u0000~\u0000fq\u0000~\u0000`q\u0000~\u0000Zq\u0000~\u00003q\u0000~\u0000+q\u0000~\u0000\u0014q\u0000~\u0000Uq\u0000~\u0000\u00b9q\u0000~\u0000\u00c0q\u0000~\u0000\u00bfq\u0000"
+"~\u0000\u00c6q\u0000~\u0000\tq\u0000~\u0000\u00c5q\u0000~\u0000\u00ccq\u0000~\u0000\u00cbq\u0000~\u0000\u00d2q\u0000~\u0000\u00d1q\u0000~\u0000\u00d8q\u0000~\u0000\u00d7q\u0000~\u0000\u00deq\u0000~\u0000\u00ddq\u0000~\u0000Bq\u0000"
+"~\u0000\u00e4q\u0000~\u0000\u00e3q\u0000~\u0000\u00eaq\u0000~\u0000\u00e9q\u0000~\u0000\u00f0q\u0000~\u0000\u00efq\u0000~\u0000Eq\u0000~\u0000?q\u0000~\u0000\u00f6q\u0000~\u0000\u00f5q\u0000~\u0000\u00fcq\u0000~\u0000\u00fbq\u0000"
+"~\u0001\u0002q\u0000~\u0001\u0001q\u0000~\u0000<q\u0000~\u0001\bq\u0000~\u0001\u0007q\u0000~\u0001\u000eq\u0000~\u0001\rq\u0000~\u0001\u0014q\u0000~\u0000Hq\u0000~\u0001\u0013q\u0000~\u00009q\u0000~\u00008q\u0000"
+"~\u00007q\u0000~\u0000\u0006ppppppq\u0000~\u0001\u0018pq\u0000~\u0000Kpppppppppppppq\u0000~\u0000Npppppppppppppq\u0000~\u0000"
+"Qpppppppppppppq\u0000~\u0000Tppppppppppq\u0000~\u0000;ppq\u0000~\u0000Wppppppppppq\u0000~\u0000\'q\u0000~\u0000"
+">ppppppppppppq\u0000~\u0000Apppppppppppppq\u0000~\u0000Dpppppppppppppq\u0000~\u0000Gpppppp"
+"pppppppq\u0000~\u0000Jpppppppppppppq\u0000~\u0000Mppppppppq\u0000~\u0000\u0005ppppq\u0000~\u0000Ppppppppp"
+"pppppq\u0000~\u0000Sppppppppppq\u0000~\u0000:ppq\u0000~\u0000Vppppppppppq\u0000~\u0000=pppp"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends net.sourceforge.czt.core.jaxb.gen.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingContext context) {
            super(context, "---------");
        }

        protected Unmarshaller(net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return net.sourceforge.czt.core.jaxb.gen.impl.RefExprImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  5 :
                        attIdx = context.getAttribute("", "Decl");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _RefName = ((net.sourceforge.czt.core.jaxb.gen.impl.RefNameImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.RefNameImpl.class), 6, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Word" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _RefName = ((net.sourceforge.czt.core.jaxb.gen.impl.RefNameImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.RefNameImpl.class), 6, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _RefName = ((net.sourceforge.czt.core.jaxb.gen.impl.RefNameImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.RefNameImpl.class), 6, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  0 :
                        attIdx = context.getAttribute("", "Mixfix");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText0(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  4 :
                        if (("RefName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 5;
                            return ;
                        }
                        break;
                    case  3 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.ExprImpl)net.sourceforge.czt.core.jaxb.gen.impl.RefExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.ExprImpl)net.sourceforge.czt.core.jaxb.gen.impl.RefExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname, __atts);
                        return ;
                    case  8 :
                        if (("BindSelExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.BindSelExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.BindSelExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("DecorExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.DecorExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.DecorExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("HideExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.HideExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.HideExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("NegExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.NegExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.NegExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("PowerExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.PowerExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.PowerExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("PreExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.PreExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.PreExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("RenameExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.RenameExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.RenameExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ThetaExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.ThetaExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ThetaExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("TupleSelExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.TupleSelExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.TupleSelExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("CompExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.CompExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.CompExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("PipeExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.PipeExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.PipeExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ProjExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.ProjExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ProjExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AndExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.AndExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.AndExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("OrExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.OrExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.OrExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ImpliesExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.ImpliesExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ImpliesExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("IffExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.IffExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.IffExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ApplExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.ApplExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ApplExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ProdExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.ProdExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ProdExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("TupleExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.TupleExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.TupleExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SetExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.SetExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SetExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ExistsExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.ExistsExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ExistsExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Exists1Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.Exists1ExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.Exists1ExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ForallExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.ForallExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ForallExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("LambdaExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.LambdaExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.LambdaExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("LetExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.LetExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.LetExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("MuExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.MuExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.MuExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SetCompExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.SetCompExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SetCompExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("BindExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.BindExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.BindExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("CondExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.CondExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.CondExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("NumExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.NumExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.NumExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("RefExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.RefExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.RefExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SchExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.SchExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  7 :
                        if (("BindSelExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.BindSelExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.BindSelExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("DecorExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.DecorExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.DecorExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("HideExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.HideExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.HideExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("NegExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.NegExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.NegExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("PowerExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.PowerExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.PowerExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("PreExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.PreExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.PreExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("RenameExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.RenameExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.RenameExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ThetaExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.ThetaExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ThetaExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("TupleSelExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.TupleSelExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.TupleSelExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("CompExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.CompExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.CompExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("PipeExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.PipeExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.PipeExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ProjExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.ProjExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ProjExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AndExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.AndExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.AndExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("OrExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.OrExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.OrExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ImpliesExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.ImpliesExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ImpliesExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("IffExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.IffExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.IffExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ApplExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.ApplExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ApplExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ProdExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.ProdExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ProdExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("TupleExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.TupleExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.TupleExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SetExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.SetExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SetExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ExistsExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.ExistsExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ExistsExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Exists1Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.Exists1ExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.Exists1ExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ForallExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.ForallExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ForallExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("LambdaExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.LambdaExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.LambdaExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("LetExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.LetExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.LetExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("MuExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.MuExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.MuExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SetCompExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.SetCompExprImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SetCompExprImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("BindExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.BindExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.BindExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("CondExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.CondExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.CondExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("NumExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.NumExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.NumExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("RefExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.RefExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.RefExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SchExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Expr.add(((net.sourceforge.czt.core.jaxb.gen.impl.SchExprElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchExprElementImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 8;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText0(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Mixfix = net.sourceforge.czt.core.jaxb.CztDatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  5 :
                        attIdx = context.getAttribute("", "Decl");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _RefName = ((net.sourceforge.czt.core.jaxb.gen.impl.RefNameImpl) spawnChildFromLeaveElement((net.sourceforge.czt.core.jaxb.gen.impl.RefNameImpl.class), 6, ___uri, ___local, ___qname));
                        return ;
                    case  0 :
                        attIdx = context.getAttribute("", "Mixfix");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText0(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  3 :
                        spawnHandlerFromLeaveElement((((net.sourceforge.czt.core.jaxb.gen.impl.ExprImpl)net.sourceforge.czt.core.jaxb.gen.impl.RefExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname);
                        return ;
                    case  8 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  6 :
                        if (("RefName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 7;
                            return ;
                        }
                        break;
                    case  7 :
                        state = 8;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  5 :
                        if (("Decl" == ___local)&&("" == ___uri)) {
                            _RefName = ((net.sourceforge.czt.core.jaxb.gen.impl.RefNameImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.core.jaxb.gen.impl.RefNameImpl.class), 6, ___uri, ___local, ___qname));
                            return ;
                        }
                        _RefName = ((net.sourceforge.czt.core.jaxb.gen.impl.RefNameImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.core.jaxb.gen.impl.RefNameImpl.class), 6, ___uri, ___local, ___qname));
                        return ;
                    case  0 :
                        if (("Mixfix" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  3 :
                        spawnHandlerFromEnterAttribute((((net.sourceforge.czt.core.jaxb.gen.impl.ExprImpl)net.sourceforge.czt.core.jaxb.gen.impl.RefExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname);
                        return ;
                    case  8 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  7 :
                        state = 8;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  5 :
                        attIdx = context.getAttribute("", "Decl");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _RefName = ((net.sourceforge.czt.core.jaxb.gen.impl.RefNameImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.core.jaxb.gen.impl.RefNameImpl.class), 6, ___uri, ___local, ___qname));
                        return ;
                    case  0 :
                        attIdx = context.getAttribute("", "Mixfix");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText0(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  3 :
                        spawnHandlerFromLeaveAttribute((((net.sourceforge.czt.core.jaxb.gen.impl.ExprImpl)net.sourceforge.czt.core.jaxb.gen.impl.RefExprImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname);
                        return ;
                    case  8 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  7 :
                        state = 8;
                        continue outer;
                    case  2 :
                        if (("Mixfix" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  5 :
                            attIdx = context.getAttribute("", "Decl");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _RefName = ((net.sourceforge.czt.core.jaxb.gen.impl.RefNameImpl) spawnChildFromText((net.sourceforge.czt.core.jaxb.gen.impl.RefNameImpl.class), 6, value));
                            return ;
                        case  0 :
                            attIdx = context.getAttribute("", "Mixfix");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText0(v);
                                state = 3;
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                        case  3 :
                            spawnHandlerFromText((((net.sourceforge.czt.core.jaxb.gen.impl.ExprImpl)net.sourceforge.czt.core.jaxb.gen.impl.RefExprImpl.this).new Unmarshaller(context)), 4, value);
                            return ;
                        case  8 :
                            revertToParentFromText(value);
                            return ;
                        case  7 :
                            state = 8;
                            continue outer;
                        case  1 :
                            eatText0(value);
                            state = 2;
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
