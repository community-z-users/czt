//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.1-05/30/2003 05:06 AM(java_re)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2003.08.25 at 04:40:49 NZST 
//


package net.sourceforge.czt.core.jaxb.gen;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the net.sourceforge.czt.core.jaxb.gen package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
public class ObjectFactory
    extends net.sourceforge.czt.core.jaxb.gen.impl.runtime.DefaultJAXBContextImpl
{

    private static java.util.HashMap defaultImplementations = new java.util.HashMap();
    public final static java.lang.Class version = (net.sourceforge.czt.core.jaxb.gen.impl.JAXBVersion.class);

    static {
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NarrPara", "net.sourceforge.czt.core.jaxb.gen.impl.NarrParaImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.AxPara", "net.sourceforge.czt.core.jaxb.gen.impl.AxParaImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Branch", "net.sourceforge.czt.core.jaxb.gen.impl.BranchImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.PowerTypeElement", "net.sourceforge.czt.core.jaxb.gen.impl.PowerTypeElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.SchExpr2", "net.sourceforge.czt.core.jaxb.gen.impl.SchExpr2Impl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.PowerType", "net.sourceforge.czt.core.jaxb.gen.impl.PowerTypeImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.TypeEnvAnn", "net.sourceforge.czt.core.jaxb.gen.impl.TypeEnvAnnImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Fact", "net.sourceforge.czt.core.jaxb.gen.impl.FactImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NarrSectElement", "net.sourceforge.czt.core.jaxb.gen.impl.NarrSectElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.DecorExpr", "net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ParentElement", "net.sourceforge.czt.core.jaxb.gen.impl.ParentElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.LetExpr", "net.sourceforge.czt.core.jaxb.gen.impl.LetExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.BranchElement", "net.sourceforge.czt.core.jaxb.gen.impl.BranchElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ConjPara", "net.sourceforge.czt.core.jaxb.gen.impl.ConjParaImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.RefExpr", "net.sourceforge.czt.core.jaxb.gen.impl.RefExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NameExprPair", "net.sourceforge.czt.core.jaxb.gen.impl.NameExprPairImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NarrSect", "net.sourceforge.czt.core.jaxb.gen.impl.NarrSectImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Expr0N", "net.sourceforge.czt.core.jaxb.gen.impl.Expr0NImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.SignatureElement", "net.sourceforge.czt.core.jaxb.gen.impl.SignatureElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.BindExprElement", "net.sourceforge.czt.core.jaxb.gen.impl.BindExprElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.InclDecl", "net.sourceforge.czt.core.jaxb.gen.impl.InclDeclImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.HideExpr", "net.sourceforge.czt.core.jaxb.gen.impl.HideExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.RefExprElement", "net.sourceforge.czt.core.jaxb.gen.impl.RefExprElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ApplExprElement", "net.sourceforge.czt.core.jaxb.gen.impl.ApplExprElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.OptempParaElement", "net.sourceforge.czt.core.jaxb.gen.impl.OptempParaElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.UnparsedParaElement", "net.sourceforge.czt.core.jaxb.gen.impl.UnparsedParaElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Expr2", "net.sourceforge.czt.core.jaxb.gen.impl.Expr2Impl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.DeclName", "net.sourceforge.czt.core.jaxb.gen.impl.DeclNameImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.BindSelExprElement", "net.sourceforge.czt.core.jaxb.gen.impl.BindSelExprElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.SchemaType", "net.sourceforge.czt.core.jaxb.gen.impl.SchemaTypeImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NumStrokeElement", "net.sourceforge.czt.core.jaxb.gen.impl.NumStrokeElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.QntPred", "net.sourceforge.czt.core.jaxb.gen.impl.QntPredImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.SchExpr", "net.sourceforge.czt.core.jaxb.gen.impl.SchExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Signature", "net.sourceforge.czt.core.jaxb.gen.impl.SignatureImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.RenameExpr", "net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType", "net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl.AnnsTypeImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.TermA", "net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.QntExpr", "net.sourceforge.czt.core.jaxb.gen.impl.QntExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Para", "net.sourceforge.czt.core.jaxb.gen.impl.ParaImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.UnparsedPara", "net.sourceforge.czt.core.jaxb.gen.impl.UnparsedParaImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ImpliesExpr", "net.sourceforge.czt.core.jaxb.gen.impl.ImpliesExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.AxParaElement", "net.sourceforge.czt.core.jaxb.gen.impl.AxParaElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NameSectTypeTriple", "net.sourceforge.czt.core.jaxb.gen.impl.NameSectTypeTripleImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ApplExpr", "net.sourceforge.czt.core.jaxb.gen.impl.ApplExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.IffExpr", "net.sourceforge.czt.core.jaxb.gen.impl.IffExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NextStroke", "net.sourceforge.czt.core.jaxb.gen.impl.NextStrokeImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.TypeAnnElement", "net.sourceforge.czt.core.jaxb.gen.impl.TypeAnnElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ProdExpr", "net.sourceforge.czt.core.jaxb.gen.impl.ProdExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ForallExpr", "net.sourceforge.czt.core.jaxb.gen.impl.ForallExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.CondExpr", "net.sourceforge.czt.core.jaxb.gen.impl.CondExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ProdType", "net.sourceforge.czt.core.jaxb.gen.impl.ProdTypeImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.CondExprElement", "net.sourceforge.czt.core.jaxb.gen.impl.CondExprElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NameTypePair", "net.sourceforge.czt.core.jaxb.gen.impl.NameTypePairImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ExistsExpr", "net.sourceforge.czt.core.jaxb.gen.impl.ExistsExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.InStroke", "net.sourceforge.czt.core.jaxb.gen.impl.InStrokeImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.TypeAnn", "net.sourceforge.czt.core.jaxb.gen.impl.TypeAnnImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.CompExpr", "net.sourceforge.czt.core.jaxb.gen.impl.CompExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.BindSelExpr", "net.sourceforge.czt.core.jaxb.gen.impl.BindSelExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ConstDecl", "net.sourceforge.czt.core.jaxb.gen.impl.ConstDeclImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.GenTypeElement", "net.sourceforge.czt.core.jaxb.gen.impl.GenTypeElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.TupleSelExprElement", "net.sourceforge.czt.core.jaxb.gen.impl.TupleSelExprElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.OrExpr", "net.sourceforge.czt.core.jaxb.gen.impl.OrExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.TruePred", "net.sourceforge.czt.core.jaxb.gen.impl.TruePredImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.FreeParaElement", "net.sourceforge.czt.core.jaxb.gen.impl.FreeParaElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ParenAnn", "net.sourceforge.czt.core.jaxb.gen.impl.ParenAnnImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ConjParaElement", "net.sourceforge.czt.core.jaxb.gen.impl.ConjParaElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.OptempPara.Word", "net.sourceforge.czt.core.jaxb.gen.impl.OptempParaImpl.WordImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.RefName", "net.sourceforge.czt.core.jaxb.gen.impl.RefNameImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Expr", "net.sourceforge.czt.core.jaxb.gen.impl.ExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ProdTypeElement", "net.sourceforge.czt.core.jaxb.gen.impl.ProdTypeElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ExprPredElement", "net.sourceforge.czt.core.jaxb.gen.impl.ExprPredElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Exists1Pred", "net.sourceforge.czt.core.jaxb.gen.impl.Exists1PredImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.LocAnnElement", "net.sourceforge.czt.core.jaxb.gen.impl.LocAnnElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ForallPred", "net.sourceforge.czt.core.jaxb.gen.impl.ForallPredImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.DeclNameElement", "net.sourceforge.czt.core.jaxb.gen.impl.DeclNameElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NegPredElement", "net.sourceforge.czt.core.jaxb.gen.impl.NegPredElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.OrPred", "net.sourceforge.czt.core.jaxb.gen.impl.OrPredImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.FreetypeElement", "net.sourceforge.czt.core.jaxb.gen.impl.FreetypeElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.UnparsedZSect", "net.sourceforge.czt.core.jaxb.gen.impl.UnparsedZSectImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.GivenTypeElement", "net.sourceforge.czt.core.jaxb.gen.impl.GivenTypeElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Parent", "net.sourceforge.czt.core.jaxb.gen.impl.ParentImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Type", "net.sourceforge.czt.core.jaxb.gen.impl.TypeImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.SetExpr", "net.sourceforge.czt.core.jaxb.gen.impl.SetExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.SchExprElement", "net.sourceforge.czt.core.jaxb.gen.impl.SchExprElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.SchemaTypeElement", "net.sourceforge.czt.core.jaxb.gen.impl.SchemaTypeElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.RenameExprElement", "net.sourceforge.czt.core.jaxb.gen.impl.RenameExprElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.FalsePred", "net.sourceforge.czt.core.jaxb.gen.impl.FalsePredImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.GivenPara", "net.sourceforge.czt.core.jaxb.gen.impl.GivenParaImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.SectTypeEnvAnnElement", "net.sourceforge.czt.core.jaxb.gen.impl.SectTypeEnvAnnElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Pred", "net.sourceforge.czt.core.jaxb.gen.impl.PredImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ExistsPred", "net.sourceforge.czt.core.jaxb.gen.impl.ExistsPredImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.IffPred", "net.sourceforge.czt.core.jaxb.gen.impl.IffPredImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.LambdaExpr", "net.sourceforge.czt.core.jaxb.gen.impl.LambdaExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Exists1Expr", "net.sourceforge.czt.core.jaxb.gen.impl.Exists1ExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ImpliesPred", "net.sourceforge.czt.core.jaxb.gen.impl.ImpliesPredImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Operand", "net.sourceforge.czt.core.jaxb.gen.impl.OperandImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NameTypePairElement", "net.sourceforge.czt.core.jaxb.gen.impl.NameTypePairElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Qnt1Expr", "net.sourceforge.czt.core.jaxb.gen.impl.Qnt1ExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NumExprElement", "net.sourceforge.czt.core.jaxb.gen.impl.NumExprElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ProjExpr", "net.sourceforge.czt.core.jaxb.gen.impl.ProjExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.VarDeclElement", "net.sourceforge.czt.core.jaxb.gen.impl.VarDeclElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.MemPred", "net.sourceforge.czt.core.jaxb.gen.impl.MemPredImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NarrParaElement", "net.sourceforge.czt.core.jaxb.gen.impl.NarrParaElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NameElement", "net.sourceforge.czt.core.jaxb.gen.impl.NameElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.SpecElement", "net.sourceforge.czt.core.jaxb.gen.impl.SpecElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.MuExpr", "net.sourceforge.czt.core.jaxb.gen.impl.MuExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.SectTypeEnvAnn", "net.sourceforge.czt.core.jaxb.gen.impl.SectTypeEnvAnnImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NumStroke", "net.sourceforge.czt.core.jaxb.gen.impl.NumStrokeImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Spec", "net.sourceforge.czt.core.jaxb.gen.impl.SpecImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.AndPredElement", "net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ThetaExprElement", "net.sourceforge.czt.core.jaxb.gen.impl.ThetaExprElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NameSectTypeTripleElement", "net.sourceforge.czt.core.jaxb.gen.impl.NameSectTypeTripleElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.HideExprElement", "net.sourceforge.czt.core.jaxb.gen.impl.HideExprElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.VarDecl", "net.sourceforge.czt.core.jaxb.gen.impl.VarDeclImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NameExprPairElement", "net.sourceforge.czt.core.jaxb.gen.impl.NameExprPairElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NameNamePair", "net.sourceforge.czt.core.jaxb.gen.impl.NameNamePairImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ThetaExpr", "net.sourceforge.czt.core.jaxb.gen.impl.ThetaExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Name", "net.sourceforge.czt.core.jaxb.gen.impl.NameImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.OutStroke", "net.sourceforge.czt.core.jaxb.gen.impl.OutStrokeImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Pred2", "net.sourceforge.czt.core.jaxb.gen.impl.Pred2Impl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NegExpr", "net.sourceforge.czt.core.jaxb.gen.impl.NegExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ZSectElement", "net.sourceforge.czt.core.jaxb.gen.impl.ZSectElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NameNamePairElement", "net.sourceforge.czt.core.jaxb.gen.impl.NameNamePairElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Freetype", "net.sourceforge.czt.core.jaxb.gen.impl.FreetypeImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ZSect", "net.sourceforge.czt.core.jaxb.gen.impl.ZSectImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.TypeEnvAnnElement", "net.sourceforge.czt.core.jaxb.gen.impl.TypeEnvAnnElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.PipeExpr", "net.sourceforge.czt.core.jaxb.gen.impl.PipeExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.PreExpr", "net.sourceforge.czt.core.jaxb.gen.impl.PreExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Decl", "net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.DecorExprElement", "net.sourceforge.czt.core.jaxb.gen.impl.DecorExprElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.TupleExpr", "net.sourceforge.czt.core.jaxb.gen.impl.TupleExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.FreePara", "net.sourceforge.czt.core.jaxb.gen.impl.FreeParaImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.AndPred", "net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.GenType", "net.sourceforge.czt.core.jaxb.gen.impl.GenTypeImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.AndExpr", "net.sourceforge.czt.core.jaxb.gen.impl.AndExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Expr1", "net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.SetCompExpr", "net.sourceforge.czt.core.jaxb.gen.impl.SetCompExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.SchTextElement", "net.sourceforge.czt.core.jaxb.gen.impl.SchTextElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Ann", "net.sourceforge.czt.core.jaxb.gen.impl.AnnImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Sect", "net.sourceforge.czt.core.jaxb.gen.impl.SectImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.PowerExpr", "net.sourceforge.czt.core.jaxb.gen.impl.PowerExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Stroke", "net.sourceforge.czt.core.jaxb.gen.impl.StrokeImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.OptempPara", "net.sourceforge.czt.core.jaxb.gen.impl.OptempParaImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.OperandElement", "net.sourceforge.czt.core.jaxb.gen.impl.OperandElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.GivenParaElement", "net.sourceforge.czt.core.jaxb.gen.impl.GivenParaElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ExprPred", "net.sourceforge.czt.core.jaxb.gen.impl.ExprPredImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.InclDeclElement", "net.sourceforge.czt.core.jaxb.gen.impl.InclDeclElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NumExpr", "net.sourceforge.czt.core.jaxb.gen.impl.NumExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.RefNameElement", "net.sourceforge.czt.core.jaxb.gen.impl.RefNameElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.BindExpr", "net.sourceforge.czt.core.jaxb.gen.impl.BindExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.GivenType", "net.sourceforge.czt.core.jaxb.gen.impl.GivenTypeImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.TupleSelExpr", "net.sourceforge.czt.core.jaxb.gen.impl.TupleSelExprImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.SchText", "net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.NegPred", "net.sourceforge.czt.core.jaxb.gen.impl.NegPredImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.Expr2N", "net.sourceforge.czt.core.jaxb.gen.impl.Expr2NImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.LocAnn", "net.sourceforge.czt.core.jaxb.gen.impl.LocAnnImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.UnparsedZSectElement", "net.sourceforge.czt.core.jaxb.gen.impl.UnparsedZSectElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.ConstDeclElement", "net.sourceforge.czt.core.jaxb.gen.impl.ConstDeclElementImpl");
        defaultImplementations.put("net.sourceforge.czt.core.jaxb.gen.MemPredElement", "net.sourceforge.czt.core.jaxb.gen.impl.MemPredElementImpl");
    }

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: net.sourceforge.czt.core.jaxb.gen
     * 
     */
    public ObjectFactory() {
        super(new net.sourceforge.czt.core.jaxb.gen.ObjectFactory.GrammarInfoImpl());
    }

    /**
     * Create an instance of the specified Java content interface.
     * 
     * @param javaContentInterface the Class object of the javacontent interface to instantiate
     * @return a new instance
     * @throws JAXBException if an error occurs
     */
    public java.lang.Object newInstance(java.lang.Class javaContentInterface)
        throws javax.xml.bind.JAXBException
    {
        return super.newInstance(javaContentInterface);
    }

    /**
     * Get the specified property. This method can only be
     * used to get provider specific properties.
     * Attempting to get an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name the name of the property to retrieve
     * @return the value of the requested property
     * @throws PropertyException when there is an error retrieving the given property or value
     */
    public java.lang.Object getProperty(java.lang.String name)
        throws javax.xml.bind.PropertyException
    {
        return super.getProperty(name);
    }

    /**
     * Set the specified property. This method can only be
     * used to set provider specific properties.
     * Attempting to set an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name the name of the property to retrieve
     * @param value the value of the property to be set
     * @throws PropertyException when there is an error processing the given property or value
     */
    public void setProperty(java.lang.String name, java.lang.Object value)
        throws javax.xml.bind.PropertyException
    {
        super.setProperty(name, value);
    }

    /**
     * Create an instance of NarrPara
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NarrPara createNarrPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NarrParaImpl();
    }

    /**
     * Create an instance of AxPara
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.AxPara createAxPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.AxParaImpl();
    }

    /**
     * Create an instance of Branch
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Branch createBranch()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.BranchImpl();
    }

    /**
     * Create an instance of PowerTypeElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.PowerTypeElement createPowerTypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.PowerTypeElementImpl();
    }

    /**
     * Create an instance of SchExpr2
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.SchExpr2 createSchExpr2()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.SchExpr2Impl();
    }

    /**
     * Create an instance of PowerType
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.PowerType createPowerType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.PowerTypeImpl();
    }

    /**
     * Create an instance of TypeEnvAnn
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.TypeEnvAnn createTypeEnvAnn()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.TypeEnvAnnImpl();
    }

    /**
     * Create an instance of Fact
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Fact createFact()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.FactImpl();
    }

    /**
     * Create an instance of NarrSectElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NarrSectElement createNarrSectElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NarrSectElementImpl();
    }

    /**
     * Create an instance of DecorExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.DecorExpr createDecorExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl();
    }

    /**
     * Create an instance of ParentElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ParentElement createParentElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ParentElementImpl();
    }

    /**
     * Create an instance of LetExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.LetExpr createLetExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.LetExprImpl();
    }

    /**
     * Create an instance of BranchElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.BranchElement createBranchElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.BranchElementImpl();
    }

    /**
     * Create an instance of ConjPara
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ConjPara createConjPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ConjParaImpl();
    }

    /**
     * Create an instance of RefExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.RefExpr createRefExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.RefExprImpl();
    }

    /**
     * Create an instance of NameExprPair
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NameExprPair createNameExprPair()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NameExprPairImpl();
    }

    /**
     * Create an instance of NarrSect
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NarrSect createNarrSect()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NarrSectImpl();
    }

    /**
     * Create an instance of Expr0N
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Expr0N createExpr0N()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.Expr0NImpl();
    }

    /**
     * Create an instance of SignatureElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.SignatureElement createSignatureElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.SignatureElementImpl();
    }

    /**
     * Create an instance of BindExprElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.BindExprElement createBindExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.BindExprElementImpl();
    }

    /**
     * Create an instance of InclDecl
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.InclDecl createInclDecl()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.InclDeclImpl();
    }

    /**
     * Create an instance of HideExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.HideExpr createHideExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.HideExprImpl();
    }

    /**
     * Create an instance of RefExprElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.RefExprElement createRefExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.RefExprElementImpl();
    }

    /**
     * Create an instance of ApplExprElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ApplExprElement createApplExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ApplExprElementImpl();
    }

    /**
     * Create an instance of OptempParaElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.OptempParaElement createOptempParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.OptempParaElementImpl();
    }

    /**
     * Create an instance of UnparsedParaElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.UnparsedParaElement createUnparsedParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.UnparsedParaElementImpl();
    }

    /**
     * Create an instance of Expr2
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Expr2 createExpr2()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.Expr2Impl();
    }

    /**
     * Create an instance of DeclName
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.DeclName createDeclName()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.DeclNameImpl();
    }

    /**
     * Create an instance of BindSelExprElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.BindSelExprElement createBindSelExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.BindSelExprElementImpl();
    }

    /**
     * Create an instance of SchemaType
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.SchemaType createSchemaType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.SchemaTypeImpl();
    }

    /**
     * Create an instance of NumStrokeElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NumStrokeElement createNumStrokeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NumStrokeElementImpl();
    }

    /**
     * Create an instance of QntPred
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.QntPred createQntPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.QntPredImpl();
    }

    /**
     * Create an instance of SchExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.SchExpr createSchExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.SchExprImpl();
    }

    /**
     * Create an instance of Signature
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Signature createSignature()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.SignatureImpl();
    }

    /**
     * Create an instance of RenameExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.RenameExpr createRenameExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl();
    }

    /**
     * Create an instance of TermAAnnsType
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.TermA.AnnsType createTermAAnnsType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl.AnnsTypeImpl();
    }

    /**
     * Create an instance of TermA
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.TermA createTermA()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl();
    }

    /**
     * Create an instance of QntExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.QntExpr createQntExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.QntExprImpl();
    }

    /**
     * Create an instance of Para
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Para createPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ParaImpl();
    }

    /**
     * Create an instance of UnparsedPara
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.UnparsedPara createUnparsedPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.UnparsedParaImpl();
    }

    /**
     * Create an instance of ImpliesExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ImpliesExpr createImpliesExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ImpliesExprImpl();
    }

    /**
     * Create an instance of AxParaElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.AxParaElement createAxParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.AxParaElementImpl();
    }

    /**
     * Create an instance of NameSectTypeTriple
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NameSectTypeTriple createNameSectTypeTriple()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NameSectTypeTripleImpl();
    }

    /**
     * Create an instance of ApplExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ApplExpr createApplExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ApplExprImpl();
    }

    /**
     * Create an instance of IffExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.IffExpr createIffExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.IffExprImpl();
    }

    /**
     * Create an instance of NextStroke
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NextStroke createNextStroke()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NextStrokeImpl();
    }

    /**
     * Create an instance of TypeAnnElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.TypeAnnElement createTypeAnnElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.TypeAnnElementImpl();
    }

    /**
     * Create an instance of ProdExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ProdExpr createProdExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ProdExprImpl();
    }

    /**
     * Create an instance of ForallExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ForallExpr createForallExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ForallExprImpl();
    }

    /**
     * Create an instance of CondExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.CondExpr createCondExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.CondExprImpl();
    }

    /**
     * Create an instance of ProdType
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ProdType createProdType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ProdTypeImpl();
    }

    /**
     * Create an instance of CondExprElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.CondExprElement createCondExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.CondExprElementImpl();
    }

    /**
     * Create an instance of NameTypePair
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NameTypePair createNameTypePair()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NameTypePairImpl();
    }

    /**
     * Create an instance of ExistsExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ExistsExpr createExistsExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ExistsExprImpl();
    }

    /**
     * Create an instance of InStroke
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.InStroke createInStroke()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.InStrokeImpl();
    }

    /**
     * Create an instance of TypeAnn
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.TypeAnn createTypeAnn()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.TypeAnnImpl();
    }

    /**
     * Create an instance of CompExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.CompExpr createCompExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.CompExprImpl();
    }

    /**
     * Create an instance of BindSelExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.BindSelExpr createBindSelExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.BindSelExprImpl();
    }

    /**
     * Create an instance of ConstDecl
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ConstDecl createConstDecl()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ConstDeclImpl();
    }

    /**
     * Create an instance of GenTypeElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.GenTypeElement createGenTypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.GenTypeElementImpl();
    }

    /**
     * Create an instance of TupleSelExprElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.TupleSelExprElement createTupleSelExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.TupleSelExprElementImpl();
    }

    /**
     * Create an instance of OrExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.OrExpr createOrExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.OrExprImpl();
    }

    /**
     * Create an instance of TruePred
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.TruePred createTruePred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.TruePredImpl();
    }

    /**
     * Create an instance of FreeParaElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.FreeParaElement createFreeParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.FreeParaElementImpl();
    }

    /**
     * Create an instance of ParenAnn
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ParenAnn createParenAnn()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ParenAnnImpl();
    }

    /**
     * Create an instance of ConjParaElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ConjParaElement createConjParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ConjParaElementImpl();
    }

    /**
     * Create an instance of OptempParaWord
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.OptempPara.Word createOptempParaWord()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.OptempParaImpl.WordImpl();
    }

    /**
     * Create an instance of RefName
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.RefName createRefName()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.RefNameImpl();
    }

    /**
     * Create an instance of Expr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Expr createExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ExprImpl();
    }

    /**
     * Create an instance of ProdTypeElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ProdTypeElement createProdTypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ProdTypeElementImpl();
    }

    /**
     * Create an instance of ExprPredElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ExprPredElement createExprPredElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ExprPredElementImpl();
    }

    /**
     * Create an instance of Exists1Pred
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Exists1Pred createExists1Pred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.Exists1PredImpl();
    }

    /**
     * Create an instance of LocAnnElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.LocAnnElement createLocAnnElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.LocAnnElementImpl();
    }

    /**
     * Create an instance of ForallPred
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ForallPred createForallPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ForallPredImpl();
    }

    /**
     * Create an instance of DeclNameElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.DeclNameElement createDeclNameElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.DeclNameElementImpl();
    }

    /**
     * Create an instance of NegPredElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NegPredElement createNegPredElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NegPredElementImpl();
    }

    /**
     * Create an instance of OrPred
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.OrPred createOrPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.OrPredImpl();
    }

    /**
     * Create an instance of FreetypeElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.FreetypeElement createFreetypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.FreetypeElementImpl();
    }

    /**
     * Create an instance of UnparsedZSect
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.UnparsedZSect createUnparsedZSect()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.UnparsedZSectImpl();
    }

    /**
     * Create an instance of GivenTypeElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.GivenTypeElement createGivenTypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.GivenTypeElementImpl();
    }

    /**
     * Create an instance of Parent
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Parent createParent()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ParentImpl();
    }

    /**
     * Create an instance of Type
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Type createType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.TypeImpl();
    }

    /**
     * Create an instance of SetExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.SetExpr createSetExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.SetExprImpl();
    }

    /**
     * Create an instance of SchExprElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.SchExprElement createSchExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.SchExprElementImpl();
    }

    /**
     * Create an instance of SchemaTypeElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.SchemaTypeElement createSchemaTypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.SchemaTypeElementImpl();
    }

    /**
     * Create an instance of RenameExprElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.RenameExprElement createRenameExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.RenameExprElementImpl();
    }

    /**
     * Create an instance of FalsePred
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.FalsePred createFalsePred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.FalsePredImpl();
    }

    /**
     * Create an instance of GivenPara
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.GivenPara createGivenPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.GivenParaImpl();
    }

    /**
     * Create an instance of SectTypeEnvAnnElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.SectTypeEnvAnnElement createSectTypeEnvAnnElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.SectTypeEnvAnnElementImpl();
    }

    /**
     * Create an instance of Pred
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Pred createPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.PredImpl();
    }

    /**
     * Create an instance of ExistsPred
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ExistsPred createExistsPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ExistsPredImpl();
    }

    /**
     * Create an instance of IffPred
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.IffPred createIffPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.IffPredImpl();
    }

    /**
     * Create an instance of LambdaExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.LambdaExpr createLambdaExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.LambdaExprImpl();
    }

    /**
     * Create an instance of Exists1Expr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Exists1Expr createExists1Expr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.Exists1ExprImpl();
    }

    /**
     * Create an instance of ImpliesPred
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ImpliesPred createImpliesPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ImpliesPredImpl();
    }

    /**
     * Create an instance of Operand
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Operand createOperand()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.OperandImpl();
    }

    /**
     * Create an instance of NameTypePairElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NameTypePairElement createNameTypePairElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NameTypePairElementImpl();
    }

    /**
     * Create an instance of Qnt1Expr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Qnt1Expr createQnt1Expr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.Qnt1ExprImpl();
    }

    /**
     * Create an instance of NumExprElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NumExprElement createNumExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NumExprElementImpl();
    }

    /**
     * Create an instance of ProjExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ProjExpr createProjExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ProjExprImpl();
    }

    /**
     * Create an instance of VarDeclElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.VarDeclElement createVarDeclElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.VarDeclElementImpl();
    }

    /**
     * Create an instance of MemPred
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.MemPred createMemPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.MemPredImpl();
    }

    /**
     * Create an instance of NarrParaElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NarrParaElement createNarrParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NarrParaElementImpl();
    }

    /**
     * Create an instance of NameElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NameElement createNameElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NameElementImpl();
    }

    /**
     * Create an instance of SpecElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.SpecElement createSpecElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.SpecElementImpl();
    }

    /**
     * Create an instance of MuExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.MuExpr createMuExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.MuExprImpl();
    }

    /**
     * Create an instance of SectTypeEnvAnn
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.SectTypeEnvAnn createSectTypeEnvAnn()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.SectTypeEnvAnnImpl();
    }

    /**
     * Create an instance of NumStroke
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NumStroke createNumStroke()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NumStrokeImpl();
    }

    /**
     * Create an instance of Spec
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Spec createSpec()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.SpecImpl();
    }

    /**
     * Create an instance of AndPredElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.AndPredElement createAndPredElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl();
    }

    /**
     * Create an instance of ThetaExprElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ThetaExprElement createThetaExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ThetaExprElementImpl();
    }

    /**
     * Create an instance of NameSectTypeTripleElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NameSectTypeTripleElement createNameSectTypeTripleElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NameSectTypeTripleElementImpl();
    }

    /**
     * Create an instance of HideExprElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.HideExprElement createHideExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.HideExprElementImpl();
    }

    /**
     * Create an instance of VarDecl
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.VarDecl createVarDecl()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.VarDeclImpl();
    }

    /**
     * Create an instance of NameExprPairElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NameExprPairElement createNameExprPairElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NameExprPairElementImpl();
    }

    /**
     * Create an instance of NameNamePair
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NameNamePair createNameNamePair()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NameNamePairImpl();
    }

    /**
     * Create an instance of ThetaExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ThetaExpr createThetaExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ThetaExprImpl();
    }

    /**
     * Create an instance of Name
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Name createName()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NameImpl();
    }

    /**
     * Create an instance of OutStroke
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.OutStroke createOutStroke()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.OutStrokeImpl();
    }

    /**
     * Create an instance of Pred2
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Pred2 createPred2()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.Pred2Impl();
    }

    /**
     * Create an instance of NegExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NegExpr createNegExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NegExprImpl();
    }

    /**
     * Create an instance of ZSectElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ZSectElement createZSectElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ZSectElementImpl();
    }

    /**
     * Create an instance of NameNamePairElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NameNamePairElement createNameNamePairElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NameNamePairElementImpl();
    }

    /**
     * Create an instance of Freetype
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Freetype createFreetype()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.FreetypeImpl();
    }

    /**
     * Create an instance of ZSect
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ZSect createZSect()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ZSectImpl();
    }

    /**
     * Create an instance of TypeEnvAnnElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.TypeEnvAnnElement createTypeEnvAnnElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.TypeEnvAnnElementImpl();
    }

    /**
     * Create an instance of PipeExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.PipeExpr createPipeExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.PipeExprImpl();
    }

    /**
     * Create an instance of PreExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.PreExpr createPreExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.PreExprImpl();
    }

    /**
     * Create an instance of Decl
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Decl createDecl()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl();
    }

    /**
     * Create an instance of DecorExprElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.DecorExprElement createDecorExprElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.DecorExprElementImpl();
    }

    /**
     * Create an instance of TupleExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.TupleExpr createTupleExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.TupleExprImpl();
    }

    /**
     * Create an instance of FreePara
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.FreePara createFreePara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.FreeParaImpl();
    }

    /**
     * Create an instance of AndPred
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.AndPred createAndPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl();
    }

    /**
     * Create an instance of GenType
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.GenType createGenType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.GenTypeImpl();
    }

    /**
     * Create an instance of AndExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.AndExpr createAndExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.AndExprImpl();
    }

    /**
     * Create an instance of Expr1
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Expr1 createExpr1()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl();
    }

    /**
     * Create an instance of SetCompExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.SetCompExpr createSetCompExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.SetCompExprImpl();
    }

    /**
     * Create an instance of SchTextElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.SchTextElement createSchTextElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.SchTextElementImpl();
    }

    /**
     * Create an instance of Ann
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Ann createAnn()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.AnnImpl();
    }

    /**
     * Create an instance of Sect
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Sect createSect()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.SectImpl();
    }

    /**
     * Create an instance of PowerExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.PowerExpr createPowerExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.PowerExprImpl();
    }

    /**
     * Create an instance of Stroke
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Stroke createStroke()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.StrokeImpl();
    }

    /**
     * Create an instance of OptempPara
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.OptempPara createOptempPara()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.OptempParaImpl();
    }

    /**
     * Create an instance of OperandElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.OperandElement createOperandElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.OperandElementImpl();
    }

    /**
     * Create an instance of GivenParaElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.GivenParaElement createGivenParaElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.GivenParaElementImpl();
    }

    /**
     * Create an instance of ExprPred
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ExprPred createExprPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ExprPredImpl();
    }

    /**
     * Create an instance of InclDeclElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.InclDeclElement createInclDeclElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.InclDeclElementImpl();
    }

    /**
     * Create an instance of NumExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NumExpr createNumExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NumExprImpl();
    }

    /**
     * Create an instance of RefNameElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.RefNameElement createRefNameElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.RefNameElementImpl();
    }

    /**
     * Create an instance of BindExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.BindExpr createBindExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.BindExprImpl();
    }

    /**
     * Create an instance of GivenType
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.GivenType createGivenType()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.GivenTypeImpl();
    }

    /**
     * Create an instance of TupleSelExpr
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.TupleSelExpr createTupleSelExpr()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.TupleSelExprImpl();
    }

    /**
     * Create an instance of SchText
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.SchText createSchText()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl();
    }

    /**
     * Create an instance of NegPred
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.NegPred createNegPred()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.NegPredImpl();
    }

    /**
     * Create an instance of Expr2N
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.Expr2N createExpr2N()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.Expr2NImpl();
    }

    /**
     * Create an instance of LocAnn
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.LocAnn createLocAnn()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.LocAnnImpl();
    }

    /**
     * Create an instance of UnparsedZSectElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.UnparsedZSectElement createUnparsedZSectElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.UnparsedZSectElementImpl();
    }

    /**
     * Create an instance of ConstDeclElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.ConstDeclElement createConstDeclElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.ConstDeclElementImpl();
    }

    /**
     * Create an instance of MemPredElement
     * 
     * @throws JAXBException if an error occurs
     */
    public net.sourceforge.czt.core.jaxb.gen.MemPredElement createMemPredElement()
        throws javax.xml.bind.JAXBException
    {
        return new net.sourceforge.czt.core.jaxb.gen.impl.MemPredElementImpl();
    }

    private static class GrammarInfoImpl
        extends net.sourceforge.czt.core.jaxb.gen.impl.runtime.AbstractGrammarInfoImpl
    {


        public java.lang.Class getDefaultImplementation(java.lang.Class javaContentInterface) {
            java.lang.Class c = null;
            try {
                c = java.lang.Class.forName(((java.lang.String) defaultImplementations.get(javaContentInterface.getName())));
            } catch (java.lang.Exception _x) {
                c = null;
            }
            return c;
        }

        public net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingEventHandler createUnmarshaller(java.lang.String uri, java.lang.String local, net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingContext context) {
            if (("BindSelExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.BindSelExprElementImpl().createUnmarshaller(context);
            }
            if (("Branch" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.BranchElementImpl().createUnmarshaller(context);
            }
            if (("DecorExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.DecorExprElementImpl().createUnmarshaller(context);
            }
            if (("SetCompExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.SetCompExprImpl().createUnmarshaller(context);
            }
            if (("ZSect" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.ZSectElementImpl().createUnmarshaller(context);
            }
            if (("Name" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.NameElementImpl().createUnmarshaller(context);
            }
            if (("AndExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.AndExprImpl().createUnmarshaller(context);
            }
            if (("UnparsedPara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.UnparsedParaElementImpl().createUnmarshaller(context);
            }
            if (("ProdExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.ProdExprImpl().createUnmarshaller(context);
            }
            if (("AndPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl().createUnmarshaller(context);
            }
            if (("SectTypeEnvAnn" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.SectTypeEnvAnnElementImpl().createUnmarshaller(context);
            }
            if (("BindExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.BindExprElementImpl().createUnmarshaller(context);
            }
            if (("RenameExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.RenameExprElementImpl().createUnmarshaller(context);
            }
            if (("SchemaType" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.SchemaTypeElementImpl().createUnmarshaller(context);
            }
            if (("GenType" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.GenTypeElementImpl().createUnmarshaller(context);
            }
            if (("InclDecl" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.InclDeclElementImpl().createUnmarshaller(context);
            }
            if (("CompExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.CompExprImpl().createUnmarshaller(context);
            }
            if (("ImpliesExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.ImpliesExprImpl().createUnmarshaller(context);
            }
            if (("GivenType" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.GivenTypeElementImpl().createUnmarshaller(context);
            }
            if (("LetExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.LetExprImpl().createUnmarshaller(context);
            }
            if (("IffPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.IffPredImpl().createUnmarshaller(context);
            }
            if (("Operand" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.OperandElementImpl().createUnmarshaller(context);
            }
            if (("Spec" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.SpecElementImpl().createUnmarshaller(context);
            }
            if (("MemPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.MemPredElementImpl().createUnmarshaller(context);
            }
            if (("ForallExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.ForallExprImpl().createUnmarshaller(context);
            }
            if (("ProjExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.ProjExprImpl().createUnmarshaller(context);
            }
            if (("PowerType" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.PowerTypeElementImpl().createUnmarshaller(context);
            }
            if (("Signature" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.SignatureElementImpl().createUnmarshaller(context);
            }
            if (("SchExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.SchExprElementImpl().createUnmarshaller(context);
            }
            if (("RefName" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.RefNameElementImpl().createUnmarshaller(context);
            }
            if (("TypeAnn" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.TypeAnnElementImpl().createUnmarshaller(context);
            }
            if (("PowerExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.PowerExprImpl().createUnmarshaller(context);
            }
            if (("OrExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.OrExprImpl().createUnmarshaller(context);
            }
            if (("NextStroke" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.NextStrokeImpl().createUnmarshaller(context);
            }
            if (("ImpliesPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.ImpliesPredImpl().createUnmarshaller(context);
            }
            if (("VarDecl" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.VarDeclElementImpl().createUnmarshaller(context);
            }
            if (("TypeEnvAnn" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.TypeEnvAnnElementImpl().createUnmarshaller(context);
            }
            if (("ThetaExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.ThetaExprElementImpl().createUnmarshaller(context);
            }
            if (("NumStroke" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.NumStrokeElementImpl().createUnmarshaller(context);
            }
            if (("TupleExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.TupleExprImpl().createUnmarshaller(context);
            }
            if (("ParenAnn" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.ParenAnnImpl().createUnmarshaller(context);
            }
            if (("ExprPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.ExprPredElementImpl().createUnmarshaller(context);
            }
            if (("IffExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.IffExprImpl().createUnmarshaller(context);
            }
            if (("NameExprPair" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.NameExprPairElementImpl().createUnmarshaller(context);
            }
            if (("OptempPara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.OptempParaElementImpl().createUnmarshaller(context);
            }
            if (("NameNamePair" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.NameNamePairElementImpl().createUnmarshaller(context);
            }
            if (("OrPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.OrPredImpl().createUnmarshaller(context);
            }
            if (("NarrPara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.NarrParaElementImpl().createUnmarshaller(context);
            }
            if (("NegExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.NegExprImpl().createUnmarshaller(context);
            }
            if (("Parent" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.ParentElementImpl().createUnmarshaller(context);
            }
            if (("FalsePred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.FalsePredImpl().createUnmarshaller(context);
            }
            if (("ExistsPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.ExistsPredImpl().createUnmarshaller(context);
            }
            if (("Freetype" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.FreetypeElementImpl().createUnmarshaller(context);
            }
            if (("DeclName" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.DeclNameElementImpl().createUnmarshaller(context);
            }
            if (("FreePara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.FreeParaElementImpl().createUnmarshaller(context);
            }
            if (("LocAnn" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.LocAnnElementImpl().createUnmarshaller(context);
            }
            if (("PipeExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.PipeExprImpl().createUnmarshaller(context);
            }
            if (("NumExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.NumExprElementImpl().createUnmarshaller(context);
            }
            if (("CondExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.CondExprElementImpl().createUnmarshaller(context);
            }
            if (("ForallPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.ForallPredImpl().createUnmarshaller(context);
            }
            if (("NarrSect" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.NarrSectElementImpl().createUnmarshaller(context);
            }
            if (("TruePred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.TruePredImpl().createUnmarshaller(context);
            }
            if (("AxPara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.AxParaElementImpl().createUnmarshaller(context);
            }
            if (("HideExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.HideExprElementImpl().createUnmarshaller(context);
            }
            if (("ExistsExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.ExistsExprImpl().createUnmarshaller(context);
            }
            if (("NameTypePair" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.NameTypePairElementImpl().createUnmarshaller(context);
            }
            if (("Exists1Pred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.Exists1PredImpl().createUnmarshaller(context);
            }
            if (("TupleSelExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.TupleSelExprElementImpl().createUnmarshaller(context);
            }
            if (("MuExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.MuExprImpl().createUnmarshaller(context);
            }
            if (("SetExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.SetExprImpl().createUnmarshaller(context);
            }
            if (("InStroke" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.InStrokeImpl().createUnmarshaller(context);
            }
            if (("NegPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.NegPredElementImpl().createUnmarshaller(context);
            }
            if (("ProdType" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.ProdTypeElementImpl().createUnmarshaller(context);
            }
            if (("NameSectTypeTriple" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.NameSectTypeTripleElementImpl().createUnmarshaller(context);
            }
            if (("ConjPara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.ConjParaElementImpl().createUnmarshaller(context);
            }
            if (("ConstDecl" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.ConstDeclElementImpl().createUnmarshaller(context);
            }
            if (("SchText" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.SchTextElementImpl().createUnmarshaller(context);
            }
            if (("ApplExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.ApplExprElementImpl().createUnmarshaller(context);
            }
            if (("LambdaExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.LambdaExprImpl().createUnmarshaller(context);
            }
            if (("OutStroke" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.OutStrokeImpl().createUnmarshaller(context);
            }
            if (("UnparsedZSect" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.UnparsedZSectElementImpl().createUnmarshaller(context);
            }
            if (("PreExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.PreExprImpl().createUnmarshaller(context);
            }
            if (("Exists1Expr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.Exists1ExprImpl().createUnmarshaller(context);
            }
            if (("RefExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.RefExprElementImpl().createUnmarshaller(context);
            }
            if (("GivenPara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return new net.sourceforge.czt.core.jaxb.gen.impl.GivenParaElementImpl().createUnmarshaller(context);
            }
            return null;
        }

        public java.lang.Class getRootElement(java.lang.String uri, java.lang.String local) {
            if (("BindSelExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.BindSelExprElementImpl.class);
            }
            if (("Branch" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.BranchElementImpl.class);
            }
            if (("DecorExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.DecorExprElementImpl.class);
            }
            if (("SetCompExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.SetCompExprImpl.class);
            }
            if (("ZSect" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.ZSectElementImpl.class);
            }
            if (("Name" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.NameElementImpl.class);
            }
            if (("AndExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.AndExprImpl.class);
            }
            if (("UnparsedPara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.UnparsedParaElementImpl.class);
            }
            if (("ProdExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.ProdExprImpl.class);
            }
            if (("AndPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.class);
            }
            if (("SectTypeEnvAnn" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.SectTypeEnvAnnElementImpl.class);
            }
            if (("BindExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.BindExprElementImpl.class);
            }
            if (("RenameExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.RenameExprElementImpl.class);
            }
            if (("SchemaType" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.SchemaTypeElementImpl.class);
            }
            if (("GenType" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.GenTypeElementImpl.class);
            }
            if (("InclDecl" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.InclDeclElementImpl.class);
            }
            if (("CompExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.CompExprImpl.class);
            }
            if (("ImpliesExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.ImpliesExprImpl.class);
            }
            if (("GivenType" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.GivenTypeElementImpl.class);
            }
            if (("LetExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.LetExprImpl.class);
            }
            if (("IffPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.IffPredImpl.class);
            }
            if (("Operand" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.OperandElementImpl.class);
            }
            if (("Spec" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.SpecElementImpl.class);
            }
            if (("MemPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.MemPredElementImpl.class);
            }
            if (("ForallExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.ForallExprImpl.class);
            }
            if (("ProjExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.ProjExprImpl.class);
            }
            if (("PowerType" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.PowerTypeElementImpl.class);
            }
            if (("Signature" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.SignatureElementImpl.class);
            }
            if (("SchExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.SchExprElementImpl.class);
            }
            if (("RefName" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.RefNameElementImpl.class);
            }
            if (("TypeAnn" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.TypeAnnElementImpl.class);
            }
            if (("PowerExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.PowerExprImpl.class);
            }
            if (("OrExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.OrExprImpl.class);
            }
            if (("NextStroke" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.NextStrokeImpl.class);
            }
            if (("ImpliesPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.ImpliesPredImpl.class);
            }
            if (("VarDecl" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.VarDeclElementImpl.class);
            }
            if (("TypeEnvAnn" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.TypeEnvAnnElementImpl.class);
            }
            if (("ThetaExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.ThetaExprElementImpl.class);
            }
            if (("NumStroke" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.NumStrokeElementImpl.class);
            }
            if (("TupleExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.TupleExprImpl.class);
            }
            if (("ParenAnn" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.ParenAnnImpl.class);
            }
            if (("ExprPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.ExprPredElementImpl.class);
            }
            if (("IffExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.IffExprImpl.class);
            }
            if (("NameExprPair" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.NameExprPairElementImpl.class);
            }
            if (("OptempPara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.OptempParaElementImpl.class);
            }
            if (("NameNamePair" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.NameNamePairElementImpl.class);
            }
            if (("OrPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.OrPredImpl.class);
            }
            if (("NarrPara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.NarrParaElementImpl.class);
            }
            if (("NegExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.NegExprImpl.class);
            }
            if (("Parent" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.ParentElementImpl.class);
            }
            if (("FalsePred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.FalsePredImpl.class);
            }
            if (("ExistsPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.ExistsPredImpl.class);
            }
            if (("Freetype" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.FreetypeElementImpl.class);
            }
            if (("DeclName" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.DeclNameElementImpl.class);
            }
            if (("FreePara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.FreeParaElementImpl.class);
            }
            if (("LocAnn" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.LocAnnElementImpl.class);
            }
            if (("PipeExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.PipeExprImpl.class);
            }
            if (("NumExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.NumExprElementImpl.class);
            }
            if (("CondExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.CondExprElementImpl.class);
            }
            if (("ForallPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.ForallPredImpl.class);
            }
            if (("NarrSect" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.NarrSectElementImpl.class);
            }
            if (("TruePred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.TruePredImpl.class);
            }
            if (("AxPara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.AxParaElementImpl.class);
            }
            if (("HideExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.HideExprElementImpl.class);
            }
            if (("ExistsExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.ExistsExprImpl.class);
            }
            if (("NameTypePair" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.NameTypePairElementImpl.class);
            }
            if (("Exists1Pred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.Exists1PredImpl.class);
            }
            if (("TupleSelExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.TupleSelExprElementImpl.class);
            }
            if (("MuExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.MuExprImpl.class);
            }
            if (("SetExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.SetExprImpl.class);
            }
            if (("InStroke" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.InStrokeImpl.class);
            }
            if (("NegPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.NegPredElementImpl.class);
            }
            if (("ProdType" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.ProdTypeElementImpl.class);
            }
            if (("NameSectTypeTriple" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.NameSectTypeTripleElementImpl.class);
            }
            if (("ConjPara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.ConjParaElementImpl.class);
            }
            if (("ConstDecl" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.ConstDeclElementImpl.class);
            }
            if (("SchText" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.SchTextElementImpl.class);
            }
            if (("ApplExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.ApplExprElementImpl.class);
            }
            if (("LambdaExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.LambdaExprImpl.class);
            }
            if (("OutStroke" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.OutStrokeImpl.class);
            }
            if (("UnparsedZSect" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.UnparsedZSectElementImpl.class);
            }
            if (("PreExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.PreExprImpl.class);
            }
            if (("Exists1Expr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.Exists1ExprImpl.class);
            }
            if (("RefExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.RefExprElementImpl.class);
            }
            if (("GivenPara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return (net.sourceforge.czt.core.jaxb.gen.impl.GivenParaElementImpl.class);
            }
            return null;
        }

        public boolean recognize(java.lang.String uri, java.lang.String local) {
            if (("BindSelExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("Branch" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("DecorExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("SetCompExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("ZSect" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("Name" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("AndExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("UnparsedPara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("ProdExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("AndPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("SectTypeEnvAnn" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("BindExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("RenameExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("SchemaType" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("GenType" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("InclDecl" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("CompExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("ImpliesExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("GivenType" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("LetExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("IffPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("Operand" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("Spec" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("MemPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("ForallExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("ProjExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("PowerType" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("Signature" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("SchExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("RefName" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("TypeAnn" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("PowerExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("OrExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("NextStroke" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("ImpliesPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("VarDecl" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("TypeEnvAnn" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("ThetaExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("NumStroke" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("TupleExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("ParenAnn" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("ExprPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("IffExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("NameExprPair" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("OptempPara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("NameNamePair" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("OrPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("NarrPara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("NegExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("Parent" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("FalsePred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("ExistsPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("Freetype" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("DeclName" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("FreePara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("LocAnn" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("PipeExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("NumExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("CondExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("ForallPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("NarrSect" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("TruePred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("AxPara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("HideExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("ExistsExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("NameTypePair" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("Exists1Pred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("TupleSelExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("MuExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("SetExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("InStroke" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("NegPred" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("ProdType" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("NameSectTypeTriple" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("ConjPara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("ConstDecl" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("SchText" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("ApplExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("LambdaExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("OutStroke" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("UnparsedZSect" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("PreExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("Exists1Expr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("RefExpr" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            if (("GivenPara" == local)&&("http://czt.sourceforge.net/zml" == uri)) {
                return true;
            }
            return false;
        }

        public java.lang.String[] getProbePoints() {
            return new java.lang.String[] {"http://czt.sourceforge.net/zml", "BindSelExpr", "http://czt.sourceforge.net/zml", "Branch", "http://czt.sourceforge.net/zml", "DecorExpr", "http://czt.sourceforge.net/zml", "SetCompExpr", "http://czt.sourceforge.net/zml", "ZSect", "http://czt.sourceforge.net/zml", "Name", "http://czt.sourceforge.net/zml", "AndExpr", "http://czt.sourceforge.net/zml", "UnparsedPara", "http://czt.sourceforge.net/zml", "ProdExpr", "http://czt.sourceforge.net/zml", "AndPred", "http://czt.sourceforge.net/zml", "SectTypeEnvAnn", "http://czt.sourceforge.net/zml", "BindExpr", "http://czt.sourceforge.net/zml", "RenameExpr", "http://czt.sourceforge.net/zml", "SchemaType", "http://czt.sourceforge.net/zml", "GenType", "http://czt.sourceforge.net/zml", "InclDecl", "http://czt.sourceforge.net/zml", "CompExpr", "http://czt.sourceforge.net/zml", "ImpliesExpr", "http://czt.sourceforge.net/zml", "GivenType", "http://czt.sourceforge.net/zml", "LetExpr", "http://czt.sourceforge.net/zml", "IffPred", "http://czt.sourceforge.net/zml", "Operand", "http://czt.sourceforge.net/zml", "Spec", "http://czt.sourceforge.net/zml", "MemPred", "http://czt.sourceforge.net/zml", "ForallExpr", "http://czt.sourceforge.net/zml", "ProjExpr", "http://czt.sourceforge.net/zml", "PowerType", "http://czt.sourceforge.net/zml", "Signature", "http://czt.sourceforge.net/zml", "SchExpr", "http://czt.sourceforge.net/zml", "RefName", "http://czt.sourceforge.net/zml", "TypeAnn", "http://czt.sourceforge.net/zml", "PowerExpr", "http://czt.sourceforge.net/zml", "OrExpr", "http://czt.sourceforge.net/zml", "NextStroke", "http://czt.sourceforge.net/zml", "ImpliesPred", "http://czt.sourceforge.net/zml", "VarDecl", "http://czt.sourceforge.net/zml", "TypeEnvAnn", "http://czt.sourceforge.net/zml", "ThetaExpr", "http://czt.sourceforge.net/zml", "NumStroke", "http://czt.sourceforge.net/zml", "TupleExpr", "http://czt.sourceforge.net/zml", "ParenAnn", "http://czt.sourceforge.net/zml", "ExprPred", "http://czt.sourceforge.net/zml", "IffExpr", "http://czt.sourceforge.net/zml", "NameExprPair", "http://czt.sourceforge.net/zml", "OptempPara", "http://czt.sourceforge.net/zml", "NameNamePair", "http://czt.sourceforge.net/zml", "OrPred", "http://czt.sourceforge.net/zml", "NarrPara", "http://czt.sourceforge.net/zml", "NegExpr", "http://czt.sourceforge.net/zml", "Parent", "http://czt.sourceforge.net/zml", "FalsePred", "http://czt.sourceforge.net/zml", "ExistsPred", "http://czt.sourceforge.net/zml", "Freetype", "http://czt.sourceforge.net/zml", "DeclName", "http://czt.sourceforge.net/zml", "FreePara", "http://czt.sourceforge.net/zml", "LocAnn", "http://czt.sourceforge.net/zml", "PipeExpr", "http://czt.sourceforge.net/zml", "NumExpr", "http://czt.sourceforge.net/zml", "CondExpr", "http://czt.sourceforge.net/zml", "ForallPred", "http://czt.sourceforge.net/zml", "NarrSect", "http://czt.sourceforge.net/zml", "TruePred", "http://czt.sourceforge.net/zml", "AxPara", "http://czt.sourceforge.net/zml", "HideExpr", "http://czt.sourceforge.net/zml", "ExistsExpr", "http://czt.sourceforge.net/zml", "NameTypePair", "http://czt.sourceforge.net/zml", "Exists1Pred", "http://czt.sourceforge.net/zml", "TupleSelExpr", "http://czt.sourceforge.net/zml", "MuExpr", "http://czt.sourceforge.net/zml", "SetExpr", "http://czt.sourceforge.net/zml", "InStroke", "http://czt.sourceforge.net/zml", "NegPred", "http://czt.sourceforge.net/zml", "ProdType", "http://czt.sourceforge.net/zml", "NameSectTypeTriple", "http://czt.sourceforge.net/zml", "ConjPara", "http://czt.sourceforge.net/zml", "ConstDecl", "http://czt.sourceforge.net/zml", "SchText", "http://czt.sourceforge.net/zml", "ApplExpr", "http://czt.sourceforge.net/zml", "LambdaExpr", "http://czt.sourceforge.net/zml", "OutStroke", "http://czt.sourceforge.net/zml", "UnparsedZSect", "http://czt.sourceforge.net/zml", "PreExpr", "http://czt.sourceforge.net/zml", "Exists1Expr", "http://czt.sourceforge.net/zml", "RefExpr", "http://czt.sourceforge.net/zml", "GivenPara"};
        }

    }

}
