//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.1-05/30/2003 05:06 AM(java_re)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2003.08.25 at 03:03:07 NZST 
//


package net.sourceforge.czt.core.jaxb.gen.impl;

public class QntPredImpl
    extends net.sourceforge.czt.core.jaxb.gen.impl.PredImpl
    implements net.sourceforge.czt.core.jaxb.gen.QntPred, com.sun.xml.bind.JAXBObject, net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallableObject, net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializable, net.sourceforge.czt.core.jaxb.gen.impl.runtime.ValidatableObject
{

    protected net.sourceforge.czt.core.jaxb.gen.SchText _SchText;
    protected net.sourceforge.czt.core.jaxb.gen.Pred _Pred;
    public final static java.lang.Class version = (net.sourceforge.czt.core.jaxb.gen.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (net.sourceforge.czt.core.jaxb.gen.QntPred.class);
    }

    public net.sourceforge.czt.core.jaxb.gen.SchText getSchText() {
        return _SchText;
    }

    public void setSchText(net.sourceforge.czt.core.jaxb.gen.SchText value) {
        _SchText = value;
    }

    public net.sourceforge.czt.core.jaxb.gen.Pred getPred() {
        return _Pred;
    }

    public void setPred(net.sourceforge.czt.core.jaxb.gen.Pred value) {
        _Pred = value;
    }

    public net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingEventHandler createUnmarshaller(net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingContext context) {
        return new net.sourceforge.czt.core.jaxb.gen.impl.QntPredImpl.Unmarshaller(context);
    }

    public void serializeElementBody(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeElementBody(context);
        if (_SchText instanceof javax.xml.bind.Element) {
            context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _SchText));
        } else {
            context.startElement("http://czt.sourceforge.net/zml", "SchText");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _SchText));
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _SchText));
            context.endAttributes();
            context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _SchText));
            context.endElement();
        }
        context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Pred));
    }

    public void serializeAttributes(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeAttributes(context);
        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred));
    }

    public void serializeAttributeBody(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeAttributeBody(context);
        if (_SchText instanceof javax.xml.bind.Element) {
            context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _SchText));
        } else {
            context.startElement("http://czt.sourceforge.net/zml", "SchText");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _SchText));
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _SchText));
            context.endAttributes();
            context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _SchText));
            context.endElement();
        }
        context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Pred));
    }

    public void serializeURIs(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeURIs(context);
        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred));
    }

    public java.lang.Class getPrimaryInterface() {
        return (net.sourceforge.czt.core.jaxb.gen.QntPred.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava"
+"/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u0012\u00c1\u00b7\u0099ppsq\u0000~\u0000\u0000\u0003\u00c0X\u0006ppsr\u0000\u001dcom"
+".sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001\u0001@\u001d`ppsr\u0000\'com.sun"
+".msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLc"
+"om/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.Element"
+"Exp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModelq\u0000"
+"~\u0000\u0002xq\u0000~\u0000\u0003\u0001@\u001dUsr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000p\u0000sq"
+"\u0000~\u0000\t\u0001@\u001dJpp\u0000sq\u0000~\u0000\u0007\u0001@\u001d?ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq"
+"\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0001@\u001d4q\u0000~\u0000\u000epsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\nxq\u0000~\u0000\u0003\u0001@\u001d1q\u0000~\u0000\u000epsr\u00002com.s"
+"un.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~"
+"\u0000\u0003\u0000\u0000\u0000\bsq\u0000~\u0000\r\u0001q\u0000~\u0000\u0017sr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.s"
+"un.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003"
+"\u0000\u0000\u0000\tq\u0000~\u0000\u0018q\u0000~\u0000\u001dsr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000\u001fxq\u0000"
+"~\u0000\u001at\u00000net.sourceforge.czt.core.jaxb.gen.TermA.AnnsTypet\u0000+htt"
+"p://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u001et\u0000\u0004Annst\u0000\u001ehttp"
+"://czt.sourceforge.net/zmlq\u0000~\u0000\u001dsq\u0000~\u0000\u0007\u0002\u0080:\u00a1ppsq\u0000~\u0000\t\u0001@\u001dUpp\u0000sq\u0000~"
+"\u0000\t\u0001@\u001dJpp\u0000sq\u0000~\u0000\u0007\u0001@\u001d?ppsq\u0000~\u0000\u0011\u0001@\u001d4q\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0001@\u001d1q\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000"
+"~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000)net.sourceforge.czt.core.jaxb.gen.SchTextq\u0000"
+"~\u0000\"sq\u0000~\u0000\u001et\u0000\u0007SchTextq\u0000~\u0000%sq\u0000~\u0000\t\u0001@\u001dJpp\u0000sq\u0000~\u0000\u0007\u0001@\u001d?ppsq\u0000~\u0000\u0011\u0001@\u001d4q"
+"\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0001@\u001d1q\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u00000net.sourceforge"
+".czt.core.jaxb.gen.SchTextElementq\u0000~\u0000\"sq\u0000~\u0000\u0007\u000f\u0001_\u008eppsq\u0000~\u0000\u0007\r\u00c1BB"
+"ppsq\u0000~\u0000\u0007\f\u0081$\u00f6ppsq\u0000~\u0000\u0007\u000bA\u0007\u00aappsq\u0000~\u0000\u0007\n\u0000\u00ea^ppsq\u0000~\u0000\u0007\b\u00c0\u00cd\u0012ppsq\u0000~\u0000\u0007\u0007\u0080\u00af\u00c6"
+"ppsq\u0000~\u0000\u0007\u0006@\u0092zppsq\u0000~\u0000\u0007\u0005\u0000u.ppsq\u0000~\u0000\u0007\u0003\u00c0W\u00e2ppsq\u0000~\u0000\u0007\u0002\u0080:\u0096ppsq\u0000~\u0000\t\u0001@\u001dJ"
+"pp\u0000sq\u0000~\u0000\u0007\u0001@\u001d?ppsq\u0000~\u0000\u0011\u0001@\u001d4q\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0001@\u001d1q\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~"
+"\u0000\u001dsq\u0000~\u0000\u001et\u0000+net.sourceforge.czt.core.jaxb.gen.FalsePredq\u0000~\u0000\"s"
+"q\u0000~\u0000\t\u0001@\u001dJpp\u0000sq\u0000~\u0000\u0007\u0001@\u001d?ppsq\u0000~\u0000\u0011\u0001@\u001d4q\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0001@\u001d1q\u0000~\u0000\u000epq\u0000~\u0000"
+"\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000*net.sourceforge.czt.core.jaxb.gen.TruePr"
+"edq\u0000~\u0000\"sq\u0000~\u0000\t\u0001@\u001dJpp\u0000sq\u0000~\u0000\u0007\u0001@\u001d?ppsq\u0000~\u0000\u0011\u0001@\u001d4q\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0001@\u001d1q\u0000"
+"~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u00000net.sourceforge.czt.core.jaxb.ge"
+"n.AndPredElementq\u0000~\u0000\"sq\u0000~\u0000\t\u0001@\u001dJpp\u0000sq\u0000~\u0000\u0007\u0001@\u001d?ppsq\u0000~\u0000\u0011\u0001@\u001d4q\u0000~\u0000"
+"\u000epsq\u0000~\u0000\u0014\u0001@\u001d1q\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000-net.sourceforge.cz"
+"t.core.jaxb.gen.ImpliesPredq\u0000~\u0000\"sq\u0000~\u0000\t\u0001@\u001dJpp\u0000sq\u0000~\u0000\u0007\u0001@\u001d?ppsq\u0000"
+"~\u0000\u0011\u0001@\u001d4q\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0001@\u001d1q\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000)net.sou"
+"rceforge.czt.core.jaxb.gen.IffPredq\u0000~\u0000\"sq\u0000~\u0000\t\u0001@\u001dJpp\u0000sq\u0000~\u0000\u0007\u0001@"
+"\u001d?ppsq\u0000~\u0000\u0011\u0001@\u001d4q\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0001@\u001d1q\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000("
+"net.sourceforge.czt.core.jaxb.gen.OrPredq\u0000~\u0000\"sq\u0000~\u0000\t\u0001@\u001dJpp\u0000sq"
+"\u0000~\u0000\u0007\u0001@\u001d?ppsq\u0000~\u0000\u0011\u0001@\u001d4q\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0001@\u001d1q\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000"
+"~\u0000\u001et\u0000,net.sourceforge.czt.core.jaxb.gen.ExistsPredq\u0000~\u0000\"sq\u0000~\u0000"
+"\t\u0001@\u001dJpp\u0000sq\u0000~\u0000\u0007\u0001@\u001d?ppsq\u0000~\u0000\u0011\u0001@\u001d4q\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0001@\u001d1q\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~"
+"\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000-net.sourceforge.czt.core.jaxb.gen.Exists1Pre"
+"dq\u0000~\u0000\"sq\u0000~\u0000\t\u0001@\u001dJpp\u0000sq\u0000~\u0000\u0007\u0001@\u001d?ppsq\u0000~\u0000\u0011\u0001@\u001d4q\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0001@\u001d1q\u0000~"
+"\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000,net.sourceforge.czt.core.jaxb.gen"
+".ForallPredq\u0000~\u0000\"sq\u0000~\u0000\t\u0001@\u001dJpp\u0000sq\u0000~\u0000\u0007\u0001@\u001d?ppsq\u0000~\u0000\u0011\u0001@\u001d4q\u0000~\u0000\u000epsq\u0000"
+"~\u0000\u0014\u0001@\u001d1q\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u00001net.sourceforge.czt.cor"
+"e.jaxb.gen.ExprPredElementq\u0000~\u0000\"sq\u0000~\u0000\t\u0001@\u001dJpp\u0000sq\u0000~\u0000\u0007\u0001@\u001d?ppsq\u0000~"
+"\u0000\u0011\u0001@\u001d4q\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0001@\u001d1q\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u00000net.sour"
+"ceforge.czt.core.jaxb.gen.MemPredElementq\u0000~\u0000\"sq\u0000~\u0000\t\u0001@\u001dJpp\u0000sq"
+"\u0000~\u0000\u0007\u0001@\u001d?ppsq\u0000~\u0000\u0011\u0001@\u001d4q\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0001@\u001d1q\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000"
+"~\u0000\u001et\u00000net.sourceforge.czt.core.jaxb.gen.NegPredElementq\u0000~\u0000\"s"
+"r\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet"
+"\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.s"
+"un.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI"
+"\u0000\tthresholdL\u0000\u0006parentq\u0000~\u0000\u008a[\u0000\u0005tablet\u0000![Lcom/sun/msv/grammar/Ex"
+"pression;xp\u0000\u0000\u0000-\u0000\u0000\u00009pur\u0000![Lcom.sun.msv.grammar.Expression;\u00d68D"
+"\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0000\u00bfq\u0000~\u00008ppppppppppppppppppppppppppppppppppppq\u0000~\u0000>"
+"q\u0000~\u00009pq\u0000~\u0000\u0005ppppppppppppppppppppppppppppppppppq\u0000~\u0000?q\u0000~\u0000:ppppp"
+"pppppppppppppppppppppppppppppq\u0000~\u0000\u0006pq\u0000~\u0000@q\u0000~\u0000;q\u0000~\u00006ppppppppq\u0000"
+"~\u0000&ppppq\u0000~\u0000\u0013q\u0000~\u0000*q\u0000~\u00002q\u0000~\u0000Cq\u0000~\u0000Iq\u0000~\u0000Oq\u0000~\u0000Uq\u0000~\u0000[q\u0000~\u0000aq\u0000~\u0000gq\u0000~"
+"\u0000mq\u0000~\u0000\u0010q\u0000~\u0000)q\u0000~\u00001q\u0000~\u0000Bq\u0000~\u0000Hq\u0000~\u0000Nq\u0000~\u0000Tq\u0000~\u0000Zq\u0000~\u0000`q\u0000~\u0000fq\u0000~\u0000lq\u0000~"
+"\u0000sq\u0000~\u0000<q\u0000~\u0000rq\u0000~\u0000yq\u0000~\u0000xq\u0000~\u0000\u007fq\u0000~\u0000~q\u0000~\u00007q\u0000~\u0000\u0085q\u0000~\u0000\u0084ppppppppppppq"
+"\u0000~\u0000\bppppppppppppppppq\u0000~\u0000="));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends net.sourceforge.czt.core.jaxb.gen.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingContext context) {
            super(context, "------");
        }

        protected Unmarshaller(net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return net.sourceforge.czt.core.jaxb.gen.impl.QntPredImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  4 :
                        if (("FalsePred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.FalsePredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.FalsePredImpl.class), 5, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("TruePred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.TruePredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.TruePredImpl.class), 5, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("AndPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.class), 5, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("ImpliesPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.ImpliesPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ImpliesPredImpl.class), 5, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("IffPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.IffPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.IffPredImpl.class), 5, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("OrPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.OrPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.OrPredImpl.class), 5, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("ExistsPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.ExistsPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ExistsPredImpl.class), 5, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Exists1Pred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.Exists1PredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.Exists1PredImpl.class), 5, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("ForallPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.ForallPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ForallPredImpl.class), 5, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("ExprPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.ExprPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ExprPredElementImpl.class), 5, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("MemPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.MemPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.MemPredElementImpl.class), 5, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("NegPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.NegPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.NegPredElementImpl.class), 5, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  5 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  1 :
                        if (("SchText" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 2;
                            return ;
                        }
                        break;
                    case  0 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl)net.sourceforge.czt.core.jaxb.gen.impl.QntPredImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl)net.sourceforge.czt.core.jaxb.gen.impl.QntPredImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                        return ;
                    case  2 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("ConstDecl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("InclDecl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("VarDecl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("FalsePred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("TruePred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("AndPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("ImpliesPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("IffPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("OrPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("ExistsPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Exists1Pred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("ForallPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("ExprPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("MemPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("NegPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname, __atts));
                        return ;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        if (("SchText" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 4;
                            return ;
                        }
                        break;
                    case  5 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  0 :
                        spawnHandlerFromLeaveElement((((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl)net.sourceforge.czt.core.jaxb.gen.impl.QntPredImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  2 :
                        _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromLeaveElement((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname));
                        return ;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  5 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  0 :
                        spawnHandlerFromEnterAttribute((((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl)net.sourceforge.czt.core.jaxb.gen.impl.QntPredImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  2 :
                        _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname));
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  5 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  0 :
                        spawnHandlerFromLeaveAttribute((((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl)net.sourceforge.czt.core.jaxb.gen.impl.QntPredImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  2 :
                        _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, ___uri, ___local, ___qname));
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  5 :
                            revertToParentFromText(value);
                            return ;
                        case  0 :
                            spawnHandlerFromText((((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl)net.sourceforge.czt.core.jaxb.gen.impl.QntPredImpl.this).new Unmarshaller(context)), 1, value);
                            return ;
                        case  2 :
                            _SchText = ((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl) spawnChildFromText((net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.class), 3, value));
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
