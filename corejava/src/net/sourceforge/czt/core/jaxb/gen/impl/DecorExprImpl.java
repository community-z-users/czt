//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.2-b15-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2003.10.28 at 04:14:13 NZDT 
//


package net.sourceforge.czt.core.jaxb.gen.impl;

public class DecorExprImpl
    extends net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl
    implements net.sourceforge.czt.core.jaxb.gen.DecorExpr, com.sun.xml.bind.JAXBObject, net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallableObject, net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializable, net.sourceforge.czt.core.jaxb.gen.impl.runtime.ValidatableObject
{

    protected net.sourceforge.czt.core.jaxb.gen.Stroke _Stroke;
    public final static java.lang.Class version = (net.sourceforge.czt.core.jaxb.gen.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (net.sourceforge.czt.core.jaxb.gen.DecorExpr.class);
    }

    public net.sourceforge.czt.core.jaxb.gen.Stroke getStroke() {
        return _Stroke;
    }

    public void setStroke(net.sourceforge.czt.core.jaxb.gen.Stroke value) {
        _Stroke = value;
    }

    public net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingEventHandler createUnmarshaller(net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingContext context) {
        return new net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.Unmarshaller(context);
    }

    public void serializeBody(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeBody(context);
        if (_Stroke instanceof javax.xml.bind.Element) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Stroke), "Stroke");
        } else {
            context.startElement("http://czt.sourceforge.net/zml", "Stroke");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Stroke), "Stroke");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Stroke), "Stroke");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Stroke), "Stroke");
            context.endElement();
        }
    }

    public void serializeAttributes(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeAttributes(context);
        if (_Stroke instanceof javax.xml.bind.Element) {
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Stroke), "Stroke");
        }
    }

    public void serializeURIs(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeURIs(context);
        if (_Stroke instanceof javax.xml.bind.Element) {
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Stroke), "Stroke");
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (net.sourceforge.czt.core.jaxb.gen.DecorExpr.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava"
+"/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u0019nV\u00c0ppsq\u0000~\u0000\u0000\u0017\u0081:!ppsr\u0000\u001dcom"
+".sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001\u0003\u00c2\u00d4\u00dfppsr\u0000\'com.sun"
+".msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLc"
+"om/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.Element"
+"Exp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModelq\u0000"
+"~\u0000\u0002xq\u0000~\u0000\u0003\u0003\u00c2\u00d4\u00d4sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000p\u0000sq"
+"\u0000~\u0000\u0000\u0003\u00c2\u00d4\u00c9ppsq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsr\u0000 com.sun.msv.grammar.O"
+"neOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0000{G\u000fq\u0000~\u0000\u000epsr\u0000 com.sun.msv.grammar.Attr"
+"ibuteExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\nxq\u0000~\u0000\u0003\u0000{G\fq\u0000~"
+"\u0000\u000epsr\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\bsq\u0000~\u0000\r\u0001q\u0000~\u0000\u0018sr\u0000 com.sun.msv.grammar.AnyNam"
+"eClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\tq\u0000~\u0000\u0019q\u0000~\u0000\u001esr\u0000#com.sun.msv.grammar.SimpleName"
+"Class\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespac"
+"eURIq\u0000~\u0000 xq\u0000~\u0000\u001bt\u00000net.sourceforge.czt.core.jaxb.gen.TermA.An"
+"nsTypet\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u0007\u0003G"
+"\u008d\u009fppsq\u0000~\u0000\u0015\u0003G\u008d\u0094q\u0000~\u0000\u000epsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004na"
+"met\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003\u0001d\u00b9\u00c6ppsr\u0000\"com.sun.ms"
+"v.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype."
+"xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd"
+".ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatat"
+"ypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000 L\u0000\btypeNameq\u0000~\u0000 L\u0000\nwhi"
+"teSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000"
+" http://www.w3.org/2001/XMLSchemat\u0000\u0005QNamesr\u00005com.sun.msv.dat"
+"atype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun"
+".msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.su"
+"n.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000"
+"\u0000\u0000\nq\u0000~\u0000\u000epsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalN"
+"ameq\u0000~\u0000 L\u0000\fnamespaceURIq\u0000~\u0000 xpq\u0000~\u00001q\u0000~\u00000sq\u0000~\u0000\u001ft\u0000\u0004typet\u0000)http"
+"://www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000\u0004Annst\u0000\u001eht"
+"tp://czt.sourceforge.net/zmlq\u0000~\u0000\u001esq\u0000~\u0000\u0007\u0013\u00bee=ppsq\u0000~\u0000\u0007\u0013C\u001e\u0016ppsq\u0000"
+"~\u0000\u0007\u0012\u00c7\u00d6\u00efppsq\u0000~\u0000\u0007\u0012L\u008f\u00c8ppsq\u0000~\u0000\u0007\u0011\u00d1H\u00a1ppsq\u0000~\u0000\u0007\u0011V\u0001zppsq\u0000~\u0000\u0007\u0010\u00da\u00baSppsq\u0000"
+"~\u0000\u0007\u0010_s,ppsq\u0000~\u0000\u0007\u000f\u00e4,\u0005ppsq\u0000~\u0000\u0007\u000fh\u00e4\u00deppsq\u0000~\u0000\u0007\u000e\u00ed\u009d\u00b7ppsq\u0000~\u0000\u0007\u000erV\u0090ppsq\u0000"
+"~\u0000\u0007\r\u00f7\u000fippsq\u0000~\u0000\u0007\r{\u00c8Bppsq\u0000~\u0000\u0007\r\u0000\u0081\u001bppsq\u0000~\u0000\u0007\f\u00859\u00f4ppsq\u0000~\u0000\u0007\f\t\u00f2\u00cdppsq\u0000"
+"~\u0000\u0007\u000b\u008e\u00ab\u00a6ppsq\u0000~\u0000\u0007\u000b\u0013d\u007fppsq\u0000~\u0000\u0007\n\u0098\u001dXppsq\u0000~\u0000\u0007\n\u001c\u00d61ppsq\u0000~\u0000\u0007\t\u00a1\u008f\nppsq\u0000"
+"~\u0000\u0007\t&G\u00e3ppsq\u0000~\u0000\u0007\b\u00ab\u0000\u00bcppsq\u0000~\u0000\u0007\b/\u00b9\u0095ppsq\u0000~\u0000\u0007\u0007\u00b4rnppsq\u0000~\u0000\u0007\u00079+Gppsq\u0000"
+"~\u0000\u0007\u0006\u00bd\u00e4 ppsq\u0000~\u0000\u0007\u0006B\u009c\u00f9ppsq\u0000~\u0000\u0007\u0005\u00c7U\u00d2ppsq\u0000~\u0000\u0007\u0005L\u000e\u00abppsq\u0000~\u0000\u0007\u0004\u00d0\u00c7\u0084ppsq\u0000"
+"~\u0000\u0007\u0004U\u0080]ppsq\u0000~\u0000\u0007\u0003\u00da96ppsq\u0000~\u0000\u0007\u0003^\u00f2\u000fppsq\u0000~\u0000\u0007\u0002\u00e3\u00aa\u00e8ppsq\u0000~\u0000\u0007\u0002hc\u00c1ppsq\u0000"
+"~\u0000\u0007\u0001\u00ed\u001c\u009appsq\u0000~\u0000\u0007\u0001q\u00d5sppsq\u0000~\u0000\u0007\u0000\u00f6\u008eLppsq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq"
+"\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000*net.so"
+"urceforge.czt.core.jaxb.gen.PipeExprq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007"
+"\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft"
+"\u0000-net.sourceforge.czt.core.jaxb.gen.SetCompExprq\u0000~\u0000#sq\u0000~\u0000\t\u0000{"
+"G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq"
+"\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00001net.sourceforge.czt.core.jaxb.gen.SchExpr2Eleme"
+"ntq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000"
+"~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000,net.sourceforge.czt.core.jaxb.ge"
+"n.ExistsExprq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq"
+"\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000-net.sourceforge.czt.co"
+"re.jaxb.gen.Exists1Exprq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000"
+"{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00001net.sourcef"
+"orge.czt.core.jaxb.gen.HideExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~"
+"\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000"
+"\u001ft\u00003net.sourceforge.czt.core.jaxb.gen.RenameExprElementq\u0000~\u0000#"
+"sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~"
+"\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000)net.sourceforge.czt.core.jaxb.gen.PreEx"
+"prq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000"
+"~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00001net.sourceforge.czt.core.jaxb.ge"
+"n.CondExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~"
+"\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00001net.sourceforge.c"
+"zt.core.jaxb.gen.ApplExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001a"
+"ppsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000-ne"
+"t.sourceforge.czt.core.jaxb.gen.ImpliesExprq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp"
+"\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001e"
+"sq\u0000~\u0000\u001ft\u0000(net.sourceforge.czt.core.jaxb.gen.OrExprq\u0000~\u0000#sq\u0000~\u0000\t"
+"\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000"
+"\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000,net.sourceforge.czt.core.jaxb.gen.LambdaExprq"
+"\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000e"
+"pq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00000net.sourceforge.czt.core.jaxb.gen.R"
+"efExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000eps"
+"q\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000.net.sourceforge.czt.c"
+"ore.jaxb.gen.Expr1Elementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000"
+"\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00003net.sourc"
+"eforge.czt.zpatt.jaxb.gen.JokerExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000"
+"sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001es"
+"q\u0000~\u0000\u001ft\u00002net.sourceforge.czt.core.jaxb.gen.DecorExprElementq\u0000"
+"~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000ep"
+"q\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00002net.sourceforge.czt.core.jaxb.gen.Th"
+"etaExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000ep"
+"sq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000+net.sourceforge.czt."
+"core.jaxb.gen.PowerExprq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000"
+"{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00001net.sourcef"
+"orge.czt.core.jaxb.gen.Qnt1ExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~"
+"\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000"
+"\u001ft\u0000)net.sourceforge.czt.core.jaxb.gen.AndExprq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%"
+"pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~"
+"\u0000\u001esq\u0000~\u0000\u001ft\u0000,net.sourceforge.czt.core.jaxb.gen.ForallExprq\u0000~\u0000#"
+"sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~"
+"\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00004net.sourceforge.czt.tcoz.jaxb.gen.Chann"
+"elExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000eps"
+"q\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00001net.sourceforge.czt.c"
+"ore.jaxb.gen.BindExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq"
+"\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00000net.so"
+"urceforge.czt.core.jaxb.gen.SchExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000"
+"sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001es"
+"q\u0000~\u0000\u001ft\u0000+net.sourceforge.czt.core.jaxb.gen.TupleExprq\u0000~\u0000#sq\u0000~"
+"\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000"
+"~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00004net.sourceforge.czt.core.jaxb.gen.BindSelEx"
+"prElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000"
+"\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000/net.sourceforge.czt.core."
+"jaxb.gen.Expr0NElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{"
+"G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00000net.sourcefo"
+"rge.czt.core.jaxb.gen.QntExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007"
+"\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft"
+"\u0000)net.sourceforge.czt.core.jaxb.gen.IffExprq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp"
+"\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001e"
+"sq\u0000~\u0000\u001ft\u0000.net.sourceforge.czt.core.jaxb.gen.Expr2Elementq\u0000~\u0000#"
+"sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~"
+"\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00005net.sourceforge.czt.core.jaxb.gen.Tuple"
+"SelExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000ep"
+"sq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000)net.sourceforge.czt."
+"core.jaxb.gen.LetExprq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G"
+"\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000)net.sourcefor"
+"ge.czt.core.jaxb.gen.SetExprq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq"
+"\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000(net.so"
+"urceforge.czt.core.jaxb.gen.MuExprq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{"
+"G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000*"
+"net.sourceforge.czt.core.jaxb.gen.ProdExprq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000"
+"sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001es"
+"q\u0000~\u0000\u001ft\u0000*net.sourceforge.czt.core.jaxb.gen.CompExprq\u0000~\u0000#sq\u0000~\u0000"
+"\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~"
+"\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000)net.sourceforge.czt.core.jaxb.gen.NegExprq\u0000~"
+"\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq"
+"\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000/net.sourceforge.czt.core.jaxb.gen.Exp"
+"r2NElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~"
+"\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00000net.sourceforge.czt.core"
+".jaxb.gen.NumExprElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012"
+"\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000*net.source"
+"forge.czt.core.jaxb.gen.ProjExprq\u0000~\u0000#sq\u0000~\u0000\u0007\u0001\u00ed\u001c\u009appsq\u0000~\u0000\u0007\u0001q\u00d5sp"
+"psq\u0000~\u0000\u0007\u0000\u00f6\u008eLppsq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015"
+"\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00002net.sourceforge.czt.core.j"
+"axb.gen.NumStrokeElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012"
+"\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000*net.source"
+"forge.czt.core.jaxb.gen.InStrokeq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001a"
+"ppsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000+ne"
+"t.sourceforge.czt.core.jaxb.gen.OutStrokeq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%pp\u0000s"
+"q\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq"
+"\u0000~\u0000\u001ft\u0000,net.sourceforge.czt.core.jaxb.gen.NextStrokeq\u0000~\u0000#sr\u0000\""
+"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/L"
+"com/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun."
+"msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tt"
+"hresholdL\u0000\u0006parentq\u0000~\u0001y[\u0000\u0005tablet\u0000![Lcom/sun/msv/grammar/Expre"
+"ssion;xp\u0000\u0000\u0000\u008c\u0000\u0000\u0000\u00e6pur\u0000![Lcom.sun.msv.grammar.Expression;\u00d68D\u00c3]\u00ad"
+"\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0002\u00ffppppppppppq\u0000~\u0000Cppppppppppq\u0000~\u0000appppppppppppppppppp"
+"pppq\u0000~\u0000Zppppppppppppppppppppppq\u0000~\u0000Sppppppppppppppppppppppq\u0000~"
+"\u0000Lppppppppppppppppppppppq\u0000~\u0000Eppppppppppq\u0000~\u0000cpppppppppppppppp"
+"ppppppq\u0000~\u0000\\ppppppppppppppppppppppq\u0000~\u0000Uppppppq\u0000~\u0000\u0005ppppppppppp"
+"ppppq\u0000~\u0000Nppppppppppppppppppppq\u0000~\u0000$pq\u0000~\u0000Gppppppppppq\u0000~\u0000eq\u0000~\u0001^"
+"ppppppppppq\u0000~\u0000@ppppppppppq\u0000~\u0000^ppppppppppppppppppppppq\u0000~\u0000Wppp"
+"pppppppppppppppppppq\u0000~\u0000Ppppppppppppq\u0000~\u0001Aq\u0000~\u0001;q\u0000~\u00015q\u0000~\u0001/q\u0000~\u0001)"
+"q\u0000~\u0001#q\u0000~\u0001\u001dq\u0000~\u0001\u0017q\u0000~\u0001\u0011q\u0000~\u0001\u000bq\u0000~\u0001\u0005q\u0000~\u0001@q\u0000~\u0001:q\u0000~\u00014q\u0000~\u0001.q\u0000~\u0001(q\u0000~\u0001\""
+"q\u0000~\u0000Iq\u0000~\u0001\u001cq\u0000~\u0001\u0016q\u0000~\u0001\u0010q\u0000~\u0001\nq\u0000~\u0001\u0004q\u0000~\u0000\u00feq\u0000~\u0000\u00ffq\u0000~\u0000\u00f8q\u0000~\u0000\u00f9q\u0000~\u0000\u00f2q\u0000~\u0000\u00f3"
+"q\u0000~\u0000\u00ecq\u0000~\u0000\u00edq\u0000~\u0000\u00e6q\u0000~\u0000\u00e7q\u0000~\u0000\u00e0q\u0000~\u0000\u00e1q\u0000~\u0000\u00daq\u0000~\u0000\u00dbq\u0000~\u0000\u00d4q\u0000~\u0000\u00d5q\u0000~\u0000\u0014q\u0000~\u0000i"
+"q\u0000~\u0000oq\u0000~\u0000uq\u0000~\u0000{q\u0000~\u0000\u0081q\u0000~\u0000`q\u0000~\u0000\u0087q\u0000~\u0000\u008dq\u0000~\u0000\u0093q\u0000~\u0000\u0011q\u0000~\u0000hq\u0000~\u0000nq\u0000~\u0000t"
+"q\u0000~\u0000zq\u0000~\u0000\u0080q\u0000~\u0000\u0086q\u0000~\u0000\u008cq\u0000~\u0000\u0092q\u0000~\u0000\u0098q\u0000~\u0000\u009eq\u0000~\u0000\u00a4q\u0000~\u0000\u00aaq\u0000~\u0000\u00b0q\u0000~\u0000\u00b6q\u0000~\u0000\u00bc"
+"q\u0000~\u0000\u00c2q\u0000~\u0000\u00c8q\u0000~\u0000\u00ceq\u0000~\u0000Yq\u0000~\u0000\u0099q\u0000~\u0000\u009fq\u0000~\u0000\u00a5q\u0000~\u0000\u00abq\u0000~\u0000\u00b1q\u0000~\u0000\u00b7q\u0000~\u0000\u00bdq\u0000~\u0000\u00c3"
+"q\u0000~\u0000\u00c9q\u0000~\u0000\u00cfq\u0000~\u0001Gq\u0000~\u0001Fq\u0000~\u0000Bq\u0000~\u0001Mq\u0000~\u0001Lq\u0000~\u0001Sq\u0000~\u0001Rq\u0000~\u0001Yq\u0000~\u0001Xq\u0000~\u0000\u0006"
+"q\u0000~\u0001bq\u0000~\u0001aq\u0000~\u0000Rq\u0000~\u0001hq\u0000~\u0001gq\u0000~\u0001nq\u0000~\u0001mq\u0000~\u0001tq\u0000~\u0001sppppppppppppppp"
+"pq\u0000~\u0000Kppppppppppppppppppppppq\u0000~\u0000Dppppppppppq\u0000~\u0000bpppppppppppp"
+"ppppppppppq\u0000~\u0000[ppppppppppppppppppppppq\u0000~\u0000Tpppppppppppppppppp"
+"ppppq\u0000~\u0000Mppppppppppppppppppppppq\u0000~\u0000Fq\u0000~\u0000\u000fpppppppppq\u0000~\u0000dq\u0000~\u0001]"
+"ppppppppppq\u0000~\u0000\bq\u0000~\u0000?pppppppppq\u0000~\u0000]ppppppppppppppppppppppq\u0000~\u0000"
+"Vppppppppppppppppppppppq\u0000~\u0000Oppppppppppppppppppppppq\u0000~\u0000Hppppp"
+"pppppq\u0000~\u0000fq\u0000~\u0001_ppppppppppq\u0000~\u0000Appppppppppq\u0000~\u0000_ppppppppppppppp"
+"pppppppq\u0000~\u0000Xppppppppppppppppppppppq\u0000~\u0000Qppppppppppppppppppppp"
+"pq\u0000~\u0000Jpppppppppppp"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends net.sourceforge.czt.core.jaxb.gen.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingContext context) {
            super(context, "-----");
        }

        protected Unmarshaller(net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("PipeExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("SetCompExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("SchExpr2" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ExistsExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Exists1Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("HideExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("RenameExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("PreExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("CondExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ApplExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ImpliesExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("OrExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("LambdaExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("RefExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Expr1" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("JokerExpr" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("DecorExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ThetaExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("PowerExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Qnt1Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("AndExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ForallExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ChannelExpr" == ___local)&&("http://czt.sourceforge.net/tcoz" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("BindExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("SchExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("TupleExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("BindSelExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Expr0N" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("QntExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("IffExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Expr2" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("TupleSelExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("LetExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("SetExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("MuExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ProdExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("CompExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("NegExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Expr2N" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("NumExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ProjExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                        return ;
                    case  2 :
                        _Stroke = ((net.sourceforge.czt.core.jaxb.gen.impl.StrokeImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.StrokeImpl.class), 3, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  1 :
                        if (("NumStroke" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Stroke = ((net.sourceforge.czt.core.jaxb.gen.impl.NumStrokeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.NumStrokeElementImpl.class), 4, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("InStroke" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Stroke = ((net.sourceforge.czt.core.jaxb.gen.impl.InStrokeImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.InStrokeImpl.class), 4, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("OutStroke" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Stroke = ((net.sourceforge.czt.core.jaxb.gen.impl.OutStrokeImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.OutStrokeImpl.class), 4, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("NextStroke" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Stroke = ((net.sourceforge.czt.core.jaxb.gen.impl.NextStrokeImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.NextStrokeImpl.class), 4, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Stroke" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 2;
                            return ;
                        }
                        if (("Stroke" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Stroke = ((net.sourceforge.czt.core.jaxb.gen.impl.StrokeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.StrokeElementImpl.class), 4, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  4 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        spawnHandlerFromLeaveElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  3 :
                        if (("Stroke" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 4;
                            return ;
                        }
                        break;
                    case  2 :
                        _Stroke = ((net.sourceforge.czt.core.jaxb.gen.impl.StrokeImpl) spawnChildFromLeaveElement((net.sourceforge.czt.core.jaxb.gen.impl.StrokeImpl.class), 3, ___uri, ___local, ___qname));
                        return ;
                    case  4 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        spawnHandlerFromEnterAttribute((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  2 :
                        _Stroke = ((net.sourceforge.czt.core.jaxb.gen.impl.StrokeImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.core.jaxb.gen.impl.StrokeImpl.class), 3, ___uri, ___local, ___qname));
                        return ;
                    case  4 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        spawnHandlerFromLeaveAttribute((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  2 :
                        _Stroke = ((net.sourceforge.czt.core.jaxb.gen.impl.StrokeImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.core.jaxb.gen.impl.StrokeImpl.class), 3, ___uri, ___local, ___qname));
                        return ;
                    case  4 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  0 :
                            spawnHandlerFromText((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.DecorExprImpl.this).new Unmarshaller(context)), 1, value);
                            return ;
                        case  2 :
                            _Stroke = ((net.sourceforge.czt.core.jaxb.gen.impl.StrokeImpl) spawnChildFromText((net.sourceforge.czt.core.jaxb.gen.impl.StrokeImpl.class), 3, value));
                            return ;
                        case  4 :
                            revertToParentFromText(value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
