//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.1-05/30/2003 05:06 AM(java_re)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2003.08.20 at 09:36:24 NZST 
//


package net.sourceforge.czt.core.jaxb.gen.impl;

public class RenameExprImpl
    extends net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl
    implements net.sourceforge.czt.core.jaxb.gen.RenameExpr, com.sun.xml.bind.JAXBObject, net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallableObject, net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializable, net.sourceforge.czt.core.jaxb.gen.impl.runtime.ValidatableObject
{

    protected com.sun.xml.bind.util.ListImpl _NameNamePair = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    public final static java.lang.Class version = (net.sourceforge.czt.core.jaxb.gen.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (net.sourceforge.czt.core.jaxb.gen.RenameExpr.class);
    }

    public java.util.List getNameNamePair() {
        return _NameNamePair;
    }

    public net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingEventHandler createUnmarshaller(net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingContext context) {
        return new net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.Unmarshaller(context);
    }

    public void serializeElementBody(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _NameNamePair.size();
        super.serializeElementBody(context);
        while (idx1 != len1) {
            if (_NameNamePair.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _NameNamePair.get(idx1 ++)));
            } else {
                context.startElement("http://czt.sourceforge.net/zml", "NameNamePair");
                int idx_0 = idx1;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _NameNamePair.get(idx_0 ++)));
                context.endNamespaceDecls();
                int idx_1 = idx1;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _NameNamePair.get(idx_1 ++)));
                context.endAttributes();
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _NameNamePair.get(idx1 ++)));
                context.endElement();
            }
        }
    }

    public void serializeAttributes(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _NameNamePair.size();
        super.serializeAttributes(context);
    }

    public void serializeAttributeBody(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _NameNamePair.size();
        super.serializeAttributeBody(context);
        while (idx1 != len1) {
            if (_NameNamePair.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _NameNamePair.get(idx1 ++)));
            } else {
                context.startElement("http://czt.sourceforge.net/zml", "NameNamePair");
                int idx_0 = idx1;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _NameNamePair.get(idx_0 ++)));
                context.endNamespaceDecls();
                int idx_1 = idx1;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _NameNamePair.get(idx_1 ++)));
                context.endAttributes();
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _NameNamePair.get(idx1 ++)));
                context.endElement();
            }
        }
    }

    public void serializeURIs(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _NameNamePair.size();
        super.serializeURIs(context);
    }

    public java.lang.Class getPrimaryInterface() {
        return (net.sourceforge.czt.core.jaxb.gen.RenameExpr.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava"
+"/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u001aMw\u001cppsq\u0000~\u0000\u0000\u0018\u00cc\u00b2\u0013ppsr\u0000\u001dcom"
+".sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001\u0000\u00c0b\u0090ppsr\u0000\'com.sun"
+".msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLc"
+"om/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.Element"
+"Exp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModelq\u0000"
+"~\u0000\u0002xq\u0000~\u0000\u0003\u0000\u00c0b\u0085sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000p\u0000sq"
+"\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq"
+"\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0000\u00c0bdq\u0000~\u0000\u000epsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\nxq\u0000~\u0000\u0003\u0000\u00c0baq\u0000~\u0000\u000epsr\u00002com.s"
+"un.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~"
+"\u0000\u0003\u0000\u0000\u0000\bsq\u0000~\u0000\r\u0001q\u0000~\u0000\u0017sr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.s"
+"un.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003"
+"\u0000\u0000\u0000\tq\u0000~\u0000\u0018q\u0000~\u0000\u001dsr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000\u001fxq\u0000"
+"~\u0000\u001at\u00000net.sourceforge.czt.core.jaxb.gen.TermA.AnnsTypet\u0000+htt"
+"p://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u001et\u0000\u0004Annst\u0000\u001ehttp"
+"://czt.sourceforge.net/zmlq\u0000~\u0000\u001dsq\u0000~\u0000\u0007\u0018\fO~ppsq\u0000~\u0000\u0007\u0017K\u00ed\u0002ppsq\u0000~\u0000"
+"\u0007\u0016\u008b\u008a\u0086ppsq\u0000~\u0000\u0007\u0015\u00cb(\nppsq\u0000~\u0000\u0007\u0015\n\u00c5\u008eppsq\u0000~\u0000\u0007\u0014Jc\u0012ppsq\u0000~\u0000\u0007\u0013\u008a\u0000\u0096ppsq\u0000~\u0000"
+"\u0007\u0012\u00c9\u009e\u001appsq\u0000~\u0000\u0007\u0012\t;\u009eppsq\u0000~\u0000\u0007\u0011H\u00d9\"ppsq\u0000~\u0000\u0007\u0010\u0088v\u00a6ppsq\u0000~\u0000\u0007\u000f\u00c8\u0014*ppsq\u0000~\u0000"
+"\u0007\u000f\u0007\u00b1\u00aeppsq\u0000~\u0000\u0007\u000eGO2ppsq\u0000~\u0000\u0007\r\u0086\u00ec\u00b6ppsq\u0000~\u0000\u0007\f\u00c6\u008a:ppsq\u0000~\u0000\u0007\f\u0006\'\u00beppsq\u0000~\u0000"
+"\u0007\u000bE\u00c5Bppsq\u0000~\u0000\u0007\n\u0085b\u00c6ppsq\u0000~\u0000\u0007\t\u00c5\u0000Jppsq\u0000~\u0000\u0007\t\u0004\u009d\u00ceppsq\u0000~\u0000\u0007\bD;Rppsq\u0000~\u0000"
+"\u0007\u0007\u0083\u00d8\u00d6ppsq\u0000~\u0000\u0007\u0006\u00c3vZppsq\u0000~\u0000\u0007\u0006\u0003\u0013\u00deppsq\u0000~\u0000\u0007\u0005B\u00b1bppsq\u0000~\u0000\u0007\u0004\u0082N\u00e6ppsq\u0000~\u0000"
+"\u0007\u0003\u00c1\u00ecjppsq\u0000~\u0000\u0007\u0003\u0001\u0089\u00eeppsq\u0000~\u0000\u0007\u0002A\'rppsq\u0000~\u0000\u0007\u0001\u0080\u00c4\u00f6ppsq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~"
+"\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000"
+"\u001et\u00004net.sourceforge.czt.core.jaxb.gen.BindSelExprElementq\u0000~\u0000"
+"\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000"
+"~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u00002net.sourceforge.czt.core.jaxb.gen.Deco"
+"rExprElementq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq"
+"\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u00001net.sourceforge.czt.co"
+"re.jaxb.gen.HideExprElementq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000"
+"~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000)net.sou"
+"rceforge.czt.core.jaxb.gen.NegExprq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0"
+"boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000+"
+"net.sourceforge.czt.core.jaxb.gen.PowerExprq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp"
+"\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001d"
+"sq\u0000~\u0000\u001et\u0000)net.sourceforge.czt.core.jaxb.gen.PreExprq\u0000~\u0000\"sq\u0000~\u0000"
+"\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~"
+"\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u00003net.sourceforge.czt.core.jaxb.gen.RenameExpr"
+"Elementq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000"
+"\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u00002net.sourceforge.czt.core.ja"
+"xb.gen.ThetaExprElementq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000"
+"\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u00005net.sourcef"
+"orge.czt.core.jaxb.gen.TupleSelExprElementq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000"
+"sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001ds"
+"q\u0000~\u0000\u001et\u0000*net.sourceforge.czt.core.jaxb.gen.CompExprq\u0000~\u0000\"sq\u0000~\u0000"
+"\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~"
+"\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000*net.sourceforge.czt.core.jaxb.gen.PipeExprq\u0000"
+"~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000ep"
+"q\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000*net.sourceforge.czt.core.jaxb.gen.Pr"
+"ojExprq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0"
+"baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000)net.sourceforge.czt.core.jax"
+"b.gen.AndExprq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000eps"
+"q\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000(net.sourceforge.czt.c"
+"ore.jaxb.gen.OrExprq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq"
+"\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000-net.sourceforge"
+".czt.core.jaxb.gen.ImpliesExprq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0bopp"
+"sq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000)net."
+"sourceforge.czt.core.jaxb.gen.IffExprq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000"
+"\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001e"
+"t\u00001net.sourceforge.czt.core.jaxb.gen.ApplExprElementq\u0000~\u0000\"sq\u0000"
+"~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q"
+"\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000*net.sourceforge.czt.core.jaxb.gen.ProdExpr"
+"q\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000"
+"\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000+net.sourceforge.czt.core.jaxb.gen."
+"TupleExprq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000"
+"\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000)net.sourceforge.czt.core."
+"jaxb.gen.SetExprq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000"
+"\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000,net.sourceforge.cz"
+"t.core.jaxb.gen.ExistsExprq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~"
+"\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000-net.sour"
+"ceforge.czt.core.jaxb.gen.Exists1Exprq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000"
+"\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001e"
+"t\u0000,net.sourceforge.czt.core.jaxb.gen.ForallExprq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0"
+"bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq"
+"\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000,net.sourceforge.czt.core.jaxb.gen.LambdaExprq\u0000~"
+"\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq"
+"\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000)net.sourceforge.czt.core.jaxb.gen.Let"
+"Exprq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0ba"
+"q\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000(net.sourceforge.czt.core.jaxb."
+"gen.MuExprq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~"
+"\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000-net.sourceforge.czt.core"
+".jaxb.gen.SetCompExprq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0b"
+"dq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u00001net.sourcefor"
+"ge.czt.core.jaxb.gen.BindExprElementq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007"
+"\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et"
+"\u00001net.sourceforge.czt.core.jaxb.gen.CondExprElementq\u0000~\u0000\"sq\u0000~"
+"\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000"
+"~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u00000net.sourceforge.czt.core.jaxb.gen.NumExprEl"
+"ementq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0b"
+"aq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u00000net.sourceforge.czt.core.jaxb"
+".gen.RefExprElementq\u0000~\u0000\"sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq"
+"\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u00000net.sourceforge"
+".czt.core.jaxb.gen.SchExprElementq\u0000~\u0000\"sq\u0000~\u0000\u0011\u0001\u0080\u00c5\u0004ppsq\u0000~\u0000\u0007\u0001\u0080\u00c5\u0001"
+"ppsq\u0000~\u0000\t\u0000\u00c0b\u0085pp\u0000sq\u0000~\u0000\t\u0000\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~"
+"\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000.net.sourceforge.czt.core"
+".jaxb.gen.NameNamePairq\u0000~\u0000\"sq\u0000~\u0000\u001et\u0000\fNameNamePairq\u0000~\u0000%sq\u0000~\u0000\t\u0000"
+"\u00c0bzpp\u0000sq\u0000~\u0000\u0007\u0000\u00c0boppsq\u0000~\u0000\u0011\u0000\u00c0bdq\u0000~\u0000\u000epsq\u0000~\u0000\u0014\u0000\u00c0baq\u0000~\u0000\u000epq\u0000~\u0000\u0017q\u0000~\u0000\u001b"
+"q\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u00005net.sourceforge.czt.core.jaxb.gen.NameNamePair"
+"Elementq\u0000~\u0000\"sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHas"
+"h;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed"
+"\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthresholdL\u0000\u0006parentq\u0000~\u0001\u0017[\u0000\u0005tablet\u0000![Lcom/sun/m"
+"sv/grammar/Expression;xp\u0000\u0000\u0000j\u0000\u0000\u0000rpur\u0000![Lcom.sun.msv.grammar.E"
+"xpression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0001\u007fpppppppppppppppppppppq\u0000~\u00001pppq\u0000~\u0000"
+">ppppppppppppppppppppppq\u0000~\u0000)pppq\u0000~\u00006pppq\u0000~\u0000Cpppppppppppppppp"
+"ppppppq\u0000~\u0000.pppq\u0000~\u0000;ppppppppppppppppppppppq\u0000~\u0000&pppq\u0000~\u00003pppq\u0000~"
+"\u0000@ppppppppq\u0000~\u0000\u0013q\u0000~\u0000\u00b3q\u0000~\u0000\u00adq\u0000~\u0000\u00a7q\u0000~\u0000\u00a1q\u0000~\u0000\u009bq\u0000~\u0000\u0095q\u0000~\u0000\u008fq\u0000~\u0000\u0089q\u0000~\u0000\u0083"
+"q\u0000~\u0000}q\u0000~\u0000\u00acq\u0000~\u0000\u00a6q\u0000~\u0000\u00a0q\u0000~\u0000\u009aq\u0000~\u0000\u0094q\u0000~\u0000\u008eq\u0000~\u0000\u0088q\u0000~\u00008q\u0000~\u0000\u0082q\u0000~\u0000|q\u0000~\u0000v"
+"q\u0000~\u0000pq\u0000~\u0000jq\u0000~\u0000dq\u0000~\u0000^q\u0000~\u0000Xq\u0000~\u0000Rq\u0000~\u0000Lq\u0000~\u0000Fq\u0000~\u0000\u0010q\u0000~\u0000wq\u0000~\u0000qq\u0000~\u0000k"
+"q\u0000~\u0000eq\u0000~\u0000_q\u0000~\u0000Yq\u0000~\u0000Sq\u0000~\u0000Mq\u0000~\u0000Gq\u0000~\u0000\u00b2q\u0000~\u0000\u00b9q\u0000~\u0000\u00b8q\u0000~\u0000\u00bfq\u0000~\u0000\bq\u0000~\u0000\u00be"
+"q\u0000~\u0000\u00c5q\u0000~\u0000\u00c4q\u0000~\u00000q\u0000~\u0000=q\u0000~\u0000\u00cbq\u0000~\u0000\u00caq\u0000~\u0000\u00d1q\u0000~\u0000\u00d0q\u0000~\u0000\u00d7q\u0000~\u0000\u00d6q\u0000~\u0000\u00ddq\u0000~\u0000\u00dc"
+"q\u0000~\u0000\u00e3q\u0000~\u0000\u00e2q\u0000~\u0000+q\u0000~\u0000\u00e9q\u0000~\u0000\u00e8q\u0000~\u0000\u00efq\u0000~\u0000\u00eeq\u0000~\u0000\u00f5q\u0000~\u0000\u00f4q\u0000~\u0000\u00fbq\u0000~\u0000\u00faq\u0000~\u0001\u0001"
+"q\u0000~\u0001\u0000q\u0000~\u0001\nq\u0000~\u0000(q\u0000~\u0001\tq\u0000~\u0001\u0012q\u0000~\u0001\u0011q\u0000~\u00005pppq\u0000~\u0000Bppq\u0000~\u0000\u0005pppppppppp"
+"pppppppppq\u0000~\u0000-pppq\u0000~\u0000:ppppppppppppppppppppppppppq\u0000~\u00002pppq\u0000~\u0000"
+"?ppppppppppppppppq\u0000~\u0000\u0006pppppq\u0000~\u0000*pppq\u0000~\u00007pppq\u0000~\u0000Dppppppppppq\u0000"
+"~\u0001\u0006ppq\u0000~\u0001\u0005ppppppppq\u0000~\u0000/pppq\u0000~\u0000<ppppppppppppppppppppppq\u0000~\u0000\'pp"
+"pq\u0000~\u00004pppq\u0000~\u0000Appppppppppppppppppppppq\u0000~\u0000,pppq\u0000~\u00009ppppp"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends net.sourceforge.czt.core.jaxb.gen.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingContext context) {
            super(context, "-----");
        }

        protected Unmarshaller(net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  4 :
                        if (("NameNamePair" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 2;
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  2 :
                        if (("OldName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _NameNamePair.add(((net.sourceforge.czt.core.jaxb.gen.impl.NameNamePairImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.NameNamePairImpl.class), 3, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        break;
                    case  1 :
                        if (("NameNamePair" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 2;
                            return ;
                        }
                        break;
                    case  0 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("BindSelExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("DecorExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("HideExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("NegExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("PowerExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("PreExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("RenameExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ThetaExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("TupleSelExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("CompExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("PipeExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ProjExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("AndExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("OrExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ImpliesExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("IffExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ApplExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ProdExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("TupleExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("SetExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ExistsExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Exists1Expr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ForallExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("LambdaExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("LetExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("MuExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("SetCompExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("BindExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("CondExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("NumExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("RefExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("SchExpr" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                        return ;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  4 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  0 :
                        spawnHandlerFromLeaveElement((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  3 :
                        if (("NameNamePair" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 4;
                            return ;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  4 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  0 :
                        spawnHandlerFromEnterAttribute((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  4 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  0 :
                        spawnHandlerFromLeaveAttribute((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  4 :
                            revertToParentFromText(value);
                            return ;
                        case  0 :
                            spawnHandlerFromText((((net.sourceforge.czt.core.jaxb.gen.impl.Expr1Impl)net.sourceforge.czt.core.jaxb.gen.impl.RenameExprImpl.this).new Unmarshaller(context)), 1, value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
