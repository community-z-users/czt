//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.2-b15-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2003.10.28 at 04:14:13 NZDT 
//


package net.sourceforge.czt.core.jaxb.gen.impl;

public class SchTextImpl
    extends net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl
    implements net.sourceforge.czt.core.jaxb.gen.SchText, com.sun.xml.bind.JAXBObject, net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallableObject, net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializable, net.sourceforge.czt.core.jaxb.gen.impl.runtime.ValidatableObject
{

    protected com.sun.xml.bind.util.ListImpl _Decl = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    protected net.sourceforge.czt.core.jaxb.gen.Pred _Pred;
    public final static java.lang.Class version = (net.sourceforge.czt.core.jaxb.gen.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (net.sourceforge.czt.core.jaxb.gen.SchText.class);
    }

    public java.util.List getDecl() {
        return _Decl;
    }

    public net.sourceforge.czt.core.jaxb.gen.Pred getPred() {
        return _Pred;
    }

    public void setPred(net.sourceforge.czt.core.jaxb.gen.Pred value) {
        _Pred = value;
    }

    public net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingEventHandler createUnmarshaller(net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingContext context) {
        return new net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.Unmarshaller(context);
    }

    public void serializeBody(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _Decl.size();
        super.serializeBody(context);
        while (idx1 != len1) {
            if (_Decl.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)), "Decl");
            } else {
                context.startElement("http://czt.sourceforge.net/zml", "Decl");
                int idx_0 = idx1;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Decl.get(idx_0 ++)), "Decl");
                context.endNamespaceDecls();
                int idx_1 = idx1;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Decl.get(idx_1 ++)), "Decl");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)), "Decl");
                context.endElement();
            }
        }
        if (_Pred!= null) {
            if (_Pred instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Pred), "Pred");
            } else {
                context.startElement("http://czt.sourceforge.net/zml", "Pred");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred), "Pred");
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred), "Pred");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Pred), "Pred");
                context.endElement();
            }
        }
    }

    public void serializeAttributes(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _Decl.size();
        super.serializeAttributes(context);
        while (idx1 != len1) {
            if (_Decl.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)), "Decl");
            } else {
                idx1 += 1;
            }
        }
        if (_Pred!= null) {
            if (_Pred instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Pred), "Pred");
            }
        }
    }

    public void serializeURIs(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _Decl.size();
        super.serializeURIs(context);
        while (idx1 != len1) {
            if (_Decl.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Decl.get(idx1 ++)), "Decl");
            } else {
                idx1 += 1;
            }
        }
        if (_Pred!= null) {
            if (_Pred instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Pred), "Pred");
            }
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (net.sourceforge.czt.core.jaxb.gen.SchText.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava"
+"/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u000b\u00e0\u009c.ppsq\u0000~\u0000\u0000\u0004,)\u00b0ppsr\u0000\u001dcom"
+".sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001\u0002\u00baT*ppsr\u0000\'com.sun"
+".msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLc"
+"om/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.Element"
+"Exp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModelq\u0000"
+"~\u0000\u0002xq\u0000~\u0000\u0003\u0002\u00baT\u001fsr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000p\u0000sq"
+"\u0000~\u0000\u0000\u0002\u00baT\u0014ppsq\u0000~\u0000\t\u0000{G%pp\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsr\u0000 com.sun.msv.grammar.O"
+"neOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0000{G\u000fq\u0000~\u0000\u000epsr\u0000 com.sun.msv.grammar.Attr"
+"ibuteExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\nxq\u0000~\u0000\u0003\u0000{G\fq\u0000~"
+"\u0000\u000epsr\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\bsq\u0000~\u0000\r\u0001q\u0000~\u0000\u0018sr\u0000 com.sun.msv.grammar.AnyNam"
+"eClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\tq\u0000~\u0000\u0019q\u0000~\u0000\u001esr\u0000#com.sun.msv.grammar.SimpleName"
+"Class\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespac"
+"eURIq\u0000~\u0000 xq\u0000~\u0000\u001bt\u00000net.sourceforge.czt.core.jaxb.gen.TermA.An"
+"nsTypet\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u0007\u0002?"
+"\f\u00eappsq\u0000~\u0000\u0015\u0002?\f\u00dfq\u0000~\u0000\u000epsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004na"
+"met\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003\u0001d\u00b9\u00c6ppsr\u0000\"com.sun.ms"
+"v.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype."
+"xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd"
+".ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatat"
+"ypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000 L\u0000\btypeNameq\u0000~\u0000 L\u0000\nwhi"
+"teSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000"
+" http://www.w3.org/2001/XMLSchemat\u0000\u0005QNamesr\u00005com.sun.msv.dat"
+"atype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun"
+".msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.su"
+"n.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000"
+"\u0000\u0000\nq\u0000~\u0000\u000epsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalN"
+"ameq\u0000~\u0000 L\u0000\fnamespaceURIq\u0000~\u0000 xpq\u0000~\u00001q\u0000~\u00000sq\u0000~\u0000\u001ft\u0000\u0004typet\u0000)http"
+"://www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000\u0004Annst\u0000\u001eht"
+"tp://czt.sourceforge.net/zmlq\u0000~\u0000\u001esq\u0000~\u0000\u0007\u0001q\u00d5\u0081ppsq\u0000~\u0000\u0012\u0001q\u00d5vq\u0000~\u0000\u000e"
+"psq\u0000~\u0000\u0007\u0001q\u00d5sq\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0000\u00f6\u008eLq\u0000~\u0000\u000epsq\u0000~\u0000\t\u0000{G%q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000{G\u001a"
+"ppsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00000ne"
+"t.sourceforge.czt.core.jaxb.gen.VarDeclElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G"
+"%q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~"
+"\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00001net.sourceforge.czt.core.jaxb.gen.InclDeclEl"
+"ementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000"
+"\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00002net.sourceforge.czt.core."
+"jaxb.gen.ConstDeclElementq\u0000~\u0000#q\u0000~\u0000\u001esq\u0000~\u0000\u0007\u0007\u00b4ryppsq\u0000~\u0000\u0007\u0007\u00b4rnq\u0000~"
+"\u0000\u000epsq\u0000~\u0000\u0007\u00079+Gq\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0006\u00bd\u00e4 q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0006B\u009c\u00f9q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0005\u00c7U"
+"\u00d2q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0005L\u000e\u00abq\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0004\u00d0\u00c7\u0084q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0004U\u0080]q\u0000~\u0000\u000epsq\u0000~\u0000"
+"\u0007\u0003\u00da96q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0003^\u00f2\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0002\u00e3\u00aa\u00e8q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0002hc\u00c1q\u0000~\u0000\u000eps"
+"q\u0000~\u0000\u0007\u0001\u00ed\u001c\u009aq\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0001q\u00d5sq\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0000\u00f6\u008eLq\u0000~\u0000\u000epsq\u0000~\u0000\t\u0000{G%q\u0000~"
+"\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000"
+"~\u0000\u001esq\u0000~\u0000\u001ft\u0000,net.sourceforge.czt.core.jaxb.gen.ExistsPredq\u0000~\u0000"
+"#sq\u0000~\u0000\t\u0000{G%q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000"
+"\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000,net.sourceforge.czt.core.jaxb.gen."
+"ForallPredq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000ep"
+"sq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00000net.sourceforge.czt."
+"core.jaxb.gen.MemPredElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000{G\u001a"
+"ppsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000*ne"
+"t.sourceforge.czt.core.jaxb.gen.TruePredq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%q\u0000~\u0000\u000e"
+"p\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000"
+"\u001esq\u0000~\u0000\u001ft\u00003net.sourceforge.czt.zpatt.jaxb.gen.JokerPredElemen"
+"tq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G"
+"\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000)net.sourceforge.czt.core.jaxb"
+".gen.IffPredq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000"
+"\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000-net.sourceforge.cz"
+"t.core.jaxb.gen.ImpliesPredq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000{G\u001ap"
+"psq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00000net"
+".sourceforge.czt.core.jaxb.gen.QntPredElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%"
+"q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000"
+"\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000-net.sourceforge.czt.core.jaxb.gen.FactElement"
+"q\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\f"
+"q\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000-net.sourceforge.czt.core.jaxb."
+"gen.Exists1Predq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq"
+"\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000(net.sourceforge"
+".czt.core.jaxb.gen.OrPredq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000{G\u001apps"
+"q\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00000net.s"
+"ourceforge.czt.core.jaxb.gen.AndPredElementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%q\u0000"
+"~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq"
+"\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00000net.sourceforge.czt.core.jaxb.gen.NegPredElemen"
+"tq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G"
+"\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000.net.sourceforge.czt.core.jaxb"
+".gen.Pred2Elementq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000{G\u001appsq\u0000~\u0000\u0012\u0000{G"
+"\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000+net.sourcefor"
+"ge.czt.core.jaxb.gen.FalsePredq\u0000~\u0000#sq\u0000~\u0000\t\u0000{G%q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000{"
+"G\u001appsq\u0000~\u0000\u0012\u0000{G\u000fq\u0000~\u0000\u000epsq\u0000~\u0000\u0015\u0000{G\fq\u0000~\u0000\u000epq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u00001"
+"net.sourceforge.czt.core.jaxb.gen.ExprPredElementq\u0000~\u0000#q\u0000~\u0000\u001es"
+"r\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet"
+"\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.s"
+"un.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI"
+"\u0000\tthresholdL\u0000\u0006parentq\u0000~\u0000\u00c6[\u0000\u0005tablet\u0000![Lcom/sun/msv/grammar/Ex"
+"pression;xp\u0000\u0000\u0000A\u0000\u0000\u0000rpur\u0000![Lcom.sun.msv.grammar.Expression;\u00d68D"
+"\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0001\u007fpppppppppppppppppq\u0000~\u0000[ppppppppppppppppppppq\u0000~\u0000"
+"cq\u0000~\u0000Apq\u0000~\u0000@ppppppppppq\u0000~\u0000?ppppq\u0000~\u0000Xppppppppppppppq\u0000~\u0000$ppppp"
+"q\u0000~\u0000`ppppppppppppppppppppppppppppppppppppppq\u0000~\u0000\u00b5q\u0000~\u0000]q\u0000~\u0000\u00afq\u0000"
+"~\u0000\u00a9q\u0000~\u0000\u00a3q\u0000~\u0000\u009dq\u0000~\u0000\u0097q\u0000~\u0000\u0091q\u0000~\u0000\u008bq\u0000~\u0000\u0085q\u0000~\u0000\u007fq\u0000~\u0000\u00b4q\u0000~\u0000\u00aeq\u0000~\u0000\u00a8q\u0000~\u0000\u00a2q\u0000"
+"~\u0000\u009cq\u0000~\u0000\u0096q\u0000~\u0000\u0090q\u0000~\u0000\u008aq\u0000~\u0000\u0084q\u0000~\u0000~q\u0000~\u0000xq\u0000~\u0000rq\u0000~\u0000lq\u0000~\u0000fq\u0000~\u0000Pq\u0000~\u0000Jq\u0000"
+"~\u0000Dq\u0000~\u0000\u0011q\u0000~\u0000yq\u0000~\u0000sq\u0000~\u0000mq\u0000~\u0000gq\u0000~\u0000Qq\u0000~\u0000Kq\u0000~\u0000Eq\u0000~\u0000\u0014q\u0000~\u0000\u00bbq\u0000~\u0000\u00baq\u0000"
+"~\u0000\u00c1q\u0000~\u0000\u00c0q\u0000~\u0000Zppppppppppppppppppppq\u0000~\u0000bppppppppppppppppppq\u0000~\u0000"
+"Wpppppppppppppppppq\u0000~\u0000\u000fppq\u0000~\u0000_ppppppppppppppppppq\u0000~\u0000\bppppppp"
+"pppppppppppppq\u0000~\u0000\\pppppppq\u0000~\u0000\u0005ppppppppppppq\u0000~\u0000dq\u0000~\u0000Bpppppppp"
+"pppppq\u0000~\u0000\u0006pppq\u0000~\u0000Yppppppppppppppppppppq\u0000~\u0000appppppppppppppppp"
+"pq\u0000~\u0000Vppppppppppq\u0000~\u0000Upppppppppq\u0000~\u0000^pppppppppppppppppppppp"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends net.sourceforge.czt.core.jaxb.gen.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingContext context) {
            super(context, "--------");
        }

        protected Unmarshaller(net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl)net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl)net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                        return ;
                    case  1 :
                        if (("VarDecl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.VarDeclElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.VarDeclElementImpl.class), 2, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("InclDecl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.InclDeclElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.InclDeclElementImpl.class), 2, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ConstDecl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.ConstDeclElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ConstDeclElementImpl.class), 2, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Decl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 4;
                            return ;
                        }
                        if (("Decl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.DeclElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.DeclElementImpl.class), 2, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 2;
                        continue outer;
                    case  3 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  6 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl.class), 7, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl.class), 7, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  4 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                        return ;
                    case  2 :
                        if (("VarDecl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.VarDeclElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.VarDeclElementImpl.class), 2, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("InclDecl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.InclDeclElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.InclDeclElementImpl.class), 2, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ConstDecl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.ConstDeclElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ConstDeclElementImpl.class), 2, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Decl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 4;
                            return ;
                        }
                        if (("Decl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.DeclElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.DeclElementImpl.class), 2, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ExistsPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.ExistsPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ExistsPredImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("ForallPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.ForallPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ForallPredImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("MemPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.MemPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.MemPredElementImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("TruePred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.TruePredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.TruePredImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("JokerPred" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerPredElementImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("IffPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.IffPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.IffPredImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("ImpliesPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.ImpliesPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ImpliesPredImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("QntPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.QntPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.QntPredElementImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Fact" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.FactElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.FactElementImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Exists1Pred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.Exists1PredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.Exists1PredImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("OrPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.OrPredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.OrPredImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("AndPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("NegPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.NegPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.NegPredElementImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Pred2" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.Pred2ElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.Pred2ElementImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("FalsePred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.FalsePredImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.FalsePredImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("ExprPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.ExprPredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ExprPredElementImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Pred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 6;
                            return ;
                        }
                        if (("Pred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.PredElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.PredElementImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        state = 3;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        spawnHandlerFromLeaveElement((((net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl)net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  1 :
                        state = 2;
                        continue outer;
                    case  3 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  5 :
                        if (("Decl" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 2;
                            return ;
                        }
                        break;
                    case  7 :
                        if (("Pred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 3;
                            return ;
                        }
                        break;
                    case  6 :
                        _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl) spawnChildFromLeaveElement((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl.class), 7, ___uri, ___local, ___qname));
                        return ;
                    case  4 :
                        _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl) spawnChildFromLeaveElement((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl.class), 5, ___uri, ___local, ___qname)));
                        return ;
                    case  2 :
                        state = 3;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        spawnHandlerFromEnterAttribute((((net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl)net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  1 :
                        state = 2;
                        continue outer;
                    case  3 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  6 :
                        _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl.class), 7, ___uri, ___local, ___qname));
                        return ;
                    case  4 :
                        _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl.class), 5, ___uri, ___local, ___qname)));
                        return ;
                    case  2 :
                        state = 3;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        spawnHandlerFromLeaveAttribute((((net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl)net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  1 :
                        state = 2;
                        continue outer;
                    case  3 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  6 :
                        _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl.class), 7, ___uri, ___local, ___qname));
                        return ;
                    case  4 :
                        _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl.class), 5, ___uri, ___local, ___qname)));
                        return ;
                    case  2 :
                        state = 3;
                        continue outer;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  0 :
                            spawnHandlerFromText((((net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl)net.sourceforge.czt.core.jaxb.gen.impl.SchTextImpl.this).new Unmarshaller(context)), 1, value);
                            return ;
                        case  1 :
                            state = 2;
                            continue outer;
                        case  3 :
                            revertToParentFromText(value);
                            return ;
                        case  6 :
                            _Pred = ((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl) spawnChildFromText((net.sourceforge.czt.core.jaxb.gen.impl.PredImpl.class), 7, value));
                            return ;
                        case  4 :
                            _Decl.add(((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl) spawnChildFromText((net.sourceforge.czt.core.jaxb.gen.impl.DeclImpl.class), 5, value)));
                            return ;
                        case  2 :
                            state = 3;
                            continue outer;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
