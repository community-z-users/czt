//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.1-05/30/2003 05:06 AM(java_re)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2003.10.08 at 02:45:10 NZDT 
//


package net.sourceforge.czt.core.jaxb.gen.impl;

public class SpecImpl
    extends net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl
    implements net.sourceforge.czt.core.jaxb.gen.Spec, com.sun.xml.bind.JAXBObject, net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.UnmarshallableObject, net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.XMLSerializable, net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.ValidatableObject
{

    protected java.util.Calendar _Modified;
    protected java.lang.String _Version;
    protected java.lang.String _Author;
    protected java.lang.String _Source;
    protected com.sun.xml.bind.util.ListImpl _Sect = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    public final static java.lang.Class version = (net.sourceforge.czt.core.jaxb.gen.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (net.sourceforge.czt.core.jaxb.gen.Spec.class);
    }

    public java.util.Calendar getModified() {
        return _Modified;
    }

    public void setModified(java.util.Calendar value) {
        _Modified = value;
    }

    public java.lang.String getVersion() {
        if (_Version == null) {
            return "1.0";
        } else {
            return _Version;
        }
    }

    public void setVersion(java.lang.String value) {
        _Version = value;
    }

    public java.lang.String getAuthor() {
        return _Author;
    }

    public void setAuthor(java.lang.String value) {
        _Author = value;
    }

    public java.lang.String getSource() {
        return _Source;
    }

    public void setSource(java.lang.String value) {
        _Source = value;
    }

    public java.util.List getSect() {
        return _Sect;
    }

    public net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.UnmarshallingEventHandler createUnmarshaller(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.UnmarshallingContext context) {
        return new net.sourceforge.czt.core.jaxb.gen.impl.SpecImpl.Unmarshaller(context);
    }

    public void serializeElementBody(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx5 = 0;
        final int len5 = _Sect.size();
        super.serializeElementBody(context);
        while (idx5 != len5) {
            if (_Sect.get(idx5) instanceof net.sourceforge.czt.core.jaxb.gen.Sect) {
                if (_Sect.get(idx5) instanceof javax.xml.bind.Element) {
                    context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Sect.get(idx5 ++)));
                } else {
                    context.startElement("http://czt.sourceforge.net/zml", "Sect");
                    int idx_0 = idx5;
                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Sect.get(idx_0 ++)));
                    context.endNamespaceDecls();
                    int idx_1 = idx5;
                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Sect.get(idx_1 ++)));
                    context.endAttributes();
                    context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Sect.get(idx5 ++)));
                    context.endElement();
                }
            } else {
                if (_Sect.get(idx5) instanceof net.sourceforge.czt.core.jaxb.gen.ZSectElement) {
                    context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Sect.get(idx5 ++)));
                } else {
                    if (_Sect.get(idx5) instanceof net.sourceforge.czt.core.jaxb.gen.NarrSectElement) {
                        context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Sect.get(idx5 ++)));
                    } else {
                        if (_Sect.get(idx5) instanceof net.sourceforge.czt.core.jaxb.gen.UnparsedZSectElement) {
                            context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Sect.get(idx5 ++)));
                        } else {
                            throw new org.xml.sax.SAXException("type mismatch error");
                        }
                    }
                }
            }
        }
    }

    public void serializeAttributes(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx5 = 0;
        final int len5 = _Sect.size();
        if (_Source!= null) {
            context.startAttribute("", "Source");
            try {
                context.text(((java.lang.String) _Source));
            } catch (java.lang.Exception e) {
                net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Version!= null) {
            context.startAttribute("", "Version");
            try {
                context.text(((java.lang.String) _Version));
            } catch (java.lang.Exception e) {
                net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Modified!= null) {
            context.startAttribute("", "Modified");
            try {
                context.text(com.sun.msv.datatype.xsd.DateTimeType.theInstance.serializeJavaObject(((java.util.Calendar) _Modified), null));
            } catch (java.lang.Exception e) {
                net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Author!= null) {
            context.startAttribute("", "Author");
            try {
                context.text(((java.lang.String) _Author));
            } catch (java.lang.Exception e) {
                net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        super.serializeAttributes(context);
        while (idx5 != len5) {
            if (!(_Sect.get(idx5) instanceof net.sourceforge.czt.core.jaxb.gen.Sect)) {
                if (_Sect.get(idx5) instanceof net.sourceforge.czt.core.jaxb.gen.ZSectElement) {
                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Sect.get(idx5 ++)));
                } else {
                    if (_Sect.get(idx5) instanceof net.sourceforge.czt.core.jaxb.gen.NarrSectElement) {
                        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Sect.get(idx5 ++)));
                    } else {
                        if (_Sect.get(idx5) instanceof net.sourceforge.czt.core.jaxb.gen.UnparsedZSectElement) {
                            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Sect.get(idx5 ++)));
                        } else {
                            throw new org.xml.sax.SAXException("type mismatch error");
                        }
                    }
                }
            }
        }
    }

    public void serializeAttributeBody(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx5 = 0;
        final int len5 = _Sect.size();
        super.serializeAttributeBody(context);
        while (idx5 != len5) {
            if (_Sect.get(idx5) instanceof net.sourceforge.czt.core.jaxb.gen.Sect) {
                if (_Sect.get(idx5) instanceof javax.xml.bind.Element) {
                    context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Sect.get(idx5 ++)));
                } else {
                    context.startElement("http://czt.sourceforge.net/zml", "Sect");
                    int idx_0 = idx5;
                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Sect.get(idx_0 ++)));
                    context.endNamespaceDecls();
                    int idx_1 = idx5;
                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Sect.get(idx_1 ++)));
                    context.endAttributes();
                    context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Sect.get(idx5 ++)));
                    context.endElement();
                }
            } else {
                if (_Sect.get(idx5) instanceof net.sourceforge.czt.core.jaxb.gen.ZSectElement) {
                    context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Sect.get(idx5 ++)));
                } else {
                    if (_Sect.get(idx5) instanceof net.sourceforge.czt.core.jaxb.gen.NarrSectElement) {
                        context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Sect.get(idx5 ++)));
                    } else {
                        if (_Sect.get(idx5) instanceof net.sourceforge.czt.core.jaxb.gen.UnparsedZSectElement) {
                            context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Sect.get(idx5 ++)));
                        } else {
                            throw new org.xml.sax.SAXException("type mismatch error");
                        }
                    }
                }
            }
        }
    }

    public void serializeURIs(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx5 = 0;
        final int len5 = _Sect.size();
        super.serializeURIs(context);
        while (idx5 != len5) {
            if (!(_Sect.get(idx5) instanceof net.sourceforge.czt.core.jaxb.gen.Sect)) {
                if (_Sect.get(idx5) instanceof net.sourceforge.czt.core.jaxb.gen.ZSectElement) {
                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Sect.get(idx5 ++)));
                } else {
                    if (_Sect.get(idx5) instanceof net.sourceforge.czt.core.jaxb.gen.NarrSectElement) {
                        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Sect.get(idx5 ++)));
                    } else {
                        if (_Sect.get(idx5) instanceof net.sourceforge.czt.core.jaxb.gen.UnparsedZSectElement) {
                            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Sect.get(idx5 ++)));
                        } else {
                            throw new org.xml.sax.SAXException("type mismatch error");
                        }
                    }
                }
            }
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (net.sourceforge.czt.core.jaxb.gen.Spec.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava"
+"/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u000e\u00ea\u00a1Lppsq\u0000~\u0000\u0000\f\u00d8\u00bfuppsq\u0000~\u0000\u0000\n"
+"\u00e9\u0018Vppsq\u0000~\u0000\u0000\u0007\u00dd\u00df\u0081ppsq\u0000~\u0000\u0000\u0005\u00f3\u00db\u008dppsr\u0000\u001dcom.sun.msv.grammar.ChoiceE"
+"xp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001\u0001|\u00f6\u00eeppsr\u0000\'com.sun.msv.grammar.trex.Elemen"
+"tPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameC"
+"lass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreU"
+"ndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0001|\u00f6\u00e3sr\u0000\u0011java.la"
+"ng.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000p\u0000sq\u0000~\u0000\f\u0001|\u00f6\u00d8pp\u0000sq\u0000~\u0000\n\u0001|\u00f6\u00cdpps"
+"r\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.ms"
+"v.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0001|\u00f6\u00c2q\u0000~\u0000\u0011psr\u0000 "
+"com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnam"
+"eClassq\u0000~\u0000\rxq\u0000~\u0000\u0003\u0001|\u00f6\u00bfq\u0000~\u0000\u0011psr\u00002com.sun.msv.grammar.Expressio"
+"n$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\bsq\u0000~\u0000\u0010\u0001q\u0000~\u0000\u001asr\u0000 co"
+"m.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.gra"
+"mmar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expressio"
+"n$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\tq\u0000~\u0000\u001bq\u0000~\u0000 sr\u0000#com.su"
+"n.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava"
+"/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000\"xq\u0000~\u0000\u001dt\u00000net.sourceforge.cz"
+"t.core.jaxb.gen.TermA.AnnsTypet\u0000+http://java.sun.com/jaxb/xj"
+"c/dummy-elementssq\u0000~\u0000!t\u0000\u0004Annst\u0000\u001ehttp://czt.sourceforge.net/z"
+"mlq\u0000~\u0000 sq\u0000~\u0000\n\u0004v\u00e4\u009appsq\u0000~\u0000\u0014\u0004v\u00e4\u008fq\u0000~\u0000\u0011psq\u0000~\u0000\n\u0004v\u00e4\u008cq\u0000~\u0000\u0011psq\u0000~\u0000\n\u0002\u00f9\u00ed"
+"\u00b2q\u0000~\u0000\u0011psq\u0000~\u0000\f\u0001|\u00f6\u00d8q\u0000~\u0000\u0011p\u0000sq\u0000~\u0000\n\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0014\u0001|\u00f6\u00c2q\u0000~\u0000\u0011psq\u0000~\u0000\u0017\u0001|"
+"\u00f6\u00bfq\u0000~\u0000\u0011pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u0000.net.sourceforge.czt.core.jax"
+"b.gen.ZSectElementq\u0000~\u0000%sq\u0000~\u0000\f\u0001|\u00f6\u00d8q\u0000~\u0000\u0011p\u0000sq\u0000~\u0000\n\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0014\u0001|"
+"\u00f6\u00c2q\u0000~\u0000\u0011psq\u0000~\u0000\u0017\u0001|\u00f6\u00bfq\u0000~\u0000\u0011pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u00001net.sourcefo"
+"rge.czt.core.jaxb.gen.NarrSectElementq\u0000~\u0000%sq\u0000~\u0000\f\u0001|\u00f6\u00d8q\u0000~\u0000\u0011p\u0000s"
+"q\u0000~\u0000\n\u0001|\u00f6\u00cdppsq\u0000~\u0000\u0014\u0001|\u00f6\u00c2q\u0000~\u0000\u0011psq\u0000~\u0000\u0017\u0001|\u00f6\u00bfq\u0000~\u0000\u0011pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq"
+"\u0000~\u0000!t\u00006net.sourceforge.czt.core.jaxb.gen.UnparsedZSectElemen"
+"tq\u0000~\u0000%q\u0000~\u0000 sq\u0000~\u0000\n\u0001\u00ea\u0003\u00efppsq\u0000~\u0000\u0017\u0001\u00ea\u0003\u00e4q\u0000~\u0000\u0011psr\u0000\u001bcom.sun.msv.gramm"
+"ar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;"
+"L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003\u0000"
+"V\u00c58ppsr\u0000#com.sun.msv.datatype.xsd.AnyURIType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*c"
+"om.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com."
+"sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv."
+"datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000\"L\u0000"
+"\btypeNameq\u0000~\u0000\"L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/Whit"
+"eSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0006anyU"
+"RIsr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$NullSetExpress"
+"ion\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\nq\u0000~\u0000\u0011psr\u0000\u001bcom.sun.msv.util.StringPai"
+"r\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\"L\u0000\fnamespaceURIq\u0000~\u0000\"xpq\u0000~\u0000Lq\u0000~\u0000"
+"Ksq\u0000~\u0000!t\u0000\u0006Sourcet\u0000\u0000q\u0000~\u0000 sq\u0000~\u0000\n\u0003\u000b8\u00d0ppsq\u0000~\u0000\u0017\u0003\u000b8\u00c5q\u0000~\u0000\u0011psq\u0000~\u0000A\u0001\u0013"
+"\u00de\u0013q\u0000~\u0000\u0011psr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000"
+"\risAlwaysValidxq\u0000~\u0000Fq\u0000~\u0000Kt\u0000\u0006stringsr\u00005com.sun.msv.datatype.x"
+"sd.WhiteSpaceProcessor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000N\u0001q\u0000~\u0000Qsq\u0000~\u0000R"
+"q\u0000~\u0000\\q\u0000~\u0000Ksq\u0000~\u0000!t\u0000\u0007Versionq\u0000~\u0000Vq\u0000~\u0000 sq\u0000~\u0000\n\u0001\u00ef\u00a7\u001appsq\u0000~\u0000\u0017\u0001\u00ef\u00a7\u000fq\u0000"
+"~\u0000\u0011psq\u0000~\u0000A\u0001\u008c[_ppsr\u0000%com.sun.msv.datatype.xsd.DateTimeType\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000)com.sun.msv.datatype.xsd.DateTimeBaseType\u0014W\u001a@3\u00a5\u00b4"
+"\u00e5\u0002\u0000\u0000xq\u0000~\u0000Fq\u0000~\u0000Kt\u0000\bdateTimeq\u0000~\u0000Oq\u0000~\u0000Qsq\u0000~\u0000Rq\u0000~\u0000hq\u0000~\u0000Ksq\u0000~\u0000!t\u0000"
+"\bModifiedq\u0000~\u0000Vq\u0000~\u0000 sq\u0000~\u0000\n\u0002\u0011\u00e1\u00d2ppsq\u0000~\u0000\u0017\u0002\u0011\u00e1\u00c7q\u0000~\u0000\u0011pq\u0000~\u0000Ysq\u0000~\u0000!t\u0000"
+"\u0006Authorq\u0000~\u0000Vq\u0000~\u0000 sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$Clos"
+"edHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j"
+"\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthresholdL\u0000\u0006parentq\u0000~\u0000q[\u0000\u0005tablet\u0000![Lcom/"
+"sun/msv/grammar/Expression;xp\u0000\u0000\u0000\u0016\u0000\u0000\u00009pur\u0000![Lcom.sun.msv.gram"
+"mar.Expression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0000\u00bfpppppppppppppppppppppppppppp"
+"pppppppppppppppq\u0000~\u0000,pppppppppq\u0000~\u0000?pppppppppppppppppq\u0000~\u0000lpppp"
+"ppppppppppppppppppq\u0000~\u0000\u0016q\u0000~\u0000/q\u0000~\u00005q\u0000~\u0000;pppppppq\u0000~\u0000\u0013q\u0000~\u0000.q\u0000~\u00004"
+"q\u0000~\u0000:q\u0000~\u0000\u0006q\u0000~\u0000bppppppppppppppppq\u0000~\u0000\tppppppppppq\u0000~\u0000\u000bppppppppp"
+"pppppppppppppq\u0000~\u0000+ppq\u0000~\u0000*ppppppppppq\u0000~\u0000)pppppq\u0000~\u0000\u0007q\u0000~\u0000Wq\u0000~\u0000\u0005"
+"pq\u0000~\u0000\bppppp"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.UnmarshallingContext context) {
            super(context, "-----------------");
        }

        protected Unmarshaller(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return net.sourceforge.czt.core.jaxb.gen.impl.SpecImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        attIdx = context.getAttribute("", "Modified");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText0(v);
                            state = 9;
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  12 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl)net.sourceforge.czt.core.jaxb.gen.impl.SpecImpl.this).new Unmarshaller(context)), 13, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl)net.sourceforge.czt.core.jaxb.gen.impl.SpecImpl.this).new Unmarshaller(context)), 13, ___uri, ___local, ___qname, __atts);
                        return ;
                    case  14 :
                        if (("Sect" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 15;
                            return ;
                        }
                        if (("ZSect" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Sect.add(((net.sourceforge.czt.core.jaxb.gen.impl.ZSectElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ZSectElementImpl.class), 14, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("NarrSect" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Sect.add(((net.sourceforge.czt.core.jaxb.gen.impl.NarrSectElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.NarrSectElementImpl.class), 14, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("UnparsedZSect" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Sect.add(((net.sourceforge.czt.core.jaxb.gen.impl.UnparsedZSectElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.UnparsedZSectElementImpl.class), 14, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  13 :
                        if (("Sect" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 15;
                            return ;
                        }
                        if (("ZSect" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Sect.add(((net.sourceforge.czt.core.jaxb.gen.impl.ZSectElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ZSectElementImpl.class), 14, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("NarrSect" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Sect.add(((net.sourceforge.czt.core.jaxb.gen.impl.NarrSectElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.NarrSectElementImpl.class), 14, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("UnparsedZSect" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Sect.add(((net.sourceforge.czt.core.jaxb.gen.impl.UnparsedZSectElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.UnparsedZSectElementImpl.class), 14, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 14;
                        continue outer;
                    case  15 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Sect.add(((net.sourceforge.czt.core.jaxb.gen.impl.SectImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SectImpl.class), 16, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        _Sect.add(((net.sourceforge.czt.core.jaxb.gen.impl.SectImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SectImpl.class), 16, ___uri, ___local, ___qname, __atts)));
                        return ;
                    case  3 :
                        attIdx = context.getAttribute("", "Version");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 6;
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "Author");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 12;
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "Source");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText0(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Modified = ((java.util.Calendar) com.sun.msv.datatype.xsd.DateTimeType.theInstance.createJavaObject(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value), context));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Version = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Author = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Source = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        attIdx = context.getAttribute("", "Modified");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText0(v);
                            state = 9;
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  12 :
                        spawnHandlerFromLeaveElement((((net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl)net.sourceforge.czt.core.jaxb.gen.impl.SpecImpl.this).new Unmarshaller(context)), 13, ___uri, ___local, ___qname);
                        return ;
                    case  14 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  13 :
                        state = 14;
                        continue outer;
                    case  15 :
                        _Sect.add(((net.sourceforge.czt.core.jaxb.gen.impl.SectImpl) spawnChildFromLeaveElement((net.sourceforge.czt.core.jaxb.gen.impl.SectImpl.class), 16, ___uri, ___local, ___qname)));
                        return ;
                    case  3 :
                        attIdx = context.getAttribute("", "Version");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 6;
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "Author");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 12;
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  16 :
                        if (("Sect" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 14;
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "Source");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        if (("Modified" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  12 :
                        spawnHandlerFromEnterAttribute((((net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl)net.sourceforge.czt.core.jaxb.gen.impl.SpecImpl.this).new Unmarshaller(context)), 13, ___uri, ___local, ___qname);
                        return ;
                    case  14 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  13 :
                        state = 14;
                        continue outer;
                    case  15 :
                        _Sect.add(((net.sourceforge.czt.core.jaxb.gen.impl.SectImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.core.jaxb.gen.impl.SectImpl.class), 16, ___uri, ___local, ___qname)));
                        return ;
                    case  3 :
                        if (("Version" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  9 :
                        if (("Author" == ___local)&&("" == ___uri)) {
                            state = 10;
                            return ;
                        }
                        state = 12;
                        continue outer;
                    case  0 :
                        if (("Source" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  2 :
                        if (("Source" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "Modified");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText0(v);
                            state = 9;
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  12 :
                        spawnHandlerFromLeaveAttribute((((net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl)net.sourceforge.czt.core.jaxb.gen.impl.SpecImpl.this).new Unmarshaller(context)), 13, ___uri, ___local, ___qname);
                        return ;
                    case  14 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  8 :
                        if (("Modified" == ___local)&&("" == ___uri)) {
                            state = 9;
                            return ;
                        }
                        break;
                    case  5 :
                        if (("Version" == ___local)&&("" == ___uri)) {
                            state = 6;
                            return ;
                        }
                        break;
                    case  13 :
                        state = 14;
                        continue outer;
                    case  15 :
                        _Sect.add(((net.sourceforge.czt.core.jaxb.gen.impl.SectImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.core.jaxb.gen.impl.SectImpl.class), 16, ___uri, ___local, ___qname)));
                        return ;
                    case  11 :
                        if (("Author" == ___local)&&("" == ___uri)) {
                            state = 12;
                            return ;
                        }
                        break;
                    case  3 :
                        attIdx = context.getAttribute("", "Version");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 6;
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "Author");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 12;
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "Source");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  6 :
                            attIdx = context.getAttribute("", "Modified");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText0(v);
                                state = 9;
                                continue outer;
                            }
                            state = 9;
                            continue outer;
                        case  12 :
                            spawnHandlerFromText((((net.sourceforge.czt.core.jaxb.gen.impl.TermAImpl)net.sourceforge.czt.core.jaxb.gen.impl.SpecImpl.this).new Unmarshaller(context)), 13, value);
                            return ;
                        case  4 :
                            eatText1(value);
                            state = 5;
                            return ;
                        case  14 :
                            revertToParentFromText(value);
                            return ;
                        case  10 :
                            eatText2(value);
                            state = 11;
                            return ;
                        case  13 :
                            state = 14;
                            continue outer;
                        case  15 :
                            _Sect.add(((net.sourceforge.czt.core.jaxb.gen.impl.SectImpl) spawnChildFromText((net.sourceforge.czt.core.jaxb.gen.impl.SectImpl.class), 16, value)));
                            return ;
                        case  7 :
                            eatText0(value);
                            state = 8;
                            return ;
                        case  3 :
                            attIdx = context.getAttribute("", "Version");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText1(v);
                                state = 6;
                                continue outer;
                            }
                            state = 6;
                            continue outer;
                        case  1 :
                            eatText3(value);
                            state = 2;
                            return ;
                        case  9 :
                            attIdx = context.getAttribute("", "Author");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText2(v);
                                state = 12;
                                continue outer;
                            }
                            state = 12;
                            continue outer;
                        case  0 :
                            attIdx = context.getAttribute("", "Source");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText3(v);
                                state = 3;
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
