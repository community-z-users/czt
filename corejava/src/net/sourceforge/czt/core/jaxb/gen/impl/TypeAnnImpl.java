//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.1-05/30/2003 05:06 AM(java_re)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2003.10.08 at 02:45:10 NZDT 
//


package net.sourceforge.czt.core.jaxb.gen.impl;

public class TypeAnnImpl
    extends net.sourceforge.czt.core.jaxb.gen.impl.AnnImpl
    implements net.sourceforge.czt.core.jaxb.gen.TypeAnn, com.sun.xml.bind.JAXBObject, net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.UnmarshallableObject, net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.XMLSerializable, net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.ValidatableObject
{

    protected net.sourceforge.czt.core.jaxb.gen.Type _Type;
    public final static java.lang.Class version = (net.sourceforge.czt.core.jaxb.gen.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (net.sourceforge.czt.core.jaxb.gen.TypeAnn.class);
    }

    public net.sourceforge.czt.core.jaxb.gen.Type getType() {
        return _Type;
    }

    public void setType(net.sourceforge.czt.core.jaxb.gen.Type value) {
        _Type = value;
    }

    public net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.UnmarshallingEventHandler createUnmarshaller(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.UnmarshallingContext context) {
        return new net.sourceforge.czt.core.jaxb.gen.impl.TypeAnnImpl.Unmarshaller(context);
    }

    public void serializeElementBody(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeElementBody(context);
        if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.Type) {
            if (_Type instanceof javax.xml.bind.Element) {
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Type));
            } else {
                context.startElement("http://czt.sourceforge.net/zml", "Type");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Type));
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Type));
                context.endAttributes();
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Type));
                context.endElement();
            }
        } else {
            if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.GenTypeElement) {
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Type));
            } else {
                if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.ProdTypeElement) {
                    context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Type));
                } else {
                    if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.PowerTypeElement) {
                        context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Type));
                    } else {
                        if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.SchemaTypeElement) {
                            context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Type));
                        } else {
                            if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.GivenTypeElement) {
                                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Type));
                            } else {
                                throw new org.xml.sax.SAXException("type mismatch error");
                            }
                        }
                    }
                }
            }
        }
    }

    public void serializeAttributes(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeAttributes(context);
        if (!(_Type instanceof net.sourceforge.czt.core.jaxb.gen.Type)) {
            if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.GenTypeElement) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Type));
            } else {
                if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.ProdTypeElement) {
                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Type));
                } else {
                    if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.PowerTypeElement) {
                        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Type));
                    } else {
                        if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.SchemaTypeElement) {
                            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Type));
                        } else {
                            if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.GivenTypeElement) {
                                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Type));
                            } else {
                                throw new org.xml.sax.SAXException("type mismatch error");
                            }
                        }
                    }
                }
            }
        }
    }

    public void serializeAttributeBody(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeAttributeBody(context);
        if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.Type) {
            if (_Type instanceof javax.xml.bind.Element) {
                context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Type));
            } else {
                context.startElement("http://czt.sourceforge.net/zml", "Type");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Type));
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Type));
                context.endAttributes();
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _Type));
                context.endElement();
            }
        } else {
            if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.GenTypeElement) {
                context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Type));
            } else {
                if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.ProdTypeElement) {
                    context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Type));
                } else {
                    if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.PowerTypeElement) {
                        context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Type));
                    } else {
                        if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.SchemaTypeElement) {
                            context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Type));
                        } else {
                            if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.GivenTypeElement) {
                                context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _Type));
                            } else {
                                throw new org.xml.sax.SAXException("type mismatch error");
                            }
                        }
                    }
                }
            }
        }
    }

    public void serializeURIs(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeURIs(context);
        if (!(_Type instanceof net.sourceforge.czt.core.jaxb.gen.Type)) {
            if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.GenTypeElement) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Type));
            } else {
                if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.ProdTypeElement) {
                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Type));
                } else {
                    if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.PowerTypeElement) {
                        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Type));
                    } else {
                        if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.SchemaTypeElement) {
                            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Type));
                        } else {
                            if (_Type instanceof net.sourceforge.czt.core.jaxb.gen.GivenTypeElement) {
                                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Type));
                            } else {
                                throw new org.xml.sax.SAXException("type mismatch error");
                            }
                        }
                    }
                }
            }
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (net.sourceforge.czt.core.jaxb.gen.TypeAnn.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun."
+"msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gramm"
+"ar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expression"
+"\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/l"
+"ang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u0007p\u00d2@ppsq\u0000~\u0000\u0000\u0005\u00f3\u00dbfppsq\u0000~\u0000\u0000\u0004v\u00e4"
+"\u008cppsq\u0000~\u0000\u0000\u0002\u00f9\u00ed\u00b2ppsr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ec"
+"om.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredA"
+"ttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0001|\u00f6\u00d8pp\u0000sq\u0000~\u0000\u0000\u0001|\u00f6\u00cdppsr\u0000 co"
+"m.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.gra"
+"mmar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0001|\u00f6\u00c2sr\u0000\u0011java.lang.B"
+"oolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000 com.sun.msv.grammar.Attribu"
+"teExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\nxq\u0000~\u0000\u0003\u0001|\u00f6\u00bfq\u0000~\u0000\u0012p"
+"sr\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\bsq\u0000~\u0000\u0011\u0001q\u0000~\u0000\u0016sr\u0000 com.sun.msv.grammar.AnyNameCl"
+"ass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp"
+"sr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\tq\u0000~\u0000\u0017q\u0000~\u0000\u001csr\u0000#com.sun.msv.grammar.SimpleNameCla"
+"ss\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceUR"
+"Iq\u0000~\u0000\u001exq\u0000~\u0000\u0019t\u00000net.sourceforge.czt.core.jaxb.gen.GenTypeElem"
+"entt\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\t\u0001|\u00f6\u00d8p"
+"p\u0000sq\u0000~\u0000\u0000\u0001|\u00f6\u00cdppsq\u0000~\u0000\u000e\u0001|\u00f6\u00c2q\u0000~\u0000\u0012psq\u0000~\u0000\u0013\u0001|\u00f6\u00bfq\u0000~\u0000\u0012pq\u0000~\u0000\u0016q\u0000~\u0000\u001aq\u0000~\u0000"
+"\u001csq\u0000~\u0000\u001dt\u00001net.sourceforge.czt.core.jaxb.gen.ProdTypeElementq"
+"\u0000~\u0000!sq\u0000~\u0000\t\u0001|\u00f6\u00d8pp\u0000sq\u0000~\u0000\u0000\u0001|\u00f6\u00cdppsq\u0000~\u0000\u000e\u0001|\u00f6\u00c2q\u0000~\u0000\u0012psq\u0000~\u0000\u0013\u0001|\u00f6\u00bfq\u0000~\u0000\u0012"
+"pq\u0000~\u0000\u0016q\u0000~\u0000\u001aq\u0000~\u0000\u001csq\u0000~\u0000\u001dt\u00002net.sourceforge.czt.core.jaxb.gen.P"
+"owerTypeElementq\u0000~\u0000!sq\u0000~\u0000\t\u0001|\u00f6\u00d8pp\u0000sq\u0000~\u0000\u0000\u0001|\u00f6\u00cdppsq\u0000~\u0000\u000e\u0001|\u00f6\u00c2q\u0000~\u0000\u0012"
+"psq\u0000~\u0000\u0013\u0001|\u00f6\u00bfq\u0000~\u0000\u0012pq\u0000~\u0000\u0016q\u0000~\u0000\u001aq\u0000~\u0000\u001csq\u0000~\u0000\u001dt\u00003net.sourceforge.czt"
+".core.jaxb.gen.SchemaTypeElementq\u0000~\u0000!sq\u0000~\u0000\t\u0001|\u00f6\u00d8pp\u0000sq\u0000~\u0000\u0000\u0001|\u00f6\u00cd"
+"ppsq\u0000~\u0000\u000e\u0001|\u00f6\u00c2q\u0000~\u0000\u0012psq\u0000~\u0000\u0013\u0001|\u00f6\u00bfq\u0000~\u0000\u0012pq\u0000~\u0000\u0016q\u0000~\u0000\u001aq\u0000~\u0000\u001csq\u0000~\u0000\u001dt\u00002ne"
+"t.sourceforge.czt.core.jaxb.gen.GivenTypeElementq\u0000~\u0000!sr\u0000\"com"
+".sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom"
+"/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv"
+".grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthre"
+"sholdL\u0000\u0006parentq\u0000~\u0000;[\u0000\u0005tablet\u0000![Lcom/sun/msv/grammar/Expressi"
+"on;xp\u0000\u0000\u0000\u000e\u0000\u0000\u00009pur\u0000![Lcom.sun.msv.grammar.Expression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002"
+"\u0000\u0000xp\u0000\u0000\u0000\u00bfpppppppppppppppq\u0000~\u0000\u0005pppppppppppppppppppppppppppq\u0000~\u0000\b"
+"ppppppppppppppppppppppppppppppppppppppppppppq\u0000~\u0000\u0006pppppq\u0000~\u0000\u0010q"
+"\u0000~\u0000$q\u0000~\u0000*q\u0000~\u00000q\u0000~\u00006ppppppq\u0000~\u0000\rq\u0000~\u0000#q\u0000~\u0000)q\u0000~\u0000/q\u0000~\u00005pppppppppp"
+"pppppppppppppppppppppppppppppppppppppppppq\u0000~\u0000\u0007pppppppppppppp"
+"ppppppppppppppp"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.UnmarshallingContext context) {
            super(context, "-----");
        }

        protected Unmarshaller(net.sourceforge.czt.zpatt.jaxb.gen.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return net.sourceforge.czt.core.jaxb.gen.impl.TypeAnnImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Type = ((net.sourceforge.czt.core.jaxb.gen.impl.TypeImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.TypeImpl.class), 4, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _Type = ((net.sourceforge.czt.core.jaxb.gen.impl.TypeImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.TypeImpl.class), 4, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  2 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  1 :
                        if (("Type" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 3;
                            return ;
                        }
                        if (("GenType" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Type = ((net.sourceforge.czt.core.jaxb.gen.impl.GenTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.GenTypeElementImpl.class), 2, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("ProdType" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Type = ((net.sourceforge.czt.core.jaxb.gen.impl.ProdTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.ProdTypeElementImpl.class), 2, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("PowerType" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Type = ((net.sourceforge.czt.core.jaxb.gen.impl.PowerTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.PowerTypeElementImpl.class), 2, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("SchemaType" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Type = ((net.sourceforge.czt.core.jaxb.gen.impl.SchemaTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.SchemaTypeElementImpl.class), 2, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("GivenType" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _Type = ((net.sourceforge.czt.core.jaxb.gen.impl.GivenTypeElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.core.jaxb.gen.impl.GivenTypeElementImpl.class), 2, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  0 :
                        spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.AnnImpl)net.sourceforge.czt.core.jaxb.gen.impl.TypeAnnImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                        return ;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        _Type = ((net.sourceforge.czt.core.jaxb.gen.impl.TypeImpl) spawnChildFromLeaveElement((net.sourceforge.czt.core.jaxb.gen.impl.TypeImpl.class), 4, ___uri, ___local, ___qname));
                        return ;
                    case  2 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  0 :
                        spawnHandlerFromLeaveElement((((net.sourceforge.czt.core.jaxb.gen.impl.AnnImpl)net.sourceforge.czt.core.jaxb.gen.impl.TypeAnnImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  4 :
                        if (("Type" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 2;
                            return ;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        _Type = ((net.sourceforge.czt.core.jaxb.gen.impl.TypeImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.core.jaxb.gen.impl.TypeImpl.class), 4, ___uri, ___local, ___qname));
                        return ;
                    case  2 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  0 :
                        spawnHandlerFromEnterAttribute((((net.sourceforge.czt.core.jaxb.gen.impl.AnnImpl)net.sourceforge.czt.core.jaxb.gen.impl.TypeAnnImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        _Type = ((net.sourceforge.czt.core.jaxb.gen.impl.TypeImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.core.jaxb.gen.impl.TypeImpl.class), 4, ___uri, ___local, ___qname));
                        return ;
                    case  2 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  0 :
                        spawnHandlerFromLeaveAttribute((((net.sourceforge.czt.core.jaxb.gen.impl.AnnImpl)net.sourceforge.czt.core.jaxb.gen.impl.TypeAnnImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  3 :
                            _Type = ((net.sourceforge.czt.core.jaxb.gen.impl.TypeImpl) spawnChildFromText((net.sourceforge.czt.core.jaxb.gen.impl.TypeImpl.class), 4, value));
                            return ;
                        case  2 :
                            revertToParentFromText(value);
                            return ;
                        case  0 :
                            spawnHandlerFromText((((net.sourceforge.czt.core.jaxb.gen.impl.AnnImpl)net.sourceforge.czt.core.jaxb.gen.impl.TypeAnnImpl.this).new Unmarshaller(context)), 1, value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
