//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.1-05/30/2003 05:06 AM(java_re)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2003.08.25 at 03:03:07 NZST 
//


package net.sourceforge.czt.core.jaxb.gen.impl;

public class AndPredElementImpl
    extends net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl
    implements net.sourceforge.czt.core.jaxb.gen.AndPredElement, com.sun.xml.bind.JAXBObject, com.sun.xml.bind.RIElement, net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallableObject, net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializable, net.sourceforge.czt.core.jaxb.gen.impl.runtime.ValidatableObject
{

    public final static java.lang.Class version = (net.sourceforge.czt.core.jaxb.gen.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    public java.lang.String ____jaxb_ri____getNamespaceURI() {
        return "http://czt.sourceforge.net/zml";
    }

    public java.lang.String ____jaxb_ri____getLocalName() {
        return "AndPred";
    }

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (net.sourceforge.czt.core.jaxb.gen.AndPredElement.class);
    }

    public net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingEventHandler createUnmarshaller(net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingContext context) {
        return new net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.Unmarshaller(context);
    }

    public void serializeElementBody(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        context.startElement("http://czt.sourceforge.net/zml", "AndPred");
        super.serializeURIs(context);
        context.endNamespaceDecls();
        super.serializeAttributes(context);
        context.endAttributes();
        super.serializeElementBody(context);
        context.endElement();
    }

    public void serializeAttributes(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
    }

    public void serializeAttributeBody(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        context.startElement("http://czt.sourceforge.net/zml", "AndPred");
        super.serializeURIs(context);
        context.endNamespaceDecls();
        super.serializeAttributes(context);
        context.endAttributes();
        super.serializeElementBody(context);
        context.endElement();
    }

    public void serializeURIs(net.sourceforge.czt.core.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
    }

    public java.lang.Class getPrimaryInterface() {
        return (net.sourceforge.czt.core.jaxb.gen.AndPredElement.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
+"grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
+"\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
+"msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilon"
+"Reducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xp \u00b5)bp"
+"p\u0000sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun."
+"msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~"
+"\u0000\u0004 \u00b5)Wppsq\u0000~\u0000\u0007\u001fB\u00dc\u0086ppsq\u0000~\u0000\u0007\u0010A|\u00f3ppsr\u0000\u001dcom.sun.msv.grammar.Choi"
+"ceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\b\u0001@\u001d`ppsq\u0000~\u0000\u0000\u0001@\u001dUsr\u0000\u0011java.lang.Boolean\u00cd"
+" r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000p\u0000sq\u0000~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsr\u0000 com.sun."
+"msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.U"
+"naryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0003xq\u0000~\u0000\u0004\u0001@\u001d4q\u0000~\u0000\u0010psr\u0000 com.sun.msv"
+".grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001"
+"xq\u0000~\u0000\u0004\u0001@\u001d1q\u0000~\u0000\u0010psr\u00002com.sun.msv.grammar.Expression$AnyString"
+"Expression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004\u0000\u0000\u0000\bsq\u0000~\u0000\u000f\u0001q\u0000~\u0000\u0019sr\u0000 com.sun.msv.g"
+"rammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameCl"
+"ass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonEx"
+"pression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004\u0000\u0000\u0000\tq\u0000~\u0000\u001aq\u0000~\u0000\u001fsr\u0000#com.sun.msv.gramm"
+"ar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/Strin"
+"g;L\u0000\fnamespaceURIq\u0000~\u0000!xq\u0000~\u0000\u001ct\u00000net.sourceforge.czt.core.jaxb"
+".gen.TermA.AnnsTypet\u0000+http://java.sun.com/jaxb/xjc/dummy-ele"
+"mentssq\u0000~\u0000 t\u0000\u0004Annst\u0000\u001ehttp://czt.sourceforge.net/zmlq\u0000~\u0000\u001fsq\u0000~"
+"\u0000\f\u000f\u0001_\u008eppsq\u0000~\u0000\f\r\u00c1BBppsq\u0000~\u0000\f\f\u0081$\u00f6ppsq\u0000~\u0000\f\u000bA\u0007\u00aappsq\u0000~\u0000\f\n\u0000\u00ea^ppsq\u0000~"
+"\u0000\f\b\u00c0\u00cd\u0012ppsq\u0000~\u0000\f\u0007\u0080\u00af\u00c6ppsq\u0000~\u0000\f\u0006@\u0092zppsq\u0000~\u0000\f\u0005\u0000u.ppsq\u0000~\u0000\f\u0003\u00c0W\u00e2ppsq\u0000~"
+"\u0000\f\u0002\u0080:\u0096ppsq\u0000~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0001@\u001d1q"
+"\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000+net.sourceforge.czt.core.jaxb.g"
+"en.FalsePredq\u0000~\u0000$sq\u0000~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000\u0010psq"
+"\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000*net.sourceforge.czt.co"
+"re.jaxb.gen.TruePredq\u0000~\u0000$sq\u0000~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4"
+"q\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00000net.sourceforg"
+"e.czt.core.jaxb.gen.AndPredElementq\u0000~\u0000$sq\u0000~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@"
+"\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000-"
+"net.sourceforge.czt.core.jaxb.gen.ImpliesPredq\u0000~\u0000$sq\u0000~\u0000\u0000\u0001@\u001dJ"
+"pp\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~"
+"\u0000\u001fsq\u0000~\u0000 t\u0000)net.sourceforge.czt.core.jaxb.gen.IffPredq\u0000~\u0000$sq\u0000"
+"~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q"
+"\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000(net.sourceforge.czt.core.jaxb.gen.OrPredq\u0000"
+"~\u0000$sq\u0000~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010p"
+"q\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000,net.sourceforge.czt.core.jaxb.gen.Ex"
+"istsPredq\u0000~\u0000$sq\u0000~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000\u0010psq\u0000~\u0000\u0016"
+"\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000-net.sourceforge.czt.core.j"
+"axb.gen.Exists1Predq\u0000~\u0000$sq\u0000~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4q"
+"\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000,net.sourceforge"
+".czt.core.jaxb.gen.ForallPredq\u0000~\u0000$sq\u0000~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@\u001d?pps"
+"q\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00001net.s"
+"ourceforge.czt.core.jaxb.gen.ExprPredElementq\u0000~\u0000$sq\u0000~\u0000\u0000\u0001@\u001dJp"
+"p\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000"
+"\u001fsq\u0000~\u0000 t\u00000net.sourceforge.czt.core.jaxb.gen.MemPredElementq\u0000"
+"~\u0000$sq\u0000~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010p"
+"q\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00000net.sourceforge.czt.core.jaxb.gen.Ne"
+"gPredElementq\u0000~\u0000$sq\u0000~\u0000\f\u000f\u0001_\u008eppsq\u0000~\u0000\f\r\u00c1BBppsq\u0000~\u0000\f\f\u0081$\u00f6ppsq\u0000~\u0000\f\u000b"
+"A\u0007\u00aappsq\u0000~\u0000\f\n\u0000\u00ea^ppsq\u0000~\u0000\f\b\u00c0\u00cd\u0012ppsq\u0000~\u0000\f\u0007\u0080\u00af\u00c6ppsq\u0000~\u0000\f\u0006@\u0092zppsq\u0000~\u0000\f\u0005"
+"\u0000u.ppsq\u0000~\u0000\f\u0003\u00c0W\u00e2ppsq\u0000~\u0000\f\u0002\u0080:\u0096ppsq\u0000~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013"
+"\u0001@\u001d4q\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 q\u0000~\u00008q\u0000~\u0000$sq\u0000"
+"~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q"
+"\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 q\u0000~\u0000>q\u0000~\u0000$sq\u0000~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4"
+"q\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 q\u0000~\u0000Dq\u0000~\u0000$sq\u0000~\u0000\u0000\u0001"
+"@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001d"
+"q\u0000~\u0000\u001fsq\u0000~\u0000 q\u0000~\u0000Jq\u0000~\u0000$sq\u0000~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000"
+"\u0010psq\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 q\u0000~\u0000Pq\u0000~\u0000$sq\u0000~\u0000\u0000\u0001@\u001dJp"
+"p\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000"
+"\u001fsq\u0000~\u0000 q\u0000~\u0000Vq\u0000~\u0000$sq\u0000~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000\u0010psq"
+"\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 q\u0000~\u0000\\q\u0000~\u0000$sq\u0000~\u0000\u0000\u0001@\u001dJpp\u0000sq"
+"\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000"
+"~\u0000 q\u0000~\u0000bq\u0000~\u0000$sq\u0000~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000\u0010psq\u0000~\u0000\u0016"
+"\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 q\u0000~\u0000hq\u0000~\u0000$sq\u0000~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f"
+"\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 q"
+"\u0000~\u0000nq\u0000~\u0000$sq\u0000~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@\u001d?ppsq\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0001@\u001d1"
+"q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 q\u0000~\u0000tq\u0000~\u0000$sq\u0000~\u0000\u0000\u0001@\u001dJpp\u0000sq\u0000~\u0000\f\u0001@\u001d?"
+"ppsq\u0000~\u0000\u0013\u0001@\u001d4q\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0001@\u001d1q\u0000~\u0000\u0010pq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 q\u0000~\u0000z"
+"q\u0000~\u0000$sq\u0000~\u0000\f\u0001rL\u00ccppsq\u0000~\u0000\u0016\u0001rL\u00c1q\u0000~\u0000\u0010psr\u0000\u001bcom.sun.msv.grammar.Dat"
+"aExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exc"
+"eptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004\u0000\u00e0\u00c0\u008cpps"
+"r\u0000)com.sun.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006va"
+"luest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.datatype.xsd.DataTypeW"
+"ithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.x"
+"sd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCh"
+"eckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatypeImp"
+"l;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;L"
+"\u0000\tfacetNameq\u0000~\u0000!xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000!L\u0000\btypeNameq\u0000~\u0000!L\u0000\nwhiteSpacet"
+"\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpq\u0000~\u0000\'t\u0000\u0002Op"
+"sr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Preserve\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0000\u0000sr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicT"
+"ype\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u00cet\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0006stringq\u0000~\u0000"
+"\u00d4\u0001q\u0000~\u0000\u00d8t\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000"
+"\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0002NLt\u0000\u0003Andt\u0000\u0004Semit\u0000\u0005Chainxsr\u00000com.sun.msv.grammar."
+"Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004\u0000\u0000\u0000\nq\u0000~\u0000\u0010psr\u0000\u001bc"
+"om.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000!L\u0000\fnam"
+"espaceURIq\u0000~\u0000!xpq\u0000~\u0000\u00d1q\u0000~\u0000\'sq\u0000~\u0000 t\u0000\u0002Opt\u0000\u0000q\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000\u0007AndPre"
+"dq\u0000~\u0000\'sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bex"
+"pTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr"
+"\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000"
+"\u0005countI\u0000\tthresholdL\u0000\u0006parentq\u0000~\u0000\u00ec[\u0000\u0005tablet\u0000![Lcom/sun/msv/gra"
+"mmar/Expression;xp\u0000\u0000\u0000M\u0000\u0000\u0000rpur\u0000![Lcom.sun.msv.grammar.Express"
+"ion;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0001\u007fpppppq\u0000~\u0000\u0085q\u0000~\u00002pppppq\u0000~\u0000\u0083q\u0000~\u00000pppppq\u0000~\u0000"
+"\u0081q\u0000~\u0000.pppppq\u0000~\u0000,q\u0000~\u0000\u007fpppppq\u0000~\u0000*q\u0000~\u0000}pppppq\u0000~\u0000(q\u0000~\u0000{ppppppppp"
+"pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp"
+"pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp"
+"q\u0000~\u0000\u00a6q\u0000~\u0000\u00a1q\u0000~\u0000\u009cq\u0000~\u0000\u0097q\u0000~\u0000\u0092q\u0000~\u0000\u008dq\u0000~\u0000\u0088q\u0000~\u0000wq\u0000~\u0000qq\u0000~\u0000kq\u0000~\u0000eq\u0000~\u0000\u00a0"
+"q\u0000~\u0000\u009bq\u0000~\u0000\u0096q\u0000~\u0000\u0091q\u0000~\u0000\u008cq\u0000~\u0000\u0087q\u0000~\u0000vq\u0000~\u0000pq\u0000~\u0000jq\u0000~\u0000dq\u0000~\u0000^q\u0000~\u0000Xq\u0000~\u0000R"
+"q\u0000~\u0000Lq\u0000~\u0000Fq\u0000~\u0000@q\u0000~\u0000:q\u0000~\u00004q\u0000~\u0000\u0012q\u0000~\u0000_q\u0000~\u0000Yq\u0000~\u0000Sq\u0000~\u0000Mq\u0000~\u0000Gq\u0000~\u0000A"
+"q\u0000~\u0000/q\u0000~\u0000;q\u0000~\u00005q\u0000~\u0000\u0015q\u0000~\u0000\u0084q\u0000~\u00001q\u0000~\u0000\u0082q\u0000~\u0000-q\u0000~\u0000\rq\u0000~\u0000\u00a5q\u0000~\u0000\u0080q\u0000~\u0000\u00ab"
+"q\u0000~\u0000\u00aaq\u0000~\u0000\u00b0q\u0000~\u0000+q\u0000~\u0000\u00afq\u0000~\u0000~q\u0000~\u0000\u00b5q\u0000~\u0000\u00b4q\u0000~\u0000\u00baq\u0000~\u0000\u00b9q\u0000~\u0000)q\u0000~\u0000|q\u0000~\u0000\u00bf"
+"q\u0000~\u0000\u00beppppppppppppppppppppppppppppq\u0000~\u0000\u000bq\u0000~\u0000\tppppppppppppppppp"
+"ppppppppppppppppppppppppppq\u0000~\u0000\nppppppppppppppppppppppppppppq"
+"\u0000~\u0000\u00c2pppppppppppppppppppppppppppppppppppppppppppppppp"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends net.sourceforge.czt.core.jaxb.gen.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingContext context) {
            super(context, "----");
        }

        protected Unmarshaller(net.sourceforge.czt.core.jaxb.gen.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  1 :
                        attIdx = context.getAttribute("", "Op");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl)net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("FalsePred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl)net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("TruePred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl)net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("AndPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl)net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ImpliesPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl)net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("IffPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl)net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("OrPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl)net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ExistsPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl)net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Exists1Pred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl)net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ForallPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl)net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("ExprPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl)net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("MemPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl)net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("NegPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl)net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        spawnHandlerFromEnterElement((((net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl)net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname, __atts);
                        return ;
                    case  0 :
                        if (("AndPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 1;
                            return ;
                        }
                        break;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  2 :
                        if (("AndPred" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 3;
                            return ;
                        }
                        break;
                    case  3 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  1 :
                        attIdx = context.getAttribute("", "Op");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        spawnHandlerFromLeaveElement((((net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl)net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                        return ;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  1 :
                        if (("Op" == ___local)&&("" == ___uri)) {
                            spawnHandlerFromEnterAttribute((((net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl)net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                            return ;
                        }
                        spawnHandlerFromEnterAttribute((((net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl)net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  1 :
                        attIdx = context.getAttribute("", "Op");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        spawnHandlerFromLeaveAttribute((((net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl)net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this).new Unmarshaller(context)), 2, ___uri, ___local, ___qname);
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  3 :
                            revertToParentFromText(value);
                            return ;
                        case  1 :
                            attIdx = context.getAttribute("", "Op");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            spawnHandlerFromText((((net.sourceforge.czt.core.jaxb.gen.impl.AndPredImpl)net.sourceforge.czt.core.jaxb.gen.impl.AndPredElementImpl.this).new Unmarshaller(context)), 2, value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
