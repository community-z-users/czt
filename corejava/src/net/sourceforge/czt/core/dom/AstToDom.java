
/*
THIS FILE WAS GENERATED BY GNAST.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

************************************************************

Copyright 2003 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.core.dom;

import java.util.logging.Logger;
import java.util.*;
import org.w3c.dom.*;

import net.sourceforge.czt.core.util.AstVisitor;
import net.sourceforge.czt.core.ast.*;


/**
 * Transformer from AST classes to a DOM tree.
 *
 * @author Gnast version 0.1
 */
public class AstToDom implements AstVisitor
{
  private static final Logger sLogger =
    Logger.getLogger("net.sourceforge.czt.core.dom.AstToDom");

  private Document mDocument;

  public AstToDom(Document document)
  {
    mDocument = document;
  }

  public Object visitTerm(Term zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitTermA(TermA zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitFreetype(Freetype zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitFreetype", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Freetype");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getDeclName()!=null) {
        elem.appendChild((Node)((Term) zedObject.getDeclName()).accept(this));
      }
      for(Iterator iter=zedObject.getBranch().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitFreetype", elem);
    return elem;
  }

  public Object visitExists1Expr(Exists1Expr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitExists1Expr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Exists1Expr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getSchText()!=null) {
        elem.appendChild((Node)((Term) zedObject.getSchText()).accept(this));
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitExists1Expr", elem);
    return elem;
  }

  public Object visitParenAnn(ParenAnn zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitParenAnn", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "ParenAnn");
    try {
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitParenAnn", elem);
    return elem;
  }

  public Object visitNameNamePair(NameNamePair zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitNameNamePair", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "NameNamePair");
    try {
      if (zedObject.getOldName()!=null) {
        elem.appendChild((Node)((Term) zedObject.getOldName()).accept(this));
      }
      if (zedObject.getNewName()!=null) {
        elem.appendChild((Node)((Term) zedObject.getNewName()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitNameNamePair", elem);
    return elem;
  }

  public Object visitApplExpr(ApplExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitApplExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "ApplExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getMixfix()!=null) {
        elem.setAttributeNS("http://czt.sourceforge.net/zml", "Mixfix", zedObject.getMixfix().toString());
      }
      if (zedObject.getLeftExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getLeftExpr()).accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getRightExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitApplExpr", elem);
    return elem;
  }

  public Object visitPred2(Pred2 zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitLetExpr(LetExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitLetExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "LetExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getSchText()!=null) {
        elem.appendChild((Node)((Term) zedObject.getSchText()).accept(this));
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitLetExpr", elem);
    return elem;
  }

  public Object visitSignature(Signature zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitSignature", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Signature");
    try {
      for(Iterator iter=zedObject.getNameTypePair().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitSignature", elem);
    return elem;
  }

  public Object visitConstDecl(ConstDecl zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitConstDecl", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "ConstDecl");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getDeclName()!=null) {
        elem.appendChild((Node)((Term) zedObject.getDeclName()).accept(this));
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitConstDecl", elem);
    return elem;
  }

  public Object visitNextStroke(NextStroke zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitNextStroke", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "NextStroke");
    try {
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitNextStroke", elem);
    return elem;
  }

  public Object visitInStroke(InStroke zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitInStroke", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "InStroke");
    try {
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitInStroke", elem);
    return elem;
  }

  public Object visitRefName(RefName zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitRefName", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "RefName");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getDecl() != null) {
	elem.setAttributeNS("http://czt.sourceforge.net/zml", "Decl", zedObject.getDecl().getId());
      }
      if (zedObject.getWord()!=null) {
	Element child = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Word");
	child.appendChild(mDocument.createTextNode(zedObject.getWord().toString()));
	elem.appendChild(child);
      }
      for(Iterator iter=zedObject.getStroke().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitRefName", elem);
    return elem;
  }

  public Object visitMemPred(MemPred zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitMemPred", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "MemPred");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getLeftExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getLeftExpr()).accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getRightExpr()).accept(this));
      }
      if (zedObject.getMixfix()!=null) {
        elem.setAttributeNS("http://czt.sourceforge.net/zml", "Mixfix", zedObject.getMixfix().toString());
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitMemPred", elem);
    return elem;
  }

  public Object visitProdType(ProdType zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitProdType", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "ProdType");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getType().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitProdType", elem);
    return elem;
  }

  public Object visitDecl(Decl zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitImpliesExpr(ImpliesExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitImpliesExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "ImpliesExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getLeftExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getLeftExpr()).accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getRightExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitImpliesExpr", elem);
    return elem;
  }

  public Object visitMuExpr(MuExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitMuExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "MuExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getSchText()!=null) {
        elem.appendChild((Node)((Term) zedObject.getSchText()).accept(this));
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitMuExpr", elem);
    return elem;
  }

  public Object visitSchExpr2(SchExpr2 zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitExpr2(Expr2 zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitOrPred(OrPred zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitOrPred", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "OrPred");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getLeftPred()!=null) {
        elem.appendChild((Node)((Term) zedObject.getLeftPred()).accept(this));
      }
      if (zedObject.getRightPred()!=null) {
        elem.appendChild((Node)((Term) zedObject.getRightPred()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitOrPred", elem);
    return elem;
  }

  public Object visitExistsExpr(ExistsExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitExistsExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "ExistsExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getSchText()!=null) {
        elem.appendChild((Node)((Term) zedObject.getSchText()).accept(this));
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitExistsExpr", elem);
    return elem;
  }

  public Object visitExpr(Expr zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitVarDecl(VarDecl zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitVarDecl", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "VarDecl");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getDeclName().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitVarDecl", elem);
    return elem;
  }

  public Object visitQntPred(QntPred zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitType(Type zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitNarrSect(NarrSect zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitNarrSect", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "NarrSect");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      Node content = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Content");
      for(Iterator iter=zedObject.getContent().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  content.appendChild(node);
	} else {
	  content.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
      elem.appendChild(content);
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitNarrSect", elem);
    return elem;
  }

  public Object visitFreePara(FreePara zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitFreePara", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "FreePara");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getFreetype().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitFreePara", elem);
    return elem;
  }

  public Object visitCompExpr(CompExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitCompExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "CompExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getLeftExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getLeftExpr()).accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getRightExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitCompExpr", elem);
    return elem;
  }

  public Object visitBindExpr(BindExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitBindExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "BindExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getNameExprPair().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitBindExpr", elem);
    return elem;
  }

  public Object visitFact(Fact zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitCondExpr(CondExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitCondExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "CondExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getPred()!=null) {
        elem.appendChild((Node)((Term) zedObject.getPred()).accept(this));
      }
      if (zedObject.getLeftExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getLeftExpr()).accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getRightExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitCondExpr", elem);
    return elem;
  }

  public Object visitForallExpr(ForallExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitForallExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "ForallExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getSchText()!=null) {
        elem.appendChild((Node)((Term) zedObject.getSchText()).accept(this));
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitForallExpr", elem);
    return elem;
  }

  public Object visitNarrPara(NarrPara zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitNarrPara", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "NarrPara");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      Node content = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Content");
      for(Iterator iter=zedObject.getContent().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  content.appendChild(node);
	} else {
	  content.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
      elem.appendChild(content);
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitNarrPara", elem);
    return elem;
  }

  public Object visitTruePred(TruePred zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitTruePred", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "TruePred");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitTruePred", elem);
    return elem;
  }

  public Object visitName(Name zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitName", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Name");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getWord()!=null) {
	Element child = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Word");
	child.appendChild(mDocument.createTextNode(zedObject.getWord().toString()));
	elem.appendChild(child);
      }
      for(Iterator iter=zedObject.getStroke().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitName", elem);
    return elem;
  }

  public Object visitNumExpr(NumExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitNumExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "NumExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getValue()!=null) {
        elem.setAttributeNS("http://czt.sourceforge.net/zml", "Value", zedObject.getValue().toString());
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitNumExpr", elem);
    return elem;
  }

  public Object visitNameExprPair(NameExprPair zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitNameExprPair", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "NameExprPair");
    try {
      if (zedObject.getName()!=null) {
        elem.appendChild((Node)((Term) zedObject.getName()).accept(this));
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitNameExprPair", elem);
    return elem;
  }

  public Object visitTupleSelExpr(TupleSelExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitTupleSelExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "TupleSelExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getSelect()!=null) {
        elem.setAttributeNS("http://czt.sourceforge.net/zml", "Select", zedObject.getSelect().toString());
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitTupleSelExpr", elem);
    return elem;
  }

  public Object visitLambdaExpr(LambdaExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitLambdaExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "LambdaExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getSchText()!=null) {
        elem.appendChild((Node)((Term) zedObject.getSchText()).accept(this));
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitLambdaExpr", elem);
    return elem;
  }

  public Object visitIffExpr(IffExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitIffExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "IffExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getLeftExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getLeftExpr()).accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getRightExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitIffExpr", elem);
    return elem;
  }

  public Object visitIffPred(IffPred zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitIffPred", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "IffPred");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getLeftPred()!=null) {
        elem.appendChild((Node)((Term) zedObject.getLeftPred()).accept(this));
      }
      if (zedObject.getRightPred()!=null) {
        elem.appendChild((Node)((Term) zedObject.getRightPred()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitIffPred", elem);
    return elem;
  }

  public Object visitFalsePred(FalsePred zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitFalsePred", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "FalsePred");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitFalsePred", elem);
    return elem;
  }

  public Object visitTypeEnvAnn(TypeEnvAnn zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitTypeEnvAnn", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "TypeEnvAnn");
    try {
      for(Iterator iter=zedObject.getNameTypePair().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitTypeEnvAnn", elem);
    return elem;
  }

  public Object visitQntExpr(QntExpr zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitUnparsedZSect(UnparsedZSect zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitUnparsedZSect", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "UnparsedZSect");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      Node content = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Content");
      for(Iterator iter=zedObject.getContent().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  content.appendChild(node);
	} else {
	  content.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
      elem.appendChild(content);
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitUnparsedZSect", elem);
    return elem;
  }

  public Object visitUnparsedPara(UnparsedPara zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitUnparsedPara", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "UnparsedPara");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      Node content = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Content");
      for(Iterator iter=zedObject.getContent().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  content.appendChild(node);
	} else {
	  content.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
      elem.appendChild(content);
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitUnparsedPara", elem);
    return elem;
  }

  public Object visitImpliesPred(ImpliesPred zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitImpliesPred", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "ImpliesPred");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getLeftPred()!=null) {
        elem.appendChild((Node)((Term) zedObject.getLeftPred()).accept(this));
      }
      if (zedObject.getRightPred()!=null) {
        elem.appendChild((Node)((Term) zedObject.getRightPred()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitImpliesPred", elem);
    return elem;
  }

  public Object visitNameTypePair(NameTypePair zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitNameTypePair", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "NameTypePair");
    try {
      if (zedObject.getName()!=null) {
        elem.appendChild((Node)((Term) zedObject.getName()).accept(this));
      }
      if (zedObject.getType()!=null) {
        elem.appendChild((Node)((Term) zedObject.getType()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitNameTypePair", elem);
    return elem;
  }

  public Object visitSect(Sect zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitSchText(SchText zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitSchText", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "SchText");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getDecl().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
      if (zedObject.getPred()!=null) {
        elem.appendChild((Node)((Term) zedObject.getPred()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitSchText", elem);
    return elem;
  }

  public Object visitQnt1Expr(Qnt1Expr zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitOperand(Operand zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitOperand", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Operand");
    try {
      if (zedObject.getList()!=null) {
        elem.setAttributeNS("http://czt.sourceforge.net/zml", "List", zedObject.getList().toString());
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitOperand", elem);
    return elem;
  }

  public Object visitProjExpr(ProjExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitProjExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "ProjExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getLeftExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getLeftExpr()).accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getRightExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitProjExpr", elem);
    return elem;
  }

  public Object visitBranch(Branch zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitBranch", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Branch");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getDeclName()!=null) {
        elem.appendChild((Node)((Term) zedObject.getDeclName()).accept(this));
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitBranch", elem);
    return elem;
  }

  public Object visitTypeAnn(TypeAnn zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitTypeAnn", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "TypeAnn");
    try {
      if (zedObject.getType()!=null) {
        elem.appendChild((Node)((Term) zedObject.getType()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitTypeAnn", elem);
    return elem;
  }

  public Object visitGenType(GenType zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitGenType", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "GenType");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getName()!=null) {
        elem.appendChild((Node)((Term) zedObject.getName()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitGenType", elem);
    return elem;
  }

  public Object visitPara(Para zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitOptempPara(OptempPara zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitOptempPara", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "OptempPara");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getWordOrOperand().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
      if (zedObject.getCat()!=null) {
        elem.setAttributeNS("http://czt.sourceforge.net/zml", "Cat", zedObject.getCat().toString());
      }
      if (zedObject.getAssoc()!=null) {
        elem.setAttributeNS("http://czt.sourceforge.net/zml", "Assoc", zedObject.getAssoc().toString());
      }
      if (zedObject.getPrec()!=null) {
        elem.setAttributeNS("http://czt.sourceforge.net/zml", "Prec", zedObject.getPrec().toString());
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitOptempPara", elem);
    return elem;
  }

  public Object visitExistsPred(ExistsPred zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitExistsPred", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "ExistsPred");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getSchText()!=null) {
        elem.appendChild((Node)((Term) zedObject.getSchText()).accept(this));
      }
      if (zedObject.getPred()!=null) {
        elem.appendChild((Node)((Term) zedObject.getPred()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitExistsPred", elem);
    return elem;
  }

  public Object visitNameSectTypeTriple(NameSectTypeTriple zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitNameSectTypeTriple", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "NameSectTypeTriple");
    try {
      if (zedObject.getName()!=null) {
        elem.appendChild((Node)((Term) zedObject.getName()).accept(this));
      }
      if (zedObject.getSect()!=null) {
	Element child = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Sect");
	child.appendChild(mDocument.createTextNode(zedObject.getSect().toString()));
	elem.appendChild(child);
      }
      if (zedObject.getType()!=null) {
        elem.appendChild((Node)((Term) zedObject.getType()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitNameSectTypeTriple", elem);
    return elem;
  }

  public Object visitExpr1(Expr1 zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitNegPred(NegPred zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitNegPred", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "NegPred");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getPred()!=null) {
        elem.appendChild((Node)((Term) zedObject.getPred()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitNegPred", elem);
    return elem;
  }

  public Object visitPreExpr(PreExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitPreExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "PreExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitPreExpr", elem);
    return elem;
  }

  public Object visitSectTypeEnvAnn(SectTypeEnvAnn zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitSectTypeEnvAnn", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "SectTypeEnvAnn");
    try {
      for(Iterator iter=zedObject.getNameSectTypeTriple().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitSectTypeEnvAnn", elem);
    return elem;
  }

  public Object visitExprPred(ExprPred zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitExprPred", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "ExprPred");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitExprPred", elem);
    return elem;
  }

  public Object visitGivenType(GivenType zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitGivenType", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "GivenType");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getName()!=null) {
        elem.appendChild((Node)((Term) zedObject.getName()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitGivenType", elem);
    return elem;
  }

  public Object visitInclDecl(InclDecl zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitInclDecl", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "InclDecl");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitInclDecl", elem);
    return elem;
  }

  public Object visitPred(Pred zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitSchemaType(SchemaType zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitSchemaType", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "SchemaType");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getSignature()!=null) {
        elem.appendChild((Node)((Term) zedObject.getSignature()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitSchemaType", elem);
    return elem;
  }

  public Object visitBindSelExpr(BindSelExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitBindSelExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "BindSelExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getName()!=null) {
        elem.appendChild((Node)((Term) zedObject.getName()).accept(this));
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitBindSelExpr", elem);
    return elem;
  }

  public Object visitDeclName(DeclName zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitDeclName", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "DeclName");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getId()!=null) {
        elem.setAttributeNS("http://czt.sourceforge.net/zml", "Id", zedObject.getId().toString());
      }
      if (zedObject.getWord()!=null) {
	Element child = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Word");
	child.appendChild(mDocument.createTextNode(zedObject.getWord().toString()));
	elem.appendChild(child);
      }
      for(Iterator iter=zedObject.getStroke().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitDeclName", elem);
    return elem;
  }

  public Object visitForallPred(ForallPred zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitForallPred", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "ForallPred");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getSchText()!=null) {
        elem.appendChild((Node)((Term) zedObject.getSchText()).accept(this));
      }
      if (zedObject.getPred()!=null) {
        elem.appendChild((Node)((Term) zedObject.getPred()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitForallPred", elem);
    return elem;
  }

  public Object visitOrExpr(OrExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitOrExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "OrExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getLeftExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getLeftExpr()).accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getRightExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitOrExpr", elem);
    return elem;
  }

  public Object visitSpec(Spec zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitSpec", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Spec");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getSect().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
      if (zedObject.getVersion()!=null) {
        elem.setAttributeNS("http://czt.sourceforge.net/zml", "Version", zedObject.getVersion().toString());
      }
      if (zedObject.getAuthor()!=null) {
        elem.setAttributeNS("http://czt.sourceforge.net/zml", "Author", zedObject.getAuthor().toString());
      }
      if (zedObject.getModified()!=null) {
        elem.appendChild((Node)((Term) zedObject.getModified()).accept(this));
      }
      if (zedObject.getSource()!=null) {
        elem.setAttributeNS("http://czt.sourceforge.net/zml", "Source", zedObject.getSource().toString());
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitSpec", elem);
    return elem;
  }

  public Object visitLocAnn(LocAnn zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitLocAnn", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "LocAnn");
    try {
      if (zedObject.getLoc()!=null) {
        elem.setAttributeNS("http://czt.sourceforge.net/zml", "Loc", zedObject.getLoc().toString());
      }
      if (zedObject.getLine()!=null) {
        elem.setAttributeNS("http://czt.sourceforge.net/zml", "Line", zedObject.getLine().toString());
      }
      if (zedObject.getCol()!=null) {
        elem.setAttributeNS("http://czt.sourceforge.net/zml", "Col", zedObject.getCol().toString());
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitLocAnn", elem);
    return elem;
  }

  public Object visitPowerExpr(PowerExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitPowerExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "PowerExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitPowerExpr", elem);
    return elem;
  }

  public Object visitHideExpr(HideExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitHideExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "HideExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getName().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitHideExpr", elem);
    return elem;
  }

  public Object visitGivenPara(GivenPara zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitGivenPara", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "GivenPara");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getDeclName().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitGivenPara", elem);
    return elem;
  }

  public Object visitPowerType(PowerType zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitPowerType", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "PowerType");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getType()!=null) {
        elem.appendChild((Node)((Term) zedObject.getType()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitPowerType", elem);
    return elem;
  }

  public Object visitAndExpr(AndExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitAndExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "AndExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getLeftExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getLeftExpr()).accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getRightExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitAndExpr", elem);
    return elem;
  }

  public Object visitRenameExpr(RenameExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitRenameExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "RenameExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getNameNamePair().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitRenameExpr", elem);
    return elem;
  }

  public Object visitAndPred(AndPred zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitAndPred", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "AndPred");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getOp()!=null) {
        elem.setAttributeNS("http://czt.sourceforge.net/zml", "Op", zedObject.getOp().toString());
      }
      if (zedObject.getLeftPred()!=null) {
        elem.appendChild((Node)((Term) zedObject.getLeftPred()).accept(this));
      }
      if (zedObject.getRightPred()!=null) {
        elem.appendChild((Node)((Term) zedObject.getRightPred()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitAndPred", elem);
    return elem;
  }

  public Object visitConjPara(ConjPara zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitConjPara", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "ConjPara");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getDeclName().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
      if (zedObject.getPred()!=null) {
        elem.appendChild((Node)((Term) zedObject.getPred()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitConjPara", elem);
    return elem;
  }

  public Object visitNumStroke(NumStroke zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitNumStroke", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "NumStroke");
    try {
      if (zedObject.getNumber()!=null) {
        elem.setAttributeNS("http://czt.sourceforge.net/zml", "Number", zedObject.getNumber().toString());
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitNumStroke", elem);
    return elem;
  }

  public Object visitZSect(ZSect zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitZSect", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "ZSect");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getName()!=null) {
	Element child = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Name");
	child.appendChild(mDocument.createTextNode(zedObject.getName().toString()));
	elem.appendChild(child);
      }
      for(Iterator iter=zedObject.getParent().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
      for(Iterator iter=zedObject.getPara().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitZSect", elem);
    return elem;
  }

  public Object visitStroke(Stroke zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitExpr2N(Expr2N zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitThetaExpr(ThetaExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitThetaExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "ThetaExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getStroke().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitThetaExpr", elem);
    return elem;
  }

  public Object visitSetExpr(SetExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitSetExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "SetExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getExpr().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitSetExpr", elem);
    return elem;
  }

  public Object visitExpr0N(Expr0N zedObject)
  {
    throw(new UnsupportedOperationException());
  }

  public Object visitSetCompExpr(SetCompExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitSetCompExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "SetCompExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getSchText()!=null) {
        elem.appendChild((Node)((Term) zedObject.getSchText()).accept(this));
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitSetCompExpr", elem);
    return elem;
  }

  public Object visitPipeExpr(PipeExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitPipeExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "PipeExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getLeftExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getLeftExpr()).accept(this));
      }
      if (zedObject.getRightExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getRightExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitPipeExpr", elem);
    return elem;
  }

  public Object visitRefExpr(RefExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitRefExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "RefExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getRefName()!=null) {
        elem.appendChild((Node)((Term) zedObject.getRefName()).accept(this));
      }
      for(Iterator iter=zedObject.getExpr().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
      if (zedObject.getMixfix()!=null) {
        elem.setAttributeNS("http://czt.sourceforge.net/zml", "Mixfix", zedObject.getMixfix().toString());
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitRefExpr", elem);
    return elem;
  }

  public Object visitNegExpr(NegExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitNegExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "NegExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitNegExpr", elem);
    return elem;
  }

  public Object visitProdExpr(ProdExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitProdExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "ProdExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getExpr().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitProdExpr", elem);
    return elem;
  }

  public Object visitDecorExpr(DecorExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitDecorExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "DecorExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getStroke()!=null) {
        elem.appendChild((Node)((Term) zedObject.getStroke()).accept(this));
      }
      if (zedObject.getExpr()!=null) {
        elem.appendChild((Node)((Term) zedObject.getExpr()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitDecorExpr", elem);
    return elem;
  }

  public Object visitOutStroke(OutStroke zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitOutStroke", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "OutStroke");
    try {
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitOutStroke", elem);
    return elem;
  }

  public Object visitParent(Parent zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitParent", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Parent");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getWord()!=null) {
	Element child = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Word");
	child.appendChild(mDocument.createTextNode(zedObject.getWord().toString()));
	elem.appendChild(child);
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitParent", elem);
    return elem;
  }

  public Object visitExists1Pred(Exists1Pred zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitExists1Pred", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Exists1Pred");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getSchText()!=null) {
        elem.appendChild((Node)((Term) zedObject.getSchText()).accept(this));
      }
      if (zedObject.getPred()!=null) {
        elem.appendChild((Node)((Term) zedObject.getPred()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitExists1Pred", elem);
    return elem;
  }

  public Object visitAxPara(AxPara zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitAxPara", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "AxPara");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getDeclName().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
      if (zedObject.getSchText()!=null) {
        elem.appendChild((Node)((Term) zedObject.getSchText()).accept(this));
      }
      if (zedObject.getBox()!=null) {
        elem.setAttributeNS("http://czt.sourceforge.net/zml", "Box", zedObject.getBox().toString());
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitAxPara", elem);
    return elem;
  }

  public Object visitSchExpr(SchExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitSchExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "SchExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      if (zedObject.getSchText()!=null) {
        elem.appendChild((Node)((Term) zedObject.getSchText()).accept(this));
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitSchExpr", elem);
    return elem;
  }

  public Object visitTupleExpr(TupleExpr zedObject)
  {
    sLogger.entering("dom.AstToDom", "visitTupleExpr", zedObject);
    Element elem = mDocument.createElementNS("http://czt.sourceforge.net/zml", "TupleExpr");
    try {
      if(zedObject.getAnns().size() > 0) {
	Node anns = mDocument.createElementNS("http://czt.sourceforge.net/zml", "Anns");
	for(Iterator iter=zedObject.getAnns().iterator(); iter.hasNext();) {
	  Object o = iter.next();
	  if (o instanceof Term) {
	    Node node = (Node) ((Term) o).accept(this);
	    anns.appendChild(node);
	  } else {
	    anns.appendChild(mDocument.createTextNode(o.toString()));
	  }
	}
	elem.appendChild(anns);
      }
      for(Iterator iter=zedObject.getExpr().iterator(); iter.hasNext();) {
	Object o = iter.next();
	if (o instanceof Term) {
	  Node node = (Node) ((Term) o).accept(this);
	  elem.appendChild(node);
	} else {
	  elem.appendChild(mDocument.createTextNode(o.toString()));
	}
      }
    } catch(Exception e) { e.printStackTrace(); }

    sLogger.exiting("dom.AstToDom", "visitTupleExpr", elem);
    return elem;
  }
}
