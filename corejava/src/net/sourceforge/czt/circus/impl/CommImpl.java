
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstClass.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.impl;

import java.util.*;
import java.util.logging.*;

import net.sourceforge.czt.base.impl.*;
import net.sourceforge.czt.util.TypesafeList;
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.impl.*;
import net.sourceforge.czt.circus.ast.*;
import net.sourceforge.czt.circus.visitor.*;

import net.sourceforge.czt.circus.visitor.CommVisitor;

/**
 * An implementation of the interface
 * {@link Comm}.
 *
 * @author Gnast version 0.1
 */
public class CommImpl
  extends TermAImpl   implements Comm
{
  /**
   * The default constructor.
   *
   * Do not use it explicitly, unless you are extending this class.
   * If you want to create an instance of this class, please use the
   * {@link net.sourceforge.czt.circus.ast.CircusFactory object factory}.
   */
  protected CommImpl()
  {
  }

  /**
   * Compares the specified object with this CommImpl
   * for equality.  Returns true if and only if the specified object is
   * also a(n) CommImpl and all the getter methods except getAnns
   * return equal objects.
   */
  public boolean equals(Object obj)
  {
    if (obj != null) {
      if (this.getClass().equals(obj.getClass()) && super.equals(obj)) {
        CommImpl object = (CommImpl) obj;
        if (refName_ != null) {
          if (!refName_.equals(object.refName_)) {
            return false;
          }
        }
        else {
          if (object.refName_ != null) {
            return false;
          }
        }
        if (commParam_ != null) {
          if (!commParam_.equals(object.commParam_)) {
            return false;
          }
        }
        else {
          if (object.commParam_ != null) {
            return false;
          }
        }
        if (commType_ != null) {
          if (!commType_.equals(object.commType_)) {
            return false;
          }
        }
        else {
          if (object.commType_ != null) {
            return false;
          }
        }
        if (multiSych_ != null) {
          if (!multiSych_.equals(object.multiSych_)) {
            return false;
          }
        }
        else {
          if (object.multiSych_ != null) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }

  /**
   * Returns the hash code value for this CommImpl.
   */
  public int hashCode()
  {
    final int constant = 31;

    int hashCode = super.hashCode();
    hashCode += "CommImpl".hashCode();
    if (refName_ != null) {
      hashCode += constant * refName_.hashCode();
    }
    if (commParam_ != null) {
      hashCode += constant * commParam_.hashCode();
    }
    if (commType_ != null) {
      hashCode += constant * commType_.hashCode();
    }
    if (multiSych_ != null) {
      hashCode += constant * multiSych_.hashCode();
    }
    return hashCode;
  }

  /**
   * Accepts a visitor.
   */
  public Object accept(net.sourceforge.czt.util.Visitor v)
  {
    if (v instanceof CommVisitor) {
      CommVisitor visitor = (CommVisitor) v;
      return visitor.visitComm(this);
    }
    return super.accept(v);
  }

  /**
   * Returns a new object of this class.
   */
  public net.sourceforge.czt.base.ast.Term create(Object[] args)
  {
    Comm zedObject = null;
    try {
      net.sourceforge.czt.z.ast.RefName refName = (net.sourceforge.czt.z.ast.RefName) args[0];
      java.util.List commParam = (java.util.List) args[1];
      CommType commType = (CommType) args[2];
      Integer multiSych = (Integer) args[3];
      zedObject = new CommImpl();
      zedObject.setRefName(refName);
      if (commParam != null) {
        zedObject.getCommParam().addAll(commParam);
      }
      zedObject.setCommType(commType);
      zedObject.setMultiSych(multiSych);
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException();
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException();
    }
    return zedObject;
  }

  public Object[] getChildren()
  {
    Object[] erg = { getRefName(), getCommParam(), getCommType(), getMultiSych() };
    return erg;
  }

  private net.sourceforge.czt.z.ast.RefName refName_;

  public net.sourceforge.czt.z.ast.RefName getRefName()
  {
    return refName_;
  }

  public void setRefName(net.sourceforge.czt.z.ast.RefName refName)
  {
    refName_ = refName;
  }


  private net.sourceforge.czt.base.ast.ListTerm commParam_ =
    new net.sourceforge.czt.base.impl.ListTermImpl(CommParam.class);

  public net.sourceforge.czt.base.ast.ListTerm getCommParam()
  {
    return commParam_;
  }

  private CommType commType_;

  public CommType getCommType()
  {
    return commType_;
  }

  public void setCommType(CommType commType)
  {
    commType_ = commType;
  }

  private Integer multiSych_;

  public Integer getMultiSych()
  {
    return multiSych_;
  }

  public void setMultiSych(Integer multiSych)
  {
    multiSych_ = multiSych;
  }
}
