
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstClass.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.impl;

import java.util.*;
import java.util.logging.*;

import net.sourceforge.czt.base.impl.*;
import net.sourceforge.czt.util.TypesafeList;
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.impl.*;
import net.sourceforge.czt.circus.ast.*;
import net.sourceforge.czt.circus.visitor.*;

import net.sourceforge.czt.circus.visitor.BasicProcessSignatureVisitor;

/**
 * An implementation of the interface
 * {@link BasicProcessSignature}.
 *
 * @author Gnast version 0.1
 */
public class BasicProcessSignatureImpl
  extends ProcessSignatureImpl   implements BasicProcessSignature
{
  /**
   * The default constructor.
   *
   * Do not use it explicitly, unless you are extending this class.
   * If you want to create an instance of this class, please use the
   * {@link net.sourceforge.czt.circus.ast.CircusFactory object factory}.
   */
  protected BasicProcessSignatureImpl()
  {
  }

  /**
   * Compares the specified object with this BasicProcessSignatureImpl
   * for equality.  Returns true if and only if the specified object is
   * also a(n) BasicProcessSignatureImpl and all the getter methods except getAnns
   * return equal objects.
   */
  public boolean equals(Object obj)
  {
    if (obj != null) {
      if (this.getClass().equals(obj.getClass()) && super.equals(obj)) {
        BasicProcessSignatureImpl object = (BasicProcessSignatureImpl) obj;
        if (stateSignature_ != null) {
          if (!stateSignature_.equals(object.stateSignature_)) {
            return false;
          }
        }
        else {
          if (object.stateSignature_ != null) {
            return false;
          }
        }
        if (localZDeclsSignature_ != null) {
          if (!localZDeclsSignature_.equals(object.localZDeclsSignature_)) {
            return false;
          }
        }
        else {
          if (object.localZDeclsSignature_ != null) {
            return false;
          }
        }
        if (actionsSignature_ != null) {
          if (!actionsSignature_.equals(object.actionsSignature_)) {
            return false;
          }
        }
        else {
          if (object.actionsSignature_ != null) {
            return false;
          }
        }
        if (declNameSets_ != null) {
          if (!declNameSets_.equals(object.declNameSets_)) {
            return false;
          }
        }
        else {
          if (object.declNameSets_ != null) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }

  /**
   * Returns the hash code value for this BasicProcessSignatureImpl.
   */
  public int hashCode()
  {
    final int constant = 31;

    int hashCode = super.hashCode();
    hashCode += "BasicProcessSignatureImpl".hashCode();
    if (stateSignature_ != null) {
      hashCode += constant * stateSignature_.hashCode();
    }
    if (localZDeclsSignature_ != null) {
      hashCode += constant * localZDeclsSignature_.hashCode();
    }
    if (actionsSignature_ != null) {
      hashCode += constant * actionsSignature_.hashCode();
    }
    if (declNameSets_ != null) {
      hashCode += constant * declNameSets_.hashCode();
    }
    return hashCode;
  }

  /**
   * Accepts a visitor.
   */
  public Object accept(net.sourceforge.czt.util.Visitor v)
  {
    if (v instanceof BasicProcessSignatureVisitor) {
      BasicProcessSignatureVisitor visitor = (BasicProcessSignatureVisitor) v;
      return visitor.visitBasicProcessSignature(this);
    }
    return super.accept(v);
  }

  /**
   * Returns a new object of this class.
   */
  public net.sourceforge.czt.base.ast.Term create(Object[] args)
  {
    BasicProcessSignature zedObject = null;
    try {
      net.sourceforge.czt.z.ast.DeclName processName = (net.sourceforge.czt.z.ast.DeclName) args[0];
      net.sourceforge.czt.z.ast.VarDecl formalParams = (net.sourceforge.czt.z.ast.VarDecl) args[1];
      net.sourceforge.czt.z.ast.Signature stateSignature = (net.sourceforge.czt.z.ast.Signature) args[2];
      java.util.List localZDeclsSignature = (java.util.List) args[3];
      java.util.List actionsSignature = (java.util.List) args[4];
      java.util.List declNameSets = (java.util.List) args[5];
      zedObject = new BasicProcessSignatureImpl();
      zedObject.setProcessName(processName);
      zedObject.setFormalParams(formalParams);
      zedObject.setStateSignature(stateSignature);
      if (localZDeclsSignature != null) {
        zedObject.getLocalZDeclsSignature().addAll(localZDeclsSignature);
      }
      if (actionsSignature != null) {
        zedObject.getActionsSignature().addAll(actionsSignature);
      }
      if (declNameSets != null) {
        zedObject.getDeclNameSets().addAll(declNameSets);
      }
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException();
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException();
    }
    return zedObject;
  }

  public Object[] getChildren()
  {
    Object[] erg = { getProcessName(), getFormalParams(), getStateSignature(), getLocalZDeclsSignature(), getActionsSignature(), getDeclNameSets() };
    return erg;
  }

  private net.sourceforge.czt.z.ast.Signature stateSignature_;

  public net.sourceforge.czt.z.ast.Signature getStateSignature()
  {
    return stateSignature_;
  }

  public void setStateSignature(net.sourceforge.czt.z.ast.Signature stateSignature)
  {
    stateSignature_ = stateSignature;
  }


  private net.sourceforge.czt.base.ast.ListTerm localZDeclsSignature_ =
    new net.sourceforge.czt.base.impl.ListTermImpl(net.sourceforge.czt.z.ast.Signature.class);

  public net.sourceforge.czt.base.ast.ListTerm getLocalZDeclsSignature()
  {
    return localZDeclsSignature_;
  }


  private net.sourceforge.czt.base.ast.ListTerm actionsSignature_ =
    new net.sourceforge.czt.base.impl.ListTermImpl(ActionSignature.class);

  public net.sourceforge.czt.base.ast.ListTerm getActionsSignature()
  {
    return actionsSignature_;
  }


  private net.sourceforge.czt.base.ast.ListTerm declNameSets_ =
    new net.sourceforge.czt.base.impl.ListTermImpl(net.sourceforge.czt.z.ast.DeclName.class);

  public net.sourceforge.czt.base.ast.ListTerm getDeclNameSets()
  {
    return declNameSets_;
  }
}
