
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstClass.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.impl;

import java.util.*;
import java.util.logging.*;

import net.sourceforge.czt.base.impl.*;
import net.sourceforge.czt.util.TypesafeList;
import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.z.impl.*;
import net.sourceforge.czt.circus.ast.*;
import net.sourceforge.czt.circus.visitor.*;

import net.sourceforge.czt.circus.visitor.BasicProcessVisitor;

/**
 * An implementation of the interface
 * {@link BasicProcess}.
 *
 * @author Gnast version 0.1
 */
public class BasicProcessImpl
  extends ProcessDefImpl   implements BasicProcess
{
  /**
   * The default constructor.
   *
   * Do not use it explicitly, unless you are extending this class.
   * If you want to create an instance of this class, please use the
   * {@link net.sourceforge.czt.circus.ast.CircusFactory object factory}.
   */
  protected BasicProcessImpl()
  {
  }

  /**
   * Compares the specified object with this BasicProcessImpl
   * for equality.  Returns true if and only if the specified object is
   * also a(n) BasicProcessImpl and all the getter methods except getAnns
   * return equal objects.
   */
  public boolean equals(Object obj)
  {
    if (obj != null) {
      if (this.getClass().equals(obj.getClass()) && super.equals(obj)) {
        BasicProcessImpl object = (BasicProcessImpl) obj;
        if (stateSchemaRefName_ != null) {
          if (!stateSchemaRefName_.equals(object.stateSchemaRefName_)) {
            return false;
          }
        }
        else {
          if (object.stateSchemaRefName_ != null) {
            return false;
          }
        }
        if (declZParagraphs_ != null) {
          if (!declZParagraphs_.equals(object.declZParagraphs_)) {
            return false;
          }
        }
        else {
          if (object.declZParagraphs_ != null) {
            return false;
          }
        }
        if (declActions_ != null) {
          if (!declActions_.equals(object.declActions_)) {
            return false;
          }
        }
        else {
          if (object.declActions_ != null) {
            return false;
          }
        }
        if (declNameSets_ != null) {
          if (!declNameSets_.equals(object.declNameSets_)) {
            return false;
          }
        }
        else {
          if (object.declNameSets_ != null) {
            return false;
          }
        }
        if (mainAction_ != null) {
          if (!mainAction_.equals(object.mainAction_)) {
            return false;
          }
        }
        else {
          if (object.mainAction_ != null) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }

  /**
   * Returns the hash code value for this BasicProcessImpl.
   */
  public int hashCode()
  {
    final int constant = 31;

    int hashCode = super.hashCode();
    hashCode += "BasicProcessImpl".hashCode();
    if (stateSchemaRefName_ != null) {
      hashCode += constant * stateSchemaRefName_.hashCode();
    }
    if (declZParagraphs_ != null) {
      hashCode += constant * declZParagraphs_.hashCode();
    }
    if (declActions_ != null) {
      hashCode += constant * declActions_.hashCode();
    }
    if (declNameSets_ != null) {
      hashCode += constant * declNameSets_.hashCode();
    }
    if (mainAction_ != null) {
      hashCode += constant * mainAction_.hashCode();
    }
    return hashCode;
  }

  /**
   * Accepts a visitor.
   */
  public Object accept(net.sourceforge.czt.util.Visitor v)
  {
    if (v instanceof BasicProcessVisitor) {
      BasicProcessVisitor visitor = (BasicProcessVisitor) v;
      return visitor.visitBasicProcess(this);
    }
    return super.accept(v);
  }

  /**
   * Returns a new object of this class.
   */
  public net.sourceforge.czt.base.ast.Term create(Object[] args)
  {
    BasicProcess zedObject = null;
    try {
      net.sourceforge.czt.z.ast.RefName stateSchemaRefName = (net.sourceforge.czt.z.ast.RefName) args[0];
      java.util.List declZParagraphs = (java.util.List) args[1];
      java.util.List declActions = (java.util.List) args[2];
      java.util.List declNameSets = (java.util.List) args[3];
      Action mainAction = (Action) args[4];
      zedObject = new BasicProcessImpl();
      zedObject.setStateSchemaRefName(stateSchemaRefName);
      if (declZParagraphs != null) {
        zedObject.getDeclZParagraphs().addAll(declZParagraphs);
      }
      if (declActions != null) {
        zedObject.getDeclActions().addAll(declActions);
      }
      if (declNameSets != null) {
        zedObject.getDeclNameSets().addAll(declNameSets);
      }
      zedObject.setMainAction(mainAction);
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException();
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException();
    }
    return zedObject;
  }

  public Object[] getChildren()
  {
    Object[] erg = { getStateSchemaRefName(), getDeclZParagraphs(), getDeclActions(), getDeclNameSets(), getMainAction() };
    return erg;
  }

  private net.sourceforge.czt.z.ast.RefName stateSchemaRefName_;

  public net.sourceforge.czt.z.ast.RefName getStateSchemaRefName()
  {
    return stateSchemaRefName_;
  }

  public void setStateSchemaRefName(net.sourceforge.czt.z.ast.RefName stateSchemaRefName)
  {
    stateSchemaRefName_ = stateSchemaRefName;
  }


  private net.sourceforge.czt.base.ast.ListTerm declZParagraphs_ =
    new net.sourceforge.czt.base.impl.ListTermImpl(net.sourceforge.czt.z.ast.Para.class);

  public net.sourceforge.czt.base.ast.ListTerm getDeclZParagraphs()
  {
    return declZParagraphs_;
  }


  private net.sourceforge.czt.base.ast.ListTerm declActions_ =
    new net.sourceforge.czt.base.impl.ListTermImpl(ActionPara.class);

  public net.sourceforge.czt.base.ast.ListTerm getDeclActions()
  {
    return declActions_;
  }


  private net.sourceforge.czt.base.ast.ListTerm declNameSets_ =
    new net.sourceforge.czt.base.impl.ListTermImpl(NameSetPara.class);

  public net.sourceforge.czt.base.ast.ListTerm getDeclNameSets()
  {
    return declNameSets_;
  }

  private Action mainAction_;

  public Action getMainAction()
  {
    return mainAction_;
  }

  public void setMainAction(Action mainAction)
  {
    mainAction_ = mainAction;
  }
}
