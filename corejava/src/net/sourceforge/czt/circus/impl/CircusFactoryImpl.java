
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactoryImpl.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.impl;

import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.circus.ast.*;

/**
 * <p>An implementation of the object factory for constructing
 * concrete Z terms.  Each factory method returns an instance
 * of the corresponding class provided in this package.</p>
 *
 * @author Gnast version 0.1
 */
public class CircusFactoryImpl
  extends net.sourceforge.czt.z.impl.ZFactoryImpl
  implements net.sourceforge.czt.circus.ast.CircusFactory
{
  public InterleaveProcessRI createInterleaveProcessRI()
  {
    InterleaveProcessRI zedObject = new InterleaveProcessRIImpl();
    return zedObject;
  }

  public InterleaveProcessRI createInterleaveProcessRI(ProcessDef processDef, java.util.List varDecl)
  {
    InterleaveProcessRI zedObject = createInterleaveProcessRI();
    zedObject.setProcessDef(processDef);
    if (varDecl != null) {
      zedObject.getVarDecl().addAll(varDecl);
    }
    return zedObject;
  }

  public InstantiationProcess createInstantiationProcess()
  {
    InstantiationProcess zedObject = new InstantiationProcessImpl();
    return zedObject;
  }

  public InstantiationProcess createInstantiationProcess(ProcessDef processDef, java.util.List expr)
  {
    InstantiationProcess zedObject = createInstantiationProcess();
    zedObject.setProcessDef(processDef);
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    return zedObject;
  }

  public GuardedAction createGuardedAction()
  {
    GuardedAction zedObject = new GuardedActionImpl();
    return zedObject;
  }

  public GuardedAction createGuardedAction(Action action, net.sourceforge.czt.z.ast.Pred pred)
  {
    GuardedAction zedObject = createGuardedAction();
    zedObject.setAction(action);
    zedObject.setPred(pred);
    return zedObject;
  }

  public ParallelAction createParallelAction()
  {
    ParallelAction zedObject = new ParallelActionImpl();
    return zedObject;
  }

  public ParallelAction createParallelAction(Action leftAction, Action rightAction, NameSet leftNameSet, NameSet rightNameSet, ChannelSet channelSet)
  {
    ParallelAction zedObject = createParallelAction();
    zedObject.setLeftAction(leftAction);
    zedObject.setRightAction(rightAction);
    zedObject.setLeftNameSet(leftNameSet);
    zedObject.setRightNameSet(rightNameSet);
    zedObject.setChannelSet(channelSet);
    return zedObject;
  }

  public SeqProcessR createSeqProcessR()
  {
    SeqProcessR zedObject = new SeqProcessRImpl();
    return zedObject;
  }

  public SeqProcessR createSeqProcessR(ProcessDef processDef, java.util.List varDecl)
  {
    SeqProcessR zedObject = createSeqProcessR();
    zedObject.setProcessDef(processDef);
    if (varDecl != null) {
      zedObject.getVarDecl().addAll(varDecl);
    }
    return zedObject;
  }

  public HideAction createHideAction()
  {
    HideAction zedObject = new HideActionImpl();
    return zedObject;
  }

  public HideAction createHideAction(Action action, ChannelSet channelSet)
  {
    HideAction zedObject = createHideAction();
    zedObject.setAction(action);
    zedObject.setChannelSet(channelSet);
    return zedObject;
  }

  public ChaosAction createChaosAction()
  {
    ChaosAction zedObject = new ChaosActionImpl();
    return zedObject;
  }

  public SkipAction createSkipAction()
  {
    SkipAction zedObject = new SkipActionImpl();
    return zedObject;
  }

  public ProcessType createProcessType()
  {
    ProcessType zedObject = new ProcessTypeImpl();
    return zedObject;
  }

  public ProcessType createProcessType(ProcessSignature processSignature)
  {
    ProcessType zedObject = createProcessType();
    zedObject.setProcessSignature(processSignature);
    return zedObject;
  }

  public IntChoiceActionR createIntChoiceActionR()
  {
    IntChoiceActionR zedObject = new IntChoiceActionRImpl();
    return zedObject;
  }

  public IntChoiceActionR createIntChoiceActionR(Action action, java.util.List varDecl)
  {
    IntChoiceActionR zedObject = createIntChoiceActionR();
    zedObject.setAction(action);
    if (varDecl != null) {
      zedObject.getVarDecl().addAll(varDecl);
    }
    return zedObject;
  }

  public DifferenceChannelSet createDifferenceChannelSet()
  {
    DifferenceChannelSet zedObject = new DifferenceChannelSetImpl();
    return zedObject;
  }

  public DifferenceChannelSet createDifferenceChannelSet(ChannelSet leftOperand, ChannelSet rightOperand)
  {
    DifferenceChannelSet zedObject = createDifferenceChannelSet();
    zedObject.setLeftOperand(leftOperand);
    zedObject.setRightOperand(rightOperand);
    return zedObject;
  }

  public BasicChannelSet createBasicChannelSet()
  {
    BasicChannelSet zedObject = new BasicChannelSetImpl();
    return zedObject;
  }

  public BasicChannelSet createBasicChannelSet(java.util.List refName)
  {
    BasicChannelSet zedObject = createBasicChannelSet();
    if (refName != null) {
      zedObject.getRefName().addAll(refName);
    }
    return zedObject;
  }

  public UnionChannelSet createUnionChannelSet()
  {
    UnionChannelSet zedObject = new UnionChannelSetImpl();
    return zedObject;
  }

  public UnionChannelSet createUnionChannelSet(ChannelSet leftOperand, ChannelSet rightOperand)
  {
    UnionChannelSet zedObject = createUnionChannelSet();
    zedObject.setLeftOperand(leftOperand);
    zedObject.setRightOperand(rightOperand);
    return zedObject;
  }

  public ParallelProcessRI createParallelProcessRI()
  {
    ParallelProcessRI zedObject = new ParallelProcessRIImpl();
    return zedObject;
  }

  public ParallelProcessRI createParallelProcessRI(ProcessDef processDef, java.util.List varDecl, ChannelSet channelSet)
  {
    ParallelProcessRI zedObject = createParallelProcessRI();
    zedObject.setProcessDef(processDef);
    if (varDecl != null) {
      zedObject.getVarDecl().addAll(varDecl);
    }
    zedObject.setChannelSet(channelSet);
    return zedObject;
  }

  public InterleaveAction createInterleaveAction()
  {
    InterleaveAction zedObject = new InterleaveActionImpl();
    return zedObject;
  }

  public InterleaveAction createInterleaveAction(Action leftAction, Action rightAction, NameSet leftNameSet, NameSet rightNameSet)
  {
    InterleaveAction zedObject = createInterleaveAction();
    zedObject.setLeftAction(leftAction);
    zedObject.setRightAction(rightAction);
    zedObject.setLeftNameSet(leftNameSet);
    zedObject.setRightNameSet(rightNameSet);
    return zedObject;
  }

  public IntChoiceProcess createIntChoiceProcess()
  {
    IntChoiceProcess zedObject = new IntChoiceProcessImpl();
    return zedObject;
  }

  public IntChoiceProcess createIntChoiceProcess(ProcessDef leftProc, ProcessDef rightProc)
  {
    IntChoiceProcess zedObject = createIntChoiceProcess();
    zedObject.setLeftProc(leftProc);
    zedObject.setRightProc(rightProc);
    return zedObject;
  }

  public SeqProcessRI createSeqProcessRI()
  {
    SeqProcessRI zedObject = new SeqProcessRIImpl();
    return zedObject;
  }

  public SeqProcessRI createSeqProcessRI(ProcessDef processDef, java.util.List varDecl)
  {
    SeqProcessRI zedObject = createSeqProcessRI();
    zedObject.setProcessDef(processDef);
    if (varDecl != null) {
      zedObject.getVarDecl().addAll(varDecl);
    }
    return zedObject;
  }

  public SchExprAction createSchExprAction()
  {
    SchExprAction zedObject = new SchExprActionImpl();
    return zedObject;
  }

  public SchExprAction createSchExprAction(net.sourceforge.czt.z.ast.SchExpr schExpr, Boolean isState)
  {
    SchExprAction zedObject = createSchExprAction();
    zedObject.setSchExpr(schExpr);
    zedObject.setIsState(isState);
    return zedObject;
  }

  public IfGuardedCommand createIfGuardedCommand()
  {
    IfGuardedCommand zedObject = new IfGuardedCommandImpl();
    return zedObject;
  }

  public IfGuardedCommand createIfGuardedCommand(java.util.List guardedAction)
  {
    IfGuardedCommand zedObject = createIfGuardedCommand();
    if (guardedAction != null) {
      zedObject.getGuardedAction().addAll(guardedAction);
    }
    return zedObject;
  }

  public ExtChoiceProcess createExtChoiceProcess()
  {
    ExtChoiceProcess zedObject = new ExtChoiceProcessImpl();
    return zedObject;
  }

  public ExtChoiceProcess createExtChoiceProcess(ProcessDef leftProc, ProcessDef rightProc)
  {
    ExtChoiceProcess zedObject = createExtChoiceProcess();
    zedObject.setLeftProc(leftProc);
    zedObject.setRightProc(rightProc);
    return zedObject;
  }

  public StopAction createStopAction()
  {
    StopAction zedObject = new StopActionImpl();
    return zedObject;
  }

  public ExtChoiceAction createExtChoiceAction()
  {
    ExtChoiceAction zedObject = new ExtChoiceActionImpl();
    return zedObject;
  }

  public ExtChoiceAction createExtChoiceAction(Action leftAction, Action rightAction)
  {
    ExtChoiceAction zedObject = createExtChoiceAction();
    zedObject.setLeftAction(leftAction);
    zedObject.setRightAction(rightAction);
    return zedObject;
  }

  public RefChannelSet createRefChannelSet()
  {
    RefChannelSet zedObject = new RefChannelSetImpl();
    return zedObject;
  }

  public RefChannelSet createRefChannelSet(net.sourceforge.czt.z.ast.RefName refName)
  {
    RefChannelSet zedObject = createRefChannelSet();
    zedObject.setRefName(refName);
    return zedObject;
  }

  public ExtChoiceActionR createExtChoiceActionR()
  {
    ExtChoiceActionR zedObject = new ExtChoiceActionRImpl();
    return zedObject;
  }

  public ExtChoiceActionR createExtChoiceActionR(Action action, java.util.List varDecl)
  {
    ExtChoiceActionR zedObject = createExtChoiceActionR();
    zedObject.setAction(action);
    if (varDecl != null) {
      zedObject.getVarDecl().addAll(varDecl);
    }
    return zedObject;
  }

  public RefNameSet createRefNameSet()
  {
    RefNameSet zedObject = new RefNameSetImpl();
    return zedObject;
  }

  public RefNameSet createRefNameSet(net.sourceforge.czt.z.ast.RefName refName)
  {
    RefNameSet zedObject = createRefNameSet();
    zedObject.setRefName(refName);
    return zedObject;
  }

  public PrefixingAction createPrefixingAction()
  {
    PrefixingAction zedObject = new PrefixingActionImpl();
    return zedObject;
  }

  public PrefixingAction createPrefixingAction(Action action, Communication communication)
  {
    PrefixingAction zedObject = createPrefixingAction();
    zedObject.setAction(action);
    zedObject.setCommunication(communication);
    return zedObject;
  }

  public DifferenceNameSet createDifferenceNameSet()
  {
    DifferenceNameSet zedObject = new DifferenceNameSetImpl();
    return zedObject;
  }

  public DifferenceNameSet createDifferenceNameSet(NameSet leftOperand, NameSet rightOperand)
  {
    DifferenceNameSet zedObject = createDifferenceNameSet();
    zedObject.setLeftOperand(leftOperand);
    zedObject.setRightOperand(rightOperand);
    return zedObject;
  }

  public IndexedProcessDesc createIndexedProcessDesc()
  {
    IndexedProcessDesc zedObject = new IndexedProcessDescImpl();
    return zedObject;
  }

  public IndexedProcessDesc createIndexedProcessDesc(java.util.List varDecl, ProcessDef processDef)
  {
    IndexedProcessDesc zedObject = createIndexedProcessDesc();
    if (varDecl != null) {
      zedObject.getVarDecl().addAll(varDecl);
    }
    zedObject.setProcessDef(processDef);
    return zedObject;
  }

  public AssignmentPair createAssignmentPair()
  {
    AssignmentPair zedObject = new AssignmentPairImpl();
    return zedObject;
  }

  public AssignmentPair createAssignmentPair(net.sourceforge.czt.z.ast.RefName lHS, net.sourceforge.czt.z.ast.Expr rHS)
  {
    AssignmentPair zedObject = createAssignmentPair();
    zedObject.setLHS(lHS);
    zedObject.setRHS(rHS);
    return zedObject;
  }

  public AssignmentCommand createAssignmentCommand()
  {
    AssignmentCommand zedObject = new AssignmentCommandImpl();
    return zedObject;
  }

  public AssignmentCommand createAssignmentCommand(java.util.List assignmentPair)
  {
    AssignmentCommand zedObject = createAssignmentCommand();
    if (assignmentPair != null) {
      zedObject.getAssignmentPair().addAll(assignmentPair);
    }
    return zedObject;
  }

  public ActualParamAction createActualParamAction()
  {
    ActualParamAction zedObject = new ActualParamActionImpl();
    return zedObject;
  }

  public ActualParamAction createActualParamAction(Action action, java.util.List expr)
  {
    ActualParamAction zedObject = createActualParamAction();
    zedObject.setAction(action);
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    return zedObject;
  }

  public ExtChoiceProcessRI createExtChoiceProcessRI()
  {
    ExtChoiceProcessRI zedObject = new ExtChoiceProcessRIImpl();
    return zedObject;
  }

  public ExtChoiceProcessRI createExtChoiceProcessRI(ProcessDef processDef, java.util.List varDecl)
  {
    ExtChoiceProcessRI zedObject = createExtChoiceProcessRI();
    zedObject.setProcessDef(processDef);
    if (varDecl != null) {
      zedObject.getVarDecl().addAll(varDecl);
    }
    return zedObject;
  }

  public AssumptionCommand createAssumptionCommand()
  {
    AssumptionCommand zedObject = new AssumptionCommandImpl();
    return zedObject;
  }

  public AssumptionCommand createAssumptionCommand(net.sourceforge.czt.z.ast.Pred pred)
  {
    AssumptionCommand zedObject = createAssumptionCommand();
    zedObject.setPred(pred);
    return zedObject;
  }

  public BasicProcessSignature createBasicProcessSignature()
  {
    BasicProcessSignature zedObject = new BasicProcessSignatureImpl();
    return zedObject;
  }

  public BasicProcessSignature createBasicProcessSignature(net.sourceforge.czt.z.ast.DeclName processName, net.sourceforge.czt.z.ast.VarDecl formalParams, net.sourceforge.czt.z.ast.Signature stateSignature, java.util.List localZDeclsSignature, java.util.List actionsSignature, java.util.List declNameSets)
  {
    BasicProcessSignature zedObject = createBasicProcessSignature();
    zedObject.setProcessName(processName);
    zedObject.setFormalParams(formalParams);
    zedObject.setStateSignature(stateSignature);
    if (localZDeclsSignature != null) {
      zedObject.getLocalZDeclsSignature().addAll(localZDeclsSignature);
    }
    if (actionsSignature != null) {
      zedObject.getActionsSignature().addAll(actionsSignature);
    }
    if (declNameSets != null) {
      zedObject.getDeclNameSets().addAll(declNameSets);
    }
    return zedObject;
  }

  public SeqActionR createSeqActionR()
  {
    SeqActionR zedObject = new SeqActionRImpl();
    return zedObject;
  }

  public SeqActionR createSeqActionR(Action action, java.util.List varDecl)
  {
    SeqActionR zedObject = createSeqActionR();
    zedObject.setAction(action);
    if (varDecl != null) {
      zedObject.getVarDecl().addAll(varDecl);
    }
    return zedObject;
  }

  public InterleaveActionR createInterleaveActionR()
  {
    InterleaveActionR zedObject = new InterleaveActionRImpl();
    return zedObject;
  }

  public InterleaveActionR createInterleaveActionR(Action action, java.util.List varDecl)
  {
    InterleaveActionR zedObject = createInterleaveActionR();
    zedObject.setAction(action);
    if (varDecl != null) {
      zedObject.getVarDecl().addAll(varDecl);
    }
    return zedObject;
  }

  public SpecStmtCommand createSpecStmtCommand()
  {
    SpecStmtCommand zedObject = new SpecStmtCommandImpl();
    return zedObject;
  }

  public SpecStmtCommand createSpecStmtCommand(java.util.List frame, net.sourceforge.czt.z.ast.Pred pre, net.sourceforge.czt.z.ast.Pred post)
  {
    SpecStmtCommand zedObject = createSpecStmtCommand();
    if (frame != null) {
      zedObject.getFrame().addAll(frame);
    }
    zedObject.setPre(pre);
    zedObject.setPost(post);
    return zedObject;
  }

  public MuAction createMuAction()
  {
    MuAction zedObject = new MuActionImpl();
    return zedObject;
  }

  public MuAction createMuAction(Action action, net.sourceforge.czt.z.ast.DeclName declName)
  {
    MuAction zedObject = createMuAction();
    zedObject.setAction(action);
    zedObject.setDeclName(declName);
    return zedObject;
  }

  public ProcessSignature createProcessSignature()
  {
    ProcessSignature zedObject = new ProcessSignatureImpl();
    return zedObject;
  }

  public ProcessSignature createProcessSignature(net.sourceforge.czt.z.ast.DeclName processName, net.sourceforge.czt.z.ast.VarDecl formalParams)
  {
    ProcessSignature zedObject = createProcessSignature();
    zedObject.setProcessName(processName);
    zedObject.setFormalParams(formalParams);
    return zedObject;
  }

  public ProcessPara createProcessPara()
  {
    ProcessPara zedObject = new ProcessParaImpl();
    return zedObject;
  }

  public ProcessPara createProcessPara(net.sourceforge.czt.z.ast.DeclName declName, java.util.List genericTypes, ProcessDesc processDesc)
  {
    ProcessPara zedObject = createProcessPara();
    zedObject.setDeclName(declName);
    if (genericTypes != null) {
      zedObject.getGenericTypes().addAll(genericTypes);
    }
    zedObject.setProcessDesc(processDesc);
    return zedObject;
  }

  public SeqAction createSeqAction()
  {
    SeqAction zedObject = new SeqActionImpl();
    return zedObject;
  }

  public SeqAction createSeqAction(Action leftAction, Action rightAction)
  {
    SeqAction zedObject = createSeqAction();
    zedObject.setLeftAction(leftAction);
    zedObject.setRightAction(rightAction);
    return zedObject;
  }

  public ActualGenProcess createActualGenProcess()
  {
    ActualGenProcess zedObject = new ActualGenProcessImpl();
    return zedObject;
  }

  public ActualGenProcess createActualGenProcess(ProcessDef processDef, java.util.List expr)
  {
    ActualGenProcess zedObject = createActualGenProcess();
    zedObject.setProcessDef(processDef);
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    return zedObject;
  }

  public ChannelSetPara createChannelSetPara()
  {
    ChannelSetPara zedObject = new ChannelSetParaImpl();
    return zedObject;
  }

  public ChannelSetPara createChannelSetPara(net.sourceforge.czt.z.ast.DeclName declName, ChannelSet channelSet)
  {
    ChannelSetPara zedObject = createChannelSetPara();
    zedObject.setDeclName(declName);
    zedObject.setChannelSet(channelSet);
    return zedObject;
  }

  public CallAction createCallAction()
  {
    CallAction zedObject = new CallActionImpl();
    return zedObject;
  }

  public CallAction createCallAction(net.sourceforge.czt.z.ast.RefName refName)
  {
    CallAction zedObject = createCallAction();
    zedObject.setRefName(refName);
    return zedObject;
  }

  public IntChoiceProcessR createIntChoiceProcessR()
  {
    IntChoiceProcessR zedObject = new IntChoiceProcessRImpl();
    return zedObject;
  }

  public IntChoiceProcessR createIntChoiceProcessR(ProcessDef processDef, java.util.List varDecl)
  {
    IntChoiceProcessR zedObject = createIntChoiceProcessR();
    zedObject.setProcessDef(processDef);
    if (varDecl != null) {
      zedObject.getVarDecl().addAll(varDecl);
    }
    return zedObject;
  }

  public IntChoiceProcessRI createIntChoiceProcessRI()
  {
    IntChoiceProcessRI zedObject = new IntChoiceProcessRIImpl();
    return zedObject;
  }

  public IntChoiceProcessRI createIntChoiceProcessRI(ProcessDef processDef, java.util.List varDecl)
  {
    IntChoiceProcessRI zedObject = createIntChoiceProcessRI();
    zedObject.setProcessDef(processDef);
    if (varDecl != null) {
      zedObject.getVarDecl().addAll(varDecl);
    }
    return zedObject;
  }

  public Communication createCommunication()
  {
    Communication zedObject = new CommunicationImpl();
    return zedObject;
  }

  public Communication createCommunication(net.sourceforge.czt.z.ast.RefName chanName, java.util.List chanFields, CommType commType, Integer multiSych)
  {
    Communication zedObject = createCommunication();
    zedObject.setChanName(chanName);
    if (chanFields != null) {
      zedObject.getChanFields().addAll(chanFields);
    }
    zedObject.setCommType(commType);
    zedObject.setMultiSych(multiSych);
    return zedObject;
  }

  public OutputField createOutputField()
  {
    OutputField zedObject = new OutputFieldImpl();
    return zedObject;
  }

  public OutputField createOutputField(net.sourceforge.czt.z.ast.Expr expression)
  {
    OutputField zedObject = createOutputField();
    zedObject.setExpression(expression);
    return zedObject;
  }

  public ActionPara createActionPara()
  {
    ActionPara zedObject = new ActionParaImpl();
    return zedObject;
  }

  public ActionPara createActionPara(net.sourceforge.czt.z.ast.DeclName declName, ActionDesc actionDesc)
  {
    ActionPara zedObject = createActionPara();
    zedObject.setDeclName(declName);
    zedObject.setActionDesc(actionDesc);
    return zedObject;
  }

  public HideProcess createHideProcess()
  {
    HideProcess zedObject = new HideProcessImpl();
    return zedObject;
  }

  public HideProcess createHideProcess(ProcessDef processDef, ChannelSet channelSet)
  {
    HideProcess zedObject = createHideProcess();
    zedObject.setProcessDef(processDef);
    zedObject.setChannelSet(channelSet);
    return zedObject;
  }

  public ActionAnn createActionAnn()
  {
    ActionAnn zedObject = new ActionAnnImpl();
    return zedObject;
  }

  public ActionAnn createActionAnn(ActionSignature actionSignature)
  {
    ActionAnn zedObject = createActionAnn();
    zedObject.setActionSignature(actionSignature);
    return zedObject;
  }

  public ParallelProcess createParallelProcess()
  {
    ParallelProcess zedObject = new ParallelProcessImpl();
    return zedObject;
  }

  public ParallelProcess createParallelProcess(ProcessDef leftProc, ProcessDef rightProc, ChannelSet channelSet)
  {
    ParallelProcess zedObject = createParallelProcess();
    zedObject.setLeftProc(leftProc);
    zedObject.setRightProc(rightProc);
    zedObject.setChannelSet(channelSet);
    return zedObject;
  }

  public ParallelProcessR createParallelProcessR()
  {
    ParallelProcessR zedObject = new ParallelProcessRImpl();
    return zedObject;
  }

  public ParallelProcessR createParallelProcessR(ProcessDef processDef, java.util.List varDecl, ChannelSet channelSet)
  {
    ParallelProcessR zedObject = createParallelProcessR();
    zedObject.setProcessDef(processDef);
    if (varDecl != null) {
      zedObject.getVarDecl().addAll(varDecl);
    }
    zedObject.setChannelSet(channelSet);
    return zedObject;
  }

  public ActionType createActionType()
  {
    ActionType zedObject = new ActionTypeImpl();
    return zedObject;
  }

  public ActionType createActionType(ActionSignature actionSignature)
  {
    ActionType zedObject = createActionType();
    zedObject.setActionSignature(actionSignature);
    return zedObject;
  }

  public ParallelActionR createParallelActionR()
  {
    ParallelActionR zedObject = new ParallelActionRImpl();
    return zedObject;
  }

  public ParallelActionR createParallelActionR(Action action, java.util.List varDecl, NameSet leftNameSet, NameSet rightNameSet, ChannelSet channelSet)
  {
    ParallelActionR zedObject = createParallelActionR();
    zedObject.setAction(action);
    if (varDecl != null) {
      zedObject.getVarDecl().addAll(varDecl);
    }
    zedObject.setLeftNameSet(leftNameSet);
    zedObject.setRightNameSet(rightNameSet);
    zedObject.setChannelSet(channelSet);
    return zedObject;
  }

  public IntChoiceAction createIntChoiceAction()
  {
    IntChoiceAction zedObject = new IntChoiceActionImpl();
    return zedObject;
  }

  public IntChoiceAction createIntChoiceAction(Action leftAction, Action rightAction)
  {
    IntChoiceAction zedObject = createIntChoiceAction();
    zedObject.setLeftAction(leftAction);
    zedObject.setRightAction(rightAction);
    return zedObject;
  }

  public ProcessAnn createProcessAnn()
  {
    ProcessAnn zedObject = new ProcessAnnImpl();
    return zedObject;
  }

  public ProcessAnn createProcessAnn(ProcessSignature processSignature)
  {
    ProcessAnn zedObject = createProcessAnn();
    zedObject.setProcessSignature(processSignature);
    return zedObject;
  }

  public ParamActionDesc createParamActionDesc()
  {
    ParamActionDesc zedObject = new ParamActionDescImpl();
    return zedObject;
  }

  public ParamActionDesc createParamActionDesc(java.util.List varDecl, Action action)
  {
    ParamActionDesc zedObject = createParamActionDesc();
    if (varDecl != null) {
      zedObject.getVarDecl().addAll(varDecl);
    }
    zedObject.setAction(action);
    return zedObject;
  }

  public RenameProcess createRenameProcess()
  {
    RenameProcess zedObject = new RenameProcessImpl();
    return zedObject;
  }

  public RenameProcess createRenameProcess(ProcessDef processDef, java.util.List oldNames, java.util.List newNames)
  {
    RenameProcess zedObject = createRenameProcess();
    zedObject.setProcessDef(processDef);
    if (oldNames != null) {
      zedObject.getOldNames().addAll(oldNames);
    }
    if (newNames != null) {
      zedObject.getNewNames().addAll(newNames);
    }
    return zedObject;
  }

  public ChannelPara createChannelPara()
  {
    ChannelPara zedObject = new ChannelParaImpl();
    return zedObject;
  }

  public ChannelPara createChannelPara(java.util.List decl)
  {
    ChannelPara zedObject = createChannelPara();
    if (decl != null) {
      zedObject.getDecl().addAll(decl);
    }
    return zedObject;
  }

  public CallProcess createCallProcess()
  {
    CallProcess zedObject = new CallProcessImpl();
    return zedObject;
  }

  public CallProcess createCallProcess(net.sourceforge.czt.z.ast.RefName refName)
  {
    CallProcess zedObject = createCallProcess();
    zedObject.setRefName(refName);
    return zedObject;
  }

  public FormalParamAction createFormalParamAction()
  {
    FormalParamAction zedObject = new FormalParamActionImpl();
    return zedObject;
  }

  public FormalParamAction createFormalParamAction(Action action, java.util.List varDecl)
  {
    FormalParamAction zedObject = createFormalParamAction();
    zedObject.setAction(action);
    if (varDecl != null) {
      zedObject.getVarDecl().addAll(varDecl);
    }
    return zedObject;
  }

  public SetNameSet createSetNameSet()
  {
    SetNameSet zedObject = new SetNameSetImpl();
    return zedObject;
  }

  public SetNameSet createSetNameSet(java.util.List refName)
  {
    SetNameSet zedObject = createSetNameSet();
    if (refName != null) {
      zedObject.getRefName().addAll(refName);
    }
    return zedObject;
  }

  public NameSetPara createNameSetPara()
  {
    NameSetPara zedObject = new NameSetParaImpl();
    return zedObject;
  }

  public NameSetPara createNameSetPara(net.sourceforge.czt.z.ast.DeclName declName, NameSet nameSet)
  {
    NameSetPara zedObject = createNameSetPara();
    zedObject.setDeclName(declName);
    zedObject.setNameSet(nameSet);
    return zedObject;
  }

  public InterleaveProcess createInterleaveProcess()
  {
    InterleaveProcess zedObject = new InterleaveProcessImpl();
    return zedObject;
  }

  public InterleaveProcess createInterleaveProcess(ProcessDef leftProc, ProcessDef rightProc)
  {
    InterleaveProcess zedObject = createInterleaveProcess();
    zedObject.setLeftProc(leftProc);
    zedObject.setRightProc(rightProc);
    return zedObject;
  }

  public UnionNameSet createUnionNameSet()
  {
    UnionNameSet zedObject = new UnionNameSetImpl();
    return zedObject;
  }

  public UnionNameSet createUnionNameSet(NameSet leftOperand, NameSet rightOperand)
  {
    UnionNameSet zedObject = createUnionNameSet();
    zedObject.setLeftOperand(leftOperand);
    zedObject.setRightOperand(rightOperand);
    return zedObject;
  }

  public SeqProcess createSeqProcess()
  {
    SeqProcess zedObject = new SeqProcessImpl();
    return zedObject;
  }

  public SeqProcess createSeqProcess(ProcessDef leftProc, ProcessDef rightProc)
  {
    SeqProcess zedObject = createSeqProcess();
    zedObject.setLeftProc(leftProc);
    zedObject.setRightProc(rightProc);
    return zedObject;
  }

  public BasicProcess createBasicProcess()
  {
    BasicProcess zedObject = new BasicProcessImpl();
    return zedObject;
  }

  public BasicProcess createBasicProcess(net.sourceforge.czt.z.ast.RefName stateSchemaRefName, java.util.List declZParagraphs, java.util.List declActions, java.util.List declNameSets, Action mainAction)
  {
    BasicProcess zedObject = createBasicProcess();
    zedObject.setStateSchemaRefName(stateSchemaRefName);
    if (declZParagraphs != null) {
      zedObject.getDeclZParagraphs().addAll(declZParagraphs);
    }
    if (declActions != null) {
      zedObject.getDeclActions().addAll(declActions);
    }
    if (declNameSets != null) {
      zedObject.getDeclNameSets().addAll(declNameSets);
    }
    zedObject.setMainAction(mainAction);
    return zedObject;
  }

  public IntersectChannelSet createIntersectChannelSet()
  {
    IntersectChannelSet zedObject = new IntersectChannelSetImpl();
    return zedObject;
  }

  public IntersectChannelSet createIntersectChannelSet(ChannelSet leftOperand, ChannelSet rightOperand)
  {
    IntersectChannelSet zedObject = createIntersectChannelSet();
    zedObject.setLeftOperand(leftOperand);
    zedObject.setRightOperand(rightOperand);
    return zedObject;
  }

  public ActualParamProcess createActualParamProcess()
  {
    ActualParamProcess zedObject = new ActualParamProcessImpl();
    return zedObject;
  }

  public ActualParamProcess createActualParamProcess(ProcessDef processDef, java.util.List expr)
  {
    ActualParamProcess zedObject = createActualParamProcess();
    zedObject.setProcessDef(processDef);
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    return zedObject;
  }

  public VarDeclCommand createVarDeclCommand()
  {
    VarDeclCommand zedObject = new VarDeclCommandImpl();
    return zedObject;
  }

  public VarDeclCommand createVarDeclCommand(java.util.List declarations, Action action)
  {
    VarDeclCommand zedObject = createVarDeclCommand();
    if (declarations != null) {
      zedObject.getDeclarations().addAll(declarations);
    }
    zedObject.setAction(action);
    return zedObject;
  }

  public InputField createInputField()
  {
    InputField zedObject = new InputFieldImpl();
    return zedObject;
  }

  public InputField createInputField(net.sourceforge.czt.z.ast.RefName variable, net.sourceforge.czt.z.ast.Pred restriction)
  {
    InputField zedObject = createInputField();
    zedObject.setVariable(variable);
    zedObject.setRestriction(restriction);
    return zedObject;
  }

  public InterleaveProcessR createInterleaveProcessR()
  {
    InterleaveProcessR zedObject = new InterleaveProcessRImpl();
    return zedObject;
  }

  public InterleaveProcessR createInterleaveProcessR(ProcessDef processDef, java.util.List varDecl)
  {
    InterleaveProcessR zedObject = createInterleaveProcessR();
    zedObject.setProcessDef(processDef);
    if (varDecl != null) {
      zedObject.getVarDecl().addAll(varDecl);
    }
    return zedObject;
  }

  public ExtChoiceProcessR createExtChoiceProcessR()
  {
    ExtChoiceProcessR zedObject = new ExtChoiceProcessRImpl();
    return zedObject;
  }

  public ExtChoiceProcessR createExtChoiceProcessR(ProcessDef processDef, java.util.List varDecl)
  {
    ExtChoiceProcessR zedObject = createExtChoiceProcessR();
    zedObject.setProcessDef(processDef);
    if (varDecl != null) {
      zedObject.getVarDecl().addAll(varDecl);
    }
    return zedObject;
  }

  public IntersectionNameSet createIntersectionNameSet()
  {
    IntersectionNameSet zedObject = new IntersectionNameSetImpl();
    return zedObject;
  }

  public IntersectionNameSet createIntersectionNameSet(NameSet leftOperand, NameSet rightOperand)
  {
    IntersectionNameSet zedObject = createIntersectionNameSet();
    zedObject.setLeftOperand(leftOperand);
    zedObject.setRightOperand(rightOperand);
    return zedObject;
  }

  public ActionSignature createActionSignature()
  {
    ActionSignature zedObject = new ActionSignatureImpl();
    return zedObject;
  }

  public ActionSignature createActionSignature(net.sourceforge.czt.z.ast.DeclName actionName, net.sourceforge.czt.z.ast.Signature localVarsSignature)
  {
    ActionSignature zedObject = createActionSignature();
    zedObject.setActionName(actionName);
    zedObject.setLocalVarsSignature(localVarsSignature);
    return zedObject;
  }

  public ParamProcessDesc createParamProcessDesc()
  {
    ParamProcessDesc zedObject = new ParamProcessDescImpl();
    return zedObject;
  }

  public ParamProcessDesc createParamProcessDesc(java.util.List varDecl, ProcessDef processDef)
  {
    ParamProcessDesc zedObject = createParamProcessDesc();
    if (varDecl != null) {
      zedObject.getVarDecl().addAll(varDecl);
    }
    zedObject.setProcessDef(processDef);
    return zedObject;
  }

}
