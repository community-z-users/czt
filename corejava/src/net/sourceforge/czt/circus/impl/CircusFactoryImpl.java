
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactoryImpl.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.impl;

import net.sourceforge.czt.z.ast.*;
import net.sourceforge.czt.circus.ast.*;

/**
 * <p>An implementation of the object factory for constructing
 * concrete Z terms.  Each factory method returns an instance
 * of the corresponding class provided in this package.</p>
 *
 * @author Gnast version 0.1
 */
public class CircusFactoryImpl
  extends net.sourceforge.czt.z.impl.ZFactoryImpl
  implements net.sourceforge.czt.circus.ast.CircusFactory
{
  public CSExprSet createCSExprSet()
  {
    CSExprSet zedObject = new CSExprSetImpl();
    return zedObject;
  }

  public CSExprSet createCSExprSet(java.util.List expr, java.util.List refName)
  {
    CSExprSet zedObject = createCSExprSet();
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    if (refName != null) {
      zedObject.getRefName().addAll(refName);
    }
    return zedObject;
  }

  public IdxRepParallelCompProc createIdxRepParallelCompProc()
  {
    IdxRepParallelCompProc zedObject = new IdxRepParallelCompProcImpl();
    return zedObject;
  }

  public IdxRepParallelCompProc createIdxRepParallelCompProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl, CSExpr cSExpr)
  {
    IdxRepParallelCompProc zedObject = createIdxRepParallelCompProc();
    zedObject.setProcDef(procDef);
    zedObject.setVarDecl(varDecl);
    zedObject.setCSExpr(cSExpr);
    return zedObject;
  }

  public RepExtChAction createRepExtChAction()
  {
    RepExtChAction zedObject = new RepExtChActionImpl();
    return zedObject;
  }

  public RepExtChAction createRepExtChAction(ActionDef actionDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    RepExtChAction zedObject = createRepExtChAction();
    zedObject.setActionDef(actionDef);
    zedObject.setVarDecl(varDecl);
    return zedObject;
  }

  public GuardedAction createGuardedAction()
  {
    GuardedAction zedObject = new GuardedActionImpl();
    return zedObject;
  }

  public GuardedAction createGuardedAction(ActionDef actionDef, net.sourceforge.czt.z.ast.Pred pred)
  {
    GuardedAction zedObject = createGuardedAction();
    zedObject.setActionDef(actionDef);
    zedObject.setPred(pred);
    return zedObject;
  }

  public ExtChoiceProc createExtChoiceProc()
  {
    ExtChoiceProc zedObject = new ExtChoiceProcImpl();
    return zedObject;
  }

  public ExtChoiceProc createExtChoiceProc(ProcDef leftProc, ProcDef rightProc)
  {
    ExtChoiceProc zedObject = createExtChoiceProc();
    zedObject.setLeftProc(leftProc);
    zedObject.setRightProc(rightProc);
    return zedObject;
  }

  public ParallelCompAction createParallelCompAction()
  {
    ParallelCompAction zedObject = new ParallelCompActionImpl();
    return zedObject;
  }

  public ParallelCompAction createParallelCompAction(ActionDef leftAction, ActionDef rightAction, NSExpr leftNS, NSExpr rightNS, CSExpr cSExpr)
  {
    ParallelCompAction zedObject = createParallelCompAction();
    zedObject.setLeftAction(leftAction);
    zedObject.setRightAction(rightAction);
    zedObject.setLeftNS(leftNS);
    zedObject.setRightNS(rightNS);
    zedObject.setCSExpr(cSExpr);
    return zedObject;
  }

  public CallProc createCallProc()
  {
    CallProc zedObject = new CallProcImpl();
    return zedObject;
  }

  public CallProc createCallProc(net.sourceforge.czt.z.ast.RefName refName)
  {
    CallProc zedObject = createCallProc();
    zedObject.setRefName(refName);
    return zedObject;
  }

  public CommMixed createCommMixed()
  {
    CommMixed zedObject = new CommMixedImpl();
    return zedObject;
  }

  public CommMixed createCommMixed(java.util.List commIn, java.util.List commOut)
  {
    CommMixed zedObject = createCommMixed();
    if (commIn != null) {
      zedObject.getCommIn().addAll(commIn);
    }
    if (commOut != null) {
      zedObject.getCommOut().addAll(commOut);
    }
    return zedObject;
  }

  public NSExprUnion createNSExprUnion()
  {
    NSExprUnion zedObject = new NSExprUnionImpl();
    return zedObject;
  }

  public MuAction createMuAction()
  {
    MuAction zedObject = new MuActionImpl();
    return zedObject;
  }

  public MuAction createMuAction(ActionDef actionDef, net.sourceforge.czt.z.ast.DeclName declName)
  {
    MuAction zedObject = createMuAction();
    zedObject.setActionDef(actionDef);
    zedObject.setDeclName(declName);
    return zedObject;
  }

  public ChannelDecl createChannelDecl()
  {
    ChannelDecl zedObject = new ChannelDeclImpl();
    return zedObject;
  }

  public ChannelDecl createChannelDecl(net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    ChannelDecl zedObject = createChannelDecl();
    zedObject.setVarDecl(varDecl);
    return zedObject;
  }

  public HideAction createHideAction()
  {
    HideAction zedObject = new HideActionImpl();
    return zedObject;
  }

  public HideAction createHideAction(ActionDef actionDef, CSExpr cSExpr)
  {
    HideAction zedObject = createHideAction();
    zedObject.setActionDef(actionDef);
    zedObject.setCSExpr(cSExpr);
    return zedObject;
  }

  public NSDecl createNSDecl()
  {
    NSDecl zedObject = new NSDeclImpl();
    return zedObject;
  }

  public NSDecl createNSDecl(net.sourceforge.czt.z.ast.DeclName declName, NSExpr nSExpr)
  {
    NSDecl zedObject = createNSDecl();
    zedObject.setDeclName(declName);
    zedObject.setNSExpr(nSExpr);
    return zedObject;
  }

  public IfGuardedCmd createIfGuardedCmd()
  {
    IfGuardedCmd zedObject = new IfGuardedCmdImpl();
    return zedObject;
  }

  public IfGuardedCmd createIfGuardedCmd(java.util.List guardedActions)
  {
    IfGuardedCmd zedObject = createIfGuardedCmd();
    if (guardedActions != null) {
      zedObject.getGuardedActions().addAll(guardedActions);
    }
    return zedObject;
  }

  public CommOut createCommOut()
  {
    CommOut zedObject = new CommOutImpl();
    return zedObject;
  }

  public CommOut createCommOut(net.sourceforge.czt.z.ast.Expr expr)
  {
    CommOut zedObject = createCommOut();
    zedObject.setExpr(expr);
    return zedObject;
  }

  public NSExprInter createNSExprInter()
  {
    NSExprInter zedObject = new NSExprInterImpl();
    return zedObject;
  }

  public ChaosAction createChaosAction()
  {
    ChaosAction zedObject = new ChaosActionImpl();
    return zedObject;
  }

  public AssignmentCmd createAssignmentCmd()
  {
    AssignmentCmd zedObject = new AssignmentCmdImpl();
    return zedObject;
  }

  public AssignmentCmd createAssignmentCmd(java.util.List assignmentPair)
  {
    AssignmentCmd zedObject = createAssignmentCmd();
    if (assignmentPair != null) {
      zedObject.getAssignmentPair().addAll(assignmentPair);
    }
    return zedObject;
  }

  public IdxRepSeqCompProc createIdxRepSeqCompProc()
  {
    IdxRepSeqCompProc zedObject = new IdxRepSeqCompProcImpl();
    return zedObject;
  }

  public IdxRepSeqCompProc createIdxRepSeqCompProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    IdxRepSeqCompProc zedObject = createIdxRepSeqCompProc();
    zedObject.setProcDef(procDef);
    zedObject.setVarDecl(varDecl);
    return zedObject;
  }

  public CSExprInter createCSExprInter()
  {
    CSExprInter zedObject = new CSExprInterImpl();
    return zedObject;
  }

  public FormalParamProc createFormalParamProc()
  {
    FormalParamProc zedObject = new FormalParamProcImpl();
    return zedObject;
  }

  public FormalParamProc createFormalParamProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    FormalParamProc zedObject = createFormalParamProc();
    zedObject.setProcDef(procDef);
    zedObject.setVarDecl(varDecl);
    return zedObject;
  }

  public SkipAction createSkipAction()
  {
    SkipAction zedObject = new SkipActionImpl();
    return zedObject;
  }

  public RepInterleaveProc createRepInterleaveProc()
  {
    RepInterleaveProc zedObject = new RepInterleaveProcImpl();
    return zedObject;
  }

  public RepInterleaveProc createRepInterleaveProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    RepInterleaveProc zedObject = createRepInterleaveProc();
    zedObject.setProcDef(procDef);
    zedObject.setVarDecl(varDecl);
    return zedObject;
  }

  public RepSeqCompProc createRepSeqCompProc()
  {
    RepSeqCompProc zedObject = new RepSeqCompProcImpl();
    return zedObject;
  }

  public RepSeqCompProc createRepSeqCompProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    RepSeqCompProc zedObject = createRepSeqCompProc();
    zedObject.setProcDef(procDef);
    zedObject.setVarDecl(varDecl);
    return zedObject;
  }

  public RepExtChProc createRepExtChProc()
  {
    RepExtChProc zedObject = new RepExtChProcImpl();
    return zedObject;
  }

  public RepExtChProc createRepExtChProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    RepExtChProc zedObject = createRepExtChProc();
    zedObject.setProcDef(procDef);
    zedObject.setVarDecl(varDecl);
    return zedObject;
  }

  public SpecStmtCmd createSpecStmtCmd()
  {
    SpecStmtCmd zedObject = new SpecStmtCmdImpl();
    return zedObject;
  }

  public SpecStmtCmd createSpecStmtCmd(java.util.List frame, net.sourceforge.czt.z.ast.Pred pre, net.sourceforge.czt.z.ast.Pred post)
  {
    SpecStmtCmd zedObject = createSpecStmtCmd();
    if (frame != null) {
      zedObject.getFrame().addAll(frame);
    }
    zedObject.setPre(pre);
    zedObject.setPost(post);
    return zedObject;
  }

  public CallAction createCallAction()
  {
    CallAction zedObject = new CallActionImpl();
    return zedObject;
  }

  public CallAction createCallAction(net.sourceforge.czt.z.ast.RefName refName)
  {
    CallAction zedObject = createCallAction();
    zedObject.setRefName(refName);
    return zedObject;
  }

  public IdxRepInterleaveProc createIdxRepInterleaveProc()
  {
    IdxRepInterleaveProc zedObject = new IdxRepInterleaveProcImpl();
    return zedObject;
  }

  public IdxRepInterleaveProc createIdxRepInterleaveProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    IdxRepInterleaveProc zedObject = createIdxRepInterleaveProc();
    zedObject.setProcDef(procDef);
    zedObject.setVarDecl(varDecl);
    return zedObject;
  }

  public ProcZPara createProcZPara()
  {
    ProcZPara zedObject = new ProcZParaImpl();
    return zedObject;
  }

  public ProcZPara createProcZPara(net.sourceforge.czt.z.ast.Para para)
  {
    ProcZPara zedObject = createProcZPara();
    zedObject.setPara(para);
    return zedObject;
  }

  public ProcDesc createProcDesc()
  {
    ProcDesc zedObject = new ProcDescImpl();
    return zedObject;
  }

  public ProcDesc createProcDesc(SchemaAction stateSchemaAction, java.util.List procPara, java.util.List actionDef)
  {
    ProcDesc zedObject = createProcDesc();
    zedObject.setStateSchemaAction(stateSchemaAction);
    if (procPara != null) {
      zedObject.getProcPara().addAll(procPara);
    }
    if (actionDef != null) {
      zedObject.getActionDef().addAll(actionDef);
    }
    return zedObject;
  }

  public ProcDecl createProcDecl()
  {
    ProcDecl zedObject = new ProcDeclImpl();
    return zedObject;
  }

  public ProcDecl createProcDecl(net.sourceforge.czt.z.ast.DeclName declName, ProcDef procDef)
  {
    ProcDecl zedObject = createProcDecl();
    zedObject.setDeclName(declName);
    zedObject.setProcDef(procDef);
    return zedObject;
  }

  public RepIntChProc createRepIntChProc()
  {
    RepIntChProc zedObject = new RepIntChProcImpl();
    return zedObject;
  }

  public RepIntChProc createRepIntChProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    RepIntChProc zedObject = createRepIntChProc();
    zedObject.setProcDef(procDef);
    zedObject.setVarDecl(varDecl);
    return zedObject;
  }

  public CircusSect createCircusSect()
  {
    CircusSect zedObject = new CircusSectImpl();
    return zedObject;
  }

  public CircusSect createCircusSect(String name, java.util.List parent, java.util.List circusPara)
  {
    CircusSect zedObject = createCircusSect();
    zedObject.setName(name);
    if (parent != null) {
      zedObject.getParent().addAll(parent);
    }
    if (circusPara != null) {
      zedObject.getCircusPara().addAll(circusPara);
    }
    return zedObject;
  }

  public CSExprDiff createCSExprDiff()
  {
    CSExprDiff zedObject = new CSExprDiffImpl();
    return zedObject;
  }

  public InterleaveProc createInterleaveProc()
  {
    InterleaveProc zedObject = new InterleaveProcImpl();
    return zedObject;
  }

  public InterleaveProc createInterleaveProc(ProcDef leftProc, ProcDef rightProc)
  {
    InterleaveProc zedObject = createInterleaveProc();
    zedObject.setLeftProc(leftProc);
    zedObject.setRightProc(rightProc);
    return zedObject;
  }

  public ParallelCompProc createParallelCompProc()
  {
    ParallelCompProc zedObject = new ParallelCompProcImpl();
    return zedObject;
  }

  public ParallelCompProc createParallelCompProc(ProcDef leftProc, ProcDef rightProc, CSExpr cSExpr)
  {
    ParallelCompProc zedObject = createParallelCompProc();
    zedObject.setLeftProc(leftProc);
    zedObject.setRightProc(rightProc);
    zedObject.setCSExpr(cSExpr);
    return zedObject;
  }

  public SeqCompAction createSeqCompAction()
  {
    SeqCompAction zedObject = new SeqCompActionImpl();
    return zedObject;
  }

  public SeqCompAction createSeqCompAction(ActionDef leftAction, ActionDef rightAction)
  {
    SeqCompAction zedObject = createSeqCompAction();
    zedObject.setLeftAction(leftAction);
    zedObject.setRightAction(rightAction);
    return zedObject;
  }

  public NSExprSet createNSExprSet()
  {
    NSExprSet zedObject = new NSExprSetImpl();
    return zedObject;
  }

  public NSExprSet createNSExprSet(java.util.List expr, java.util.List refName)
  {
    NSExprSet zedObject = createNSExprSet();
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    if (refName != null) {
      zedObject.getRefName().addAll(refName);
    }
    return zedObject;
  }

  public RepIntChAction createRepIntChAction()
  {
    RepIntChAction zedObject = new RepIntChActionImpl();
    return zedObject;
  }

  public RepIntChAction createRepIntChAction(ActionDef actionDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    RepIntChAction zedObject = createRepIntChAction();
    zedObject.setActionDef(actionDef);
    zedObject.setVarDecl(varDecl);
    return zedObject;
  }

  public SchemaAction createSchemaAction()
  {
    SchemaAction zedObject = new SchemaActionImpl();
    return zedObject;
  }

  public SchemaAction createSchemaAction(net.sourceforge.czt.z.ast.SchExpr schExpr)
  {
    SchemaAction zedObject = createSchemaAction();
    zedObject.setSchExpr(schExpr);
    return zedObject;
  }

  public ActualParamProc createActualParamProc()
  {
    ActualParamProc zedObject = new ActualParamProcImpl();
    return zedObject;
  }

  public ActualParamProc createActualParamProc(ProcDef procDef, java.util.List expr)
  {
    ActualParamProc zedObject = createActualParamProc();
    zedObject.setProcDef(procDef);
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    return zedObject;
  }

  public IntChoiceAction createIntChoiceAction()
  {
    IntChoiceAction zedObject = new IntChoiceActionImpl();
    return zedObject;
  }

  public IntChoiceAction createIntChoiceAction(ActionDef leftAction, ActionDef rightAction)
  {
    IntChoiceAction zedObject = createIntChoiceAction();
    zedObject.setLeftAction(leftAction);
    zedObject.setRightAction(rightAction);
    return zedObject;
  }

  public RepParallelCompProc createRepParallelCompProc()
  {
    RepParallelCompProc zedObject = new RepParallelCompProcImpl();
    return zedObject;
  }

  public RepParallelCompProc createRepParallelCompProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl, CSExpr cSExpr)
  {
    RepParallelCompProc zedObject = createRepParallelCompProc();
    zedObject.setProcDef(procDef);
    zedObject.setVarDecl(varDecl);
    zedObject.setCSExpr(cSExpr);
    return zedObject;
  }

  public InterleaveAction createInterleaveAction()
  {
    InterleaveAction zedObject = new InterleaveActionImpl();
    return zedObject;
  }

  public InterleaveAction createInterleaveAction(ActionDef leftAction, ActionDef rightAction, NSExpr leftNS, NSExpr rightNS)
  {
    InterleaveAction zedObject = createInterleaveAction();
    zedObject.setLeftAction(leftAction);
    zedObject.setRightAction(rightAction);
    zedObject.setLeftNS(leftNS);
    zedObject.setRightNS(rightNS);
    return zedObject;
  }

  public CircusZPara createCircusZPara()
  {
    CircusZPara zedObject = new CircusZParaImpl();
    return zedObject;
  }

  public CircusZPara createCircusZPara(net.sourceforge.czt.z.ast.Para para)
  {
    CircusZPara zedObject = createCircusZPara();
    zedObject.setPara(para);
    return zedObject;
  }

  public CSExprRef createCSExprRef()
  {
    CSExprRef zedObject = new CSExprRefImpl();
    return zedObject;
  }

  public CSExprRef createCSExprRef(java.util.List expr, net.sourceforge.czt.z.ast.RefName refName)
  {
    CSExprRef zedObject = createCSExprRef();
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    zedObject.setRefName(refName);
    return zedObject;
  }

  public IdxRepIntChProc createIdxRepIntChProc()
  {
    IdxRepIntChProc zedObject = new IdxRepIntChProcImpl();
    return zedObject;
  }

  public IdxRepIntChProc createIdxRepIntChProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    IdxRepIntChProc zedObject = createIdxRepIntChProc();
    zedObject.setProcDef(procDef);
    zedObject.setVarDecl(varDecl);
    return zedObject;
  }

  public RepInterleaveAction createRepInterleaveAction()
  {
    RepInterleaveAction zedObject = new RepInterleaveActionImpl();
    return zedObject;
  }

  public RepInterleaveAction createRepInterleaveAction(ActionDef actionDef, net.sourceforge.czt.z.ast.VarDecl varDecl, NSExpr leftNS, NSExpr rightNS)
  {
    RepInterleaveAction zedObject = createRepInterleaveAction();
    zedObject.setActionDef(actionDef);
    zedObject.setVarDecl(varDecl);
    zedObject.setLeftNS(leftNS);
    zedObject.setRightNS(rightNS);
    return zedObject;
  }

  public CSExprUnion createCSExprUnion()
  {
    CSExprUnion zedObject = new CSExprUnionImpl();
    return zedObject;
  }

  public FormalParamAction createFormalParamAction()
  {
    FormalParamAction zedObject = new FormalParamActionImpl();
    return zedObject;
  }

  public FormalParamAction createFormalParamAction(ActionDef actionDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    FormalParamAction zedObject = createFormalParamAction();
    zedObject.setActionDef(actionDef);
    zedObject.setVarDecl(varDecl);
    return zedObject;
  }

  public RepSeqCompAction createRepSeqCompAction()
  {
    RepSeqCompAction zedObject = new RepSeqCompActionImpl();
    return zedObject;
  }

  public RepSeqCompAction createRepSeqCompAction(ActionDef actionDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    RepSeqCompAction zedObject = createRepSeqCompAction();
    zedObject.setActionDef(actionDef);
    zedObject.setVarDecl(varDecl);
    return zedObject;
  }

  public NSExprRef createNSExprRef()
  {
    NSExprRef zedObject = new NSExprRefImpl();
    return zedObject;
  }

  public NSExprRef createNSExprRef(java.util.List expr, net.sourceforge.czt.z.ast.RefName refName)
  {
    NSExprRef zedObject = createNSExprRef();
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    zedObject.setRefName(refName);
    return zedObject;
  }

  public IntChoiceProc createIntChoiceProc()
  {
    IntChoiceProc zedObject = new IntChoiceProcImpl();
    return zedObject;
  }

  public IntChoiceProc createIntChoiceProc(ProcDef leftProc, ProcDef rightProc)
  {
    IntChoiceProc zedObject = createIntChoiceProc();
    zedObject.setLeftProc(leftProc);
    zedObject.setRightProc(rightProc);
    return zedObject;
  }

  public RepParallelCompAction createRepParallelCompAction()
  {
    RepParallelCompAction zedObject = new RepParallelCompActionImpl();
    return zedObject;
  }

  public RepParallelCompAction createRepParallelCompAction(ActionDef actionDef, net.sourceforge.czt.z.ast.VarDecl varDecl, NSExpr leftNS, NSExpr rightNS, CSExpr cSExpr)
  {
    RepParallelCompAction zedObject = createRepParallelCompAction();
    zedObject.setActionDef(actionDef);
    zedObject.setVarDecl(varDecl);
    zedObject.setLeftNS(leftNS);
    zedObject.setRightNS(rightNS);
    zedObject.setCSExpr(cSExpr);
    return zedObject;
  }

  public StopAction createStopAction()
  {
    StopAction zedObject = new StopActionImpl();
    return zedObject;
  }

  public ExtChoiceAction createExtChoiceAction()
  {
    ExtChoiceAction zedObject = new ExtChoiceActionImpl();
    return zedObject;
  }

  public ExtChoiceAction createExtChoiceAction(ActionDef leftAction, ActionDef rightAction)
  {
    ExtChoiceAction zedObject = createExtChoiceAction();
    zedObject.setLeftAction(leftAction);
    zedObject.setRightAction(rightAction);
    return zedObject;
  }

  public FormalGenProc createFormalGenProc()
  {
    FormalGenProc zedObject = new FormalGenProcImpl();
    return zedObject;
  }

  public FormalGenProc createFormalGenProc(ProcDef procDef, java.util.List formalGenTypes)
  {
    FormalGenProc zedObject = createFormalGenProc();
    zedObject.setProcDef(procDef);
    if (formalGenTypes != null) {
      zedObject.getFormalGenTypes().addAll(formalGenTypes);
    }
    return zedObject;
  }

  public ActualGenProc createActualGenProc()
  {
    ActualGenProc zedObject = new ActualGenProcImpl();
    return zedObject;
  }

  public ActualGenProc createActualGenProc(ProcDef procDef, java.util.List expr)
  {
    ActualGenProc zedObject = createActualGenProc();
    zedObject.setProcDef(procDef);
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    return zedObject;
  }

  public HideProc createHideProc()
  {
    HideProc zedObject = new HideProcImpl();
    return zedObject;
  }

  public HideProc createHideProc(ProcDef procDef, CSExpr cSExpr)
  {
    HideProc zedObject = createHideProc();
    zedObject.setProcDef(procDef);
    zedObject.setCSExpr(cSExpr);
    return zedObject;
  }

  public SeqCompProc createSeqCompProc()
  {
    SeqCompProc zedObject = new SeqCompProcImpl();
    return zedObject;
  }

  public SeqCompProc createSeqCompProc(ProcDef leftProc, ProcDef rightProc)
  {
    SeqCompProc zedObject = createSeqCompProc();
    zedObject.setLeftProc(leftProc);
    zedObject.setRightProc(rightProc);
    return zedObject;
  }

  public VarDeclCmd createVarDeclCmd()
  {
    VarDeclCmd zedObject = new VarDeclCmdImpl();
    return zedObject;
  }

  public VarDeclCmd createVarDeclCmd(net.sourceforge.czt.z.ast.VarDecl varDecl, ActionDef actionDef)
  {
    VarDeclCmd zedObject = createVarDeclCmd();
    zedObject.setVarDecl(varDecl);
    zedObject.setActionDef(actionDef);
    return zedObject;
  }

  public IdxRepExtChProc createIdxRepExtChProc()
  {
    IdxRepExtChProc zedObject = new IdxRepExtChProcImpl();
    return zedObject;
  }

  public IdxRepExtChProc createIdxRepExtChProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    IdxRepExtChProc zedObject = createIdxRepExtChProc();
    zedObject.setProcDef(procDef);
    zedObject.setVarDecl(varDecl);
    return zedObject;
  }

  public PrefixingAction createPrefixingAction()
  {
    PrefixingAction zedObject = new PrefixingActionImpl();
    return zedObject;
  }

  public PrefixingAction createPrefixingAction(ActionDef actionDef, Comm comm)
  {
    PrefixingAction zedObject = createPrefixingAction();
    zedObject.setActionDef(actionDef);
    zedObject.setComm(comm);
    return zedObject;
  }

  public IntantiationProc createIntantiationProc()
  {
    IntantiationProc zedObject = new IntantiationProcImpl();
    return zedObject;
  }

  public IntantiationProc createIntantiationProc(ProcDef procDef, java.util.List expr)
  {
    IntantiationProc zedObject = createIntantiationProc();
    zedObject.setProcDef(procDef);
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    return zedObject;
  }

  public Comm createComm()
  {
    Comm zedObject = new CommImpl();
    return zedObject;
  }

  public Comm createComm(net.sourceforge.czt.z.ast.RefName refName, java.util.List commParam, CommType commType, Integer multiSych)
  {
    Comm zedObject = createComm();
    zedObject.setRefName(refName);
    if (commParam != null) {
      zedObject.getCommParam().addAll(commParam);
    }
    zedObject.setCommType(commType);
    zedObject.setMultiSych(multiSych);
    return zedObject;
  }

  public CSDecl createCSDecl()
  {
    CSDecl zedObject = new CSDeclImpl();
    return zedObject;
  }

  public CSDecl createCSDecl(net.sourceforge.czt.z.ast.DeclName declName, CSExpr cSExpr)
  {
    CSDecl zedObject = createCSDecl();
    zedObject.setDeclName(declName);
    zedObject.setCSExpr(cSExpr);
    return zedObject;
  }

  public AssignmentPair createAssignmentPair()
  {
    AssignmentPair zedObject = new AssignmentPairImpl();
    return zedObject;
  }

  public AssignmentPair createAssignmentPair(net.sourceforge.czt.z.ast.RefName lHS, net.sourceforge.czt.z.ast.Expr rHS)
  {
    AssignmentPair zedObject = createAssignmentPair();
    zedObject.setLHS(lHS);
    zedObject.setRHS(rHS);
    return zedObject;
  }

  public NSExprDiff createNSExprDiff()
  {
    NSExprDiff zedObject = new NSExprDiffImpl();
    return zedObject;
  }

  public RenameProc createRenameProc()
  {
    RenameProc zedObject = new RenameProcImpl();
    return zedObject;
  }

  public RenameProc createRenameProc(ProcDef procDef, java.util.List oldNames, java.util.List newNames)
  {
    RenameProc zedObject = createRenameProc();
    zedObject.setProcDef(procDef);
    if (oldNames != null) {
      zedObject.getOldNames().addAll(oldNames);
    }
    if (newNames != null) {
      zedObject.getNewNames().addAll(newNames);
    }
    return zedObject;
  }

  public ActionDecl createActionDecl()
  {
    ActionDecl zedObject = new ActionDeclImpl();
    return zedObject;
  }

  public ActionDecl createActionDecl(net.sourceforge.czt.z.ast.DeclName declName, ActionDef actionDef)
  {
    ActionDecl zedObject = createActionDecl();
    zedObject.setDeclName(declName);
    zedObject.setActionDef(actionDef);
    return zedObject;
  }

  public ActualParamAction createActualParamAction()
  {
    ActualParamAction zedObject = new ActualParamActionImpl();
    return zedObject;
  }

  public ActualParamAction createActualParamAction(ActionDef actionDef, java.util.List expr)
  {
    ActualParamAction zedObject = createActualParamAction();
    zedObject.setActionDef(actionDef);
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    return zedObject;
  }

  public CommIn createCommIn()
  {
    CommIn zedObject = new CommInImpl();
    return zedObject;
  }

  public CommIn createCommIn(net.sourceforge.czt.z.ast.RefName refName, net.sourceforge.czt.z.ast.Pred pred)
  {
    CommIn zedObject = createCommIn();
    zedObject.setRefName(refName);
    zedObject.setPred(pred);
    return zedObject;
  }

  public IndexedProc createIndexedProc()
  {
    IndexedProc zedObject = new IndexedProcImpl();
    return zedObject;
  }

  public IndexedProc createIndexedProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    IndexedProc zedObject = createIndexedProc();
    zedObject.setProcDef(procDef);
    zedObject.setVarDecl(varDecl);
    return zedObject;
  }

  public ChannelDeclSExpr createChannelDeclSExpr()
  {
    ChannelDeclSExpr zedObject = new ChannelDeclSExprImpl();
    return zedObject;
  }

  public ChannelDeclSExpr createChannelDeclSExpr(net.sourceforge.czt.z.ast.SchExpr schExpr)
  {
    ChannelDeclSExpr zedObject = createChannelDeclSExpr();
    zedObject.setSchExpr(schExpr);
    return zedObject;
  }

}
