
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstInterface.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.ast;

import net.sourceforge.czt.base.ast.*;
import net.sourceforge.czt.z.ast.*;

/**
 * A process signature consists of the process name, formal parameters, and the channels usage.
				Generic parameters are resolved while type checking similarly to Z and ObjectZ (see ClassSignature and oz.TypeChecker).
				The channels usage is function from channel name to a set of usage flags.
				These flags can be either IN, OUT, SYNCH or HIDE.
				In the case of HIDE, all other flags are irrelevant.
				These usage flags are built up by collecting the channel usage from action signatures.
 *
 * @author Gnast version 0.1
 */
public interface ProcessSignature extends Term
{

  /**
   * Returns the ProcessName element.
   *
   * @return the ProcessName element.
   */
  net.sourceforge.czt.z.ast.DeclName getProcessName();

  /**
   * Sets the ProcessName element.
   *
   * @param processName   the ProcessName element.
   * @see #getProcessName
   */
  void setProcessName(net.sourceforge.czt.z.ast.DeclName processName);

  /**
   * Returns the FormalParams element.
   *
   * @return the FormalParams element.
   */
  net.sourceforge.czt.z.ast.VarDecl getFormalParams();

  /**
   * Sets the FormalParams element.
   *
   * @param formalParams   the FormalParams element.
   * @see #getFormalParams
   */
  void setFormalParams(net.sourceforge.czt.z.ast.VarDecl formalParams);
}
