
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstInterface.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.ast;

import net.sourceforge.czt.base.ast.*;
import net.sourceforge.czt.z.ast.*;

/**
 * A CSP communication that is part of a prefixing.
        It can be either a communication for synchronisation, input, output, or mixed.
        Synchronisation has no fields. Input and Output has only input or output fields repectively. 
        Finally, mixed communication has both input and output fields, for example in "c?x:P!v -&gt; A".
 *
 * @author Gnast version 0.1
 */
public interface Communication extends TermA
{

  /**
   * Returns the ChanName element.
   *
   * @return the ChanName element.
   */
  net.sourceforge.czt.z.ast.RefName getChanName();

  /**
   * Sets the ChanName element.
   *
   * @param chanName   the ChanName element.
   * @see #getChanName
   */
  void setChanName(net.sourceforge.czt.z.ast.RefName chanName);

  /**
   * <p>Returns the ChanFields elements.</p>
   * <p>To add or remove elements, use the methods provided by
   * the List interface (that's why there is no need for a setter
   * method).</p>
   *
   * @return a list of Field elements.
   */
  net.sourceforge.czt.base.ast.ListTerm getChanFields();

  /**
   * Returns the CommType element.
   *
   * @return the CommType element.
   */
  CommType getCommType();

  /**
   * Sets the CommType element.
   *
   * @param commType   the CommType element.
   * @see #getCommType
   */
  void setCommType(CommType commType);

  /**
   * Returns the MultiSych element.
   *
   * @return the MultiSych element.
   */
  Integer getMultiSych();

  /**
   * Sets the MultiSych element.
   *
   * @param multiSych   the MultiSych element.
   * @see #getMultiSych
   */
  void setMultiSych(Integer multiSych);
}
