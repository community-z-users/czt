
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.ast;
import net.sourceforge.czt.z.ast.*;

/**
 * <p>The object factory for the AST.
 * This interface contains factory methods
 * for each concrete Z term.</p>
 *
 * <p>This object factory allows the programmer to programatically
 * construct new instances of concrete Z terms.
 * There is a factory method that does not require arguments
 * (called default factory method)
 * and a factory method where all the children (except annotations)
 * of that particular Z term can be provided.</p>
 *
 * @author Gnast version 0.1
 */
public interface CircusFactory
  extends net.sourceforge.czt.z.ast.ZFactory
{
  /**
   * Creates an instance of {@link CSExprSet}.
   *
   * @return the new instance of CSExprSet.
   */
  CSExprSet createCSExprSet();

  /**
   * Creates an instance of {@link CSExprSet} with the given children.
   *
   * @return the new instance of CSExprSet.
   */
  CSExprSet createCSExprSet(java.util.List expr, java.util.List refName);

  /**
   * Creates an instance of {@link IdxRepParallelCompProc}.
   *
   * @return the new instance of IdxRepParallelCompProc.
   */
  IdxRepParallelCompProc createIdxRepParallelCompProc();

  /**
   * Creates an instance of {@link IdxRepParallelCompProc} with the given children.
   *
   * @return the new instance of IdxRepParallelCompProc.
   */
  IdxRepParallelCompProc createIdxRepParallelCompProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl, CSExpr cSExpr);

  /**
   * Creates an instance of {@link RepExtChAction}.
   *
   * @return the new instance of RepExtChAction.
   */
  RepExtChAction createRepExtChAction();

  /**
   * Creates an instance of {@link RepExtChAction} with the given children.
   *
   * @return the new instance of RepExtChAction.
   */
  RepExtChAction createRepExtChAction(ActionDef actionDef, net.sourceforge.czt.z.ast.VarDecl varDecl);

  /**
   * Creates an instance of {@link GuardedAction}.
   *
   * @return the new instance of GuardedAction.
   */
  GuardedAction createGuardedAction();

  /**
   * Creates an instance of {@link GuardedAction} with the given children.
   *
   * @return the new instance of GuardedAction.
   */
  GuardedAction createGuardedAction(ActionDef actionDef, net.sourceforge.czt.z.ast.Pred pred);

  /**
   * Creates an instance of {@link ExtChoiceProc}.
   *
   * @return the new instance of ExtChoiceProc.
   */
  ExtChoiceProc createExtChoiceProc();

  /**
   * Creates an instance of {@link ExtChoiceProc} with the given children.
   *
   * @return the new instance of ExtChoiceProc.
   */
  ExtChoiceProc createExtChoiceProc(ProcDef leftProc, ProcDef rightProc);

  /**
   * Creates an instance of {@link ParallelCompAction}.
   *
   * @return the new instance of ParallelCompAction.
   */
  ParallelCompAction createParallelCompAction();

  /**
   * Creates an instance of {@link ParallelCompAction} with the given children.
   *
   * @return the new instance of ParallelCompAction.
   */
  ParallelCompAction createParallelCompAction(ActionDef leftAction, ActionDef rightAction, NSExpr leftNS, NSExpr rightNS, CSExpr cSExpr);

  /**
   * Creates an instance of {@link CallProc}.
   *
   * @return the new instance of CallProc.
   */
  CallProc createCallProc();

  /**
   * Creates an instance of {@link CallProc} with the given children.
   *
   * @return the new instance of CallProc.
   */
  CallProc createCallProc(net.sourceforge.czt.z.ast.RefName refName);

  /**
   * Creates an instance of {@link CommMixed}.
   *
   * @return the new instance of CommMixed.
   */
  CommMixed createCommMixed();

  /**
   * Creates an instance of {@link CommMixed} with the given children.
   *
   * @return the new instance of CommMixed.
   */
  CommMixed createCommMixed(java.util.List commIn, java.util.List commOut);

  /**
   * Creates an instance of {@link NSExprUnion}.
   *
   * @return the new instance of NSExprUnion.
   */
  NSExprUnion createNSExprUnion();

  /**
   * Creates an instance of {@link MuAction}.
   *
   * @return the new instance of MuAction.
   */
  MuAction createMuAction();

  /**
   * Creates an instance of {@link MuAction} with the given children.
   *
   * @return the new instance of MuAction.
   */
  MuAction createMuAction(ActionDef actionDef, net.sourceforge.czt.z.ast.DeclName declName);

  /**
   * Creates an instance of {@link ChannelDecl}.
   *
   * @return the new instance of ChannelDecl.
   */
  ChannelDecl createChannelDecl();

  /**
   * Creates an instance of {@link ChannelDecl} with the given children.
   *
   * @return the new instance of ChannelDecl.
   */
  ChannelDecl createChannelDecl(net.sourceforge.czt.z.ast.VarDecl varDecl);

  /**
   * Creates an instance of {@link HideAction}.
   *
   * @return the new instance of HideAction.
   */
  HideAction createHideAction();

  /**
   * Creates an instance of {@link HideAction} with the given children.
   *
   * @return the new instance of HideAction.
   */
  HideAction createHideAction(ActionDef actionDef, CSExpr cSExpr);

  /**
   * Creates an instance of {@link NSDecl}.
   *
   * @return the new instance of NSDecl.
   */
  NSDecl createNSDecl();

  /**
   * Creates an instance of {@link NSDecl} with the given children.
   *
   * @return the new instance of NSDecl.
   */
  NSDecl createNSDecl(net.sourceforge.czt.z.ast.DeclName declName, NSExpr nSExpr);

  /**
   * Creates an instance of {@link IfGuardedCmd}.
   *
   * @return the new instance of IfGuardedCmd.
   */
  IfGuardedCmd createIfGuardedCmd();

  /**
   * Creates an instance of {@link IfGuardedCmd} with the given children.
   *
   * @return the new instance of IfGuardedCmd.
   */
  IfGuardedCmd createIfGuardedCmd(java.util.List guardedActions);

  /**
   * Creates an instance of {@link CommOut}.
   *
   * @return the new instance of CommOut.
   */
  CommOut createCommOut();

  /**
   * Creates an instance of {@link CommOut} with the given children.
   *
   * @return the new instance of CommOut.
   */
  CommOut createCommOut(net.sourceforge.czt.z.ast.Expr expr);

  /**
   * Creates an instance of {@link NSExprInter}.
   *
   * @return the new instance of NSExprInter.
   */
  NSExprInter createNSExprInter();

  /**
   * Creates an instance of {@link ChaosAction}.
   *
   * @return the new instance of ChaosAction.
   */
  ChaosAction createChaosAction();

  /**
   * Creates an instance of {@link AssignmentCmd}.
   *
   * @return the new instance of AssignmentCmd.
   */
  AssignmentCmd createAssignmentCmd();

  /**
   * Creates an instance of {@link AssignmentCmd} with the given children.
   *
   * @return the new instance of AssignmentCmd.
   */
  AssignmentCmd createAssignmentCmd(java.util.List assignmentPair);

  /**
   * Creates an instance of {@link IdxRepSeqCompProc}.
   *
   * @return the new instance of IdxRepSeqCompProc.
   */
  IdxRepSeqCompProc createIdxRepSeqCompProc();

  /**
   * Creates an instance of {@link IdxRepSeqCompProc} with the given children.
   *
   * @return the new instance of IdxRepSeqCompProc.
   */
  IdxRepSeqCompProc createIdxRepSeqCompProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl);

  /**
   * Creates an instance of {@link CSExprInter}.
   *
   * @return the new instance of CSExprInter.
   */
  CSExprInter createCSExprInter();

  /**
   * Creates an instance of {@link FormalParamProc}.
   *
   * @return the new instance of FormalParamProc.
   */
  FormalParamProc createFormalParamProc();

  /**
   * Creates an instance of {@link FormalParamProc} with the given children.
   *
   * @return the new instance of FormalParamProc.
   */
  FormalParamProc createFormalParamProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl);

  /**
   * Creates an instance of {@link SkipAction}.
   *
   * @return the new instance of SkipAction.
   */
  SkipAction createSkipAction();

  /**
   * Creates an instance of {@link RepInterleaveProc}.
   *
   * @return the new instance of RepInterleaveProc.
   */
  RepInterleaveProc createRepInterleaveProc();

  /**
   * Creates an instance of {@link RepInterleaveProc} with the given children.
   *
   * @return the new instance of RepInterleaveProc.
   */
  RepInterleaveProc createRepInterleaveProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl);

  /**
   * Creates an instance of {@link RepSeqCompProc}.
   *
   * @return the new instance of RepSeqCompProc.
   */
  RepSeqCompProc createRepSeqCompProc();

  /**
   * Creates an instance of {@link RepSeqCompProc} with the given children.
   *
   * @return the new instance of RepSeqCompProc.
   */
  RepSeqCompProc createRepSeqCompProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl);

  /**
   * Creates an instance of {@link RepExtChProc}.
   *
   * @return the new instance of RepExtChProc.
   */
  RepExtChProc createRepExtChProc();

  /**
   * Creates an instance of {@link RepExtChProc} with the given children.
   *
   * @return the new instance of RepExtChProc.
   */
  RepExtChProc createRepExtChProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl);

  /**
   * Creates an instance of {@link SpecStmtCmd}.
   *
   * @return the new instance of SpecStmtCmd.
   */
  SpecStmtCmd createSpecStmtCmd();

  /**
   * Creates an instance of {@link SpecStmtCmd} with the given children.
   *
   * @return the new instance of SpecStmtCmd.
   */
  SpecStmtCmd createSpecStmtCmd(java.util.List frame, net.sourceforge.czt.z.ast.Pred pre, net.sourceforge.czt.z.ast.Pred post);

  /**
   * Creates an instance of {@link CallAction}.
   *
   * @return the new instance of CallAction.
   */
  CallAction createCallAction();

  /**
   * Creates an instance of {@link CallAction} with the given children.
   *
   * @return the new instance of CallAction.
   */
  CallAction createCallAction(net.sourceforge.czt.z.ast.RefName refName);

  /**
   * Creates an instance of {@link IdxRepInterleaveProc}.
   *
   * @return the new instance of IdxRepInterleaveProc.
   */
  IdxRepInterleaveProc createIdxRepInterleaveProc();

  /**
   * Creates an instance of {@link IdxRepInterleaveProc} with the given children.
   *
   * @return the new instance of IdxRepInterleaveProc.
   */
  IdxRepInterleaveProc createIdxRepInterleaveProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl);

  /**
   * Creates an instance of {@link ProcZPara}.
   *
   * @return the new instance of ProcZPara.
   */
  ProcZPara createProcZPara();

  /**
   * Creates an instance of {@link ProcZPara} with the given children.
   *
   * @return the new instance of ProcZPara.
   */
  ProcZPara createProcZPara(net.sourceforge.czt.z.ast.Para para);

  /**
   * Creates an instance of {@link ProcDesc}.
   *
   * @return the new instance of ProcDesc.
   */
  ProcDesc createProcDesc();

  /**
   * Creates an instance of {@link ProcDesc} with the given children.
   *
   * @return the new instance of ProcDesc.
   */
  ProcDesc createProcDesc(SchemaAction stateSchemaAction, java.util.List procPara, java.util.List actionDef);

  /**
   * Creates an instance of {@link ProcDecl}.
   *
   * @return the new instance of ProcDecl.
   */
  ProcDecl createProcDecl();

  /**
   * Creates an instance of {@link ProcDecl} with the given children.
   *
   * @return the new instance of ProcDecl.
   */
  ProcDecl createProcDecl(net.sourceforge.czt.z.ast.DeclName declName, ProcDef procDef);

  /**
   * Creates an instance of {@link RepIntChProc}.
   *
   * @return the new instance of RepIntChProc.
   */
  RepIntChProc createRepIntChProc();

  /**
   * Creates an instance of {@link RepIntChProc} with the given children.
   *
   * @return the new instance of RepIntChProc.
   */
  RepIntChProc createRepIntChProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl);

  /**
   * Creates an instance of {@link CircusSect}.
   *
   * @return the new instance of CircusSect.
   */
  CircusSect createCircusSect();

  /**
   * Creates an instance of {@link CircusSect} with the given children.
   *
   * @return the new instance of CircusSect.
   */
  CircusSect createCircusSect(String name, java.util.List parent, java.util.List circusPara);

  /**
   * Creates an instance of {@link CSExprDiff}.
   *
   * @return the new instance of CSExprDiff.
   */
  CSExprDiff createCSExprDiff();

  /**
   * Creates an instance of {@link InterleaveProc}.
   *
   * @return the new instance of InterleaveProc.
   */
  InterleaveProc createInterleaveProc();

  /**
   * Creates an instance of {@link InterleaveProc} with the given children.
   *
   * @return the new instance of InterleaveProc.
   */
  InterleaveProc createInterleaveProc(ProcDef leftProc, ProcDef rightProc);

  /**
   * Creates an instance of {@link ParallelCompProc}.
   *
   * @return the new instance of ParallelCompProc.
   */
  ParallelCompProc createParallelCompProc();

  /**
   * Creates an instance of {@link ParallelCompProc} with the given children.
   *
   * @return the new instance of ParallelCompProc.
   */
  ParallelCompProc createParallelCompProc(ProcDef leftProc, ProcDef rightProc, CSExpr cSExpr);

  /**
   * Creates an instance of {@link SeqCompAction}.
   *
   * @return the new instance of SeqCompAction.
   */
  SeqCompAction createSeqCompAction();

  /**
   * Creates an instance of {@link SeqCompAction} with the given children.
   *
   * @return the new instance of SeqCompAction.
   */
  SeqCompAction createSeqCompAction(ActionDef leftAction, ActionDef rightAction);

  /**
   * Creates an instance of {@link NSExprSet}.
   *
   * @return the new instance of NSExprSet.
   */
  NSExprSet createNSExprSet();

  /**
   * Creates an instance of {@link NSExprSet} with the given children.
   *
   * @return the new instance of NSExprSet.
   */
  NSExprSet createNSExprSet(java.util.List expr, java.util.List refName);

  /**
   * Creates an instance of {@link RepIntChAction}.
   *
   * @return the new instance of RepIntChAction.
   */
  RepIntChAction createRepIntChAction();

  /**
   * Creates an instance of {@link RepIntChAction} with the given children.
   *
   * @return the new instance of RepIntChAction.
   */
  RepIntChAction createRepIntChAction(ActionDef actionDef, net.sourceforge.czt.z.ast.VarDecl varDecl);

  /**
   * Creates an instance of {@link SchemaAction}.
   *
   * @return the new instance of SchemaAction.
   */
  SchemaAction createSchemaAction();

  /**
   * Creates an instance of {@link SchemaAction} with the given children.
   *
   * @return the new instance of SchemaAction.
   */
  SchemaAction createSchemaAction(net.sourceforge.czt.z.ast.SchExpr schExpr);

  /**
   * Creates an instance of {@link ActualParamProc}.
   *
   * @return the new instance of ActualParamProc.
   */
  ActualParamProc createActualParamProc();

  /**
   * Creates an instance of {@link ActualParamProc} with the given children.
   *
   * @return the new instance of ActualParamProc.
   */
  ActualParamProc createActualParamProc(ProcDef procDef, java.util.List expr);

  /**
   * Creates an instance of {@link IntChoiceAction}.
   *
   * @return the new instance of IntChoiceAction.
   */
  IntChoiceAction createIntChoiceAction();

  /**
   * Creates an instance of {@link IntChoiceAction} with the given children.
   *
   * @return the new instance of IntChoiceAction.
   */
  IntChoiceAction createIntChoiceAction(ActionDef leftAction, ActionDef rightAction);

  /**
   * Creates an instance of {@link RepParallelCompProc}.
   *
   * @return the new instance of RepParallelCompProc.
   */
  RepParallelCompProc createRepParallelCompProc();

  /**
   * Creates an instance of {@link RepParallelCompProc} with the given children.
   *
   * @return the new instance of RepParallelCompProc.
   */
  RepParallelCompProc createRepParallelCompProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl, CSExpr cSExpr);

  /**
   * Creates an instance of {@link InterleaveAction}.
   *
   * @return the new instance of InterleaveAction.
   */
  InterleaveAction createInterleaveAction();

  /**
   * Creates an instance of {@link InterleaveAction} with the given children.
   *
   * @return the new instance of InterleaveAction.
   */
  InterleaveAction createInterleaveAction(ActionDef leftAction, ActionDef rightAction, NSExpr leftNS, NSExpr rightNS);

  /**
   * Creates an instance of {@link CircusZPara}.
   *
   * @return the new instance of CircusZPara.
   */
  CircusZPara createCircusZPara();

  /**
   * Creates an instance of {@link CircusZPara} with the given children.
   *
   * @return the new instance of CircusZPara.
   */
  CircusZPara createCircusZPara(net.sourceforge.czt.z.ast.Para para);

  /**
   * Creates an instance of {@link CSExprRef}.
   *
   * @return the new instance of CSExprRef.
   */
  CSExprRef createCSExprRef();

  /**
   * Creates an instance of {@link CSExprRef} with the given children.
   *
   * @return the new instance of CSExprRef.
   */
  CSExprRef createCSExprRef(java.util.List expr, net.sourceforge.czt.z.ast.RefName refName);

  /**
   * Creates an instance of {@link IdxRepIntChProc}.
   *
   * @return the new instance of IdxRepIntChProc.
   */
  IdxRepIntChProc createIdxRepIntChProc();

  /**
   * Creates an instance of {@link IdxRepIntChProc} with the given children.
   *
   * @return the new instance of IdxRepIntChProc.
   */
  IdxRepIntChProc createIdxRepIntChProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl);

  /**
   * Creates an instance of {@link RepInterleaveAction}.
   *
   * @return the new instance of RepInterleaveAction.
   */
  RepInterleaveAction createRepInterleaveAction();

  /**
   * Creates an instance of {@link RepInterleaveAction} with the given children.
   *
   * @return the new instance of RepInterleaveAction.
   */
  RepInterleaveAction createRepInterleaveAction(ActionDef actionDef, net.sourceforge.czt.z.ast.VarDecl varDecl, NSExpr leftNS, NSExpr rightNS);

  /**
   * Creates an instance of {@link CSExprUnion}.
   *
   * @return the new instance of CSExprUnion.
   */
  CSExprUnion createCSExprUnion();

  /**
   * Creates an instance of {@link FormalParamAction}.
   *
   * @return the new instance of FormalParamAction.
   */
  FormalParamAction createFormalParamAction();

  /**
   * Creates an instance of {@link FormalParamAction} with the given children.
   *
   * @return the new instance of FormalParamAction.
   */
  FormalParamAction createFormalParamAction(ActionDef actionDef, net.sourceforge.czt.z.ast.VarDecl varDecl);

  /**
   * Creates an instance of {@link RepSeqCompAction}.
   *
   * @return the new instance of RepSeqCompAction.
   */
  RepSeqCompAction createRepSeqCompAction();

  /**
   * Creates an instance of {@link RepSeqCompAction} with the given children.
   *
   * @return the new instance of RepSeqCompAction.
   */
  RepSeqCompAction createRepSeqCompAction(ActionDef actionDef, net.sourceforge.czt.z.ast.VarDecl varDecl);

  /**
   * Creates an instance of {@link NSExprRef}.
   *
   * @return the new instance of NSExprRef.
   */
  NSExprRef createNSExprRef();

  /**
   * Creates an instance of {@link NSExprRef} with the given children.
   *
   * @return the new instance of NSExprRef.
   */
  NSExprRef createNSExprRef(java.util.List expr, net.sourceforge.czt.z.ast.RefName refName);

  /**
   * Creates an instance of {@link IntChoiceProc}.
   *
   * @return the new instance of IntChoiceProc.
   */
  IntChoiceProc createIntChoiceProc();

  /**
   * Creates an instance of {@link IntChoiceProc} with the given children.
   *
   * @return the new instance of IntChoiceProc.
   */
  IntChoiceProc createIntChoiceProc(ProcDef leftProc, ProcDef rightProc);

  /**
   * Creates an instance of {@link RepParallelCompAction}.
   *
   * @return the new instance of RepParallelCompAction.
   */
  RepParallelCompAction createRepParallelCompAction();

  /**
   * Creates an instance of {@link RepParallelCompAction} with the given children.
   *
   * @return the new instance of RepParallelCompAction.
   */
  RepParallelCompAction createRepParallelCompAction(ActionDef actionDef, net.sourceforge.czt.z.ast.VarDecl varDecl, NSExpr leftNS, NSExpr rightNS, CSExpr cSExpr);

  /**
   * Creates an instance of {@link StopAction}.
   *
   * @return the new instance of StopAction.
   */
  StopAction createStopAction();

  /**
   * Creates an instance of {@link ExtChoiceAction}.
   *
   * @return the new instance of ExtChoiceAction.
   */
  ExtChoiceAction createExtChoiceAction();

  /**
   * Creates an instance of {@link ExtChoiceAction} with the given children.
   *
   * @return the new instance of ExtChoiceAction.
   */
  ExtChoiceAction createExtChoiceAction(ActionDef leftAction, ActionDef rightAction);

  /**
   * Creates an instance of {@link FormalGenProc}.
   *
   * @return the new instance of FormalGenProc.
   */
  FormalGenProc createFormalGenProc();

  /**
   * Creates an instance of {@link FormalGenProc} with the given children.
   *
   * @return the new instance of FormalGenProc.
   */
  FormalGenProc createFormalGenProc(ProcDef procDef, java.util.List formalGenTypes);

  /**
   * Creates an instance of {@link ActualGenProc}.
   *
   * @return the new instance of ActualGenProc.
   */
  ActualGenProc createActualGenProc();

  /**
   * Creates an instance of {@link ActualGenProc} with the given children.
   *
   * @return the new instance of ActualGenProc.
   */
  ActualGenProc createActualGenProc(ProcDef procDef, java.util.List expr);

  /**
   * Creates an instance of {@link HideProc}.
   *
   * @return the new instance of HideProc.
   */
  HideProc createHideProc();

  /**
   * Creates an instance of {@link HideProc} with the given children.
   *
   * @return the new instance of HideProc.
   */
  HideProc createHideProc(ProcDef procDef, CSExpr cSExpr);

  /**
   * Creates an instance of {@link SeqCompProc}.
   *
   * @return the new instance of SeqCompProc.
   */
  SeqCompProc createSeqCompProc();

  /**
   * Creates an instance of {@link SeqCompProc} with the given children.
   *
   * @return the new instance of SeqCompProc.
   */
  SeqCompProc createSeqCompProc(ProcDef leftProc, ProcDef rightProc);

  /**
   * Creates an instance of {@link VarDeclCmd}.
   *
   * @return the new instance of VarDeclCmd.
   */
  VarDeclCmd createVarDeclCmd();

  /**
   * Creates an instance of {@link VarDeclCmd} with the given children.
   *
   * @return the new instance of VarDeclCmd.
   */
  VarDeclCmd createVarDeclCmd(net.sourceforge.czt.z.ast.VarDecl varDecl, ActionDef actionDef);

  /**
   * Creates an instance of {@link IdxRepExtChProc}.
   *
   * @return the new instance of IdxRepExtChProc.
   */
  IdxRepExtChProc createIdxRepExtChProc();

  /**
   * Creates an instance of {@link IdxRepExtChProc} with the given children.
   *
   * @return the new instance of IdxRepExtChProc.
   */
  IdxRepExtChProc createIdxRepExtChProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl);

  /**
   * Creates an instance of {@link PrefixingAction}.
   *
   * @return the new instance of PrefixingAction.
   */
  PrefixingAction createPrefixingAction();

  /**
   * Creates an instance of {@link PrefixingAction} with the given children.
   *
   * @return the new instance of PrefixingAction.
   */
  PrefixingAction createPrefixingAction(ActionDef actionDef, Comm comm);

  /**
   * Creates an instance of {@link IntantiationProc}.
   *
   * @return the new instance of IntantiationProc.
   */
  IntantiationProc createIntantiationProc();

  /**
   * Creates an instance of {@link IntantiationProc} with the given children.
   *
   * @return the new instance of IntantiationProc.
   */
  IntantiationProc createIntantiationProc(ProcDef procDef, java.util.List expr);

  /**
   * Creates an instance of {@link Comm}.
   *
   * @return the new instance of Comm.
   */
  Comm createComm();

  /**
   * Creates an instance of {@link Comm} with the given children.
   *
   * @return the new instance of Comm.
   */
  Comm createComm(net.sourceforge.czt.z.ast.RefName refName, java.util.List commParam, CommType commType, Integer multiSych);

  /**
   * Creates an instance of {@link CSDecl}.
   *
   * @return the new instance of CSDecl.
   */
  CSDecl createCSDecl();

  /**
   * Creates an instance of {@link CSDecl} with the given children.
   *
   * @return the new instance of CSDecl.
   */
  CSDecl createCSDecl(net.sourceforge.czt.z.ast.DeclName declName, CSExpr cSExpr);

  /**
   * Creates an instance of {@link AssignmentPair}.
   *
   * @return the new instance of AssignmentPair.
   */
  AssignmentPair createAssignmentPair();

  /**
   * Creates an instance of {@link AssignmentPair} with the given children.
   *
   * @return the new instance of AssignmentPair.
   */
  AssignmentPair createAssignmentPair(net.sourceforge.czt.z.ast.RefName lHS, net.sourceforge.czt.z.ast.Expr rHS);

  /**
   * Creates an instance of {@link NSExprDiff}.
   *
   * @return the new instance of NSExprDiff.
   */
  NSExprDiff createNSExprDiff();

  /**
   * Creates an instance of {@link RenameProc}.
   *
   * @return the new instance of RenameProc.
   */
  RenameProc createRenameProc();

  /**
   * Creates an instance of {@link RenameProc} with the given children.
   *
   * @return the new instance of RenameProc.
   */
  RenameProc createRenameProc(ProcDef procDef, java.util.List oldNames, java.util.List newNames);

  /**
   * Creates an instance of {@link ActionDecl}.
   *
   * @return the new instance of ActionDecl.
   */
  ActionDecl createActionDecl();

  /**
   * Creates an instance of {@link ActionDecl} with the given children.
   *
   * @return the new instance of ActionDecl.
   */
  ActionDecl createActionDecl(net.sourceforge.czt.z.ast.DeclName declName, ActionDef actionDef);

  /**
   * Creates an instance of {@link ActualParamAction}.
   *
   * @return the new instance of ActualParamAction.
   */
  ActualParamAction createActualParamAction();

  /**
   * Creates an instance of {@link ActualParamAction} with the given children.
   *
   * @return the new instance of ActualParamAction.
   */
  ActualParamAction createActualParamAction(ActionDef actionDef, java.util.List expr);

  /**
   * Creates an instance of {@link CommIn}.
   *
   * @return the new instance of CommIn.
   */
  CommIn createCommIn();

  /**
   * Creates an instance of {@link CommIn} with the given children.
   *
   * @return the new instance of CommIn.
   */
  CommIn createCommIn(net.sourceforge.czt.z.ast.RefName refName, net.sourceforge.czt.z.ast.Pred pred);

  /**
   * Creates an instance of {@link IndexedProc}.
   *
   * @return the new instance of IndexedProc.
   */
  IndexedProc createIndexedProc();

  /**
   * Creates an instance of {@link IndexedProc} with the given children.
   *
   * @return the new instance of IndexedProc.
   */
  IndexedProc createIndexedProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl);

  /**
   * Creates an instance of {@link ChannelDeclSExpr}.
   *
   * @return the new instance of ChannelDeclSExpr.
   */
  ChannelDeclSExpr createChannelDeclSExpr();

  /**
   * Creates an instance of {@link ChannelDeclSExpr} with the given children.
   *
   * @return the new instance of ChannelDeclSExpr.
   */
  ChannelDeclSExpr createChannelDeclSExpr(net.sourceforge.czt.z.ast.SchExpr schExpr);

}
