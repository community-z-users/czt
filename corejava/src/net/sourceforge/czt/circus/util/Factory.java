
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.util;

import net.sourceforge.czt.circus.ast.*;
import net.sourceforge.czt.z.ast.*;

/**
 * <p>An object factory for the AST.
 *
 * <p>This object factory allows the programmer
 * to programatically construct new instances of concrete Z terms.
 * </p>
 *
 * @author Gnast version 0.1
 */
public class Factory
  extends net.sourceforge.czt.z.util.Factory
{
  private net.sourceforge.czt.circus.ast.CircusFactory factory_ =
    new net.sourceforge.czt.circus.impl.CircusFactoryImpl();

  /**
   * Creates a new convenience factory that uses the standard factory
   * implementation for creating AST terms.
   */
  public Factory()
  {
    super();
  }

  /**
   * Creates a new convenience factory that uses the given base factory
   * for creating AST terms.
   */
  public Factory(net.sourceforge.czt.circus.ast.CircusFactory factory)
  {
    super(factory);
    factory_ = factory;
  }

  /**
   * Creates an instance of {@link SeqActionR}.
   *
   * @return the new instance of SeqActionR.
   */
  public SeqActionR createSeqActionR()
  {
    return factory_.createSeqActionR();
  }

  /**
   * Creates an instance of {@link SeqActionR} with the given children.
   *
   * @return the new instance of SeqActionR.
   */
  public SeqActionR createSeqActionR(Action action, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createSeqActionR(action, varDecl);
  }

  /**
   * Creates an instance of {@link SchChannelPara}.
   *
   * @return the new instance of SchChannelPara.
   */
  public SchChannelPara createSchChannelPara()
  {
    return factory_.createSchChannelPara();
  }

  /**
   * Creates an instance of {@link SchChannelPara} with the given children.
   *
   * @return the new instance of SchChannelPara.
   */
  public SchChannelPara createSchChannelPara(net.sourceforge.czt.z.ast.SchExpr schExpr)
  {
    return factory_.createSchChannelPara(schExpr);
  }

  /**
   * Creates an instance of {@link InterleaveProcessRI}.
   *
   * @return the new instance of InterleaveProcessRI.
   */
  public InterleaveProcessRI createInterleaveProcessRI()
  {
    return factory_.createInterleaveProcessRI();
  }

  /**
   * Creates an instance of {@link InterleaveProcessRI} with the given children.
   *
   * @return the new instance of InterleaveProcessRI.
   */
  public InterleaveProcessRI createInterleaveProcessRI(ProcessDef processDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createInterleaveProcessRI(processDef, varDecl);
  }

  /**
   * Creates an instance of {@link InterleaveActionR}.
   *
   * @return the new instance of InterleaveActionR.
   */
  public InterleaveActionR createInterleaveActionR()
  {
    return factory_.createInterleaveActionR();
  }

  /**
   * Creates an instance of {@link InterleaveActionR} with the given children.
   *
   * @return the new instance of InterleaveActionR.
   */
  public InterleaveActionR createInterleaveActionR(Action action, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createInterleaveActionR(action, varDecl);
  }

  /**
   * Creates an instance of {@link GuardedAction}.
   *
   * @return the new instance of GuardedAction.
   */
  public GuardedAction createGuardedAction()
  {
    return factory_.createGuardedAction();
  }

  /**
   * Creates an instance of {@link GuardedAction} with the given children.
   *
   * @return the new instance of GuardedAction.
   */
  public GuardedAction createGuardedAction(Action action, net.sourceforge.czt.z.ast.Pred pred)
  {
    return factory_.createGuardedAction(action, pred);
  }

  /**
   * Creates an instance of {@link InstantiationProcess}.
   *
   * @return the new instance of InstantiationProcess.
   */
  public InstantiationProcess createInstantiationProcess()
  {
    return factory_.createInstantiationProcess();
  }

  /**
   * Creates an instance of {@link InstantiationProcess} with the given children.
   *
   * @return the new instance of InstantiationProcess.
   */
  public InstantiationProcess createInstantiationProcess(ProcessDef processDef, java.util.List expr)
  {
    return factory_.createInstantiationProcess(processDef, expr);
  }

  /**
   * Creates an instance of {@link FormalParamProcess}.
   *
   * @return the new instance of FormalParamProcess.
   */
  public FormalParamProcess createFormalParamProcess()
  {
    return factory_.createFormalParamProcess();
  }

  /**
   * Creates an instance of {@link FormalParamProcess} with the given children.
   *
   * @return the new instance of FormalParamProcess.
   */
  public FormalParamProcess createFormalParamProcess(ProcessDef processDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createFormalParamProcess(processDef, varDecl);
  }

  /**
   * Creates an instance of {@link ParallelAction}.
   *
   * @return the new instance of ParallelAction.
   */
  public ParallelAction createParallelAction()
  {
    return factory_.createParallelAction();
  }

  /**
   * Creates an instance of {@link ParallelAction} with the given children.
   *
   * @return the new instance of ParallelAction.
   */
  public ParallelAction createParallelAction(Action leftAction, Action rightAction, NameSet leftNameSet, NameSet rightNameSet, ChannelSet channelSet)
  {
    return factory_.createParallelAction(leftAction, rightAction, leftNameSet, rightNameSet, channelSet);
  }

  /**
   * Creates an instance of {@link SpecStmtCommand}.
   *
   * @return the new instance of SpecStmtCommand.
   */
  public SpecStmtCommand createSpecStmtCommand()
  {
    return factory_.createSpecStmtCommand();
  }

  /**
   * Creates an instance of {@link SpecStmtCommand} with the given children.
   *
   * @return the new instance of SpecStmtCommand.
   */
  public SpecStmtCommand createSpecStmtCommand(java.util.List frame, net.sourceforge.czt.z.ast.Pred pre, net.sourceforge.czt.z.ast.Pred post)
  {
    return factory_.createSpecStmtCommand(frame, pre, post);
  }

  /**
   * Creates an instance of {@link SeqProcessR}.
   *
   * @return the new instance of SeqProcessR.
   */
  public SeqProcessR createSeqProcessR()
  {
    return factory_.createSeqProcessR();
  }

  /**
   * Creates an instance of {@link SeqProcessR} with the given children.
   *
   * @return the new instance of SeqProcessR.
   */
  public SeqProcessR createSeqProcessR(ProcessDef processDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createSeqProcessR(processDef, varDecl);
  }

  /**
   * Creates an instance of {@link MuAction}.
   *
   * @return the new instance of MuAction.
   */
  public MuAction createMuAction()
  {
    return factory_.createMuAction();
  }

  /**
   * Creates an instance of {@link MuAction} with the given children.
   *
   * @return the new instance of MuAction.
   */
  public MuAction createMuAction(Action action, net.sourceforge.czt.z.ast.DeclName declName)
  {
    return factory_.createMuAction(action, declName);
  }

  /**
   * Creates an instance of {@link HideAction}.
   *
   * @return the new instance of HideAction.
   */
  public HideAction createHideAction()
  {
    return factory_.createHideAction();
  }

  /**
   * Creates an instance of {@link HideAction} with the given children.
   *
   * @return the new instance of HideAction.
   */
  public HideAction createHideAction(Action action, ChannelSet channelSet)
  {
    return factory_.createHideAction(action, channelSet);
  }

  /**
   * Creates an instance of {@link ChaosAction}.
   *
   * @return the new instance of ChaosAction.
   */
  public ChaosAction createChaosAction()
  {
    return factory_.createChaosAction();
  }

  /**
   * Creates an instance of {@link ProcessPara}.
   *
   * @return the new instance of ProcessPara.
   */
  public ProcessPara createProcessPara()
  {
    return factory_.createProcessPara();
  }

  /**
   * Creates an instance of {@link ProcessPara} with the given children.
   *
   * @return the new instance of ProcessPara.
   */
  public ProcessPara createProcessPara(net.sourceforge.czt.z.ast.DeclName declName, ProcessDef processDef)
  {
    return factory_.createProcessPara(declName, processDef);
  }

  /**
   * Creates an instance of {@link SeqAction}.
   *
   * @return the new instance of SeqAction.
   */
  public SeqAction createSeqAction()
  {
    return factory_.createSeqAction();
  }

  /**
   * Creates an instance of {@link SeqAction} with the given children.
   *
   * @return the new instance of SeqAction.
   */
  public SeqAction createSeqAction(Action leftAction, Action rightAction)
  {
    return factory_.createSeqAction(leftAction, rightAction);
  }

  /**
   * Creates an instance of {@link SkipAction}.
   *
   * @return the new instance of SkipAction.
   */
  public SkipAction createSkipAction()
  {
    return factory_.createSkipAction();
  }

  /**
   * Creates an instance of {@link ActualGenProcess}.
   *
   * @return the new instance of ActualGenProcess.
   */
  public ActualGenProcess createActualGenProcess()
  {
    return factory_.createActualGenProcess();
  }

  /**
   * Creates an instance of {@link ActualGenProcess} with the given children.
   *
   * @return the new instance of ActualGenProcess.
   */
  public ActualGenProcess createActualGenProcess(ProcessDef processDef, java.util.List expr)
  {
    return factory_.createActualGenProcess(processDef, expr);
  }

  /**
   * Creates an instance of {@link CallAction}.
   *
   * @return the new instance of CallAction.
   */
  public CallAction createCallAction()
  {
    return factory_.createCallAction();
  }

  /**
   * Creates an instance of {@link CallAction} with the given children.
   *
   * @return the new instance of CallAction.
   */
  public CallAction createCallAction(net.sourceforge.czt.z.ast.RefName refName)
  {
    return factory_.createCallAction(refName);
  }

  /**
   * Creates an instance of {@link ChannelSetPara}.
   *
   * @return the new instance of ChannelSetPara.
   */
  public ChannelSetPara createChannelSetPara()
  {
    return factory_.createChannelSetPara();
  }

  /**
   * Creates an instance of {@link ChannelSetPara} with the given children.
   *
   * @return the new instance of ChannelSetPara.
   */
  public ChannelSetPara createChannelSetPara(net.sourceforge.czt.z.ast.DeclName declName, ChannelSet channelSet)
  {
    return factory_.createChannelSetPara(declName, channelSet);
  }

  /**
   * Creates an instance of {@link IntChoiceProcessR}.
   *
   * @return the new instance of IntChoiceProcessR.
   */
  public IntChoiceProcessR createIntChoiceProcessR()
  {
    return factory_.createIntChoiceProcessR();
  }

  /**
   * Creates an instance of {@link IntChoiceProcessR} with the given children.
   *
   * @return the new instance of IntChoiceProcessR.
   */
  public IntChoiceProcessR createIntChoiceProcessR(ProcessDef processDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createIntChoiceProcessR(processDef, varDecl);
  }

  /**
   * Creates an instance of {@link IntChoiceActionR}.
   *
   * @return the new instance of IntChoiceActionR.
   */
  public IntChoiceActionR createIntChoiceActionR()
  {
    return factory_.createIntChoiceActionR();
  }

  /**
   * Creates an instance of {@link IntChoiceActionR} with the given children.
   *
   * @return the new instance of IntChoiceActionR.
   */
  public IntChoiceActionR createIntChoiceActionR(Action action, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createIntChoiceActionR(action, varDecl);
  }

  /**
   * Creates an instance of {@link DifferenceChannelSet}.
   *
   * @return the new instance of DifferenceChannelSet.
   */
  public DifferenceChannelSet createDifferenceChannelSet()
  {
    return factory_.createDifferenceChannelSet();
  }

  /**
   * Creates an instance of {@link DifferenceChannelSet} with the given children.
   *
   * @return the new instance of DifferenceChannelSet.
   */
  public DifferenceChannelSet createDifferenceChannelSet(ChannelSet leftOperand, ChannelSet rightOperand)
  {
    return factory_.createDifferenceChannelSet(leftOperand, rightOperand);
  }

  /**
   * Creates an instance of {@link MixedField}.
   *
   * @return the new instance of MixedField.
   */
  public MixedField createMixedField()
  {
    return factory_.createMixedField();
  }

  /**
   * Creates an instance of {@link MixedField} with the given children.
   *
   * @return the new instance of MixedField.
   */
  public MixedField createMixedField(java.util.List inputField, java.util.List outputField)
  {
    return factory_.createMixedField(inputField, outputField);
  }

  /**
   * Creates an instance of {@link IntChoiceProcessRI}.
   *
   * @return the new instance of IntChoiceProcessRI.
   */
  public IntChoiceProcessRI createIntChoiceProcessRI()
  {
    return factory_.createIntChoiceProcessRI();
  }

  /**
   * Creates an instance of {@link IntChoiceProcessRI} with the given children.
   *
   * @return the new instance of IntChoiceProcessRI.
   */
  public IntChoiceProcessRI createIntChoiceProcessRI(ProcessDef processDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createIntChoiceProcessRI(processDef, varDecl);
  }

  /**
   * Creates an instance of {@link Communication}.
   *
   * @return the new instance of Communication.
   */
  public Communication createCommunication()
  {
    return factory_.createCommunication();
  }

  /**
   * Creates an instance of {@link Communication} with the given children.
   *
   * @return the new instance of Communication.
   */
  public Communication createCommunication(net.sourceforge.czt.z.ast.RefName chanName, java.util.List chanFields, CommType commType, Integer multiSych)
  {
    return factory_.createCommunication(chanName, chanFields, commType, multiSych);
  }

  /**
   * Creates an instance of {@link OutputField}.
   *
   * @return the new instance of OutputField.
   */
  public OutputField createOutputField()
  {
    return factory_.createOutputField();
  }

  /**
   * Creates an instance of {@link OutputField} with the given children.
   *
   * @return the new instance of OutputField.
   */
  public OutputField createOutputField(net.sourceforge.czt.z.ast.Expr expression)
  {
    return factory_.createOutputField(expression);
  }

  /**
   * Creates an instance of {@link ActionPara}.
   *
   * @return the new instance of ActionPara.
   */
  public ActionPara createActionPara()
  {
    return factory_.createActionPara();
  }

  /**
   * Creates an instance of {@link ActionPara} with the given children.
   *
   * @return the new instance of ActionPara.
   */
  public ActionPara createActionPara(net.sourceforge.czt.z.ast.DeclName declName, Action action)
  {
    return factory_.createActionPara(declName, action);
  }

  /**
   * Creates an instance of {@link UnionChannelSet}.
   *
   * @return the new instance of UnionChannelSet.
   */
  public UnionChannelSet createUnionChannelSet()
  {
    return factory_.createUnionChannelSet();
  }

  /**
   * Creates an instance of {@link UnionChannelSet} with the given children.
   *
   * @return the new instance of UnionChannelSet.
   */
  public UnionChannelSet createUnionChannelSet(ChannelSet leftOperand, ChannelSet rightOperand)
  {
    return factory_.createUnionChannelSet(leftOperand, rightOperand);
  }

  /**
   * Creates an instance of {@link HideProcess}.
   *
   * @return the new instance of HideProcess.
   */
  public HideProcess createHideProcess()
  {
    return factory_.createHideProcess();
  }

  /**
   * Creates an instance of {@link HideProcess} with the given children.
   *
   * @return the new instance of HideProcess.
   */
  public HideProcess createHideProcess(ProcessDef processDef, ChannelSet channelSet)
  {
    return factory_.createHideProcess(processDef, channelSet);
  }

  /**
   * Creates an instance of {@link ParallelProcess}.
   *
   * @return the new instance of ParallelProcess.
   */
  public ParallelProcess createParallelProcess()
  {
    return factory_.createParallelProcess();
  }

  /**
   * Creates an instance of {@link ParallelProcess} with the given children.
   *
   * @return the new instance of ParallelProcess.
   */
  public ParallelProcess createParallelProcess(ProcessDef leftProc, ProcessDef rightProc, ChannelSet channelSet)
  {
    return factory_.createParallelProcess(leftProc, rightProc, channelSet);
  }

  /**
   * Creates an instance of {@link SetChannelSet}.
   *
   * @return the new instance of SetChannelSet.
   */
  public SetChannelSet createSetChannelSet()
  {
    return factory_.createSetChannelSet();
  }

  /**
   * Creates an instance of {@link SetChannelSet} with the given children.
   *
   * @return the new instance of SetChannelSet.
   */
  public SetChannelSet createSetChannelSet(java.util.List refName)
  {
    return factory_.createSetChannelSet(refName);
  }

  /**
   * Creates an instance of {@link ParallelProcessRI}.
   *
   * @return the new instance of ParallelProcessRI.
   */
  public ParallelProcessRI createParallelProcessRI()
  {
    return factory_.createParallelProcessRI();
  }

  /**
   * Creates an instance of {@link ParallelProcessRI} with the given children.
   *
   * @return the new instance of ParallelProcessRI.
   */
  public ParallelProcessRI createParallelProcessRI(ProcessDef processDef, net.sourceforge.czt.z.ast.VarDecl varDecl, ChannelSet channelSet)
  {
    return factory_.createParallelProcessRI(processDef, varDecl, channelSet);
  }

  /**
   * Creates an instance of {@link ParallelProcessR}.
   *
   * @return the new instance of ParallelProcessR.
   */
  public ParallelProcessR createParallelProcessR()
  {
    return factory_.createParallelProcessR();
  }

  /**
   * Creates an instance of {@link ParallelProcessR} with the given children.
   *
   * @return the new instance of ParallelProcessR.
   */
  public ParallelProcessR createParallelProcessR(ProcessDef processDef, net.sourceforge.czt.z.ast.VarDecl varDecl, ChannelSet channelSet)
  {
    return factory_.createParallelProcessR(processDef, varDecl, channelSet);
  }

  /**
   * Creates an instance of {@link ParallelActionR}.
   *
   * @return the new instance of ParallelActionR.
   */
  public ParallelActionR createParallelActionR()
  {
    return factory_.createParallelActionR();
  }

  /**
   * Creates an instance of {@link ParallelActionR} with the given children.
   *
   * @return the new instance of ParallelActionR.
   */
  public ParallelActionR createParallelActionR(Action action, net.sourceforge.czt.z.ast.VarDecl varDecl, NameSet leftNameSet, NameSet rightNameSet, ChannelSet channelSet)
  {
    return factory_.createParallelActionR(action, varDecl, leftNameSet, rightNameSet, channelSet);
  }

  /**
   * Creates an instance of {@link IndexedProcess}.
   *
   * @return the new instance of IndexedProcess.
   */
  public IndexedProcess createIndexedProcess()
  {
    return factory_.createIndexedProcess();
  }

  /**
   * Creates an instance of {@link IndexedProcess} with the given children.
   *
   * @return the new instance of IndexedProcess.
   */
  public IndexedProcess createIndexedProcess(ProcessDef processDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createIndexedProcess(processDef, varDecl);
  }

  /**
   * Creates an instance of {@link IntChoiceAction}.
   *
   * @return the new instance of IntChoiceAction.
   */
  public IntChoiceAction createIntChoiceAction()
  {
    return factory_.createIntChoiceAction();
  }

  /**
   * Creates an instance of {@link IntChoiceAction} with the given children.
   *
   * @return the new instance of IntChoiceAction.
   */
  public IntChoiceAction createIntChoiceAction(Action leftAction, Action rightAction)
  {
    return factory_.createIntChoiceAction(leftAction, rightAction);
  }

  /**
   * Creates an instance of {@link DescProcess}.
   *
   * @return the new instance of DescProcess.
   */
  public DescProcess createDescProcess()
  {
    return factory_.createDescProcess();
  }

  /**
   * Creates an instance of {@link DescProcess} with the given children.
   *
   * @return the new instance of DescProcess.
   */
  public DescProcess createDescProcess(net.sourceforge.czt.z.ast.RefName stateSchemaRefName, java.util.List para, Action mainAction)
  {
    return factory_.createDescProcess(stateSchemaRefName, para, mainAction);
  }

  /**
   * Creates an instance of {@link InterleaveAction}.
   *
   * @return the new instance of InterleaveAction.
   */
  public InterleaveAction createInterleaveAction()
  {
    return factory_.createInterleaveAction();
  }

  /**
   * Creates an instance of {@link InterleaveAction} with the given children.
   *
   * @return the new instance of InterleaveAction.
   */
  public InterleaveAction createInterleaveAction(Action leftAction, Action rightAction, NameSet leftNameSet, NameSet rightNameSet)
  {
    return factory_.createInterleaveAction(leftAction, rightAction, leftNameSet, rightNameSet);
  }

  /**
   * Creates an instance of {@link SchTextAction}.
   *
   * @return the new instance of SchTextAction.
   */
  public SchTextAction createSchTextAction()
  {
    return factory_.createSchTextAction();
  }

  /**
   * Creates an instance of {@link SchTextAction} with the given children.
   *
   * @return the new instance of SchTextAction.
   */
  public SchTextAction createSchTextAction(net.sourceforge.czt.z.ast.SchExpr schExpr)
  {
    return factory_.createSchTextAction(schExpr);
  }

  /**
   * Creates an instance of {@link IntChoiceProcess}.
   *
   * @return the new instance of IntChoiceProcess.
   */
  public IntChoiceProcess createIntChoiceProcess()
  {
    return factory_.createIntChoiceProcess();
  }

  /**
   * Creates an instance of {@link IntChoiceProcess} with the given children.
   *
   * @return the new instance of IntChoiceProcess.
   */
  public IntChoiceProcess createIntChoiceProcess(ProcessDef leftProc, ProcessDef rightProc)
  {
    return factory_.createIntChoiceProcess(leftProc, rightProc);
  }

  /**
   * Creates an instance of {@link SeqProcessRI}.
   *
   * @return the new instance of SeqProcessRI.
   */
  public SeqProcessRI createSeqProcessRI()
  {
    return factory_.createSeqProcessRI();
  }

  /**
   * Creates an instance of {@link SeqProcessRI} with the given children.
   *
   * @return the new instance of SeqProcessRI.
   */
  public SeqProcessRI createSeqProcessRI(ProcessDef processDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createSeqProcessRI(processDef, varDecl);
  }

  /**
   * Creates an instance of {@link RenameProcess}.
   *
   * @return the new instance of RenameProcess.
   */
  public RenameProcess createRenameProcess()
  {
    return factory_.createRenameProcess();
  }

  /**
   * Creates an instance of {@link RenameProcess} with the given children.
   *
   * @return the new instance of RenameProcess.
   */
  public RenameProcess createRenameProcess(ProcessDef processDef, java.util.List oldNames, java.util.List newNames)
  {
    return factory_.createRenameProcess(processDef, oldNames, newNames);
  }

  /**
   * Creates an instance of {@link ChannelPara}.
   *
   * @return the new instance of ChannelPara.
   */
  public ChannelPara createChannelPara()
  {
    return factory_.createChannelPara();
  }

  /**
   * Creates an instance of {@link ChannelPara} with the given children.
   *
   * @return the new instance of ChannelPara.
   */
  public ChannelPara createChannelPara(net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createChannelPara(varDecl);
  }

  /**
   * Creates an instance of {@link FormalParamAction}.
   *
   * @return the new instance of FormalParamAction.
   */
  public FormalParamAction createFormalParamAction()
  {
    return factory_.createFormalParamAction();
  }

  /**
   * Creates an instance of {@link FormalParamAction} with the given children.
   *
   * @return the new instance of FormalParamAction.
   */
  public FormalParamAction createFormalParamAction(Action action, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createFormalParamAction(action, varDecl);
  }

  /**
   * Creates an instance of {@link CallProcess}.
   *
   * @return the new instance of CallProcess.
   */
  public CallProcess createCallProcess()
  {
    return factory_.createCallProcess();
  }

  /**
   * Creates an instance of {@link CallProcess} with the given children.
   *
   * @return the new instance of CallProcess.
   */
  public CallProcess createCallProcess(net.sourceforge.czt.z.ast.RefName refName)
  {
    return factory_.createCallProcess(refName);
  }

  /**
   * Creates an instance of {@link IfGuardedCommand}.
   *
   * @return the new instance of IfGuardedCommand.
   */
  public IfGuardedCommand createIfGuardedCommand()
  {
    return factory_.createIfGuardedCommand();
  }

  /**
   * Creates an instance of {@link IfGuardedCommand} with the given children.
   *
   * @return the new instance of IfGuardedCommand.
   */
  public IfGuardedCommand createIfGuardedCommand(java.util.List guardedAction)
  {
    return factory_.createIfGuardedCommand(guardedAction);
  }

  /**
   * Creates an instance of {@link ExtChoiceProcess}.
   *
   * @return the new instance of ExtChoiceProcess.
   */
  public ExtChoiceProcess createExtChoiceProcess()
  {
    return factory_.createExtChoiceProcess();
  }

  /**
   * Creates an instance of {@link ExtChoiceProcess} with the given children.
   *
   * @return the new instance of ExtChoiceProcess.
   */
  public ExtChoiceProcess createExtChoiceProcess(ProcessDef leftProc, ProcessDef rightProc)
  {
    return factory_.createExtChoiceProcess(leftProc, rightProc);
  }

  /**
   * Creates an instance of {@link FormalGenProcess}.
   *
   * @return the new instance of FormalGenProcess.
   */
  public FormalGenProcess createFormalGenProcess()
  {
    return factory_.createFormalGenProcess();
  }

  /**
   * Creates an instance of {@link FormalGenProcess} with the given children.
   *
   * @return the new instance of FormalGenProcess.
   */
  public FormalGenProcess createFormalGenProcess(ProcessDef processDef, java.util.List formalGenTypes)
  {
    return factory_.createFormalGenProcess(processDef, formalGenTypes);
  }

  /**
   * Creates an instance of {@link StopAction}.
   *
   * @return the new instance of StopAction.
   */
  public StopAction createStopAction()
  {
    return factory_.createStopAction();
  }

  /**
   * Creates an instance of {@link ExtChoiceAction}.
   *
   * @return the new instance of ExtChoiceAction.
   */
  public ExtChoiceAction createExtChoiceAction()
  {
    return factory_.createExtChoiceAction();
  }

  /**
   * Creates an instance of {@link ExtChoiceAction} with the given children.
   *
   * @return the new instance of ExtChoiceAction.
   */
  public ExtChoiceAction createExtChoiceAction(Action leftAction, Action rightAction)
  {
    return factory_.createExtChoiceAction(leftAction, rightAction);
  }

  /**
   * Creates an instance of {@link SetNameSet}.
   *
   * @return the new instance of SetNameSet.
   */
  public SetNameSet createSetNameSet()
  {
    return factory_.createSetNameSet();
  }

  /**
   * Creates an instance of {@link SetNameSet} with the given children.
   *
   * @return the new instance of SetNameSet.
   */
  public SetNameSet createSetNameSet(java.util.List refName)
  {
    return factory_.createSetNameSet(refName);
  }

  /**
   * Creates an instance of {@link InterleaveProcess}.
   *
   * @return the new instance of InterleaveProcess.
   */
  public InterleaveProcess createInterleaveProcess()
  {
    return factory_.createInterleaveProcess();
  }

  /**
   * Creates an instance of {@link InterleaveProcess} with the given children.
   *
   * @return the new instance of InterleaveProcess.
   */
  public InterleaveProcess createInterleaveProcess(ProcessDef leftProc, ProcessDef rightProc)
  {
    return factory_.createInterleaveProcess(leftProc, rightProc);
  }

  /**
   * Creates an instance of {@link NameSetPara}.
   *
   * @return the new instance of NameSetPara.
   */
  public NameSetPara createNameSetPara()
  {
    return factory_.createNameSetPara();
  }

  /**
   * Creates an instance of {@link NameSetPara} with the given children.
   *
   * @return the new instance of NameSetPara.
   */
  public NameSetPara createNameSetPara(net.sourceforge.czt.z.ast.DeclName declName, NameSet nameSet)
  {
    return factory_.createNameSetPara(declName, nameSet);
  }

  /**
   * Creates an instance of {@link UnionNameSet}.
   *
   * @return the new instance of UnionNameSet.
   */
  public UnionNameSet createUnionNameSet()
  {
    return factory_.createUnionNameSet();
  }

  /**
   * Creates an instance of {@link UnionNameSet} with the given children.
   *
   * @return the new instance of UnionNameSet.
   */
  public UnionNameSet createUnionNameSet(NameSet leftOperand, NameSet rightOperand)
  {
    return factory_.createUnionNameSet(leftOperand, rightOperand);
  }

  /**
   * Creates an instance of {@link ExtChoiceActionR}.
   *
   * @return the new instance of ExtChoiceActionR.
   */
  public ExtChoiceActionR createExtChoiceActionR()
  {
    return factory_.createExtChoiceActionR();
  }

  /**
   * Creates an instance of {@link ExtChoiceActionR} with the given children.
   *
   * @return the new instance of ExtChoiceActionR.
   */
  public ExtChoiceActionR createExtChoiceActionR(Action action, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createExtChoiceActionR(action, varDecl);
  }

  /**
   * Creates an instance of {@link RefChannelSet}.
   *
   * @return the new instance of RefChannelSet.
   */
  public RefChannelSet createRefChannelSet()
  {
    return factory_.createRefChannelSet();
  }

  /**
   * Creates an instance of {@link RefChannelSet} with the given children.
   *
   * @return the new instance of RefChannelSet.
   */
  public RefChannelSet createRefChannelSet(net.sourceforge.czt.z.ast.RefName refName)
  {
    return factory_.createRefChannelSet(refName);
  }

  /**
   * Creates an instance of {@link SeqProcess}.
   *
   * @return the new instance of SeqProcess.
   */
  public SeqProcess createSeqProcess()
  {
    return factory_.createSeqProcess();
  }

  /**
   * Creates an instance of {@link SeqProcess} with the given children.
   *
   * @return the new instance of SeqProcess.
   */
  public SeqProcess createSeqProcess(ProcessDef leftProc, ProcessDef rightProc)
  {
    return factory_.createSeqProcess(leftProc, rightProc);
  }

  /**
   * Creates an instance of {@link IntersectChannelSet}.
   *
   * @return the new instance of IntersectChannelSet.
   */
  public IntersectChannelSet createIntersectChannelSet()
  {
    return factory_.createIntersectChannelSet();
  }

  /**
   * Creates an instance of {@link IntersectChannelSet} with the given children.
   *
   * @return the new instance of IntersectChannelSet.
   */
  public IntersectChannelSet createIntersectChannelSet(ChannelSet leftOperand, ChannelSet rightOperand)
  {
    return factory_.createIntersectChannelSet(leftOperand, rightOperand);
  }

  /**
   * Creates an instance of {@link RefNameSet}.
   *
   * @return the new instance of RefNameSet.
   */
  public RefNameSet createRefNameSet()
  {
    return factory_.createRefNameSet();
  }

  /**
   * Creates an instance of {@link RefNameSet} with the given children.
   *
   * @return the new instance of RefNameSet.
   */
  public RefNameSet createRefNameSet(net.sourceforge.czt.z.ast.RefName refName)
  {
    return factory_.createRefNameSet(refName);
  }

  /**
   * Creates an instance of {@link PrefixingAction}.
   *
   * @return the new instance of PrefixingAction.
   */
  public PrefixingAction createPrefixingAction()
  {
    return factory_.createPrefixingAction();
  }

  /**
   * Creates an instance of {@link PrefixingAction} with the given children.
   *
   * @return the new instance of PrefixingAction.
   */
  public PrefixingAction createPrefixingAction(Action action, Communication communication)
  {
    return factory_.createPrefixingAction(action, communication);
  }

  /**
   * Creates an instance of {@link DifferenceNameSet}.
   *
   * @return the new instance of DifferenceNameSet.
   */
  public DifferenceNameSet createDifferenceNameSet()
  {
    return factory_.createDifferenceNameSet();
  }

  /**
   * Creates an instance of {@link DifferenceNameSet} with the given children.
   *
   * @return the new instance of DifferenceNameSet.
   */
  public DifferenceNameSet createDifferenceNameSet(NameSet leftOperand, NameSet rightOperand)
  {
    return factory_.createDifferenceNameSet(leftOperand, rightOperand);
  }

  /**
   * Creates an instance of {@link ActualParamProcess}.
   *
   * @return the new instance of ActualParamProcess.
   */
  public ActualParamProcess createActualParamProcess()
  {
    return factory_.createActualParamProcess();
  }

  /**
   * Creates an instance of {@link ActualParamProcess} with the given children.
   *
   * @return the new instance of ActualParamProcess.
   */
  public ActualParamProcess createActualParamProcess(ProcessDef processDef, java.util.List expr)
  {
    return factory_.createActualParamProcess(processDef, expr);
  }

  /**
   * Creates an instance of {@link AssignmentPair}.
   *
   * @return the new instance of AssignmentPair.
   */
  public AssignmentPair createAssignmentPair()
  {
    return factory_.createAssignmentPair();
  }

  /**
   * Creates an instance of {@link AssignmentPair} with the given children.
   *
   * @return the new instance of AssignmentPair.
   */
  public AssignmentPair createAssignmentPair(net.sourceforge.czt.z.ast.RefName lHS, net.sourceforge.czt.z.ast.Expr rHS)
  {
    return factory_.createAssignmentPair(lHS, rHS);
  }

  /**
   * Creates an instance of {@link VarDeclCommand}.
   *
   * @return the new instance of VarDeclCommand.
   */
  public VarDeclCommand createVarDeclCommand()
  {
    return factory_.createVarDeclCommand();
  }

  /**
   * Creates an instance of {@link VarDeclCommand} with the given children.
   *
   * @return the new instance of VarDeclCommand.
   */
  public VarDeclCommand createVarDeclCommand(net.sourceforge.czt.z.ast.VarDecl varDecl, Action action)
  {
    return factory_.createVarDeclCommand(varDecl, action);
  }

  /**
   * Creates an instance of {@link AssignmentCommand}.
   *
   * @return the new instance of AssignmentCommand.
   */
  public AssignmentCommand createAssignmentCommand()
  {
    return factory_.createAssignmentCommand();
  }

  /**
   * Creates an instance of {@link AssignmentCommand} with the given children.
   *
   * @return the new instance of AssignmentCommand.
   */
  public AssignmentCommand createAssignmentCommand(java.util.List assignmentPair)
  {
    return factory_.createAssignmentCommand(assignmentPair);
  }

  /**
   * Creates an instance of {@link InputField}.
   *
   * @return the new instance of InputField.
   */
  public InputField createInputField()
  {
    return factory_.createInputField();
  }

  /**
   * Creates an instance of {@link InputField} with the given children.
   *
   * @return the new instance of InputField.
   */
  public InputField createInputField(net.sourceforge.czt.z.ast.RefName variable, net.sourceforge.czt.z.ast.Pred restriction)
  {
    return factory_.createInputField(variable, restriction);
  }

  /**
   * Creates an instance of {@link ActualParamAction}.
   *
   * @return the new instance of ActualParamAction.
   */
  public ActualParamAction createActualParamAction()
  {
    return factory_.createActualParamAction();
  }

  /**
   * Creates an instance of {@link ActualParamAction} with the given children.
   *
   * @return the new instance of ActualParamAction.
   */
  public ActualParamAction createActualParamAction(Action action, java.util.List expr)
  {
    return factory_.createActualParamAction(action, expr);
  }

  /**
   * Creates an instance of {@link IntersectionNameSet}.
   *
   * @return the new instance of IntersectionNameSet.
   */
  public IntersectionNameSet createIntersectionNameSet()
  {
    return factory_.createIntersectionNameSet();
  }

  /**
   * Creates an instance of {@link IntersectionNameSet} with the given children.
   *
   * @return the new instance of IntersectionNameSet.
   */
  public IntersectionNameSet createIntersectionNameSet(NameSet leftOperand, NameSet rightOperand)
  {
    return factory_.createIntersectionNameSet(leftOperand, rightOperand);
  }

  /**
   * Creates an instance of {@link ExtChoiceProcessR}.
   *
   * @return the new instance of ExtChoiceProcessR.
   */
  public ExtChoiceProcessR createExtChoiceProcessR()
  {
    return factory_.createExtChoiceProcessR();
  }

  /**
   * Creates an instance of {@link ExtChoiceProcessR} with the given children.
   *
   * @return the new instance of ExtChoiceProcessR.
   */
  public ExtChoiceProcessR createExtChoiceProcessR(ProcessDef processDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createExtChoiceProcessR(processDef, varDecl);
  }

  /**
   * Creates an instance of {@link InterleaveProcessR}.
   *
   * @return the new instance of InterleaveProcessR.
   */
  public InterleaveProcessR createInterleaveProcessR()
  {
    return factory_.createInterleaveProcessR();
  }

  /**
   * Creates an instance of {@link InterleaveProcessR} with the given children.
   *
   * @return the new instance of InterleaveProcessR.
   */
  public InterleaveProcessR createInterleaveProcessR(ProcessDef processDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createInterleaveProcessR(processDef, varDecl);
  }

  /**
   * Creates an instance of {@link ExtChoiceProcessRI}.
   *
   * @return the new instance of ExtChoiceProcessRI.
   */
  public ExtChoiceProcessRI createExtChoiceProcessRI()
  {
    return factory_.createExtChoiceProcessRI();
  }

  /**
   * Creates an instance of {@link ExtChoiceProcessRI} with the given children.
   *
   * @return the new instance of ExtChoiceProcessRI.
   */
  public ExtChoiceProcessRI createExtChoiceProcessRI(ProcessDef processDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createExtChoiceProcessRI(processDef, varDecl);
  }


  /**
   * Creates a list of size one with the given object as element.
   * This is a convenience method.
   */
  public java.util.List list(Object o)
  {
    java.util.List result = new java.util.ArrayList();
    result.add(o);
    return result;
  }

  /**
   * Creates a list with the two objects as elements.
   * This is a convenience method.
   */
  public java.util.List list(Object first, Object second)
  {
    java.util.List result = new java.util.ArrayList();
    result.add(first);
    result.add(second);
    return result;
  }

  /**
   * Creates an application (Expr followed by Expr in the syntax),
   * that is an ApplExpr with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public ApplExpr createApplication(RefName refName, Expr expr)
  {
    return createApplExpr(createRefExpr(refName), expr, Boolean.FALSE);
  }

  /**
   * Creates a DeclName with the given word and strokes and
   * id set to <code>null</code>.
   * This is a convenience method.
   */
  public DeclName createDeclName(String word, java.util.List strokes)
  {
    return createDeclName(word, strokes, null);
  }

  /**
   * Creates a DeclName from a decorword, that is a string that
   * may contain strokes at the end.
   * The strokes are extracted from the end and the resulting
   * name is returned.
   * This is a convenience method.
   */
  public DeclName createDeclName(String decorword)
  {
    java.util.List strokes = new java.util.ArrayList();
    final String word = getWordAndStrokes(decorword, strokes);
    return createDeclName(word, strokes, null);
  }

  protected String getWordAndStrokes(String decorword, java.util.List strokes)
  {
    net.sourceforge.czt.z.util.ZChar[] zchars =
      net.sourceforge.czt.z.util.ZChar.toZChars(decorword);
    int i;
    for (i = zchars.length - 1; i >= 0; i--) {
      net.sourceforge.czt.z.util.ZChar zchar = zchars[i];
      if (net.sourceforge.czt.z.util.ZChar.INSTROKE.equals(zchar)) {
        strokes.add(0, createInStroke());
      }
      else if (net.sourceforge.czt.z.util.ZChar.OUTSTROKE.equals(zchar)) {
        strokes.add(0, createOutStroke());
      }
      else if (net.sourceforge.czt.z.util.ZChar.PRIME.equals(zchar)) {
        strokes.add(0, createNextStroke());
      }
      else if (i >= 2 &&
          net.sourceforge.czt.z.util.ZChar.NW.equals(zchar) &&
          net.sourceforge.czt.z.util.ZChar.isDigit(zchars[i - 1]) &&
          net.sourceforge.czt.z.util.ZChar.SE.equals(zchars[i - 2])) {
        NumStroke numStroke =
          createNumStroke(new Integer(zchars[i - 1].toString()));
        strokes.add(numStroke);
        i = i - 2;
      }
      else {
        break;
      }
    }
    StringBuffer result = new StringBuffer();
    for (int j = 0; j <= i; j++) {
      result.append(zchars[j].toString());
    }
    return result.toString();
  }

  /**
   * Creates a member predicate that represents equality
   * between the two given expressions.
   * This is a convenience method.
   */
  public MemPred createEquality(Expr left, Expr right)
  {
    return createMemPred(left, createSetExpr(list(right)), Boolean.TRUE);
  }

  /**
   * Creates a function operator application, that is an ApplExpr
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public ApplExpr createFunOpAppl(RefName refName, Expr expr)
  {
    return createApplExpr(createRefExpr(refName), expr, Boolean.TRUE);
  }

  /**
   * Creates a generic instantiation expression, that is a RefExpr
   * with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public RefExpr createGenInst(RefName refName, java.util.List exprs)
  {
    return createRefExpr(refName, exprs, Boolean.FALSE);
  }

  /**
   * Creates a generic operator application, that is a RefExpr
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public RefExpr createGenOpApp(RefName refName, java.util.List exprs)
  {
    return createRefExpr(refName, exprs, Boolean.TRUE);
  }

  /**
   * Creates a horizontal definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * expression and with Box set to OmitBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param expr an expression.
   */
  public AxPara createHorizontalDef(DeclName declName, Expr expr)
  {
    return createHorizontalDef(declName, null, expr);
  }

  /**
   * Creates a generic horizontal definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * expression and with Box set to OmitBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param formals a list of DeclName, the formal parameters.
   * @param expr an expression.
   */
  public AxPara createHorizontalDef(DeclName declName,
                                    java.util.List formals,
                                    Expr expr)
  {
    ConstDecl constDecl = createConstDecl(declName, expr);
    SchText schText = createSchText(list(constDecl), null);
    return createAxPara(formals, schText, Box.OmitBox);
  }

  /**
   * Creates a member predicate for a given referencing name and
   * an expression, that is a MemPred with mixfix set to <code>false</code>.
   * This is a convenience method.
   */ 
  public MemPred createMemPred(RefName refName, Expr expr)
  {
    return createMemPred(createRefExpr(refName), expr, Boolean.FALSE);
  }

  /**
   * Creates a number expression with the given value.
   * This is a convenience method.
   */
  public NumExpr createNumExpr(int value)
  {
    return createNumExpr(java.math.BigInteger.valueOf(value));
  }

  /**
   * Creates a binary product expression.
   * This is a convenience method.
   */
  public ProdExpr createProdExpr(Expr left, Expr right)
  {
    return createProdExpr(list(left, right));
  }

  /**
   * Creates a reference (expression) to the given name.
   * The mixfix child of the returned reference expression
   * is <code>false</code> and the list of expressions is empty.
   * This is a convenience method.
   */
  public RefExpr createRefExpr(RefName refName)
  {
    return createRefExpr(refName, null, Boolean.FALSE);
  }

  /**
   * Creates a RefName with the given word and strokes and
   * id set to <code>null</code>.
   * This is a convenience method.
   */
  public RefName createRefName(String word, java.util.List strokes)
  {
    return createRefName(word, strokes, null);
  }

  /**
   * Creates a RefName from a decorword, that is a string that
   * may contain strokes at the end.
   * The strokes are extracted from the end and the resulting
   * name is returned.
   * This is a convenience method.
   */
  public RefName createRefName(String decorword)
  {
    java.util.List strokes = new java.util.ArrayList();
    final String word = getWordAndStrokes(decorword, strokes);
    return createRefName(word, strokes, null);
  }

  /**
   * Creates a referencing name that refers to the given
   * declaring name.
   * This is a convenience method.
   */
  public RefName createRefName(DeclName declName)
  {
    return createRefName(declName.getWord(), declName.getStroke(), declName);
  }

  /**
   * Creates a relation operator application, that is a MemPred
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public MemPred createRelOpAppl(Expr expr, RefName refName)
  {
    return createMemPred(expr, createRefExpr(refName), Boolean.TRUE);
  }

  /**
   * Creates a schema definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * schema text and with Box set to SchBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param schemaText the schema text.
   */
  public AxPara createSchema(DeclName declName, SchText schemaText)
  {
    return createSchema(declName, null, schemaText);
  }

  /**
   * Creates a generic schema definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * schema text and with Box set to SchBox.
   * This is a convenience method.
   *
   * @param formals a list of DeclName, the formal parameters.
   * @param declName name of the schema.
   * @param schemaText the schema text.
   */
  public AxPara createSchema(DeclName declName,
                             java.util.List formals,
                             SchText schemaText)
  {
    ConstDecl constDecl = createConstDecl(declName, createSchExpr(schemaText));
    SchText schText = createSchText(list(constDecl), null);
    return createAxPara(formals, schText, Box.SchBox);
  }

  /**
   * <p>Creates a sequence, that is a set of pairs of position
   * (starting from 1) and corresponding component expression.
   * This applies rule 12.2.12 of the Z standard to a list of
   * expressions.</p>
   *
   * <p>More formally, a list
   * <code>e_1, ..., e_n</code> of expressions is transformed into
   * the set <code>\{ (1, e_1), ... , (n, e_n) \}</code>.
   * </p>
   *
   * <p>This is a convenience method.</p>
   *
   * @param exprList a list of expressions (Expr).
   */
  public SetExpr createSequence(java.util.List exprList)
  {
    java.util.List tupleList = new java.util.ArrayList(exprList.size());
    int count = 1;
    for (java.util.Iterator i = exprList.iterator(); i.hasNext(); count++) {
      tupleList.add(createTupleExpr(createNumExpr(count), (Expr) i.next()));
    }
    return createSetExpr(tupleList);
  }

  /**
   * Creates a pair, that is a tuple expression with two elements.
   * This is a convenience method.
   */
  public TupleExpr createTupleExpr(Expr left, Expr right)
  {
    return createTupleExpr(list(left, right));
  }
}
