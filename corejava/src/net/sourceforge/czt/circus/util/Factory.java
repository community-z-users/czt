
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.util;

import net.sourceforge.czt.circus.ast.*;
import net.sourceforge.czt.z.ast.*;

/**
 * <p>An object factory for the AST.
 *
 * <p>This object factory allows the programmer
 * to programatically construct new instances of concrete Z terms.
 * </p>
 *
 * @author Gnast version 0.1
 */
public class Factory
  extends net.sourceforge.czt.z.util.Factory
{
  private net.sourceforge.czt.circus.ast.CircusFactory factory_ =
    new net.sourceforge.czt.circus.impl.CircusFactoryImpl();

  /**
   * Creates a new convenience factory that uses the standard factory
   * implementation for creating AST terms.
   */
  public Factory()
  {
    super();
  }

  /**
   * Creates a new convenience factory that uses the given base factory
   * for creating AST terms.
   */
  public Factory(net.sourceforge.czt.circus.ast.CircusFactory factory)
  {
    super(factory);
    factory_ = factory;
  }

  /**
   * Creates an instance of {@link CSExprSet}.
   *
   * @return the new instance of CSExprSet.
   */
  public CSExprSet createCSExprSet()
  {
    return factory_.createCSExprSet();
  }

  /**
   * Creates an instance of {@link CSExprSet} with the given children.
   *
   * @return the new instance of CSExprSet.
   */
  public CSExprSet createCSExprSet(java.util.List expr, java.util.List refName)
  {
    return factory_.createCSExprSet(expr, refName);
  }

  /**
   * Creates an instance of {@link IdxRepParallelCompProc}.
   *
   * @return the new instance of IdxRepParallelCompProc.
   */
  public IdxRepParallelCompProc createIdxRepParallelCompProc()
  {
    return factory_.createIdxRepParallelCompProc();
  }

  /**
   * Creates an instance of {@link IdxRepParallelCompProc} with the given children.
   *
   * @return the new instance of IdxRepParallelCompProc.
   */
  public IdxRepParallelCompProc createIdxRepParallelCompProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl, CSExpr cSExpr)
  {
    return factory_.createIdxRepParallelCompProc(procDef, varDecl, cSExpr);
  }

  /**
   * Creates an instance of {@link RepExtChAction}.
   *
   * @return the new instance of RepExtChAction.
   */
  public RepExtChAction createRepExtChAction()
  {
    return factory_.createRepExtChAction();
  }

  /**
   * Creates an instance of {@link RepExtChAction} with the given children.
   *
   * @return the new instance of RepExtChAction.
   */
  public RepExtChAction createRepExtChAction(ActionDef actionDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createRepExtChAction(actionDef, varDecl);
  }

  /**
   * Creates an instance of {@link GuardedAction}.
   *
   * @return the new instance of GuardedAction.
   */
  public GuardedAction createGuardedAction()
  {
    return factory_.createGuardedAction();
  }

  /**
   * Creates an instance of {@link GuardedAction} with the given children.
   *
   * @return the new instance of GuardedAction.
   */
  public GuardedAction createGuardedAction(ActionDef actionDef, net.sourceforge.czt.z.ast.Pred pred)
  {
    return factory_.createGuardedAction(actionDef, pred);
  }

  /**
   * Creates an instance of {@link ExtChoiceProc}.
   *
   * @return the new instance of ExtChoiceProc.
   */
  public ExtChoiceProc createExtChoiceProc()
  {
    return factory_.createExtChoiceProc();
  }

  /**
   * Creates an instance of {@link ExtChoiceProc} with the given children.
   *
   * @return the new instance of ExtChoiceProc.
   */
  public ExtChoiceProc createExtChoiceProc(ProcDef leftProc, ProcDef rightProc)
  {
    return factory_.createExtChoiceProc(leftProc, rightProc);
  }

  /**
   * Creates an instance of {@link ParallelCompAction}.
   *
   * @return the new instance of ParallelCompAction.
   */
  public ParallelCompAction createParallelCompAction()
  {
    return factory_.createParallelCompAction();
  }

  /**
   * Creates an instance of {@link ParallelCompAction} with the given children.
   *
   * @return the new instance of ParallelCompAction.
   */
  public ParallelCompAction createParallelCompAction(ActionDef leftAction, ActionDef rightAction, NSExpr leftNS, NSExpr rightNS, CSExpr cSExpr)
  {
    return factory_.createParallelCompAction(leftAction, rightAction, leftNS, rightNS, cSExpr);
  }

  /**
   * Creates an instance of {@link CallProc}.
   *
   * @return the new instance of CallProc.
   */
  public CallProc createCallProc()
  {
    return factory_.createCallProc();
  }

  /**
   * Creates an instance of {@link CallProc} with the given children.
   *
   * @return the new instance of CallProc.
   */
  public CallProc createCallProc(net.sourceforge.czt.z.ast.RefName refName)
  {
    return factory_.createCallProc(refName);
  }

  /**
   * Creates an instance of {@link CommMixed}.
   *
   * @return the new instance of CommMixed.
   */
  public CommMixed createCommMixed()
  {
    return factory_.createCommMixed();
  }

  /**
   * Creates an instance of {@link CommMixed} with the given children.
   *
   * @return the new instance of CommMixed.
   */
  public CommMixed createCommMixed(java.util.List commIn, java.util.List commOut)
  {
    return factory_.createCommMixed(commIn, commOut);
  }

  /**
   * Creates an instance of {@link NSExprUnion}.
   *
   * @return the new instance of NSExprUnion.
   */
  public NSExprUnion createNSExprUnion()
  {
    return factory_.createNSExprUnion();
  }

  /**
   * Creates an instance of {@link MuAction}.
   *
   * @return the new instance of MuAction.
   */
  public MuAction createMuAction()
  {
    return factory_.createMuAction();
  }

  /**
   * Creates an instance of {@link MuAction} with the given children.
   *
   * @return the new instance of MuAction.
   */
  public MuAction createMuAction(ActionDef actionDef, net.sourceforge.czt.z.ast.DeclName declName)
  {
    return factory_.createMuAction(actionDef, declName);
  }

  /**
   * Creates an instance of {@link ChannelDecl}.
   *
   * @return the new instance of ChannelDecl.
   */
  public ChannelDecl createChannelDecl()
  {
    return factory_.createChannelDecl();
  }

  /**
   * Creates an instance of {@link ChannelDecl} with the given children.
   *
   * @return the new instance of ChannelDecl.
   */
  public ChannelDecl createChannelDecl(net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createChannelDecl(varDecl);
  }

  /**
   * Creates an instance of {@link HideAction}.
   *
   * @return the new instance of HideAction.
   */
  public HideAction createHideAction()
  {
    return factory_.createHideAction();
  }

  /**
   * Creates an instance of {@link HideAction} with the given children.
   *
   * @return the new instance of HideAction.
   */
  public HideAction createHideAction(ActionDef actionDef, CSExpr cSExpr)
  {
    return factory_.createHideAction(actionDef, cSExpr);
  }

  /**
   * Creates an instance of {@link NSDecl}.
   *
   * @return the new instance of NSDecl.
   */
  public NSDecl createNSDecl()
  {
    return factory_.createNSDecl();
  }

  /**
   * Creates an instance of {@link NSDecl} with the given children.
   *
   * @return the new instance of NSDecl.
   */
  public NSDecl createNSDecl(net.sourceforge.czt.z.ast.DeclName declName, NSExpr nSExpr)
  {
    return factory_.createNSDecl(declName, nSExpr);
  }

  /**
   * Creates an instance of {@link IfGuardedCmd}.
   *
   * @return the new instance of IfGuardedCmd.
   */
  public IfGuardedCmd createIfGuardedCmd()
  {
    return factory_.createIfGuardedCmd();
  }

  /**
   * Creates an instance of {@link IfGuardedCmd} with the given children.
   *
   * @return the new instance of IfGuardedCmd.
   */
  public IfGuardedCmd createIfGuardedCmd(java.util.List guardedActions)
  {
    return factory_.createIfGuardedCmd(guardedActions);
  }

  /**
   * Creates an instance of {@link CommOut}.
   *
   * @return the new instance of CommOut.
   */
  public CommOut createCommOut()
  {
    return factory_.createCommOut();
  }

  /**
   * Creates an instance of {@link CommOut} with the given children.
   *
   * @return the new instance of CommOut.
   */
  public CommOut createCommOut(net.sourceforge.czt.z.ast.Expr expr)
  {
    return factory_.createCommOut(expr);
  }

  /**
   * Creates an instance of {@link NSExprInter}.
   *
   * @return the new instance of NSExprInter.
   */
  public NSExprInter createNSExprInter()
  {
    return factory_.createNSExprInter();
  }

  /**
   * Creates an instance of {@link ChaosAction}.
   *
   * @return the new instance of ChaosAction.
   */
  public ChaosAction createChaosAction()
  {
    return factory_.createChaosAction();
  }

  /**
   * Creates an instance of {@link AssignmentCmd}.
   *
   * @return the new instance of AssignmentCmd.
   */
  public AssignmentCmd createAssignmentCmd()
  {
    return factory_.createAssignmentCmd();
  }

  /**
   * Creates an instance of {@link AssignmentCmd} with the given children.
   *
   * @return the new instance of AssignmentCmd.
   */
  public AssignmentCmd createAssignmentCmd(java.util.List assignmentPair)
  {
    return factory_.createAssignmentCmd(assignmentPair);
  }

  /**
   * Creates an instance of {@link IdxRepSeqCompProc}.
   *
   * @return the new instance of IdxRepSeqCompProc.
   */
  public IdxRepSeqCompProc createIdxRepSeqCompProc()
  {
    return factory_.createIdxRepSeqCompProc();
  }

  /**
   * Creates an instance of {@link IdxRepSeqCompProc} with the given children.
   *
   * @return the new instance of IdxRepSeqCompProc.
   */
  public IdxRepSeqCompProc createIdxRepSeqCompProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createIdxRepSeqCompProc(procDef, varDecl);
  }

  /**
   * Creates an instance of {@link CSExprInter}.
   *
   * @return the new instance of CSExprInter.
   */
  public CSExprInter createCSExprInter()
  {
    return factory_.createCSExprInter();
  }

  /**
   * Creates an instance of {@link FormalParamProc}.
   *
   * @return the new instance of FormalParamProc.
   */
  public FormalParamProc createFormalParamProc()
  {
    return factory_.createFormalParamProc();
  }

  /**
   * Creates an instance of {@link FormalParamProc} with the given children.
   *
   * @return the new instance of FormalParamProc.
   */
  public FormalParamProc createFormalParamProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createFormalParamProc(procDef, varDecl);
  }

  /**
   * Creates an instance of {@link SkipAction}.
   *
   * @return the new instance of SkipAction.
   */
  public SkipAction createSkipAction()
  {
    return factory_.createSkipAction();
  }

  /**
   * Creates an instance of {@link RepInterleaveProc}.
   *
   * @return the new instance of RepInterleaveProc.
   */
  public RepInterleaveProc createRepInterleaveProc()
  {
    return factory_.createRepInterleaveProc();
  }

  /**
   * Creates an instance of {@link RepInterleaveProc} with the given children.
   *
   * @return the new instance of RepInterleaveProc.
   */
  public RepInterleaveProc createRepInterleaveProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createRepInterleaveProc(procDef, varDecl);
  }

  /**
   * Creates an instance of {@link RepSeqCompProc}.
   *
   * @return the new instance of RepSeqCompProc.
   */
  public RepSeqCompProc createRepSeqCompProc()
  {
    return factory_.createRepSeqCompProc();
  }

  /**
   * Creates an instance of {@link RepSeqCompProc} with the given children.
   *
   * @return the new instance of RepSeqCompProc.
   */
  public RepSeqCompProc createRepSeqCompProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createRepSeqCompProc(procDef, varDecl);
  }

  /**
   * Creates an instance of {@link RepExtChProc}.
   *
   * @return the new instance of RepExtChProc.
   */
  public RepExtChProc createRepExtChProc()
  {
    return factory_.createRepExtChProc();
  }

  /**
   * Creates an instance of {@link RepExtChProc} with the given children.
   *
   * @return the new instance of RepExtChProc.
   */
  public RepExtChProc createRepExtChProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createRepExtChProc(procDef, varDecl);
  }

  /**
   * Creates an instance of {@link SpecStmtCmd}.
   *
   * @return the new instance of SpecStmtCmd.
   */
  public SpecStmtCmd createSpecStmtCmd()
  {
    return factory_.createSpecStmtCmd();
  }

  /**
   * Creates an instance of {@link SpecStmtCmd} with the given children.
   *
   * @return the new instance of SpecStmtCmd.
   */
  public SpecStmtCmd createSpecStmtCmd(java.util.List frame, net.sourceforge.czt.z.ast.Pred pre, net.sourceforge.czt.z.ast.Pred post)
  {
    return factory_.createSpecStmtCmd(frame, pre, post);
  }

  /**
   * Creates an instance of {@link CallAction}.
   *
   * @return the new instance of CallAction.
   */
  public CallAction createCallAction()
  {
    return factory_.createCallAction();
  }

  /**
   * Creates an instance of {@link CallAction} with the given children.
   *
   * @return the new instance of CallAction.
   */
  public CallAction createCallAction(net.sourceforge.czt.z.ast.RefName refName)
  {
    return factory_.createCallAction(refName);
  }

  /**
   * Creates an instance of {@link IdxRepInterleaveProc}.
   *
   * @return the new instance of IdxRepInterleaveProc.
   */
  public IdxRepInterleaveProc createIdxRepInterleaveProc()
  {
    return factory_.createIdxRepInterleaveProc();
  }

  /**
   * Creates an instance of {@link IdxRepInterleaveProc} with the given children.
   *
   * @return the new instance of IdxRepInterleaveProc.
   */
  public IdxRepInterleaveProc createIdxRepInterleaveProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createIdxRepInterleaveProc(procDef, varDecl);
  }

  /**
   * Creates an instance of {@link ProcZPara}.
   *
   * @return the new instance of ProcZPara.
   */
  public ProcZPara createProcZPara()
  {
    return factory_.createProcZPara();
  }

  /**
   * Creates an instance of {@link ProcZPara} with the given children.
   *
   * @return the new instance of ProcZPara.
   */
  public ProcZPara createProcZPara(net.sourceforge.czt.z.ast.Para para)
  {
    return factory_.createProcZPara(para);
  }

  /**
   * Creates an instance of {@link ProcDesc}.
   *
   * @return the new instance of ProcDesc.
   */
  public ProcDesc createProcDesc()
  {
    return factory_.createProcDesc();
  }

  /**
   * Creates an instance of {@link ProcDesc} with the given children.
   *
   * @return the new instance of ProcDesc.
   */
  public ProcDesc createProcDesc(SchemaAction stateSchemaAction, java.util.List procPara, java.util.List actionDef)
  {
    return factory_.createProcDesc(stateSchemaAction, procPara, actionDef);
  }

  /**
   * Creates an instance of {@link ProcDecl}.
   *
   * @return the new instance of ProcDecl.
   */
  public ProcDecl createProcDecl()
  {
    return factory_.createProcDecl();
  }

  /**
   * Creates an instance of {@link ProcDecl} with the given children.
   *
   * @return the new instance of ProcDecl.
   */
  public ProcDecl createProcDecl(net.sourceforge.czt.z.ast.DeclName declName, ProcDef procDef)
  {
    return factory_.createProcDecl(declName, procDef);
  }

  /**
   * Creates an instance of {@link RepIntChProc}.
   *
   * @return the new instance of RepIntChProc.
   */
  public RepIntChProc createRepIntChProc()
  {
    return factory_.createRepIntChProc();
  }

  /**
   * Creates an instance of {@link RepIntChProc} with the given children.
   *
   * @return the new instance of RepIntChProc.
   */
  public RepIntChProc createRepIntChProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createRepIntChProc(procDef, varDecl);
  }

  /**
   * Creates an instance of {@link CircusSect}.
   *
   * @return the new instance of CircusSect.
   */
  public CircusSect createCircusSect()
  {
    return factory_.createCircusSect();
  }

  /**
   * Creates an instance of {@link CircusSect} with the given children.
   *
   * @return the new instance of CircusSect.
   */
  public CircusSect createCircusSect(String name, java.util.List parent, java.util.List circusPara)
  {
    return factory_.createCircusSect(name, parent, circusPara);
  }

  /**
   * Creates an instance of {@link CSExprDiff}.
   *
   * @return the new instance of CSExprDiff.
   */
  public CSExprDiff createCSExprDiff()
  {
    return factory_.createCSExprDiff();
  }

  /**
   * Creates an instance of {@link InterleaveProc}.
   *
   * @return the new instance of InterleaveProc.
   */
  public InterleaveProc createInterleaveProc()
  {
    return factory_.createInterleaveProc();
  }

  /**
   * Creates an instance of {@link InterleaveProc} with the given children.
   *
   * @return the new instance of InterleaveProc.
   */
  public InterleaveProc createInterleaveProc(ProcDef leftProc, ProcDef rightProc)
  {
    return factory_.createInterleaveProc(leftProc, rightProc);
  }

  /**
   * Creates an instance of {@link ParallelCompProc}.
   *
   * @return the new instance of ParallelCompProc.
   */
  public ParallelCompProc createParallelCompProc()
  {
    return factory_.createParallelCompProc();
  }

  /**
   * Creates an instance of {@link ParallelCompProc} with the given children.
   *
   * @return the new instance of ParallelCompProc.
   */
  public ParallelCompProc createParallelCompProc(ProcDef leftProc, ProcDef rightProc, CSExpr cSExpr)
  {
    return factory_.createParallelCompProc(leftProc, rightProc, cSExpr);
  }

  /**
   * Creates an instance of {@link SeqCompAction}.
   *
   * @return the new instance of SeqCompAction.
   */
  public SeqCompAction createSeqCompAction()
  {
    return factory_.createSeqCompAction();
  }

  /**
   * Creates an instance of {@link SeqCompAction} with the given children.
   *
   * @return the new instance of SeqCompAction.
   */
  public SeqCompAction createSeqCompAction(ActionDef leftAction, ActionDef rightAction)
  {
    return factory_.createSeqCompAction(leftAction, rightAction);
  }

  /**
   * Creates an instance of {@link NSExprSet}.
   *
   * @return the new instance of NSExprSet.
   */
  public NSExprSet createNSExprSet()
  {
    return factory_.createNSExprSet();
  }

  /**
   * Creates an instance of {@link NSExprSet} with the given children.
   *
   * @return the new instance of NSExprSet.
   */
  public NSExprSet createNSExprSet(java.util.List expr, java.util.List refName)
  {
    return factory_.createNSExprSet(expr, refName);
  }

  /**
   * Creates an instance of {@link RepIntChAction}.
   *
   * @return the new instance of RepIntChAction.
   */
  public RepIntChAction createRepIntChAction()
  {
    return factory_.createRepIntChAction();
  }

  /**
   * Creates an instance of {@link RepIntChAction} with the given children.
   *
   * @return the new instance of RepIntChAction.
   */
  public RepIntChAction createRepIntChAction(ActionDef actionDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createRepIntChAction(actionDef, varDecl);
  }

  /**
   * Creates an instance of {@link SchemaAction}.
   *
   * @return the new instance of SchemaAction.
   */
  public SchemaAction createSchemaAction()
  {
    return factory_.createSchemaAction();
  }

  /**
   * Creates an instance of {@link SchemaAction} with the given children.
   *
   * @return the new instance of SchemaAction.
   */
  public SchemaAction createSchemaAction(net.sourceforge.czt.z.ast.SchExpr schExpr)
  {
    return factory_.createSchemaAction(schExpr);
  }

  /**
   * Creates an instance of {@link ActualParamProc}.
   *
   * @return the new instance of ActualParamProc.
   */
  public ActualParamProc createActualParamProc()
  {
    return factory_.createActualParamProc();
  }

  /**
   * Creates an instance of {@link ActualParamProc} with the given children.
   *
   * @return the new instance of ActualParamProc.
   */
  public ActualParamProc createActualParamProc(ProcDef procDef, java.util.List expr)
  {
    return factory_.createActualParamProc(procDef, expr);
  }

  /**
   * Creates an instance of {@link IntChoiceAction}.
   *
   * @return the new instance of IntChoiceAction.
   */
  public IntChoiceAction createIntChoiceAction()
  {
    return factory_.createIntChoiceAction();
  }

  /**
   * Creates an instance of {@link IntChoiceAction} with the given children.
   *
   * @return the new instance of IntChoiceAction.
   */
  public IntChoiceAction createIntChoiceAction(ActionDef leftAction, ActionDef rightAction)
  {
    return factory_.createIntChoiceAction(leftAction, rightAction);
  }

  /**
   * Creates an instance of {@link RepParallelCompProc}.
   *
   * @return the new instance of RepParallelCompProc.
   */
  public RepParallelCompProc createRepParallelCompProc()
  {
    return factory_.createRepParallelCompProc();
  }

  /**
   * Creates an instance of {@link RepParallelCompProc} with the given children.
   *
   * @return the new instance of RepParallelCompProc.
   */
  public RepParallelCompProc createRepParallelCompProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl, CSExpr cSExpr)
  {
    return factory_.createRepParallelCompProc(procDef, varDecl, cSExpr);
  }

  /**
   * Creates an instance of {@link InterleaveAction}.
   *
   * @return the new instance of InterleaveAction.
   */
  public InterleaveAction createInterleaveAction()
  {
    return factory_.createInterleaveAction();
  }

  /**
   * Creates an instance of {@link InterleaveAction} with the given children.
   *
   * @return the new instance of InterleaveAction.
   */
  public InterleaveAction createInterleaveAction(ActionDef leftAction, ActionDef rightAction, NSExpr leftNS, NSExpr rightNS)
  {
    return factory_.createInterleaveAction(leftAction, rightAction, leftNS, rightNS);
  }

  /**
   * Creates an instance of {@link CircusZPara}.
   *
   * @return the new instance of CircusZPara.
   */
  public CircusZPara createCircusZPara()
  {
    return factory_.createCircusZPara();
  }

  /**
   * Creates an instance of {@link CircusZPara} with the given children.
   *
   * @return the new instance of CircusZPara.
   */
  public CircusZPara createCircusZPara(net.sourceforge.czt.z.ast.Para para)
  {
    return factory_.createCircusZPara(para);
  }

  /**
   * Creates an instance of {@link CSExprRef}.
   *
   * @return the new instance of CSExprRef.
   */
  public CSExprRef createCSExprRef()
  {
    return factory_.createCSExprRef();
  }

  /**
   * Creates an instance of {@link CSExprRef} with the given children.
   *
   * @return the new instance of CSExprRef.
   */
  public CSExprRef createCSExprRef(java.util.List expr, net.sourceforge.czt.z.ast.RefName refName)
  {
    return factory_.createCSExprRef(expr, refName);
  }

  /**
   * Creates an instance of {@link IdxRepIntChProc}.
   *
   * @return the new instance of IdxRepIntChProc.
   */
  public IdxRepIntChProc createIdxRepIntChProc()
  {
    return factory_.createIdxRepIntChProc();
  }

  /**
   * Creates an instance of {@link IdxRepIntChProc} with the given children.
   *
   * @return the new instance of IdxRepIntChProc.
   */
  public IdxRepIntChProc createIdxRepIntChProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createIdxRepIntChProc(procDef, varDecl);
  }

  /**
   * Creates an instance of {@link RepInterleaveAction}.
   *
   * @return the new instance of RepInterleaveAction.
   */
  public RepInterleaveAction createRepInterleaveAction()
  {
    return factory_.createRepInterleaveAction();
  }

  /**
   * Creates an instance of {@link RepInterleaveAction} with the given children.
   *
   * @return the new instance of RepInterleaveAction.
   */
  public RepInterleaveAction createRepInterleaveAction(ActionDef actionDef, net.sourceforge.czt.z.ast.VarDecl varDecl, NSExpr leftNS, NSExpr rightNS)
  {
    return factory_.createRepInterleaveAction(actionDef, varDecl, leftNS, rightNS);
  }

  /**
   * Creates an instance of {@link CSExprUnion}.
   *
   * @return the new instance of CSExprUnion.
   */
  public CSExprUnion createCSExprUnion()
  {
    return factory_.createCSExprUnion();
  }

  /**
   * Creates an instance of {@link FormalParamAction}.
   *
   * @return the new instance of FormalParamAction.
   */
  public FormalParamAction createFormalParamAction()
  {
    return factory_.createFormalParamAction();
  }

  /**
   * Creates an instance of {@link FormalParamAction} with the given children.
   *
   * @return the new instance of FormalParamAction.
   */
  public FormalParamAction createFormalParamAction(ActionDef actionDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createFormalParamAction(actionDef, varDecl);
  }

  /**
   * Creates an instance of {@link RepSeqCompAction}.
   *
   * @return the new instance of RepSeqCompAction.
   */
  public RepSeqCompAction createRepSeqCompAction()
  {
    return factory_.createRepSeqCompAction();
  }

  /**
   * Creates an instance of {@link RepSeqCompAction} with the given children.
   *
   * @return the new instance of RepSeqCompAction.
   */
  public RepSeqCompAction createRepSeqCompAction(ActionDef actionDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createRepSeqCompAction(actionDef, varDecl);
  }

  /**
   * Creates an instance of {@link NSExprRef}.
   *
   * @return the new instance of NSExprRef.
   */
  public NSExprRef createNSExprRef()
  {
    return factory_.createNSExprRef();
  }

  /**
   * Creates an instance of {@link NSExprRef} with the given children.
   *
   * @return the new instance of NSExprRef.
   */
  public NSExprRef createNSExprRef(java.util.List expr, net.sourceforge.czt.z.ast.RefName refName)
  {
    return factory_.createNSExprRef(expr, refName);
  }

  /**
   * Creates an instance of {@link IntChoiceProc}.
   *
   * @return the new instance of IntChoiceProc.
   */
  public IntChoiceProc createIntChoiceProc()
  {
    return factory_.createIntChoiceProc();
  }

  /**
   * Creates an instance of {@link IntChoiceProc} with the given children.
   *
   * @return the new instance of IntChoiceProc.
   */
  public IntChoiceProc createIntChoiceProc(ProcDef leftProc, ProcDef rightProc)
  {
    return factory_.createIntChoiceProc(leftProc, rightProc);
  }

  /**
   * Creates an instance of {@link RepParallelCompAction}.
   *
   * @return the new instance of RepParallelCompAction.
   */
  public RepParallelCompAction createRepParallelCompAction()
  {
    return factory_.createRepParallelCompAction();
  }

  /**
   * Creates an instance of {@link RepParallelCompAction} with the given children.
   *
   * @return the new instance of RepParallelCompAction.
   */
  public RepParallelCompAction createRepParallelCompAction(ActionDef actionDef, net.sourceforge.czt.z.ast.VarDecl varDecl, NSExpr leftNS, NSExpr rightNS, CSExpr cSExpr)
  {
    return factory_.createRepParallelCompAction(actionDef, varDecl, leftNS, rightNS, cSExpr);
  }

  /**
   * Creates an instance of {@link StopAction}.
   *
   * @return the new instance of StopAction.
   */
  public StopAction createStopAction()
  {
    return factory_.createStopAction();
  }

  /**
   * Creates an instance of {@link ExtChoiceAction}.
   *
   * @return the new instance of ExtChoiceAction.
   */
  public ExtChoiceAction createExtChoiceAction()
  {
    return factory_.createExtChoiceAction();
  }

  /**
   * Creates an instance of {@link ExtChoiceAction} with the given children.
   *
   * @return the new instance of ExtChoiceAction.
   */
  public ExtChoiceAction createExtChoiceAction(ActionDef leftAction, ActionDef rightAction)
  {
    return factory_.createExtChoiceAction(leftAction, rightAction);
  }

  /**
   * Creates an instance of {@link FormalGenProc}.
   *
   * @return the new instance of FormalGenProc.
   */
  public FormalGenProc createFormalGenProc()
  {
    return factory_.createFormalGenProc();
  }

  /**
   * Creates an instance of {@link FormalGenProc} with the given children.
   *
   * @return the new instance of FormalGenProc.
   */
  public FormalGenProc createFormalGenProc(ProcDef procDef, java.util.List formalGenTypes)
  {
    return factory_.createFormalGenProc(procDef, formalGenTypes);
  }

  /**
   * Creates an instance of {@link ActualGenProc}.
   *
   * @return the new instance of ActualGenProc.
   */
  public ActualGenProc createActualGenProc()
  {
    return factory_.createActualGenProc();
  }

  /**
   * Creates an instance of {@link ActualGenProc} with the given children.
   *
   * @return the new instance of ActualGenProc.
   */
  public ActualGenProc createActualGenProc(ProcDef procDef, java.util.List expr)
  {
    return factory_.createActualGenProc(procDef, expr);
  }

  /**
   * Creates an instance of {@link HideProc}.
   *
   * @return the new instance of HideProc.
   */
  public HideProc createHideProc()
  {
    return factory_.createHideProc();
  }

  /**
   * Creates an instance of {@link HideProc} with the given children.
   *
   * @return the new instance of HideProc.
   */
  public HideProc createHideProc(ProcDef procDef, CSExpr cSExpr)
  {
    return factory_.createHideProc(procDef, cSExpr);
  }

  /**
   * Creates an instance of {@link SeqCompProc}.
   *
   * @return the new instance of SeqCompProc.
   */
  public SeqCompProc createSeqCompProc()
  {
    return factory_.createSeqCompProc();
  }

  /**
   * Creates an instance of {@link SeqCompProc} with the given children.
   *
   * @return the new instance of SeqCompProc.
   */
  public SeqCompProc createSeqCompProc(ProcDef leftProc, ProcDef rightProc)
  {
    return factory_.createSeqCompProc(leftProc, rightProc);
  }

  /**
   * Creates an instance of {@link VarDeclCmd}.
   *
   * @return the new instance of VarDeclCmd.
   */
  public VarDeclCmd createVarDeclCmd()
  {
    return factory_.createVarDeclCmd();
  }

  /**
   * Creates an instance of {@link VarDeclCmd} with the given children.
   *
   * @return the new instance of VarDeclCmd.
   */
  public VarDeclCmd createVarDeclCmd(net.sourceforge.czt.z.ast.VarDecl varDecl, ActionDef actionDef)
  {
    return factory_.createVarDeclCmd(varDecl, actionDef);
  }

  /**
   * Creates an instance of {@link IdxRepExtChProc}.
   *
   * @return the new instance of IdxRepExtChProc.
   */
  public IdxRepExtChProc createIdxRepExtChProc()
  {
    return factory_.createIdxRepExtChProc();
  }

  /**
   * Creates an instance of {@link IdxRepExtChProc} with the given children.
   *
   * @return the new instance of IdxRepExtChProc.
   */
  public IdxRepExtChProc createIdxRepExtChProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createIdxRepExtChProc(procDef, varDecl);
  }

  /**
   * Creates an instance of {@link PrefixingAction}.
   *
   * @return the new instance of PrefixingAction.
   */
  public PrefixingAction createPrefixingAction()
  {
    return factory_.createPrefixingAction();
  }

  /**
   * Creates an instance of {@link PrefixingAction} with the given children.
   *
   * @return the new instance of PrefixingAction.
   */
  public PrefixingAction createPrefixingAction(ActionDef actionDef, Comm comm)
  {
    return factory_.createPrefixingAction(actionDef, comm);
  }

  /**
   * Creates an instance of {@link IntantiationProc}.
   *
   * @return the new instance of IntantiationProc.
   */
  public IntantiationProc createIntantiationProc()
  {
    return factory_.createIntantiationProc();
  }

  /**
   * Creates an instance of {@link IntantiationProc} with the given children.
   *
   * @return the new instance of IntantiationProc.
   */
  public IntantiationProc createIntantiationProc(ProcDef procDef, java.util.List expr)
  {
    return factory_.createIntantiationProc(procDef, expr);
  }

  /**
   * Creates an instance of {@link Comm}.
   *
   * @return the new instance of Comm.
   */
  public Comm createComm()
  {
    return factory_.createComm();
  }

  /**
   * Creates an instance of {@link Comm} with the given children.
   *
   * @return the new instance of Comm.
   */
  public Comm createComm(net.sourceforge.czt.z.ast.RefName refName, java.util.List commParam, CommType commType, Integer multiSych)
  {
    return factory_.createComm(refName, commParam, commType, multiSych);
  }

  /**
   * Creates an instance of {@link CSDecl}.
   *
   * @return the new instance of CSDecl.
   */
  public CSDecl createCSDecl()
  {
    return factory_.createCSDecl();
  }

  /**
   * Creates an instance of {@link CSDecl} with the given children.
   *
   * @return the new instance of CSDecl.
   */
  public CSDecl createCSDecl(net.sourceforge.czt.z.ast.DeclName declName, CSExpr cSExpr)
  {
    return factory_.createCSDecl(declName, cSExpr);
  }

  /**
   * Creates an instance of {@link AssignmentPair}.
   *
   * @return the new instance of AssignmentPair.
   */
  public AssignmentPair createAssignmentPair()
  {
    return factory_.createAssignmentPair();
  }

  /**
   * Creates an instance of {@link AssignmentPair} with the given children.
   *
   * @return the new instance of AssignmentPair.
   */
  public AssignmentPair createAssignmentPair(net.sourceforge.czt.z.ast.RefName lHS, net.sourceforge.czt.z.ast.Expr rHS)
  {
    return factory_.createAssignmentPair(lHS, rHS);
  }

  /**
   * Creates an instance of {@link NSExprDiff}.
   *
   * @return the new instance of NSExprDiff.
   */
  public NSExprDiff createNSExprDiff()
  {
    return factory_.createNSExprDiff();
  }

  /**
   * Creates an instance of {@link RenameProc}.
   *
   * @return the new instance of RenameProc.
   */
  public RenameProc createRenameProc()
  {
    return factory_.createRenameProc();
  }

  /**
   * Creates an instance of {@link RenameProc} with the given children.
   *
   * @return the new instance of RenameProc.
   */
  public RenameProc createRenameProc(ProcDef procDef, java.util.List oldNames, java.util.List newNames)
  {
    return factory_.createRenameProc(procDef, oldNames, newNames);
  }

  /**
   * Creates an instance of {@link ActionDecl}.
   *
   * @return the new instance of ActionDecl.
   */
  public ActionDecl createActionDecl()
  {
    return factory_.createActionDecl();
  }

  /**
   * Creates an instance of {@link ActionDecl} with the given children.
   *
   * @return the new instance of ActionDecl.
   */
  public ActionDecl createActionDecl(net.sourceforge.czt.z.ast.DeclName declName, ActionDef actionDef)
  {
    return factory_.createActionDecl(declName, actionDef);
  }

  /**
   * Creates an instance of {@link ActualParamAction}.
   *
   * @return the new instance of ActualParamAction.
   */
  public ActualParamAction createActualParamAction()
  {
    return factory_.createActualParamAction();
  }

  /**
   * Creates an instance of {@link ActualParamAction} with the given children.
   *
   * @return the new instance of ActualParamAction.
   */
  public ActualParamAction createActualParamAction(ActionDef actionDef, java.util.List expr)
  {
    return factory_.createActualParamAction(actionDef, expr);
  }

  /**
   * Creates an instance of {@link CommIn}.
   *
   * @return the new instance of CommIn.
   */
  public CommIn createCommIn()
  {
    return factory_.createCommIn();
  }

  /**
   * Creates an instance of {@link CommIn} with the given children.
   *
   * @return the new instance of CommIn.
   */
  public CommIn createCommIn(net.sourceforge.czt.z.ast.RefName refName, net.sourceforge.czt.z.ast.Pred pred)
  {
    return factory_.createCommIn(refName, pred);
  }

  /**
   * Creates an instance of {@link IndexedProc}.
   *
   * @return the new instance of IndexedProc.
   */
  public IndexedProc createIndexedProc()
  {
    return factory_.createIndexedProc();
  }

  /**
   * Creates an instance of {@link IndexedProc} with the given children.
   *
   * @return the new instance of IndexedProc.
   */
  public IndexedProc createIndexedProc(ProcDef procDef, net.sourceforge.czt.z.ast.VarDecl varDecl)
  {
    return factory_.createIndexedProc(procDef, varDecl);
  }

  /**
   * Creates an instance of {@link ChannelDeclSExpr}.
   *
   * @return the new instance of ChannelDeclSExpr.
   */
  public ChannelDeclSExpr createChannelDeclSExpr()
  {
    return factory_.createChannelDeclSExpr();
  }

  /**
   * Creates an instance of {@link ChannelDeclSExpr} with the given children.
   *
   * @return the new instance of ChannelDeclSExpr.
   */
  public ChannelDeclSExpr createChannelDeclSExpr(net.sourceforge.czt.z.ast.SchExpr schExpr)
  {
    return factory_.createChannelDeclSExpr(schExpr);
  }


  /**
   * Creates a list of size one with the given object as element.
   * This is a convenience method.
   */
  public java.util.List list(Object o)
  {
    java.util.List result = new java.util.ArrayList();
    result.add(o);
    return result;
  }

  /**
   * Creates a list with the two objects as elements.
   * This is a convenience method.
   */
  public java.util.List list(Object first, Object second)
  {
    java.util.List result = new java.util.ArrayList();
    result.add(first);
    result.add(second);
    return result;
  }

  /**
   * Creates an application (Expr followed by Expr in the syntax),
   * that is an ApplExpr with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public ApplExpr createApplication(RefName refName, Expr expr)
  {
    return createApplExpr(createRefExpr(refName), expr, Boolean.FALSE);
  }

  /**
   * Creates a DeclName with the given word and strokes and
   * id set to <code>null</code>.
   * This is a convenience method.
   */
  public DeclName createDeclName(String word, java.util.List strokes)
  {
    return createDeclName(word, strokes, null);
  }

  /**
   * Creates a DeclName from a decorword, that is a string that
   * may contain strokes at the end.
   * The strokes are extracted from the end and the resulting
   * name is returned.
   * This is a convenience method.
   */
  public DeclName createDeclName(String decorword)
  {
    java.util.List strokes = new java.util.ArrayList();
    final String word = getWordAndStrokes(decorword, strokes);
    return createDeclName(word, strokes, null);
  }

  protected String getWordAndStrokes(String decorword, java.util.List strokes)
  {
    net.sourceforge.czt.z.util.ZChar[] zchars =
      net.sourceforge.czt.z.util.ZChar.toZChars(decorword);
    int i;
    for (i = zchars.length - 1; i >= 0; i--) {
      net.sourceforge.czt.z.util.ZChar zchar = zchars[i];
      if (net.sourceforge.czt.z.util.ZChar.INSTROKE.equals(zchar)) {
        strokes.add(0, createInStroke());
      }
      else if (net.sourceforge.czt.z.util.ZChar.OUTSTROKE.equals(zchar)) {
        strokes.add(0, createOutStroke());
      }
      else if (net.sourceforge.czt.z.util.ZChar.PRIME.equals(zchar)) {
        strokes.add(0, createNextStroke());
      }
      else if (i >= 2 &&
          net.sourceforge.czt.z.util.ZChar.NW.equals(zchar) &&
          net.sourceforge.czt.z.util.ZChar.isDigit(zchars[i - 1]) &&
          net.sourceforge.czt.z.util.ZChar.SE.equals(zchars[i - 2])) {
        NumStroke numStroke =
          createNumStroke(new Integer(zchars[i - 1].toString()));
        strokes.add(numStroke);
        i = i - 2;
      }
      else {
        break;
      }
    }
    StringBuffer result = new StringBuffer();
    for (int j = 0; j <= i; j++) {
      result.append(zchars[j].toString());
    }
    return result.toString();
  }

  /**
   * Creates a member predicate that represents equality
   * between the two given expressions.
   * This is a convenience method.
   */
  public MemPred createEquality(Expr left, Expr right)
  {
    return createMemPred(left, createSetExpr(list(right)), Boolean.TRUE);
  }

  /**
   * Creates a function operator application, that is an ApplExpr
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public ApplExpr createFunOpAppl(RefName refName, Expr expr)
  {
    return createApplExpr(createRefExpr(refName), expr, Boolean.TRUE);
  }

  /**
   * Creates a generic instantiation expression, that is a RefExpr
   * with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public RefExpr createGenInst(RefName refName, java.util.List exprs)
  {
    return createRefExpr(refName, exprs, Boolean.FALSE);
  }

  /**
   * Creates a generic operator application, that is a RefExpr
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public RefExpr createGenOpApp(RefName refName, java.util.List exprs)
  {
    return createRefExpr(refName, exprs, Boolean.TRUE);
  }

  /**
   * Creates a horizontal definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * expression and with Box set to OmitBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param expr an expression.
   */
  public AxPara createHorizontalDef(DeclName declName, Expr expr)
  {
    return createHorizontalDef(declName, null, expr);
  }

  /**
   * Creates a generic horizontal definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * expression and with Box set to OmitBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param formals a list of DeclName, the formal parameters.
   * @param expr an expression.
   */
  public AxPara createHorizontalDef(DeclName declName,
                                    java.util.List formals,
                                    Expr expr)
  {
    ConstDecl constDecl = createConstDecl(declName, expr);
    SchText schText = createSchText(list(constDecl), null);
    return createAxPara(formals, schText, Box.OmitBox);
  }

  /**
   * Creates a member predicate for a given referencing name and
   * an expression, that is a MemPred with mixfix set to <code>false</code>.
   * This is a convenience method.
   */ 
  public MemPred createMemPred(RefName refName, Expr expr)
  {
    return createMemPred(createRefExpr(refName), expr, Boolean.FALSE);
  }

  /**
   * Creates a number expression with the given value.
   * This is a convenience method.
   */
  public NumExpr createNumExpr(int value)
  {
    return createNumExpr(java.math.BigInteger.valueOf(value));
  }

  /**
   * Creates a binary product expression.
   * This is a convenience method.
   */
  public ProdExpr createProdExpr(Expr left, Expr right)
  {
    return createProdExpr(list(left, right));
  }

  /**
   * Creates a reference (expression) to the given name.
   * The mixfix child of the returned reference expression
   * is <code>false</code> and the list of expressions is empty.
   * This is a convenience method.
   */
  public RefExpr createRefExpr(RefName refName)
  {
    return createRefExpr(refName, null, Boolean.FALSE);
  }

  /**
   * Creates a RefName with the given word and strokes and
   * id set to <code>null</code>.
   * This is a convenience method.
   */
  public RefName createRefName(String word, java.util.List strokes)
  {
    return createRefName(word, strokes, null);
  }

  /**
   * Creates a RefName from a decorword, that is a string that
   * may contain strokes at the end.
   * The strokes are extracted from the end and the resulting
   * name is returned.
   * This is a convenience method.
   */
  public RefName createRefName(String decorword)
  {
    java.util.List strokes = new java.util.ArrayList();
    final String word = getWordAndStrokes(decorword, strokes);
    return createRefName(word, strokes, null);
  }

  /**
   * Creates a referencing name that refers to the given
   * declaring name.
   * This is a convenience method.
   */
  public RefName createRefName(DeclName declName)
  {
    return createRefName(declName.getWord(), declName.getStroke(), declName);
  }

  /**
   * Creates a relation operator application, that is a MemPred
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public MemPred createRelOpAppl(Expr expr, RefName refName)
  {
    return createMemPred(expr, createRefExpr(refName), Boolean.TRUE);
  }

  /**
   * Creates a schema definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * schema text and with Box set to SchBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param schemaText the schema text.
   */
  public AxPara createSchema(DeclName declName, SchText schemaText)
  {
    return createSchema(declName, null, schemaText);
  }

  /**
   * Creates a generic schema definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * schema text and with Box set to SchBox.
   * This is a convenience method.
   *
   * @param formals a list of DeclName, the formal parameters.
   * @param declName name of the schema.
   * @param schemaText the schema text.
   */
  public AxPara createSchema(DeclName declName,
                             java.util.List formals,
                             SchText schemaText)
  {
    ConstDecl constDecl = createConstDecl(declName, createSchExpr(schemaText));
    SchText schText = createSchText(list(constDecl), null);
    return createAxPara(formals, schText, Box.SchBox);
  }

  /**
   * <p>Creates a sequence, that is a set of pairs of position
   * (starting from 1) and corresponding component expression.
   * This applies rule 12.2.12 of the Z standard to a list of
   * expressions.</p>
   *
   * <p>More formally, a list
   * <code>e_1, ..., e_n</code> of expressions is transformed into
   * the set <code>\{ (1, e_1), ... , (n, e_n) \}</code>.
   * </p>
   *
   * <p>This is a convenience method.</p>
   *
   * @param exprList a list of expressions (Expr).
   */
  public SetExpr createSequence(java.util.List exprList)
  {
    java.util.List tupleList = new java.util.ArrayList(exprList.size());
    int count = 1;
    for (java.util.Iterator i = exprList.iterator(); i.hasNext(); count++) {
      tupleList.add(createTupleExpr(createNumExpr(count), (Expr) i.next()));
    }
    return createSetExpr(tupleList);
  }

  /**
   * Creates a pair, that is a tuple expression with two elements.
   * This is a convenience method.
   */
  public TupleExpr createTupleExpr(Expr left, Expr right)
  {
    return createTupleExpr(list(left, right));
  }
}
