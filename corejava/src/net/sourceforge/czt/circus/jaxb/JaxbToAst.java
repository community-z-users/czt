
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE JaxbToAst.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.util.ReflectiveVisitor;
import net.sourceforge.czt.circus.ast.*;
import net.sourceforge.czt.z.ast.*;

/**
 * The unmarshaller responsible for deserializing XML data.
 *
 * @author Gnast version 0.1
 */
public class JaxbToAst extends net.sourceforge.czt.z.jaxb.JaxbToAst
{
  protected CircusFactory mCircusFactory_;

  public JaxbToAst()
  {
    mCircusFactory_ =
      new net.sourceforge.czt.circus.impl.CircusFactoryImpl();
  }

  public JaxbToAst(net.sourceforge.czt.z.ast.ZFactory vZFactory, CircusFactory vCircusFactory)
  {
    super(vZFactory);
    mCircusFactory_ = vCircusFactory;
  }

  private static Logger getLogger()
  {
    return Logger.getLogger("net.sourceforge.czt.circus.jaxb.JaxbToAst");
  }

  public Object visitObject(Object object)
  {
    getLogger().fine("Visit " + object.getClass().toString());
    if (object instanceof String
        || object instanceof Boolean
        || object instanceof List
        || object instanceof Integer
        || object instanceof java.math.BigInteger) {
      return object;
    }
    throw new UnsupportedOperationException("Unexpected element "
                                            + object.getClass().getName());
  }

  public Object visitCSExprSet(net.sourceforge.czt.circus.jaxb.gen.CSExprSet jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCSExprSet", jaxbObject);
    List expr = new Vector();
    for (Iterator iter = jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    List refName = new Vector();
    for (Iterator iter = jaxbObject.getRefName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      refName.add(o);
    }
    CSExprSet erg = mCircusFactory_.createCSExprSet(expr, refName);
    getLogger().exiting("JaxbToAst", "visitCSExprSet", erg);
    return erg;
  }

  public Object visitIdxRepParallelCompProc(net.sourceforge.czt.circus.jaxb.gen.IdxRepParallelCompProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIdxRepParallelCompProc", jaxbObject);
    ProcDef procDef =
      (ProcDef) dispatch(jaxbObject.getProcDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    CSExpr cSExpr =
      (CSExpr) dispatch(jaxbObject.getCSExpr());
    IdxRepParallelCompProc erg = mCircusFactory_.createIdxRepParallelCompProc(procDef, varDecl, cSExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIdxRepParallelCompProc", erg);
    return erg;
  }

  public Object visitRepExtChAction(net.sourceforge.czt.circus.jaxb.gen.RepExtChAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRepExtChAction", jaxbObject);
    ActionDef actionDef =
      (ActionDef) dispatch(jaxbObject.getActionDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    RepExtChAction erg = mCircusFactory_.createRepExtChAction(actionDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitRepExtChAction", erg);
    return erg;
  }

  public Object visitGuardedAction(net.sourceforge.czt.circus.jaxb.gen.GuardedAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitGuardedAction", jaxbObject);
    ActionDef actionDef =
      (ActionDef) dispatch(jaxbObject.getActionDef());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    GuardedAction erg = mCircusFactory_.createGuardedAction(actionDef, pred);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitGuardedAction", erg);
    return erg;
  }

  public Object visitExtChoiceProc(net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExtChoiceProc", jaxbObject);
    ProcDef leftProc =
      (ProcDef) dispatch(jaxbObject.getLeftProc());
    ProcDef rightProc =
      (ProcDef) dispatch(jaxbObject.getRightProc());
    ExtChoiceProc erg = mCircusFactory_.createExtChoiceProc(leftProc, rightProc);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitExtChoiceProc", erg);
    return erg;
  }

  public Object visitParallelCompAction(net.sourceforge.czt.circus.jaxb.gen.ParallelCompAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParallelCompAction", jaxbObject);
    ActionDef leftAction =
      (ActionDef) dispatch(jaxbObject.getLeftAction());
    ActionDef rightAction =
      (ActionDef) dispatch(jaxbObject.getRightAction());
    NSExpr leftNS =
      (NSExpr) dispatch(jaxbObject.getLeftNS());
    NSExpr rightNS =
      (NSExpr) dispatch(jaxbObject.getRightNS());
    CSExpr cSExpr =
      (CSExpr) dispatch(jaxbObject.getCSExpr());
    ParallelCompAction erg = mCircusFactory_.createParallelCompAction(leftAction, rightAction, leftNS, rightNS, cSExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitParallelCompAction", erg);
    return erg;
  }

  public Object visitCallProc(net.sourceforge.czt.circus.jaxb.gen.CallProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCallProc", jaxbObject);
    net.sourceforge.czt.z.ast.RefName refName =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getRefName());
    CallProc erg = mCircusFactory_.createCallProc(refName);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitCallProc", erg);
    return erg;
  }

  public Object visitCommMixed(net.sourceforge.czt.circus.jaxb.gen.CommMixed jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCommMixed", jaxbObject);
    List commIn = new Vector();
    for (Iterator iter = jaxbObject.getCommIn().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      commIn.add(o);
    }
    List commOut = new Vector();
    for (Iterator iter = jaxbObject.getCommOut().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      commOut.add(o);
    }
    CommMixed erg = mCircusFactory_.createCommMixed(commIn, commOut);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitCommMixed", erg);
    return erg;
  }

  public Object visitNSExprUnion(net.sourceforge.czt.circus.jaxb.gen.NSExprUnion jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNSExprUnion", jaxbObject);
    NSExprUnion erg = mCircusFactory_.createNSExprUnion();
    getLogger().exiting("JaxbToAst", "visitNSExprUnion", erg);
    return erg;
  }

  public Object visitMuAction(net.sourceforge.czt.circus.jaxb.gen.MuAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitMuAction", jaxbObject);
    ActionDef actionDef =
      (ActionDef) dispatch(jaxbObject.getActionDef());
    net.sourceforge.czt.z.ast.DeclName declName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getDeclName());
    MuAction erg = mCircusFactory_.createMuAction(actionDef, declName);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitMuAction", erg);
    return erg;
  }

  public Object visitChannelDecl(net.sourceforge.czt.circus.jaxb.gen.ChannelDecl jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChannelDecl", jaxbObject);
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    ChannelDecl erg = mCircusFactory_.createChannelDecl(varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitChannelDecl", erg);
    return erg;
  }

  public Object visitHideAction(net.sourceforge.czt.circus.jaxb.gen.HideAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitHideAction", jaxbObject);
    ActionDef actionDef =
      (ActionDef) dispatch(jaxbObject.getActionDef());
    CSExpr cSExpr =
      (CSExpr) dispatch(jaxbObject.getCSExpr());
    HideAction erg = mCircusFactory_.createHideAction(actionDef, cSExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitHideAction", erg);
    return erg;
  }

  public Object visitNSDecl(net.sourceforge.czt.circus.jaxb.gen.NSDecl jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNSDecl", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName declName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getDeclName());
    NSExpr nSExpr =
      (NSExpr) dispatch(jaxbObject.getNSExpr());
    NSDecl erg = mCircusFactory_.createNSDecl(declName, nSExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitNSDecl", erg);
    return erg;
  }

  public Object visitIfGuardedCmd(net.sourceforge.czt.circus.jaxb.gen.IfGuardedCmd jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIfGuardedCmd", jaxbObject);
    List guardedActions = new Vector();
    for (Iterator iter = jaxbObject.getGuardedActions().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      guardedActions.add(o);
    }
    IfGuardedCmd erg = mCircusFactory_.createIfGuardedCmd(guardedActions);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIfGuardedCmd", erg);
    return erg;
  }

  public Object visitCommOut(net.sourceforge.czt.circus.jaxb.gen.CommOut jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCommOut", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    CommOut erg = mCircusFactory_.createCommOut(expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitCommOut", erg);
    return erg;
  }

  public Object visitNSExprInter(net.sourceforge.czt.circus.jaxb.gen.NSExprInter jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNSExprInter", jaxbObject);
    NSExprInter erg = mCircusFactory_.createNSExprInter();
    getLogger().exiting("JaxbToAst", "visitNSExprInter", erg);
    return erg;
  }

  public Object visitChaosAction(net.sourceforge.czt.circus.jaxb.gen.ChaosAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChaosAction", jaxbObject);
    ChaosAction erg = mCircusFactory_.createChaosAction();
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitChaosAction", erg);
    return erg;
  }

  public Object visitAssignmentCmd(net.sourceforge.czt.circus.jaxb.gen.AssignmentCmd jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAssignmentCmd", jaxbObject);
    List assignmentPair = new Vector();
    for (Iterator iter = jaxbObject.getAssignmentPair().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      assignmentPair.add(o);
    }
    AssignmentCmd erg = mCircusFactory_.createAssignmentCmd(assignmentPair);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitAssignmentCmd", erg);
    return erg;
  }

  public Object visitIdxRepSeqCompProc(net.sourceforge.czt.circus.jaxb.gen.IdxRepSeqCompProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIdxRepSeqCompProc", jaxbObject);
    ProcDef procDef =
      (ProcDef) dispatch(jaxbObject.getProcDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    IdxRepSeqCompProc erg = mCircusFactory_.createIdxRepSeqCompProc(procDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIdxRepSeqCompProc", erg);
    return erg;
  }

  public Object visitCSExprInter(net.sourceforge.czt.circus.jaxb.gen.CSExprInter jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCSExprInter", jaxbObject);
    CSExprInter erg = mCircusFactory_.createCSExprInter();
    getLogger().exiting("JaxbToAst", "visitCSExprInter", erg);
    return erg;
  }

  public Object visitFormalParamProc(net.sourceforge.czt.circus.jaxb.gen.FormalParamProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitFormalParamProc", jaxbObject);
    ProcDef procDef =
      (ProcDef) dispatch(jaxbObject.getProcDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    FormalParamProc erg = mCircusFactory_.createFormalParamProc(procDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitFormalParamProc", erg);
    return erg;
  }

  public Object visitSkipAction(net.sourceforge.czt.circus.jaxb.gen.SkipAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSkipAction", jaxbObject);
    SkipAction erg = mCircusFactory_.createSkipAction();
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSkipAction", erg);
    return erg;
  }

  public Object visitRepInterleaveProc(net.sourceforge.czt.circus.jaxb.gen.RepInterleaveProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRepInterleaveProc", jaxbObject);
    ProcDef procDef =
      (ProcDef) dispatch(jaxbObject.getProcDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    RepInterleaveProc erg = mCircusFactory_.createRepInterleaveProc(procDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitRepInterleaveProc", erg);
    return erg;
  }

  public Object visitRepSeqCompProc(net.sourceforge.czt.circus.jaxb.gen.RepSeqCompProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRepSeqCompProc", jaxbObject);
    ProcDef procDef =
      (ProcDef) dispatch(jaxbObject.getProcDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    RepSeqCompProc erg = mCircusFactory_.createRepSeqCompProc(procDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitRepSeqCompProc", erg);
    return erg;
  }

  public Object visitRepExtChProc(net.sourceforge.czt.circus.jaxb.gen.RepExtChProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRepExtChProc", jaxbObject);
    ProcDef procDef =
      (ProcDef) dispatch(jaxbObject.getProcDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    RepExtChProc erg = mCircusFactory_.createRepExtChProc(procDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitRepExtChProc", erg);
    return erg;
  }

  public Object visitSpecStmtCmd(net.sourceforge.czt.circus.jaxb.gen.SpecStmtCmd jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSpecStmtCmd", jaxbObject);
    List frame = new Vector();
    for (Iterator iter = jaxbObject.getFrame().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      frame.add(o);
    }
    net.sourceforge.czt.z.ast.Pred pre =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPre());
    net.sourceforge.czt.z.ast.Pred post =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPost());
    SpecStmtCmd erg = mCircusFactory_.createSpecStmtCmd(frame, pre, post);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSpecStmtCmd", erg);
    return erg;
  }

  public Object visitCallAction(net.sourceforge.czt.circus.jaxb.gen.CallAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCallAction", jaxbObject);
    net.sourceforge.czt.z.ast.RefName refName =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getRefName());
    CallAction erg = mCircusFactory_.createCallAction(refName);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitCallAction", erg);
    return erg;
  }

  public Object visitIdxRepInterleaveProc(net.sourceforge.czt.circus.jaxb.gen.IdxRepInterleaveProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIdxRepInterleaveProc", jaxbObject);
    ProcDef procDef =
      (ProcDef) dispatch(jaxbObject.getProcDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    IdxRepInterleaveProc erg = mCircusFactory_.createIdxRepInterleaveProc(procDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIdxRepInterleaveProc", erg);
    return erg;
  }

  public Object visitProcZPara(net.sourceforge.czt.circus.jaxb.gen.ProcZPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProcZPara", jaxbObject);
    net.sourceforge.czt.z.ast.Para para =
      (net.sourceforge.czt.z.ast.Para) dispatch(jaxbObject.getPara());
    ProcZPara erg = mCircusFactory_.createProcZPara(para);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitProcZPara", erg);
    return erg;
  }

  public Object visitProcDesc(net.sourceforge.czt.circus.jaxb.gen.ProcDesc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProcDesc", jaxbObject);
    SchemaAction stateSchemaAction =
      (SchemaAction) dispatch(jaxbObject.getStateSchemaAction());
    List procPara = new Vector();
    for (Iterator iter = jaxbObject.getProcPara().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      procPara.add(o);
    }
    List actionDef = new Vector();
    for (Iterator iter = jaxbObject.getActionDef().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      actionDef.add(o);
    }
    ProcDesc erg = mCircusFactory_.createProcDesc(stateSchemaAction, procPara, actionDef);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitProcDesc", erg);
    return erg;
  }

  public Object visitProcDecl(net.sourceforge.czt.circus.jaxb.gen.ProcDecl jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProcDecl", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName declName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getDeclName());
    ProcDef procDef =
      (ProcDef) dispatch(jaxbObject.getProcDef());
    ProcDecl erg = mCircusFactory_.createProcDecl(declName, procDef);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitProcDecl", erg);
    return erg;
  }

  public Object visitRepIntChProc(net.sourceforge.czt.circus.jaxb.gen.RepIntChProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRepIntChProc", jaxbObject);
    ProcDef procDef =
      (ProcDef) dispatch(jaxbObject.getProcDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    RepIntChProc erg = mCircusFactory_.createRepIntChProc(procDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitRepIntChProc", erg);
    return erg;
  }

  public Object visitCircusSect(net.sourceforge.czt.circus.jaxb.gen.CircusSect jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCircusSect", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    List parent = new Vector();
    for (Iterator iter = jaxbObject.getParent().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      parent.add(o);
    }
    List circusPara = new Vector();
    for (Iterator iter = jaxbObject.getCircusPara().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      circusPara.add(o);
    }
    CircusSect erg = mCircusFactory_.createCircusSect(name, parent, circusPara);
    getLogger().exiting("JaxbToAst", "visitCircusSect", erg);
    return erg;
  }

  public Object visitCSExprDiff(net.sourceforge.czt.circus.jaxb.gen.CSExprDiff jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCSExprDiff", jaxbObject);
    CSExprDiff erg = mCircusFactory_.createCSExprDiff();
    getLogger().exiting("JaxbToAst", "visitCSExprDiff", erg);
    return erg;
  }

  public Object visitInterleaveProc(net.sourceforge.czt.circus.jaxb.gen.InterleaveProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterleaveProc", jaxbObject);
    ProcDef leftProc =
      (ProcDef) dispatch(jaxbObject.getLeftProc());
    ProcDef rightProc =
      (ProcDef) dispatch(jaxbObject.getRightProc());
    InterleaveProc erg = mCircusFactory_.createInterleaveProc(leftProc, rightProc);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitInterleaveProc", erg);
    return erg;
  }

  public Object visitParallelCompProc(net.sourceforge.czt.circus.jaxb.gen.ParallelCompProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParallelCompProc", jaxbObject);
    ProcDef leftProc =
      (ProcDef) dispatch(jaxbObject.getLeftProc());
    ProcDef rightProc =
      (ProcDef) dispatch(jaxbObject.getRightProc());
    CSExpr cSExpr =
      (CSExpr) dispatch(jaxbObject.getCSExpr());
    ParallelCompProc erg = mCircusFactory_.createParallelCompProc(leftProc, rightProc, cSExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitParallelCompProc", erg);
    return erg;
  }

  public Object visitSeqCompAction(net.sourceforge.czt.circus.jaxb.gen.SeqCompAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSeqCompAction", jaxbObject);
    ActionDef leftAction =
      (ActionDef) dispatch(jaxbObject.getLeftAction());
    ActionDef rightAction =
      (ActionDef) dispatch(jaxbObject.getRightAction());
    SeqCompAction erg = mCircusFactory_.createSeqCompAction(leftAction, rightAction);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSeqCompAction", erg);
    return erg;
  }

  public Object visitNSExprSet(net.sourceforge.czt.circus.jaxb.gen.NSExprSet jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNSExprSet", jaxbObject);
    List expr = new Vector();
    for (Iterator iter = jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    List refName = new Vector();
    for (Iterator iter = jaxbObject.getRefName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      refName.add(o);
    }
    NSExprSet erg = mCircusFactory_.createNSExprSet(expr, refName);
    getLogger().exiting("JaxbToAst", "visitNSExprSet", erg);
    return erg;
  }

  public Object visitRepIntChAction(net.sourceforge.czt.circus.jaxb.gen.RepIntChAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRepIntChAction", jaxbObject);
    ActionDef actionDef =
      (ActionDef) dispatch(jaxbObject.getActionDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    RepIntChAction erg = mCircusFactory_.createRepIntChAction(actionDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitRepIntChAction", erg);
    return erg;
  }

  public Object visitSchemaAction(net.sourceforge.czt.circus.jaxb.gen.SchemaAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSchemaAction", jaxbObject);
    net.sourceforge.czt.z.ast.SchExpr schExpr =
      (net.sourceforge.czt.z.ast.SchExpr) dispatch(jaxbObject.getSchExpr());
    SchemaAction erg = mCircusFactory_.createSchemaAction(schExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSchemaAction", erg);
    return erg;
  }

  public Object visitActualParamProc(net.sourceforge.czt.circus.jaxb.gen.ActualParamProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitActualParamProc", jaxbObject);
    ProcDef procDef =
      (ProcDef) dispatch(jaxbObject.getProcDef());
    List expr = new Vector();
    for (Iterator iter = jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    ActualParamProc erg = mCircusFactory_.createActualParamProc(procDef, expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitActualParamProc", erg);
    return erg;
  }

  public Object visitIntChoiceAction(net.sourceforge.czt.circus.jaxb.gen.IntChoiceAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntChoiceAction", jaxbObject);
    ActionDef leftAction =
      (ActionDef) dispatch(jaxbObject.getLeftAction());
    ActionDef rightAction =
      (ActionDef) dispatch(jaxbObject.getRightAction());
    IntChoiceAction erg = mCircusFactory_.createIntChoiceAction(leftAction, rightAction);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIntChoiceAction", erg);
    return erg;
  }

  public Object visitRepParallelCompProc(net.sourceforge.czt.circus.jaxb.gen.RepParallelCompProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRepParallelCompProc", jaxbObject);
    ProcDef procDef =
      (ProcDef) dispatch(jaxbObject.getProcDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    CSExpr cSExpr =
      (CSExpr) dispatch(jaxbObject.getCSExpr());
    RepParallelCompProc erg = mCircusFactory_.createRepParallelCompProc(procDef, varDecl, cSExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitRepParallelCompProc", erg);
    return erg;
  }

  public Object visitInterleaveAction(net.sourceforge.czt.circus.jaxb.gen.InterleaveAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterleaveAction", jaxbObject);
    ActionDef leftAction =
      (ActionDef) dispatch(jaxbObject.getLeftAction());
    ActionDef rightAction =
      (ActionDef) dispatch(jaxbObject.getRightAction());
    NSExpr leftNS =
      (NSExpr) dispatch(jaxbObject.getLeftNS());
    NSExpr rightNS =
      (NSExpr) dispatch(jaxbObject.getRightNS());
    InterleaveAction erg = mCircusFactory_.createInterleaveAction(leftAction, rightAction, leftNS, rightNS);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitInterleaveAction", erg);
    return erg;
  }

  public Object visitCircusZPara(net.sourceforge.czt.circus.jaxb.gen.CircusZPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCircusZPara", jaxbObject);
    net.sourceforge.czt.z.ast.Para para =
      (net.sourceforge.czt.z.ast.Para) dispatch(jaxbObject.getPara());
    CircusZPara erg = mCircusFactory_.createCircusZPara(para);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitCircusZPara", erg);
    return erg;
  }

  public Object visitCSExprRef(net.sourceforge.czt.circus.jaxb.gen.CSExprRef jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCSExprRef", jaxbObject);
    List expr = new Vector();
    for (Iterator iter = jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    net.sourceforge.czt.z.ast.RefName refName =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getRefName());
    CSExprRef erg = mCircusFactory_.createCSExprRef(expr, refName);
    getLogger().exiting("JaxbToAst", "visitCSExprRef", erg);
    return erg;
  }

  public Object visitIdxRepIntChProc(net.sourceforge.czt.circus.jaxb.gen.IdxRepIntChProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIdxRepIntChProc", jaxbObject);
    ProcDef procDef =
      (ProcDef) dispatch(jaxbObject.getProcDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    IdxRepIntChProc erg = mCircusFactory_.createIdxRepIntChProc(procDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIdxRepIntChProc", erg);
    return erg;
  }

  public Object visitRepInterleaveAction(net.sourceforge.czt.circus.jaxb.gen.RepInterleaveAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRepInterleaveAction", jaxbObject);
    ActionDef actionDef =
      (ActionDef) dispatch(jaxbObject.getActionDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    NSExpr leftNS =
      (NSExpr) dispatch(jaxbObject.getLeftNS());
    NSExpr rightNS =
      (NSExpr) dispatch(jaxbObject.getRightNS());
    RepInterleaveAction erg = mCircusFactory_.createRepInterleaveAction(actionDef, varDecl, leftNS, rightNS);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitRepInterleaveAction", erg);
    return erg;
  }

  public Object visitCSExprUnion(net.sourceforge.czt.circus.jaxb.gen.CSExprUnion jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCSExprUnion", jaxbObject);
    CSExprUnion erg = mCircusFactory_.createCSExprUnion();
    getLogger().exiting("JaxbToAst", "visitCSExprUnion", erg);
    return erg;
  }

  public Object visitFormalParamAction(net.sourceforge.czt.circus.jaxb.gen.FormalParamAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitFormalParamAction", jaxbObject);
    ActionDef actionDef =
      (ActionDef) dispatch(jaxbObject.getActionDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    FormalParamAction erg = mCircusFactory_.createFormalParamAction(actionDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitFormalParamAction", erg);
    return erg;
  }

  public Object visitRepSeqCompAction(net.sourceforge.czt.circus.jaxb.gen.RepSeqCompAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRepSeqCompAction", jaxbObject);
    ActionDef actionDef =
      (ActionDef) dispatch(jaxbObject.getActionDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    RepSeqCompAction erg = mCircusFactory_.createRepSeqCompAction(actionDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitRepSeqCompAction", erg);
    return erg;
  }

  public Object visitNSExprRef(net.sourceforge.czt.circus.jaxb.gen.NSExprRef jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNSExprRef", jaxbObject);
    List expr = new Vector();
    for (Iterator iter = jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    net.sourceforge.czt.z.ast.RefName refName =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getRefName());
    NSExprRef erg = mCircusFactory_.createNSExprRef(expr, refName);
    getLogger().exiting("JaxbToAst", "visitNSExprRef", erg);
    return erg;
  }

  public Object visitIntChoiceProc(net.sourceforge.czt.circus.jaxb.gen.IntChoiceProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntChoiceProc", jaxbObject);
    ProcDef leftProc =
      (ProcDef) dispatch(jaxbObject.getLeftProc());
    ProcDef rightProc =
      (ProcDef) dispatch(jaxbObject.getRightProc());
    IntChoiceProc erg = mCircusFactory_.createIntChoiceProc(leftProc, rightProc);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIntChoiceProc", erg);
    return erg;
  }

  public Object visitRepParallelCompAction(net.sourceforge.czt.circus.jaxb.gen.RepParallelCompAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRepParallelCompAction", jaxbObject);
    ActionDef actionDef =
      (ActionDef) dispatch(jaxbObject.getActionDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    NSExpr leftNS =
      (NSExpr) dispatch(jaxbObject.getLeftNS());
    NSExpr rightNS =
      (NSExpr) dispatch(jaxbObject.getRightNS());
    CSExpr cSExpr =
      (CSExpr) dispatch(jaxbObject.getCSExpr());
    RepParallelCompAction erg = mCircusFactory_.createRepParallelCompAction(actionDef, varDecl, leftNS, rightNS, cSExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitRepParallelCompAction", erg);
    return erg;
  }

  public Object visitStopAction(net.sourceforge.czt.circus.jaxb.gen.StopAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitStopAction", jaxbObject);
    StopAction erg = mCircusFactory_.createStopAction();
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitStopAction", erg);
    return erg;
  }

  public Object visitExtChoiceAction(net.sourceforge.czt.circus.jaxb.gen.ExtChoiceAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExtChoiceAction", jaxbObject);
    ActionDef leftAction =
      (ActionDef) dispatch(jaxbObject.getLeftAction());
    ActionDef rightAction =
      (ActionDef) dispatch(jaxbObject.getRightAction());
    ExtChoiceAction erg = mCircusFactory_.createExtChoiceAction(leftAction, rightAction);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitExtChoiceAction", erg);
    return erg;
  }

  public Object visitFormalGenProc(net.sourceforge.czt.circus.jaxb.gen.FormalGenProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitFormalGenProc", jaxbObject);
    ProcDef procDef =
      (ProcDef) dispatch(jaxbObject.getProcDef());
    List formalGenTypes = new Vector();
    for (Iterator iter = jaxbObject.getFormalGenTypes().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      formalGenTypes.add(o);
    }
    FormalGenProc erg = mCircusFactory_.createFormalGenProc(procDef, formalGenTypes);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitFormalGenProc", erg);
    return erg;
  }

  public Object visitActualGenProc(net.sourceforge.czt.circus.jaxb.gen.ActualGenProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitActualGenProc", jaxbObject);
    ProcDef procDef =
      (ProcDef) dispatch(jaxbObject.getProcDef());
    List expr = new Vector();
    for (Iterator iter = jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    ActualGenProc erg = mCircusFactory_.createActualGenProc(procDef, expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitActualGenProc", erg);
    return erg;
  }

  public Object visitHideProc(net.sourceforge.czt.circus.jaxb.gen.HideProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitHideProc", jaxbObject);
    ProcDef procDef =
      (ProcDef) dispatch(jaxbObject.getProcDef());
    CSExpr cSExpr =
      (CSExpr) dispatch(jaxbObject.getCSExpr());
    HideProc erg = mCircusFactory_.createHideProc(procDef, cSExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitHideProc", erg);
    return erg;
  }

  public Object visitSeqCompProc(net.sourceforge.czt.circus.jaxb.gen.SeqCompProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSeqCompProc", jaxbObject);
    ProcDef leftProc =
      (ProcDef) dispatch(jaxbObject.getLeftProc());
    ProcDef rightProc =
      (ProcDef) dispatch(jaxbObject.getRightProc());
    SeqCompProc erg = mCircusFactory_.createSeqCompProc(leftProc, rightProc);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSeqCompProc", erg);
    return erg;
  }

  public Object visitVarDeclCmd(net.sourceforge.czt.circus.jaxb.gen.VarDeclCmd jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitVarDeclCmd", jaxbObject);
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    ActionDef actionDef =
      (ActionDef) dispatch(jaxbObject.getActionDef());
    VarDeclCmd erg = mCircusFactory_.createVarDeclCmd(varDecl, actionDef);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitVarDeclCmd", erg);
    return erg;
  }

  public Object visitIdxRepExtChProc(net.sourceforge.czt.circus.jaxb.gen.IdxRepExtChProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIdxRepExtChProc", jaxbObject);
    ProcDef procDef =
      (ProcDef) dispatch(jaxbObject.getProcDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    IdxRepExtChProc erg = mCircusFactory_.createIdxRepExtChProc(procDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIdxRepExtChProc", erg);
    return erg;
  }

  public Object visitPrefixingAction(net.sourceforge.czt.circus.jaxb.gen.PrefixingAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPrefixingAction", jaxbObject);
    ActionDef actionDef =
      (ActionDef) dispatch(jaxbObject.getActionDef());
    Comm comm =
      (Comm) dispatch(jaxbObject.getComm());
    PrefixingAction erg = mCircusFactory_.createPrefixingAction(actionDef, comm);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitPrefixingAction", erg);
    return erg;
  }

  public Object visitIntantiationProc(net.sourceforge.czt.circus.jaxb.gen.IntantiationProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntantiationProc", jaxbObject);
    ProcDef procDef =
      (ProcDef) dispatch(jaxbObject.getProcDef());
    List expr = new Vector();
    for (Iterator iter = jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    IntantiationProc erg = mCircusFactory_.createIntantiationProc(procDef, expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIntantiationProc", erg);
    return erg;
  }

  public Object visitComm(net.sourceforge.czt.circus.jaxb.gen.Comm jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitComm", jaxbObject);
    net.sourceforge.czt.z.ast.RefName refName =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getRefName());
    List commParam = new Vector();
    for (Iterator iter = jaxbObject.getCommParam().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      commParam.add(o);
    }
    CommType commType =
      (CommType) dispatch(jaxbObject.getCommType());
    Integer multiSych =
      (Integer) dispatch(jaxbObject.getMultiSych());
    Comm erg = mCircusFactory_.createComm(refName, commParam, commType, multiSych);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitComm", erg);
    return erg;
  }

  public Object visitCSDecl(net.sourceforge.czt.circus.jaxb.gen.CSDecl jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCSDecl", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName declName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getDeclName());
    CSExpr cSExpr =
      (CSExpr) dispatch(jaxbObject.getCSExpr());
    CSDecl erg = mCircusFactory_.createCSDecl(declName, cSExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitCSDecl", erg);
    return erg;
  }

  public Object visitAssignmentPair(net.sourceforge.czt.circus.jaxb.gen.AssignmentPair jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAssignmentPair", jaxbObject);
    net.sourceforge.czt.z.ast.RefName lHS =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getLHS());
    net.sourceforge.czt.z.ast.Expr rHS =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getRHS());
    AssignmentPair erg = mCircusFactory_.createAssignmentPair(lHS, rHS);
    getLogger().exiting("JaxbToAst", "visitAssignmentPair", erg);
    return erg;
  }

  public Object visitNSExprDiff(net.sourceforge.czt.circus.jaxb.gen.NSExprDiff jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNSExprDiff", jaxbObject);
    NSExprDiff erg = mCircusFactory_.createNSExprDiff();
    getLogger().exiting("JaxbToAst", "visitNSExprDiff", erg);
    return erg;
  }

  public Object visitRenameProc(net.sourceforge.czt.circus.jaxb.gen.RenameProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRenameProc", jaxbObject);
    ProcDef procDef =
      (ProcDef) dispatch(jaxbObject.getProcDef());
    List oldNames = new Vector();
    for (Iterator iter = jaxbObject.getOldNames().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      oldNames.add(o);
    }
    List newNames = new Vector();
    for (Iterator iter = jaxbObject.getNewNames().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      newNames.add(o);
    }
    RenameProc erg = mCircusFactory_.createRenameProc(procDef, oldNames, newNames);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitRenameProc", erg);
    return erg;
  }

  public Object visitActionDecl(net.sourceforge.czt.circus.jaxb.gen.ActionDecl jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitActionDecl", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName declName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getDeclName());
    ActionDef actionDef =
      (ActionDef) dispatch(jaxbObject.getActionDef());
    ActionDecl erg = mCircusFactory_.createActionDecl(declName, actionDef);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitActionDecl", erg);
    return erg;
  }

  public Object visitActualParamAction(net.sourceforge.czt.circus.jaxb.gen.ActualParamAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitActualParamAction", jaxbObject);
    ActionDef actionDef =
      (ActionDef) dispatch(jaxbObject.getActionDef());
    List expr = new Vector();
    for (Iterator iter = jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    ActualParamAction erg = mCircusFactory_.createActualParamAction(actionDef, expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitActualParamAction", erg);
    return erg;
  }

  public Object visitCommIn(net.sourceforge.czt.circus.jaxb.gen.CommIn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCommIn", jaxbObject);
    net.sourceforge.czt.z.ast.RefName refName =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getRefName());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    CommIn erg = mCircusFactory_.createCommIn(refName, pred);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitCommIn", erg);
    return erg;
  }

  public Object visitIndexedProc(net.sourceforge.czt.circus.jaxb.gen.IndexedProc jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIndexedProc", jaxbObject);
    ProcDef procDef =
      (ProcDef) dispatch(jaxbObject.getProcDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    IndexedProc erg = mCircusFactory_.createIndexedProc(procDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIndexedProc", erg);
    return erg;
  }

  public Object visitChannelDeclSExpr(net.sourceforge.czt.circus.jaxb.gen.ChannelDeclSExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChannelDeclSExpr", jaxbObject);
    net.sourceforge.czt.z.ast.SchExpr schExpr =
      (net.sourceforge.czt.z.ast.SchExpr) dispatch(jaxbObject.getSchExpr());
    ChannelDeclSExpr erg = mCircusFactory_.createChannelDeclSExpr(schExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitChannelDeclSExpr", erg);
    return erg;
  }
}
