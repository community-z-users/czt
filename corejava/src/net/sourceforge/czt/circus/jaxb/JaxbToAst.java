
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE JaxbToAst.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.util.ReflectiveVisitor;
import net.sourceforge.czt.circus.ast.*;
import net.sourceforge.czt.z.ast.*;

/**
 * The unmarshaller responsible for deserializing XML data.
 *
 * @author Gnast version 0.1
 */
public class JaxbToAst extends net.sourceforge.czt.z.jaxb.JaxbToAst
{
  protected CircusFactory mCircusFactory_;

  public JaxbToAst()
  {
    mCircusFactory_ =
      new net.sourceforge.czt.circus.impl.CircusFactoryImpl();
  }

  public JaxbToAst(net.sourceforge.czt.z.ast.ZFactory vZFactory, CircusFactory vCircusFactory)
  {
    super(vZFactory);
    mCircusFactory_ = vCircusFactory;
  }

  private static Logger getLogger()
  {
    return Logger.getLogger("net.sourceforge.czt.circus.jaxb.JaxbToAst");
  }

  public Object visitObject(Object object)
  {
    getLogger().fine("Visit " + object.getClass().toString());
    if (object instanceof String
        || object instanceof Boolean
        || object instanceof List
        || object instanceof Integer
        || object instanceof java.math.BigInteger) {
      return object;
    }
    throw new UnsupportedOperationException("Unexpected element "
                                            + object.getClass().getName());
  }

  public Object visitSeqActionR(net.sourceforge.czt.circus.jaxb.gen.SeqActionR jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSeqActionR", jaxbObject);
    Action action =
      (Action) dispatch(jaxbObject.getAction());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    SeqActionR erg = mCircusFactory_.createSeqActionR(action, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSeqActionR", erg);
    return erg;
  }

  public Object visitSchChannelPara(net.sourceforge.czt.circus.jaxb.gen.SchChannelPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSchChannelPara", jaxbObject);
    net.sourceforge.czt.z.ast.RefName refName =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getRefName());
    SchChannelPara erg = mCircusFactory_.createSchChannelPara(refName);
    getLogger().exiting("JaxbToAst", "visitSchChannelPara", erg);
    return erg;
  }

  public Object visitInterleaveProcessRI(net.sourceforge.czt.circus.jaxb.gen.InterleaveProcessRI jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterleaveProcessRI", jaxbObject);
    ProcessDef processDef =
      (ProcessDef) dispatch(jaxbObject.getProcessDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    InterleaveProcessRI erg = mCircusFactory_.createInterleaveProcessRI(processDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitInterleaveProcessRI", erg);
    return erg;
  }

  public Object visitInterleaveActionR(net.sourceforge.czt.circus.jaxb.gen.InterleaveActionR jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterleaveActionR", jaxbObject);
    Action action =
      (Action) dispatch(jaxbObject.getAction());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    InterleaveActionR erg = mCircusFactory_.createInterleaveActionR(action, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitInterleaveActionR", erg);
    return erg;
  }

  public Object visitGuardedAction(net.sourceforge.czt.circus.jaxb.gen.GuardedAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitGuardedAction", jaxbObject);
    Action action =
      (Action) dispatch(jaxbObject.getAction());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    GuardedAction erg = mCircusFactory_.createGuardedAction(action, pred);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitGuardedAction", erg);
    return erg;
  }

  public Object visitInstantiationProcess(net.sourceforge.czt.circus.jaxb.gen.InstantiationProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInstantiationProcess", jaxbObject);
    ProcessDef processDef =
      (ProcessDef) dispatch(jaxbObject.getProcessDef());
    List expr = new Vector();
    for (Iterator iter = jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    InstantiationProcess erg = mCircusFactory_.createInstantiationProcess(processDef, expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitInstantiationProcess", erg);
    return erg;
  }

  public Object visitFormalParamProcess(net.sourceforge.czt.circus.jaxb.gen.FormalParamProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitFormalParamProcess", jaxbObject);
    ProcessDef processDef =
      (ProcessDef) dispatch(jaxbObject.getProcessDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    FormalParamProcess erg = mCircusFactory_.createFormalParamProcess(processDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitFormalParamProcess", erg);
    return erg;
  }

  public Object visitParallelAction(net.sourceforge.czt.circus.jaxb.gen.ParallelAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParallelAction", jaxbObject);
    Action leftAction =
      (Action) dispatch(jaxbObject.getLeftAction());
    Action rightAction =
      (Action) dispatch(jaxbObject.getRightAction());
    NameSet leftNameSet =
      (NameSet) dispatch(jaxbObject.getLeftNameSet());
    NameSet rightNameSet =
      (NameSet) dispatch(jaxbObject.getRightNameSet());
    ChannelSet channelSet =
      (ChannelSet) dispatch(jaxbObject.getChannelSet());
    ParallelAction erg = mCircusFactory_.createParallelAction(leftAction, rightAction, leftNameSet, rightNameSet, channelSet);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitParallelAction", erg);
    return erg;
  }

  public Object visitSpecStmtCommand(net.sourceforge.czt.circus.jaxb.gen.SpecStmtCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSpecStmtCommand", jaxbObject);
    List frame = new Vector();
    for (Iterator iter = jaxbObject.getFrame().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      frame.add(o);
    }
    net.sourceforge.czt.z.ast.Pred pre =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPre());
    net.sourceforge.czt.z.ast.Pred post =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPost());
    SpecStmtCommand erg = mCircusFactory_.createSpecStmtCommand(frame, pre, post);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSpecStmtCommand", erg);
    return erg;
  }

  public Object visitSeqProcessR(net.sourceforge.czt.circus.jaxb.gen.SeqProcessR jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSeqProcessR", jaxbObject);
    ProcessDef processDef =
      (ProcessDef) dispatch(jaxbObject.getProcessDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    SeqProcessR erg = mCircusFactory_.createSeqProcessR(processDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSeqProcessR", erg);
    return erg;
  }

  public Object visitMuAction(net.sourceforge.czt.circus.jaxb.gen.MuAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitMuAction", jaxbObject);
    Action action =
      (Action) dispatch(jaxbObject.getAction());
    net.sourceforge.czt.z.ast.DeclName declName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getDeclName());
    MuAction erg = mCircusFactory_.createMuAction(action, declName);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitMuAction", erg);
    return erg;
  }

  public Object visitHideAction(net.sourceforge.czt.circus.jaxb.gen.HideAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitHideAction", jaxbObject);
    Action action =
      (Action) dispatch(jaxbObject.getAction());
    ChannelSet channelSet =
      (ChannelSet) dispatch(jaxbObject.getChannelSet());
    HideAction erg = mCircusFactory_.createHideAction(action, channelSet);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitHideAction", erg);
    return erg;
  }

  public Object visitChaosAction(net.sourceforge.czt.circus.jaxb.gen.ChaosAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChaosAction", jaxbObject);
    ChaosAction erg = mCircusFactory_.createChaosAction();
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitChaosAction", erg);
    return erg;
  }

  public Object visitProcessPara(net.sourceforge.czt.circus.jaxb.gen.ProcessPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProcessPara", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName declName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getDeclName());
    ProcessDef processDef =
      (ProcessDef) dispatch(jaxbObject.getProcessDef());
    ProcessPara erg = mCircusFactory_.createProcessPara(declName, processDef);
    getLogger().exiting("JaxbToAst", "visitProcessPara", erg);
    return erg;
  }

  public Object visitSeqAction(net.sourceforge.czt.circus.jaxb.gen.SeqAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSeqAction", jaxbObject);
    Action leftAction =
      (Action) dispatch(jaxbObject.getLeftAction());
    Action rightAction =
      (Action) dispatch(jaxbObject.getRightAction());
    SeqAction erg = mCircusFactory_.createSeqAction(leftAction, rightAction);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSeqAction", erg);
    return erg;
  }

  public Object visitSkipAction(net.sourceforge.czt.circus.jaxb.gen.SkipAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSkipAction", jaxbObject);
    SkipAction erg = mCircusFactory_.createSkipAction();
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSkipAction", erg);
    return erg;
  }

  public Object visitActualGenProcess(net.sourceforge.czt.circus.jaxb.gen.ActualGenProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitActualGenProcess", jaxbObject);
    ProcessDef processDef =
      (ProcessDef) dispatch(jaxbObject.getProcessDef());
    List expr = new Vector();
    for (Iterator iter = jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    ActualGenProcess erg = mCircusFactory_.createActualGenProcess(processDef, expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitActualGenProcess", erg);
    return erg;
  }

  public Object visitCallAction(net.sourceforge.czt.circus.jaxb.gen.CallAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCallAction", jaxbObject);
    net.sourceforge.czt.z.ast.RefName refName =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getRefName());
    CallAction erg = mCircusFactory_.createCallAction(refName);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitCallAction", erg);
    return erg;
  }

  public Object visitChannelSetPara(net.sourceforge.czt.circus.jaxb.gen.ChannelSetPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChannelSetPara", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName declName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getDeclName());
    ChannelSet channelSet =
      (ChannelSet) dispatch(jaxbObject.getChannelSet());
    ChannelSetPara erg = mCircusFactory_.createChannelSetPara(declName, channelSet);
    getLogger().exiting("JaxbToAst", "visitChannelSetPara", erg);
    return erg;
  }

  public Object visitIntChoiceProcessR(net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcessR jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntChoiceProcessR", jaxbObject);
    ProcessDef processDef =
      (ProcessDef) dispatch(jaxbObject.getProcessDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    IntChoiceProcessR erg = mCircusFactory_.createIntChoiceProcessR(processDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIntChoiceProcessR", erg);
    return erg;
  }

  public Object visitIntChoiceActionR(net.sourceforge.czt.circus.jaxb.gen.IntChoiceActionR jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntChoiceActionR", jaxbObject);
    Action action =
      (Action) dispatch(jaxbObject.getAction());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    IntChoiceActionR erg = mCircusFactory_.createIntChoiceActionR(action, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIntChoiceActionR", erg);
    return erg;
  }

  public Object visitDifferenceChannelSet(net.sourceforge.czt.circus.jaxb.gen.DifferenceChannelSet jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDifferenceChannelSet", jaxbObject);
    ChannelSet leftOperand =
      (ChannelSet) dispatch(jaxbObject.getLeftOperand());
    ChannelSet rightOperand =
      (ChannelSet) dispatch(jaxbObject.getRightOperand());
    DifferenceChannelSet erg = mCircusFactory_.createDifferenceChannelSet(leftOperand, rightOperand);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitDifferenceChannelSet", erg);
    return erg;
  }

  public Object visitMixedField(net.sourceforge.czt.circus.jaxb.gen.MixedField jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitMixedField", jaxbObject);
    List inputField = new Vector();
    for (Iterator iter = jaxbObject.getInputField().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      inputField.add(o);
    }
    List outputField = new Vector();
    for (Iterator iter = jaxbObject.getOutputField().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      outputField.add(o);
    }
    MixedField erg = mCircusFactory_.createMixedField(inputField, outputField);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitMixedField", erg);
    return erg;
  }

  public Object visitIntChoiceProcessRI(net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcessRI jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntChoiceProcessRI", jaxbObject);
    ProcessDef processDef =
      (ProcessDef) dispatch(jaxbObject.getProcessDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    IntChoiceProcessRI erg = mCircusFactory_.createIntChoiceProcessRI(processDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIntChoiceProcessRI", erg);
    return erg;
  }

  public Object visitCommunication(net.sourceforge.czt.circus.jaxb.gen.Communication jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCommunication", jaxbObject);
    net.sourceforge.czt.z.ast.RefName chanName =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getChanName());
    List chanFields = new Vector();
    for (Iterator iter = jaxbObject.getChanFields().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      chanFields.add(o);
    }
    CommType commType =
      (CommType) dispatch(jaxbObject.getCommType());
    Integer multiSych =
      (Integer) dispatch(jaxbObject.getMultiSych());
    Communication erg = mCircusFactory_.createCommunication(chanName, chanFields, commType, multiSych);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitCommunication", erg);
    return erg;
  }

  public Object visitOutputField(net.sourceforge.czt.circus.jaxb.gen.OutputField jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOutputField", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expression =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpression());
    OutputField erg = mCircusFactory_.createOutputField(expression);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitOutputField", erg);
    return erg;
  }

  public Object visitActionPara(net.sourceforge.czt.circus.jaxb.gen.ActionPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitActionPara", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName declName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getDeclName());
    Action action =
      (Action) dispatch(jaxbObject.getAction());
    ActionPara erg = mCircusFactory_.createActionPara(declName, action);
    getLogger().exiting("JaxbToAst", "visitActionPara", erg);
    return erg;
  }

  public Object visitUnionChannelSet(net.sourceforge.czt.circus.jaxb.gen.UnionChannelSet jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitUnionChannelSet", jaxbObject);
    ChannelSet leftOperand =
      (ChannelSet) dispatch(jaxbObject.getLeftOperand());
    ChannelSet rightOperand =
      (ChannelSet) dispatch(jaxbObject.getRightOperand());
    UnionChannelSet erg = mCircusFactory_.createUnionChannelSet(leftOperand, rightOperand);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitUnionChannelSet", erg);
    return erg;
  }

  public Object visitHideProcess(net.sourceforge.czt.circus.jaxb.gen.HideProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitHideProcess", jaxbObject);
    ProcessDef processDef =
      (ProcessDef) dispatch(jaxbObject.getProcessDef());
    ChannelSet channelSet =
      (ChannelSet) dispatch(jaxbObject.getChannelSet());
    HideProcess erg = mCircusFactory_.createHideProcess(processDef, channelSet);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitHideProcess", erg);
    return erg;
  }

  public Object visitParallelProcess(net.sourceforge.czt.circus.jaxb.gen.ParallelProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParallelProcess", jaxbObject);
    ProcessDef leftProc =
      (ProcessDef) dispatch(jaxbObject.getLeftProc());
    ProcessDef rightProc =
      (ProcessDef) dispatch(jaxbObject.getRightProc());
    ChannelSet channelSet =
      (ChannelSet) dispatch(jaxbObject.getChannelSet());
    ParallelProcess erg = mCircusFactory_.createParallelProcess(leftProc, rightProc, channelSet);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitParallelProcess", erg);
    return erg;
  }

  public Object visitSetChannelSet(net.sourceforge.czt.circus.jaxb.gen.SetChannelSet jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSetChannelSet", jaxbObject);
    List refName = new Vector();
    for (Iterator iter = jaxbObject.getRefName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      refName.add(o);
    }
    SetChannelSet erg = mCircusFactory_.createSetChannelSet(refName);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSetChannelSet", erg);
    return erg;
  }

  public Object visitParallelProcessRI(net.sourceforge.czt.circus.jaxb.gen.ParallelProcessRI jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParallelProcessRI", jaxbObject);
    ProcessDef processDef =
      (ProcessDef) dispatch(jaxbObject.getProcessDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    ChannelSet channelSet =
      (ChannelSet) dispatch(jaxbObject.getChannelSet());
    ParallelProcessRI erg = mCircusFactory_.createParallelProcessRI(processDef, varDecl, channelSet);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitParallelProcessRI", erg);
    return erg;
  }

  public Object visitParallelProcessR(net.sourceforge.czt.circus.jaxb.gen.ParallelProcessR jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParallelProcessR", jaxbObject);
    ProcessDef processDef =
      (ProcessDef) dispatch(jaxbObject.getProcessDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    ChannelSet channelSet =
      (ChannelSet) dispatch(jaxbObject.getChannelSet());
    ParallelProcessR erg = mCircusFactory_.createParallelProcessR(processDef, varDecl, channelSet);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitParallelProcessR", erg);
    return erg;
  }

  public Object visitParallelActionR(net.sourceforge.czt.circus.jaxb.gen.ParallelActionR jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParallelActionR", jaxbObject);
    Action action =
      (Action) dispatch(jaxbObject.getAction());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    NameSet leftNameSet =
      (NameSet) dispatch(jaxbObject.getLeftNameSet());
    NameSet rightNameSet =
      (NameSet) dispatch(jaxbObject.getRightNameSet());
    ChannelSet channelSet =
      (ChannelSet) dispatch(jaxbObject.getChannelSet());
    ParallelActionR erg = mCircusFactory_.createParallelActionR(action, varDecl, leftNameSet, rightNameSet, channelSet);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitParallelActionR", erg);
    return erg;
  }

  public Object visitIndexedProcess(net.sourceforge.czt.circus.jaxb.gen.IndexedProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIndexedProcess", jaxbObject);
    ProcessDef processDef =
      (ProcessDef) dispatch(jaxbObject.getProcessDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    IndexedProcess erg = mCircusFactory_.createIndexedProcess(processDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIndexedProcess", erg);
    return erg;
  }

  public Object visitIntChoiceAction(net.sourceforge.czt.circus.jaxb.gen.IntChoiceAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntChoiceAction", jaxbObject);
    Action leftAction =
      (Action) dispatch(jaxbObject.getLeftAction());
    Action rightAction =
      (Action) dispatch(jaxbObject.getRightAction());
    IntChoiceAction erg = mCircusFactory_.createIntChoiceAction(leftAction, rightAction);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIntChoiceAction", erg);
    return erg;
  }

  public Object visitDescProcess(net.sourceforge.czt.circus.jaxb.gen.DescProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDescProcess", jaxbObject);
    net.sourceforge.czt.z.ast.RefName stateSchemaRefName =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getStateSchemaRefName());
    List para = new Vector();
    for (Iterator iter = jaxbObject.getPara().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      para.add(o);
    }
    Action mainAction =
      (Action) dispatch(jaxbObject.getMainAction());
    DescProcess erg = mCircusFactory_.createDescProcess(stateSchemaRefName, para, mainAction);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitDescProcess", erg);
    return erg;
  }

  public Object visitInterleaveAction(net.sourceforge.czt.circus.jaxb.gen.InterleaveAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterleaveAction", jaxbObject);
    Action leftAction =
      (Action) dispatch(jaxbObject.getLeftAction());
    Action rightAction =
      (Action) dispatch(jaxbObject.getRightAction());
    NameSet leftNameSet =
      (NameSet) dispatch(jaxbObject.getLeftNameSet());
    NameSet rightNameSet =
      (NameSet) dispatch(jaxbObject.getRightNameSet());
    InterleaveAction erg = mCircusFactory_.createInterleaveAction(leftAction, rightAction, leftNameSet, rightNameSet);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitInterleaveAction", erg);
    return erg;
  }

  public Object visitSchTextAction(net.sourceforge.czt.circus.jaxb.gen.SchTextAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSchTextAction", jaxbObject);
    net.sourceforge.czt.z.ast.SchExpr schExpr =
      (net.sourceforge.czt.z.ast.SchExpr) dispatch(jaxbObject.getSchExpr());
    SchTextAction erg = mCircusFactory_.createSchTextAction(schExpr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSchTextAction", erg);
    return erg;
  }

  public Object visitIntChoiceProcess(net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntChoiceProcess", jaxbObject);
    ProcessDef leftProc =
      (ProcessDef) dispatch(jaxbObject.getLeftProc());
    ProcessDef rightProc =
      (ProcessDef) dispatch(jaxbObject.getRightProc());
    IntChoiceProcess erg = mCircusFactory_.createIntChoiceProcess(leftProc, rightProc);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIntChoiceProcess", erg);
    return erg;
  }

  public Object visitSeqProcessRI(net.sourceforge.czt.circus.jaxb.gen.SeqProcessRI jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSeqProcessRI", jaxbObject);
    ProcessDef processDef =
      (ProcessDef) dispatch(jaxbObject.getProcessDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    SeqProcessRI erg = mCircusFactory_.createSeqProcessRI(processDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSeqProcessRI", erg);
    return erg;
  }

  public Object visitRenameProcess(net.sourceforge.czt.circus.jaxb.gen.RenameProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRenameProcess", jaxbObject);
    ProcessDef processDef =
      (ProcessDef) dispatch(jaxbObject.getProcessDef());
    List oldNames = new Vector();
    for (Iterator iter = jaxbObject.getOldNames().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      oldNames.add(o);
    }
    List newNames = new Vector();
    for (Iterator iter = jaxbObject.getNewNames().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      newNames.add(o);
    }
    RenameProcess erg = mCircusFactory_.createRenameProcess(processDef, oldNames, newNames);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitRenameProcess", erg);
    return erg;
  }

  public Object visitChannelPara(net.sourceforge.czt.circus.jaxb.gen.ChannelPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChannelPara", jaxbObject);
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    ChannelPara erg = mCircusFactory_.createChannelPara(varDecl);
    getLogger().exiting("JaxbToAst", "visitChannelPara", erg);
    return erg;
  }

  public Object visitFormalParamAction(net.sourceforge.czt.circus.jaxb.gen.FormalParamAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitFormalParamAction", jaxbObject);
    Action action =
      (Action) dispatch(jaxbObject.getAction());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    FormalParamAction erg = mCircusFactory_.createFormalParamAction(action, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitFormalParamAction", erg);
    return erg;
  }

  public Object visitCallProcess(net.sourceforge.czt.circus.jaxb.gen.CallProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCallProcess", jaxbObject);
    net.sourceforge.czt.z.ast.RefName refName =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getRefName());
    CallProcess erg = mCircusFactory_.createCallProcess(refName);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitCallProcess", erg);
    return erg;
  }

  public Object visitIfGuardedCommand(net.sourceforge.czt.circus.jaxb.gen.IfGuardedCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIfGuardedCommand", jaxbObject);
    List guardedAction = new Vector();
    for (Iterator iter = jaxbObject.getGuardedAction().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      guardedAction.add(o);
    }
    IfGuardedCommand erg = mCircusFactory_.createIfGuardedCommand(guardedAction);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIfGuardedCommand", erg);
    return erg;
  }

  public Object visitExtChoiceProcess(net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExtChoiceProcess", jaxbObject);
    ProcessDef leftProc =
      (ProcessDef) dispatch(jaxbObject.getLeftProc());
    ProcessDef rightProc =
      (ProcessDef) dispatch(jaxbObject.getRightProc());
    ExtChoiceProcess erg = mCircusFactory_.createExtChoiceProcess(leftProc, rightProc);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitExtChoiceProcess", erg);
    return erg;
  }

  public Object visitFormalGenProcess(net.sourceforge.czt.circus.jaxb.gen.FormalGenProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitFormalGenProcess", jaxbObject);
    ProcessDef processDef =
      (ProcessDef) dispatch(jaxbObject.getProcessDef());
    List formalGenTypes = new Vector();
    for (Iterator iter = jaxbObject.getFormalGenTypes().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      formalGenTypes.add(o);
    }
    FormalGenProcess erg = mCircusFactory_.createFormalGenProcess(processDef, formalGenTypes);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitFormalGenProcess", erg);
    return erg;
  }

  public Object visitStopAction(net.sourceforge.czt.circus.jaxb.gen.StopAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitStopAction", jaxbObject);
    StopAction erg = mCircusFactory_.createStopAction();
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitStopAction", erg);
    return erg;
  }

  public Object visitExtChoiceAction(net.sourceforge.czt.circus.jaxb.gen.ExtChoiceAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExtChoiceAction", jaxbObject);
    Action leftAction =
      (Action) dispatch(jaxbObject.getLeftAction());
    Action rightAction =
      (Action) dispatch(jaxbObject.getRightAction());
    ExtChoiceAction erg = mCircusFactory_.createExtChoiceAction(leftAction, rightAction);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitExtChoiceAction", erg);
    return erg;
  }

  public Object visitSetNameSet(net.sourceforge.czt.circus.jaxb.gen.SetNameSet jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSetNameSet", jaxbObject);
    List refName = new Vector();
    for (Iterator iter = jaxbObject.getRefName().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      refName.add(o);
    }
    SetNameSet erg = mCircusFactory_.createSetNameSet(refName);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSetNameSet", erg);
    return erg;
  }

  public Object visitInterleaveProcess(net.sourceforge.czt.circus.jaxb.gen.InterleaveProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterleaveProcess", jaxbObject);
    ProcessDef leftProc =
      (ProcessDef) dispatch(jaxbObject.getLeftProc());
    ProcessDef rightProc =
      (ProcessDef) dispatch(jaxbObject.getRightProc());
    InterleaveProcess erg = mCircusFactory_.createInterleaveProcess(leftProc, rightProc);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitInterleaveProcess", erg);
    return erg;
  }

  public Object visitNameSetPara(net.sourceforge.czt.circus.jaxb.gen.NameSetPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNameSetPara", jaxbObject);
    net.sourceforge.czt.z.ast.DeclName declName =
      (net.sourceforge.czt.z.ast.DeclName) dispatch(jaxbObject.getDeclName());
    NameSet nameSet =
      (NameSet) dispatch(jaxbObject.getNameSet());
    NameSetPara erg = mCircusFactory_.createNameSetPara(declName, nameSet);
    getLogger().exiting("JaxbToAst", "visitNameSetPara", erg);
    return erg;
  }

  public Object visitUnionNameSet(net.sourceforge.czt.circus.jaxb.gen.UnionNameSet jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitUnionNameSet", jaxbObject);
    NameSet leftOperand =
      (NameSet) dispatch(jaxbObject.getLeftOperand());
    NameSet rightOperand =
      (NameSet) dispatch(jaxbObject.getRightOperand());
    UnionNameSet erg = mCircusFactory_.createUnionNameSet(leftOperand, rightOperand);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitUnionNameSet", erg);
    return erg;
  }

  public Object visitExtChoiceActionR(net.sourceforge.czt.circus.jaxb.gen.ExtChoiceActionR jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExtChoiceActionR", jaxbObject);
    Action action =
      (Action) dispatch(jaxbObject.getAction());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    ExtChoiceActionR erg = mCircusFactory_.createExtChoiceActionR(action, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitExtChoiceActionR", erg);
    return erg;
  }

  public Object visitRefChannelSet(net.sourceforge.czt.circus.jaxb.gen.RefChannelSet jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRefChannelSet", jaxbObject);
    net.sourceforge.czt.z.ast.RefName refName =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getRefName());
    RefChannelSet erg = mCircusFactory_.createRefChannelSet(refName);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitRefChannelSet", erg);
    return erg;
  }

  public Object visitSeqProcess(net.sourceforge.czt.circus.jaxb.gen.SeqProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSeqProcess", jaxbObject);
    ProcessDef leftProc =
      (ProcessDef) dispatch(jaxbObject.getLeftProc());
    ProcessDef rightProc =
      (ProcessDef) dispatch(jaxbObject.getRightProc());
    SeqProcess erg = mCircusFactory_.createSeqProcess(leftProc, rightProc);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitSeqProcess", erg);
    return erg;
  }

  public Object visitIntersectChannelSet(net.sourceforge.czt.circus.jaxb.gen.IntersectChannelSet jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntersectChannelSet", jaxbObject);
    ChannelSet leftOperand =
      (ChannelSet) dispatch(jaxbObject.getLeftOperand());
    ChannelSet rightOperand =
      (ChannelSet) dispatch(jaxbObject.getRightOperand());
    IntersectChannelSet erg = mCircusFactory_.createIntersectChannelSet(leftOperand, rightOperand);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIntersectChannelSet", erg);
    return erg;
  }

  public Object visitRefNameSet(net.sourceforge.czt.circus.jaxb.gen.RefNameSet jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRefNameSet", jaxbObject);
    net.sourceforge.czt.z.ast.RefName refName =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getRefName());
    RefNameSet erg = mCircusFactory_.createRefNameSet(refName);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitRefNameSet", erg);
    return erg;
  }

  public Object visitPrefixingAction(net.sourceforge.czt.circus.jaxb.gen.PrefixingAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPrefixingAction", jaxbObject);
    Action action =
      (Action) dispatch(jaxbObject.getAction());
    Communication communication =
      (Communication) dispatch(jaxbObject.getCommunication());
    PrefixingAction erg = mCircusFactory_.createPrefixingAction(action, communication);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitPrefixingAction", erg);
    return erg;
  }

  public Object visitDifferenceNameSet(net.sourceforge.czt.circus.jaxb.gen.DifferenceNameSet jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDifferenceNameSet", jaxbObject);
    NameSet leftOperand =
      (NameSet) dispatch(jaxbObject.getLeftOperand());
    NameSet rightOperand =
      (NameSet) dispatch(jaxbObject.getRightOperand());
    DifferenceNameSet erg = mCircusFactory_.createDifferenceNameSet(leftOperand, rightOperand);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitDifferenceNameSet", erg);
    return erg;
  }

  public Object visitActualParamProcess(net.sourceforge.czt.circus.jaxb.gen.ActualParamProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitActualParamProcess", jaxbObject);
    ProcessDef processDef =
      (ProcessDef) dispatch(jaxbObject.getProcessDef());
    List expr = new Vector();
    for (Iterator iter = jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    ActualParamProcess erg = mCircusFactory_.createActualParamProcess(processDef, expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitActualParamProcess", erg);
    return erg;
  }

  public Object visitAssignmentPair(net.sourceforge.czt.circus.jaxb.gen.AssignmentPair jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAssignmentPair", jaxbObject);
    net.sourceforge.czt.z.ast.RefName lHS =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getLHS());
    net.sourceforge.czt.z.ast.Expr rHS =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getRHS());
    AssignmentPair erg = mCircusFactory_.createAssignmentPair(lHS, rHS);
    getLogger().exiting("JaxbToAst", "visitAssignmentPair", erg);
    return erg;
  }

  public Object visitVarDeclCommand(net.sourceforge.czt.circus.jaxb.gen.VarDeclCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitVarDeclCommand", jaxbObject);
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    Action action =
      (Action) dispatch(jaxbObject.getAction());
    VarDeclCommand erg = mCircusFactory_.createVarDeclCommand(varDecl, action);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitVarDeclCommand", erg);
    return erg;
  }

  public Object visitAssignmentCommand(net.sourceforge.czt.circus.jaxb.gen.AssignmentCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAssignmentCommand", jaxbObject);
    List assignmentPair = new Vector();
    for (Iterator iter = jaxbObject.getAssignmentPair().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      assignmentPair.add(o);
    }
    AssignmentCommand erg = mCircusFactory_.createAssignmentCommand(assignmentPair);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitAssignmentCommand", erg);
    return erg;
  }

  public Object visitInputField(net.sourceforge.czt.circus.jaxb.gen.InputField jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInputField", jaxbObject);
    net.sourceforge.czt.z.ast.RefName variable =
      (net.sourceforge.czt.z.ast.RefName) dispatch(jaxbObject.getVariable());
    net.sourceforge.czt.z.ast.Pred restriction =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getRestriction());
    InputField erg = mCircusFactory_.createInputField(variable, restriction);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitInputField", erg);
    return erg;
  }

  public Object visitActualParamAction(net.sourceforge.czt.circus.jaxb.gen.ActualParamAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitActualParamAction", jaxbObject);
    Action action =
      (Action) dispatch(jaxbObject.getAction());
    List expr = new Vector();
    for (Iterator iter = jaxbObject.getExpr().iterator(); iter.hasNext();) {
      Object obj = iter.next();
      Object o = dispatch(obj);
      expr.add(o);
    }
    ActualParamAction erg = mCircusFactory_.createActualParamAction(action, expr);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitActualParamAction", erg);
    return erg;
  }

  public Object visitIntersectionNameSet(net.sourceforge.czt.circus.jaxb.gen.IntersectionNameSet jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntersectionNameSet", jaxbObject);
    NameSet leftOperand =
      (NameSet) dispatch(jaxbObject.getLeftOperand());
    NameSet rightOperand =
      (NameSet) dispatch(jaxbObject.getRightOperand());
    IntersectionNameSet erg = mCircusFactory_.createIntersectionNameSet(leftOperand, rightOperand);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitIntersectionNameSet", erg);
    return erg;
  }

  public Object visitExtChoiceProcessR(net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcessR jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExtChoiceProcessR", jaxbObject);
    ProcessDef processDef =
      (ProcessDef) dispatch(jaxbObject.getProcessDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    ExtChoiceProcessR erg = mCircusFactory_.createExtChoiceProcessR(processDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitExtChoiceProcessR", erg);
    return erg;
  }

  public Object visitInterleaveProcessR(net.sourceforge.czt.circus.jaxb.gen.InterleaveProcessR jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterleaveProcessR", jaxbObject);
    ProcessDef processDef =
      (ProcessDef) dispatch(jaxbObject.getProcessDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    InterleaveProcessR erg = mCircusFactory_.createInterleaveProcessR(processDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitInterleaveProcessR", erg);
    return erg;
  }

  public Object visitExtChoiceProcessRI(net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcessRI jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExtChoiceProcessRI", jaxbObject);
    ProcessDef processDef =
      (ProcessDef) dispatch(jaxbObject.getProcessDef());
    net.sourceforge.czt.z.ast.VarDecl varDecl =
      (net.sourceforge.czt.z.ast.VarDecl) dispatch(jaxbObject.getVarDecl());
    ExtChoiceProcessRI erg = mCircusFactory_.createExtChoiceProcessRI(processDef, varDecl);
    if (jaxbObject.getAnns() != null
        && jaxbObject.getAnns().getany() != null) {
      List annsList = erg.getAnns();
      List anyList = jaxbObject.getAnns().getany();
      for (Iterator iter = anyList.iterator(); iter.hasNext();) {
        Object obj = iter.next();
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }
    getLogger().exiting("JaxbToAst", "visitExtChoiceProcessRI", erg);
    return erg;
  }
}
