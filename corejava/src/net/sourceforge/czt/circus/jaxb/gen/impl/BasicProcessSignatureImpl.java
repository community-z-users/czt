//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b18-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.04.21 at 09:33:05 GMT 
//


package net.sourceforge.czt.circus.jaxb.gen.impl;

public class BasicProcessSignatureImpl
    extends net.sourceforge.czt.circus.jaxb.gen.impl.ProcessSignatureImpl
    implements net.sourceforge.czt.circus.jaxb.gen.BasicProcessSignature, com.sun.xml.bind.JAXBObject, net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallableObject, net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializable, net.sourceforge.czt.circus.jaxb.gen.impl.runtime.ValidatableObject
{

    protected com.sun.xml.bind.util.ListImpl _DeclNameSets;
    protected com.sun.xml.bind.util.ListImpl _ActionsSignature;
    protected com.sun.xml.bind.util.ListImpl _LocalZDeclsSignature;
    protected net.sourceforge.czt.z.jaxb.gen.Signature _StateSignature;
    public final static java.lang.Class version = (net.sourceforge.czt.circus.jaxb.gen.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (net.sourceforge.czt.circus.jaxb.gen.BasicProcessSignature.class);
    }

    protected com.sun.xml.bind.util.ListImpl _getDeclNameSets() {
        if (_DeclNameSets == null) {
            _DeclNameSets = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _DeclNameSets;
    }

    public java.util.List getDeclNameSets() {
        return _getDeclNameSets();
    }

    protected com.sun.xml.bind.util.ListImpl _getActionsSignature() {
        if (_ActionsSignature == null) {
            _ActionsSignature = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _ActionsSignature;
    }

    public java.util.List getActionsSignature() {
        return _getActionsSignature();
    }

    protected com.sun.xml.bind.util.ListImpl _getLocalZDeclsSignature() {
        if (_LocalZDeclsSignature == null) {
            _LocalZDeclsSignature = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _LocalZDeclsSignature;
    }

    public java.util.List getLocalZDeclsSignature() {
        return _getLocalZDeclsSignature();
    }

    public net.sourceforge.czt.z.jaxb.gen.Signature getStateSignature() {
        return _StateSignature;
    }

    public void setStateSignature(net.sourceforge.czt.z.jaxb.gen.Signature value) {
        _StateSignature = value;
    }

    public net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingEventHandler createUnmarshaller(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingContext context) {
        return new net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessSignatureImpl.Unmarshaller(context);
    }

    public void serializeBody(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_DeclNameSets == null)? 0 :_DeclNameSets.size());
        int idx2 = 0;
        final int len2 = ((_ActionsSignature == null)? 0 :_ActionsSignature.size());
        int idx3 = 0;
        final int len3 = ((_LocalZDeclsSignature == null)? 0 :_LocalZDeclsSignature.size());
        super.serializeBody(context);
        if (_StateSignature instanceof javax.xml.bind.Element) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _StateSignature), "StateSignature");
        } else {
            context.startElement("http://czt.sourceforge.net/zml", "Signature");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _StateSignature), "StateSignature");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _StateSignature), "StateSignature");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _StateSignature), "StateSignature");
            context.endElement();
        }
        while (idx3 != len3) {
            if (_LocalZDeclsSignature.get(idx3) instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _LocalZDeclsSignature.get(idx3 ++)), "LocalZDeclsSignature");
            } else {
                context.startElement("http://czt.sourceforge.net/zml", "Signature");
                int idx_2 = idx3;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _LocalZDeclsSignature.get(idx_2 ++)), "LocalZDeclsSignature");
                context.endNamespaceDecls();
                int idx_3 = idx3;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _LocalZDeclsSignature.get(idx_3 ++)), "LocalZDeclsSignature");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _LocalZDeclsSignature.get(idx3 ++)), "LocalZDeclsSignature");
                context.endElement();
            }
        }
        while (idx2 != len2) {
            if (_ActionsSignature.get(idx2) instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _ActionsSignature.get(idx2 ++)), "ActionsSignature");
            } else {
                context.startElement("http://czt.sourceforge.net/circus", "ActionSignature");
                int idx_4 = idx2;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _ActionsSignature.get(idx_4 ++)), "ActionsSignature");
                context.endNamespaceDecls();
                int idx_5 = idx2;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _ActionsSignature.get(idx_5 ++)), "ActionsSignature");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _ActionsSignature.get(idx2 ++)), "ActionsSignature");
                context.endElement();
            }
        }
        while (idx1 != len1) {
            if (_DeclNameSets.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _DeclNameSets.get(idx1 ++)), "DeclNameSets");
            } else {
                context.startElement("http://czt.sourceforge.net/zml", "DeclName");
                int idx_6 = idx1;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _DeclNameSets.get(idx_6 ++)), "DeclNameSets");
                context.endNamespaceDecls();
                int idx_7 = idx1;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _DeclNameSets.get(idx_7 ++)), "DeclNameSets");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _DeclNameSets.get(idx1 ++)), "DeclNameSets");
                context.endElement();
            }
        }
    }

    public void serializeAttributes(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_DeclNameSets == null)? 0 :_DeclNameSets.size());
        int idx2 = 0;
        final int len2 = ((_ActionsSignature == null)? 0 :_ActionsSignature.size());
        int idx3 = 0;
        final int len3 = ((_LocalZDeclsSignature == null)? 0 :_LocalZDeclsSignature.size());
        super.serializeAttributes(context);
        if (_StateSignature instanceof javax.xml.bind.Element) {
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _StateSignature), "StateSignature");
        }
        while (idx3 != len3) {
            if (_LocalZDeclsSignature.get(idx3) instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _LocalZDeclsSignature.get(idx3 ++)), "LocalZDeclsSignature");
            } else {
                idx3 += 1;
            }
        }
        while (idx2 != len2) {
            if (_ActionsSignature.get(idx2) instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _ActionsSignature.get(idx2 ++)), "ActionsSignature");
            } else {
                idx2 += 1;
            }
        }
        while (idx1 != len1) {
            if (_DeclNameSets.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _DeclNameSets.get(idx1 ++)), "DeclNameSets");
            } else {
                idx1 += 1;
            }
        }
    }

    public void serializeURIs(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_DeclNameSets == null)? 0 :_DeclNameSets.size());
        int idx2 = 0;
        final int len2 = ((_ActionsSignature == null)? 0 :_ActionsSignature.size());
        int idx3 = 0;
        final int len3 = ((_LocalZDeclsSignature == null)? 0 :_LocalZDeclsSignature.size());
        super.serializeURIs(context);
        if (_StateSignature instanceof javax.xml.bind.Element) {
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _StateSignature), "StateSignature");
        }
        while (idx3 != len3) {
            if (_LocalZDeclsSignature.get(idx3) instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _LocalZDeclsSignature.get(idx3 ++)), "LocalZDeclsSignature");
            } else {
                idx3 += 1;
            }
        }
        while (idx2 != len2) {
            if (_ActionsSignature.get(idx2) instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _ActionsSignature.get(idx2 ++)), "ActionsSignature");
            } else {
                idx2 += 1;
            }
        }
        while (idx1 != len1) {
            if (_DeclNameSets.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _DeclNameSets.get(idx1 ++)), "DeclNameSets");
            } else {
                idx1 += 1;
            }
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (net.sourceforge.czt.circus.jaxb.gen.BasicProcessSignature.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\'com."
+"sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000"
+"\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.Elem"
+"entExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentMode"
+"lq\u0000~\u0000\u0002xq\u0000~\u0000\u0003pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\npp\u0000sr\u0000\u001dcom.sun.msv.grammar.Choi"
+"ceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003exp"
+"q\u0000~\u0000\u0002xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000 c"
+"om.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tname"
+"Classq\u0000~\u0000\u000bxq\u0000~\u0000\u0003q\u0000~\u0000\u0016psr\u00002com.sun.msv.grammar.Expression$Any"
+"StringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u0015\u0001q\u0000~\u0000\u001asr\u0000 com.sun.msv"
+".grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.Name"
+"Class\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$Epsilon"
+"Expression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u001bq\u0000~\u0000 sr\u0000#com.sun.msv.grammar"
+".SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;"
+"L\u0000\fnamespaceURIq\u0000~\u0000\"xq\u0000~\u0000\u001dt\u0000\'net.sourceforge.czt.z.jaxb.gen."
+"DeclNamet\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u0010"
+"ppsq\u0000~\u0000\u0017q\u0000~\u0000\u0016psr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002d"
+"tt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dL"
+"com/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.datatype"
+".xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.Builti"
+"nAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteT"
+"ype\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000\"L\u0000\btypeNameq\u0000~\u0000\"L\u0000\nwhiteSpacet\u0000."
+"Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://ww"
+"w.w3.org/2001/XMLSchemat\u0000\u0005QNamesr\u00005com.sun.msv.datatype.xsd."
+"WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datat"
+"ype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.gram"
+"mar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u0016psr\u0000\u001bc"
+"om.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\"L\u0000\fnam"
+"espaceURIq\u0000~\u0000\"xpq\u0000~\u00003q\u0000~\u00002sq\u0000~\u0000!t\u0000\u0004typet\u0000)http://www.w3.org/"
+"2001/XMLSchema-instanceq\u0000~\u0000 sq\u0000~\u0000!t\u0000\u000bProcessNamet\u0000!http://cz"
+"t.sourceforge.net/circussq\u0000~\u0000\npp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\npp\u0000sq\u0000~\u0000\u0010ppsq"
+"\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u0000&net.sourceforg"
+"e.czt.z.jaxb.gen.VarDeclq\u0000~\u0000%sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000+q\u0000~\u0000;q"
+"\u0000~\u0000 sq\u0000~\u0000!t\u0000\fFormalParamsq\u0000~\u0000@sq\u0000~\u0000\u0010ppsq\u0000~\u0000\npp\u0000sq\u0000~\u0000\u0010ppsq\u0000~\u0000"
+"\u0012q\u0000~\u0000\u0016psq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u0000/net.sourceforge.c"
+"zt.z.jaxb.gen.SignatureElementq\u0000~\u0000%sq\u0000~\u0000\npp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\npp"
+"\u0000sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u0000(net"
+".sourceforge.czt.z.jaxb.gen.Signatureq\u0000~\u0000%sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0017q\u0000~\u0000"
+"\u0016pq\u0000~\u0000+q\u0000~\u0000;q\u0000~\u0000 sq\u0000~\u0000!t\u0000\tSignaturet\u0000\u001ehttp://czt.sourceforge"
+".net/zmlsq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u0000\u0010q\u0000~\u0000\u0016psq\u0000~\u0000\nq\u0000~\u0000\u0016p\u0000sq\u0000~\u0000\u0010p"
+"psq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!q\u0000~\u0000Sq\u0000~\u0000%sq\u0000~"
+"\u0000\nq\u0000~\u0000\u0016p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\npp\u0000sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000"
+"~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!q\u0000~\u0000[q\u0000~\u0000%sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000+q\u0000~\u0000;q"
+"\u0000~\u0000 sq\u0000~\u0000!q\u0000~\u0000_q\u0000~\u0000`q\u0000~\u0000 sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u0000\u0010q\u0000~\u0000\u0016psq\u0000"
+"~\u0000\nq\u0000~\u0000\u0016p\u0000sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000"
+"~\u0000!t\u0000:net.sourceforge.czt.circus.jaxb.gen.ActionSignatureEle"
+"mentq\u0000~\u0000%sq\u0000~\u0000\nq\u0000~\u0000\u0016p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\npp\u0000sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016ps"
+"q\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u00003net.sourceforge.czt.circu"
+"s.jaxb.gen.ActionSignatureq\u0000~\u0000%sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000+q\u0000~\u0000"
+";q\u0000~\u0000 sq\u0000~\u0000!t\u0000\u000fActionSignatureq\u0000~\u0000@q\u0000~\u0000 sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016p"
+"sq\u0000~\u0000\u0010q\u0000~\u0000\u0016psq\u0000~\u0000\u0010q\u0000~\u0000\u0016psq\u0000~\u0000\nq\u0000~\u0000\u0016p\u0000sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000"
+"~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u0000.net.sourceforge.czt.z.jaxb."
+"gen.DeclNameElementq\u0000~\u0000%sq\u0000~\u0000\nq\u0000~\u0000\u0016p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\npp\u0000sq\u0000~\u0000\u0010"
+"ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!q\u0000~\u0000$q\u0000~\u0000%sq\u0000"
+"~\u0000\u0010ppsq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000+q\u0000~\u0000;q\u0000~\u0000 sq\u0000~\u0000!t\u0000\bDeclNameq\u0000~\u0000`sq\u0000~\u0000\n"
+"q\u0000~\u0000\u0016p\u0000sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!"
+"t\u00003net.sourceforge.czt.zpatt.jaxb.gen.JokerNameElementq\u0000~\u0000%q"
+"\u0000~\u0000 sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpT"
+"ablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-"
+"com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005c"
+"ountB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Express"
+"ionPool;xp\u0000\u0000\u00002\u0001pq\u0000~\u0000\u0089q\u0000~\u0000\tq\u0000~\u0000\u000eq\u0000~\u0000Bq\u0000~\u0000Uq\u0000~\u0000jq\u0000~\u0000}q\u0000~\u0000\u0093q\u0000~\u0000"
+"\u0007q\u0000~\u0000\u0014q\u0000~\u0000Eq\u0000~\u0000Pq\u0000~\u0000Xq\u0000~\u0000fq\u0000~\u0000mq\u0000~\u0000aq\u0000~\u0000xq\u0000~\u0000\u0080q\u0000~\u0000sq\u0000~\u0000\u008eq\u0000~\u0000"
+"\u0096q\u0000~\u0000\u009fq\u0000~\u0000\u0005q\u0000~\u0000Mq\u0000~\u0000cq\u0000~\u0000uq\u0000~\u0000\u008bq\u0000~\u0000\u0011q\u0000~\u0000Dq\u0000~\u0000Oq\u0000~\u0000Wq\u0000~\u0000eq\u0000~\u0000"
+"lq\u0000~\u0000wq\u0000~\u0000\u007fq\u0000~\u0000\u008dq\u0000~\u0000\u0095q\u0000~\u0000\u009eq\u0000~\u0000bq\u0000~\u0000tq\u0000~\u0000\u0088q\u0000~\u0000\u008aq\u0000~\u0000&q\u0000~\u0000Iq\u0000~\u0000"
+"\\q\u0000~\u0000pq\u0000~\u0000\u0084q\u0000~\u0000\u0099q\u0000~\u0000\u0006q\u0000~\u0000\bx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends net.sourceforge.czt.circus.jaxb.gen.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingContext context) {
            super(context, "--------------");
        }

        protected Unmarshaller(net.sourceforge.czt.circus.jaxb.gen.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessSignatureImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  7 :
                        attIdx = context.getAttribute("", "Id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Anns" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getDeclNameSets().add(((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Word" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getDeclNameSets().add(((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        _getDeclNameSets().add(((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                        return ;
                    case  1 :
                        if (("Signature" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 2;
                            return ;
                        }
                        if (("Signature" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _StateSignature = ((net.sourceforge.czt.z.jaxb.gen.impl.SignatureElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SignatureElementImpl.class), 4, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  2 :
                        if (("NameTypePair" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _StateSignature = ((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("NameTypePair" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _StateSignature = ((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _StateSignature = ((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 3, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  10 :
                        if (("ActionName" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            _getActionsSignature().add(((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureImpl.class), 11, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        break;
                    case  12 :
                        if (("NameTypePair" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getLocalZDeclsSignature().add(((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 13, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("NameTypePair" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getLocalZDeclsSignature().add(((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 13, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        _getLocalZDeclsSignature().add(((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 13, ___uri, ___local, ___qname, __atts)));
                        return ;
                    case  6 :
                        if (("ActionSignature" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 10;
                            return ;
                        }
                        if (("ActionSignature" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            _getActionsSignature().add(((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("JokerName" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getDeclNameSets().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerNameElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerNameElementImpl.class), 9, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("DeclName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 7;
                            return ;
                        }
                        if (("DeclName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getDeclNameSets().add(((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameElementImpl.class), 9, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  5 :
                        if (("Signature" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 12;
                            return ;
                        }
                        if (("Signature" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getLocalZDeclsSignature().add(((net.sourceforge.czt.z.jaxb.gen.impl.SignatureElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SignatureElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ActionSignature" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 10;
                            return ;
                        }
                        if (("ActionSignature" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            _getActionsSignature().add(((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.circus.jaxb.gen.impl.ActionSignatureElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  9 :
                        if (("JokerName" == ___local)&&("http://czt.sourceforge.net/zpatt" == ___uri)) {
                            _getDeclNameSets().add(((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerNameElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.zpatt.jaxb.gen.impl.JokerNameElementImpl.class), 9, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("DeclName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 7;
                            return ;
                        }
                        if (("DeclName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getDeclNameSets().add(((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameElementImpl.class), 9, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  0 :
                        if (("ProcessName" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            spawnHandlerFromEnterElement((((net.sourceforge.czt.circus.jaxb.gen.impl.ProcessSignatureImpl)net.sourceforge.czt.circus.jaxb.gen.impl.BasicProcessSignatureImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  4 :
                        if (("Signature" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 12;
                            return ;
                        }
                        if (("Signature" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            _getLocalZDeclsSignature().add(((net.sourceforge.czt.z.jaxb.gen.impl.SignatureElementImpl) spawnChildFromEnterElement((net.sourceforge.czt.z.jaxb.gen.impl.SignatureElementImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 5;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  7 :
                        attIdx = context.getAttribute("", "Id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _getDeclNameSets().add(((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameImpl) spawnChildFromLeaveElement((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameImpl.class), 8, ___uri, ___local, ___qname)));
                        return ;
                    case  8 :
                        if (("DeclName" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 9;
                            return ;
                        }
                        break;
                    case  2 :
                        _StateSignature = ((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromLeaveElement((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 3, ___uri, ___local, ___qname));
                        return ;
                    case  12 :
                        _getLocalZDeclsSignature().add(((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromLeaveElement((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 13, ___uri, ___local, ___qname)));
                        return ;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  3 :
                        if (("Signature" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 4;
                            return ;
                        }
                        break;
                    case  11 :
                        if (("ActionSignature" == ___local)&&("http://czt.sourceforge.net/circus" == ___uri)) {
                            context.popAttributes();
                            state = 6;
                            return ;
                        }
                        break;
                    case  5 :
                        state = 6;
                        continue outer;
                    case  13 :
                        if (("Signature" == ___local)&&("http://czt.sourceforge.net/zml" == ___uri)) {
                            context.popAttributes();
                            state = 5;
                            return ;
                        }
                        break;
                    case  9 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  4 :
                        state = 5;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  7 :
                        if (("Id" == ___local)&&("" == ___uri)) {
                            _getDeclNameSets().add(((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameImpl.class), 8, ___uri, ___local, ___qname)));
                            return ;
                        }
                        _getDeclNameSets().add(((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameImpl.class), 8, ___uri, ___local, ___qname)));
                        return ;
                    case  2 :
                        _StateSignature = ((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 3, ___uri, ___local, ___qname));
                        return ;
                    case  12 :
                        _getLocalZDeclsSignature().add(((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromEnterAttribute((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 13, ___uri, ___local, ___qname)));
                        return ;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  5 :
                        state = 6;
                        continue outer;
                    case  9 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  4 :
                        state = 5;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  7 :
                        attIdx = context.getAttribute("", "Id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _getDeclNameSets().add(((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameImpl.class), 8, ___uri, ___local, ___qname)));
                        return ;
                    case  2 :
                        _StateSignature = ((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 3, ___uri, ___local, ___qname));
                        return ;
                    case  12 :
                        _getLocalZDeclsSignature().add(((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromLeaveAttribute((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 13, ___uri, ___local, ___qname)));
                        return ;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  5 :
                        state = 6;
                        continue outer;
                    case  9 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  4 :
                        state = 5;
                        continue outer;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  7 :
                            attIdx = context.getAttribute("", "Id");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _getDeclNameSets().add(((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameImpl) spawnChildFromText((net.sourceforge.czt.z.jaxb.gen.impl.DeclNameImpl.class), 8, value)));
                            return ;
                        case  2 :
                            _StateSignature = ((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromText((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 3, value));
                            return ;
                        case  12 :
                            _getLocalZDeclsSignature().add(((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl) spawnChildFromText((net.sourceforge.czt.z.jaxb.gen.impl.SignatureImpl.class), 13, value)));
                            return ;
                        case  6 :
                            state = 9;
                            continue outer;
                        case  5 :
                            state = 6;
                            continue outer;
                        case  9 :
                            revertToParentFromText(value);
                            return ;
                        case  4 :
                            state = 5;
                            continue outer;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
