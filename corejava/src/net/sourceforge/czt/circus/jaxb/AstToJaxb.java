
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToJaxb.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.base.ast.Term;

import net.sourceforge.czt.z.jaxb.gen.*;
import net.sourceforge.czt.circus.jaxb.gen.*;
import org.w3._2001.xmlschema.*;

/**
 * The marshaller responsible for serializing XML data.
 *
 * @author Gnast version 0.1
 */
public class AstToJaxb
  extends net.sourceforge.czt.z.jaxb.AstToJaxb
  implements net.sourceforge.czt.circus.visitor.CircusVisitor,
             net.sourceforge.czt.base.visitor.TermVisitor
{

  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  private net.sourceforge.czt.circus.jaxb.gen.ObjectFactory
    objectFactory_ = new net.sourceforge.czt.circus.jaxb.gen.ObjectFactory();
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    annsObjectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();
  private org.w3._2001.xmlschema.ObjectFactory
    anyTypeObjectFactory_ = new org.w3._2001.xmlschema.ObjectFactory();

  /**
   * A map that maps id's to the corresponding Object.
   */
  private Map hash_ = new HashMap();

  private String getClassName()
  {
    return "net.sourceforge.czt.circus.jaxb.AstToJaxb";
  }

  private Logger getLogger()
  {
    return Logger.getLogger(getClassName());
  }

  private net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType visitAnnotations(List list)
    throws javax.xml.bind.JAXBException
  {
      net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
        annsObjectFactory_.createTermAAnnsType();
    List newlist = anns.getany();
    for (Iterator iter = list.iterator(); iter.hasNext();) {
      Object obj = iter.next();
      if (obj instanceof Term) {
        Term term = (Term) obj;
        try {
          createElement_ = true;
          Object visitedTerm = term.accept(this);
          newlist.add(visitedTerm);
        }
        catch (Exception e) {
          String message = "Annotation " + term + " cannot be handled; " +
            "drop it.";
          getLogger().warning(message);
        }
      }
    }
    return anns;
  }


  public Object visitTerm(Term zedObject)
  {
    String message = "Unexpected element " + zedObject.getClass().getName();
    // getLogger().warning(message);
    // return null;
    throw(new UnsupportedOperationException(message));
  }


  public Object visitInterleaveProcessRI(net.sourceforge.czt.circus.ast.InterleaveProcessRI zedObject)
  {
    getLogger().entering(getClassName(), "visitInterleaveProcessRI", zedObject);

    InterleaveProcessRI jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInterleaveProcessRI();
      createElement_ = true;
      if (zedObject.getProcessDef() != null) {
        Term term = zedObject.getProcessDef();
        jaxbObject.setProcessDef((ProcessDef) term.accept(this));
      }
      {
        List list = zedObject.getVarDecl();
        List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InterleaveProcessRI to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a InterleaveProcessRI to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitInterleaveProcessRI", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInstantiationProcess(net.sourceforge.czt.circus.ast.InstantiationProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitInstantiationProcess", zedObject);

    InstantiationProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInstantiationProcess();
      createElement_ = true;
      if (zedObject.getProcessDef() != null) {
        Term term = zedObject.getProcessDef();
        jaxbObject.setProcessDef((ProcessDef) term.accept(this));
      }
      {
        List list = zedObject.getExpr();
        List newlist = jaxbObject.getExpr();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InstantiationProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a InstantiationProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitInstantiationProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitGuardedAction(net.sourceforge.czt.circus.ast.GuardedAction zedObject)
  {
    getLogger().entering(getClassName(), "visitGuardedAction", zedObject);

    GuardedAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createGuardedActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createGuardedAction();
      }
      createElement_ = true;
      if (zedObject.getAction() != null) {
        Term term = zedObject.getAction();
        jaxbObject.setAction((Action) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getPred() != null) {
        Term term = zedObject.getPred();
        jaxbObject.setPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a GuardedAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a GuardedAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitGuardedAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParallelAction(net.sourceforge.czt.circus.ast.ParallelAction zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelAction", zedObject);

    ParallelAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParallelActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createParallelAction();
      }
      createElement_ = true;
      if (zedObject.getLeftAction() != null) {
        Term term = zedObject.getLeftAction();
        jaxbObject.setLeftAction((Action) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightAction() != null) {
        Term term = zedObject.getRightAction();
        jaxbObject.setRightAction((Action) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getLeftNameSet() != null) {
        Term term = zedObject.getLeftNameSet();
        jaxbObject.setLeftNameSet((NameSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightNameSet() != null) {
        Term term = zedObject.getRightNameSet();
        jaxbObject.setRightNameSet((NameSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getChannelSet() != null) {
        Term term = zedObject.getChannelSet();
        jaxbObject.setChannelSet((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ParallelAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitParallelAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSeqProcessR(net.sourceforge.czt.circus.ast.SeqProcessR zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqProcessR", zedObject);

    SeqProcessR jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSeqProcessR();
      createElement_ = true;
      if (zedObject.getProcessDef() != null) {
        Term term = zedObject.getProcessDef();
        jaxbObject.setProcessDef((ProcessDef) term.accept(this));
      }
      {
        List list = zedObject.getVarDecl();
        List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqProcessR to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SeqProcessR to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSeqProcessR", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitHideAction(net.sourceforge.czt.circus.ast.HideAction zedObject)
  {
    getLogger().entering(getClassName(), "visitHideAction", zedObject);

    HideAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createHideActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createHideAction();
      }
      createElement_ = true;
      if (zedObject.getAction() != null) {
        Term term = zedObject.getAction();
        jaxbObject.setAction((Action) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getChannelSet() != null) {
        Term term = zedObject.getChannelSet();
        jaxbObject.setChannelSet((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a HideAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a HideAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitHideAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitChaosAction(net.sourceforge.czt.circus.ast.ChaosAction zedObject)
  {
    getLogger().entering(getClassName(), "visitChaosAction", zedObject);

    ChaosAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createChaosAction();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ChaosAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ChaosAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitChaosAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSkipAction(net.sourceforge.czt.circus.ast.SkipAction zedObject)
  {
    getLogger().entering(getClassName(), "visitSkipAction", zedObject);

    SkipAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSkipAction();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SkipAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SkipAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSkipAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitProcessType(net.sourceforge.czt.circus.ast.ProcessType zedObject)
  {
    getLogger().entering(getClassName(), "visitProcessType", zedObject);

    ProcessType jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createProcessTypeElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createProcessType();
      }
      createElement_ = true;
      if (zedObject.getProcessSignature() != null) {
        Term term = zedObject.getProcessSignature();
        jaxbObject.setProcessSignature((ProcessSignature) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProcessType to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitProcessType", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIntChoiceActionR(net.sourceforge.czt.circus.ast.IntChoiceActionR zedObject)
  {
    getLogger().entering(getClassName(), "visitIntChoiceActionR", zedObject);

    IntChoiceActionR jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIntChoiceActionR();
      createElement_ = true;
      if (zedObject.getAction() != null) {
        Term term = zedObject.getAction();
        jaxbObject.setAction((Action) term.accept(this));
      }
      {
        List list = zedObject.getVarDecl();
        List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntChoiceActionR to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IntChoiceActionR to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIntChoiceActionR", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitDifferenceChannelSet(net.sourceforge.czt.circus.ast.DifferenceChannelSet zedObject)
  {
    getLogger().entering(getClassName(), "visitDifferenceChannelSet", zedObject);

    DifferenceChannelSet jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createDifferenceChannelSet();
      createElement_ = true;
      if (zedObject.getLeftOperand() != null) {
        Term term = zedObject.getLeftOperand();
        jaxbObject.setLeftOperand((ChannelSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightOperand() != null) {
        Term term = zedObject.getRightOperand();
        jaxbObject.setRightOperand((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a DifferenceChannelSet to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a DifferenceChannelSet to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitDifferenceChannelSet", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitBasicChannelSet(net.sourceforge.czt.circus.ast.BasicChannelSet zedObject)
  {
    getLogger().entering(getClassName(), "visitBasicChannelSet", zedObject);

    BasicChannelSet jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createBasicChannelSetElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createBasicChannelSet();
      }
      {
        List list = zedObject.getRefName();
        List newlist = jaxbObject.getRefName();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a BasicChannelSet to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a BasicChannelSet to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitBasicChannelSet", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitUnionChannelSet(net.sourceforge.czt.circus.ast.UnionChannelSet zedObject)
  {
    getLogger().entering(getClassName(), "visitUnionChannelSet", zedObject);

    UnionChannelSet jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createUnionChannelSet();
      createElement_ = true;
      if (zedObject.getLeftOperand() != null) {
        Term term = zedObject.getLeftOperand();
        jaxbObject.setLeftOperand((ChannelSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightOperand() != null) {
        Term term = zedObject.getRightOperand();
        jaxbObject.setRightOperand((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a UnionChannelSet to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a UnionChannelSet to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitUnionChannelSet", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParallelProcessRI(net.sourceforge.czt.circus.ast.ParallelProcessRI zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelProcessRI", zedObject);

    ParallelProcessRI jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParallelProcessRIElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createParallelProcessRI();
      }
      createElement_ = true;
      if (zedObject.getProcessDef() != null) {
        Term term = zedObject.getProcessDef();
        jaxbObject.setProcessDef((ProcessDef) term.accept(this));
      }
      {
        List list = zedObject.getVarDecl();
        List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getChannelSet() != null) {
        Term term = zedObject.getChannelSet();
        jaxbObject.setChannelSet((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelProcessRI to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ParallelProcessRI to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitParallelProcessRI", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInterleaveAction(net.sourceforge.czt.circus.ast.InterleaveAction zedObject)
  {
    getLogger().entering(getClassName(), "visitInterleaveAction", zedObject);

    InterleaveAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInterleaveAction();
      createElement_ = true;
      if (zedObject.getLeftAction() != null) {
        Term term = zedObject.getLeftAction();
        jaxbObject.setLeftAction((Action) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightAction() != null) {
        Term term = zedObject.getRightAction();
        jaxbObject.setRightAction((Action) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getLeftNameSet() != null) {
        Term term = zedObject.getLeftNameSet();
        jaxbObject.setLeftNameSet((NameSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightNameSet() != null) {
        Term term = zedObject.getRightNameSet();
        jaxbObject.setRightNameSet((NameSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InterleaveAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a InterleaveAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitInterleaveAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIntChoiceProcess(net.sourceforge.czt.circus.ast.IntChoiceProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitIntChoiceProcess", zedObject);

    IntChoiceProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIntChoiceProcess();
      createElement_ = true;
      if (zedObject.getLeftProc() != null) {
        Term term = zedObject.getLeftProc();
        jaxbObject.setLeftProc((ProcessDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightProc() != null) {
        Term term = zedObject.getRightProc();
        jaxbObject.setRightProc((ProcessDef) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntChoiceProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IntChoiceProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIntChoiceProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSeqProcessRI(net.sourceforge.czt.circus.ast.SeqProcessRI zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqProcessRI", zedObject);

    SeqProcessRI jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSeqProcessRI();
      createElement_ = true;
      if (zedObject.getProcessDef() != null) {
        Term term = zedObject.getProcessDef();
        jaxbObject.setProcessDef((ProcessDef) term.accept(this));
      }
      {
        List list = zedObject.getVarDecl();
        List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqProcessRI to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SeqProcessRI to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSeqProcessRI", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSchExprAction(net.sourceforge.czt.circus.ast.SchExprAction zedObject)
  {
    getLogger().entering(getClassName(), "visitSchExprAction", zedObject);

    SchExprAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSchExprActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createSchExprAction();
      }
      createElement_ = true;
      if (zedObject.getSchExpr() != null) {
        Term term = zedObject.getSchExpr();
        jaxbObject.setSchExpr((SchExpr) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getIsState() != null) {
        jaxbObject.setIsState(zedObject.getIsState());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SchExprAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SchExprAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSchExprAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIfGuardedCommand(net.sourceforge.czt.circus.ast.IfGuardedCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitIfGuardedCommand", zedObject);

    IfGuardedCommand jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIfGuardedCommandElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createIfGuardedCommand();
      }
      {
        List list = zedObject.getGuardedAction();
        List newlist = jaxbObject.getGuardedAction();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IfGuardedCommand to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IfGuardedCommand to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIfGuardedCommand", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitExtChoiceProcess(net.sourceforge.czt.circus.ast.ExtChoiceProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitExtChoiceProcess", zedObject);

    ExtChoiceProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createExtChoiceProcess();
      createElement_ = true;
      if (zedObject.getLeftProc() != null) {
        Term term = zedObject.getLeftProc();
        jaxbObject.setLeftProc((ProcessDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightProc() != null) {
        Term term = zedObject.getRightProc();
        jaxbObject.setRightProc((ProcessDef) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExtChoiceProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ExtChoiceProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitExtChoiceProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitStopAction(net.sourceforge.czt.circus.ast.StopAction zedObject)
  {
    getLogger().entering(getClassName(), "visitStopAction", zedObject);

    StopAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createStopAction();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a StopAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a StopAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitStopAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitExtChoiceAction(net.sourceforge.czt.circus.ast.ExtChoiceAction zedObject)
  {
    getLogger().entering(getClassName(), "visitExtChoiceAction", zedObject);

    ExtChoiceAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createExtChoiceAction();
      createElement_ = true;
      if (zedObject.getLeftAction() != null) {
        Term term = zedObject.getLeftAction();
        jaxbObject.setLeftAction((Action) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightAction() != null) {
        Term term = zedObject.getRightAction();
        jaxbObject.setRightAction((Action) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExtChoiceAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ExtChoiceAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitExtChoiceAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRefChannelSet(net.sourceforge.czt.circus.ast.RefChannelSet zedObject)
  {
    getLogger().entering(getClassName(), "visitRefChannelSet", zedObject);

    RefChannelSet jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRefChannelSetElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createRefChannelSet();
      }
      createElement_ = true;
      if (zedObject.getRefName() != null) {
        Term term = zedObject.getRefName();
        jaxbObject.setRefName((RefName) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RefChannelSet to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a RefChannelSet to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitRefChannelSet", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitExtChoiceActionR(net.sourceforge.czt.circus.ast.ExtChoiceActionR zedObject)
  {
    getLogger().entering(getClassName(), "visitExtChoiceActionR", zedObject);

    ExtChoiceActionR jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createExtChoiceActionR();
      createElement_ = true;
      if (zedObject.getAction() != null) {
        Term term = zedObject.getAction();
        jaxbObject.setAction((Action) term.accept(this));
      }
      {
        List list = zedObject.getVarDecl();
        List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExtChoiceActionR to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ExtChoiceActionR to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitExtChoiceActionR", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRefNameSet(net.sourceforge.czt.circus.ast.RefNameSet zedObject)
  {
    getLogger().entering(getClassName(), "visitRefNameSet", zedObject);

    RefNameSet jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRefNameSetElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createRefNameSet();
      }
      createElement_ = true;
      if (zedObject.getRefName() != null) {
        Term term = zedObject.getRefName();
        jaxbObject.setRefName((RefName) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RefNameSet to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a RefNameSet to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitRefNameSet", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitPrefixingAction(net.sourceforge.czt.circus.ast.PrefixingAction zedObject)
  {
    getLogger().entering(getClassName(), "visitPrefixingAction", zedObject);

    PrefixingAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createPrefixingActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createPrefixingAction();
      }
      createElement_ = true;
      if (zedObject.getAction() != null) {
        Term term = zedObject.getAction();
        jaxbObject.setAction((Action) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getCommunication() != null) {
        Term term = zedObject.getCommunication();
        jaxbObject.setCommunication((Communication) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PrefixingAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a PrefixingAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitPrefixingAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitDifferenceNameSet(net.sourceforge.czt.circus.ast.DifferenceNameSet zedObject)
  {
    getLogger().entering(getClassName(), "visitDifferenceNameSet", zedObject);

    DifferenceNameSet jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createDifferenceNameSet();
      createElement_ = true;
      if (zedObject.getLeftOperand() != null) {
        Term term = zedObject.getLeftOperand();
        jaxbObject.setLeftOperand((NameSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightOperand() != null) {
        Term term = zedObject.getRightOperand();
        jaxbObject.setRightOperand((NameSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a DifferenceNameSet to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a DifferenceNameSet to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitDifferenceNameSet", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIndexedProcessDesc(net.sourceforge.czt.circus.ast.IndexedProcessDesc zedObject)
  {
    getLogger().entering(getClassName(), "visitIndexedProcessDesc", zedObject);

    IndexedProcessDesc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIndexedProcessDesc();
      {
        List list = zedObject.getVarDecl();
        List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getProcessDef() != null) {
        Term term = zedObject.getProcessDef();
        jaxbObject.setProcessDef((ProcessDef) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IndexedProcessDesc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IndexedProcessDesc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIndexedProcessDesc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitAssignmentPair(net.sourceforge.czt.circus.ast.AssignmentPair zedObject)
  {
    getLogger().entering(getClassName(), "visitAssignmentPair", zedObject);

    AssignmentPair jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createAssignmentPairElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createAssignmentPair();
      }
      createElement_ = false;
      if (zedObject.getLHS() != null) {
        Term term = zedObject.getLHS();
        jaxbObject.setLHS((RefName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRHS() != null) {
        Term term = zedObject.getRHS();
        jaxbObject.setRHS((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AssignmentPair to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitAssignmentPair", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitAssignmentCommand(net.sourceforge.czt.circus.ast.AssignmentCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitAssignmentCommand", zedObject);

    AssignmentCommand jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createAssignmentCommandElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createAssignmentCommand();
      }
      {
        List list = zedObject.getAssignmentPair();
        List newlist = jaxbObject.getAssignmentPair();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AssignmentCommand to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a AssignmentCommand to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitAssignmentCommand", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitActualParamAction(net.sourceforge.czt.circus.ast.ActualParamAction zedObject)
  {
    getLogger().entering(getClassName(), "visitActualParamAction", zedObject);

    ActualParamAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createActualParamActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createActualParamAction();
      }
      createElement_ = true;
      if (zedObject.getAction() != null) {
        Term term = zedObject.getAction();
        jaxbObject.setAction((Action) term.accept(this));
      }
      {
        List list = zedObject.getExpr();
        List newlist = jaxbObject.getExpr();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActualParamAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ActualParamAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitActualParamAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitExtChoiceProcessRI(net.sourceforge.czt.circus.ast.ExtChoiceProcessRI zedObject)
  {
    getLogger().entering(getClassName(), "visitExtChoiceProcessRI", zedObject);

    ExtChoiceProcessRI jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createExtChoiceProcessRI();
      createElement_ = true;
      if (zedObject.getProcessDef() != null) {
        Term term = zedObject.getProcessDef();
        jaxbObject.setProcessDef((ProcessDef) term.accept(this));
      }
      {
        List list = zedObject.getVarDecl();
        List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExtChoiceProcessRI to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ExtChoiceProcessRI to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitExtChoiceProcessRI", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitAssumptionCommand(net.sourceforge.czt.circus.ast.AssumptionCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitAssumptionCommand", zedObject);

    AssumptionCommand jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createAssumptionCommandElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createAssumptionCommand();
      }
      createElement_ = true;
      if (zedObject.getPred() != null) {
        Term term = zedObject.getPred();
        jaxbObject.setPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AssumptionCommand to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a AssumptionCommand to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitAssumptionCommand", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitBasicProcessSignature(net.sourceforge.czt.circus.ast.BasicProcessSignature zedObject)
  {
    getLogger().entering(getClassName(), "visitBasicProcessSignature", zedObject);

    BasicProcessSignature jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createBasicProcessSignatureElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createBasicProcessSignature();
      }
      createElement_ = false;
      if (zedObject.getProcessName() != null) {
        Term term = zedObject.getProcessName();
        jaxbObject.setProcessName((DeclName) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getFormalParams() != null) {
        Term term = zedObject.getFormalParams();
        jaxbObject.setFormalParams((VarDecl) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getStateSignature() != null) {
        Term term = zedObject.getStateSignature();
        jaxbObject.setStateSignature((Signature) term.accept(this));
      }
      {
        List list = zedObject.getLocalZDeclsSignature();
        List newlist = jaxbObject.getLocalZDeclsSignature();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getActionsSignature();
        List newlist = jaxbObject.getActionsSignature();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getDeclNameSets();
        List newlist = jaxbObject.getDeclNameSets();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a BasicProcessSignature to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitBasicProcessSignature", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSeqActionR(net.sourceforge.czt.circus.ast.SeqActionR zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqActionR", zedObject);

    SeqActionR jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSeqActionR();
      createElement_ = true;
      if (zedObject.getAction() != null) {
        Term term = zedObject.getAction();
        jaxbObject.setAction((Action) term.accept(this));
      }
      {
        List list = zedObject.getVarDecl();
        List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqActionR to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SeqActionR to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSeqActionR", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInterleaveActionR(net.sourceforge.czt.circus.ast.InterleaveActionR zedObject)
  {
    getLogger().entering(getClassName(), "visitInterleaveActionR", zedObject);

    InterleaveActionR jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInterleaveActionR();
      createElement_ = true;
      if (zedObject.getAction() != null) {
        Term term = zedObject.getAction();
        jaxbObject.setAction((Action) term.accept(this));
      }
      {
        List list = zedObject.getVarDecl();
        List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InterleaveActionR to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a InterleaveActionR to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitInterleaveActionR", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSpecStmtCommand(net.sourceforge.czt.circus.ast.SpecStmtCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitSpecStmtCommand", zedObject);

    SpecStmtCommand jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSpecStmtCommandElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createSpecStmtCommand();
      }
      {
        List list = zedObject.getFrame();
        List newlist = jaxbObject.getFrame();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getPre() != null) {
        Term term = zedObject.getPre();
        jaxbObject.setPre((Pred) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getPost() != null) {
        Term term = zedObject.getPost();
        jaxbObject.setPost((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SpecStmtCommand to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SpecStmtCommand to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSpecStmtCommand", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitMuAction(net.sourceforge.czt.circus.ast.MuAction zedObject)
  {
    getLogger().entering(getClassName(), "visitMuAction", zedObject);

    MuAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createMuActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createMuAction();
      }
      createElement_ = true;
      if (zedObject.getAction() != null) {
        Term term = zedObject.getAction();
        jaxbObject.setAction((Action) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclName() != null) {
        Term term = zedObject.getDeclName();
        jaxbObject.setDeclName((DeclName) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a MuAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a MuAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitMuAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitProcessSignature(net.sourceforge.czt.circus.ast.ProcessSignature zedObject)
  {
    getLogger().entering(getClassName(), "visitProcessSignature", zedObject);

    ProcessSignature jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createProcessSignatureElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createProcessSignature();
      }
      createElement_ = false;
      if (zedObject.getProcessName() != null) {
        Term term = zedObject.getProcessName();
        jaxbObject.setProcessName((DeclName) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getFormalParams() != null) {
        Term term = zedObject.getFormalParams();
        jaxbObject.setFormalParams((VarDecl) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProcessSignature to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitProcessSignature", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitProcessPara(net.sourceforge.czt.circus.ast.ProcessPara zedObject)
  {
    getLogger().entering(getClassName(), "visitProcessPara", zedObject);

    ProcessPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createProcessParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createProcessPara();
      }
      createElement_ = true;
      if (zedObject.getDeclName() != null) {
        Term term = zedObject.getDeclName();
        jaxbObject.setDeclName((DeclName) term.accept(this));
      }
      {
        List list = zedObject.getGenericTypes();
        List newlist = jaxbObject.getGenericTypes();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getProcessDesc() != null) {
        Term term = zedObject.getProcessDesc();
        jaxbObject.setProcessDesc((ProcessDesc) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProcessPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitProcessPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSeqAction(net.sourceforge.czt.circus.ast.SeqAction zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqAction", zedObject);

    SeqAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSeqAction();
      createElement_ = true;
      if (zedObject.getLeftAction() != null) {
        Term term = zedObject.getLeftAction();
        jaxbObject.setLeftAction((Action) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightAction() != null) {
        Term term = zedObject.getRightAction();
        jaxbObject.setRightAction((Action) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SeqAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSeqAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitActualGenProcess(net.sourceforge.czt.circus.ast.ActualGenProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitActualGenProcess", zedObject);

    ActualGenProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createActualGenProcess();
      createElement_ = true;
      if (zedObject.getProcessDef() != null) {
        Term term = zedObject.getProcessDef();
        jaxbObject.setProcessDef((ProcessDef) term.accept(this));
      }
      {
        List list = zedObject.getExpr();
        List newlist = jaxbObject.getExpr();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActualGenProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ActualGenProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitActualGenProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitChannelSetPara(net.sourceforge.czt.circus.ast.ChannelSetPara zedObject)
  {
    getLogger().entering(getClassName(), "visitChannelSetPara", zedObject);

    ChannelSetPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createChannelSetParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createChannelSetPara();
      }
      createElement_ = true;
      if (zedObject.getDeclName() != null) {
        Term term = zedObject.getDeclName();
        jaxbObject.setDeclName((DeclName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getChannelSet() != null) {
        Term term = zedObject.getChannelSet();
        jaxbObject.setChannelSet((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ChannelSetPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitChannelSetPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCallAction(net.sourceforge.czt.circus.ast.CallAction zedObject)
  {
    getLogger().entering(getClassName(), "visitCallAction", zedObject);

    CallAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCallActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCallAction();
      }
      createElement_ = true;
      if (zedObject.getRefName() != null) {
        Term term = zedObject.getRefName();
        jaxbObject.setRefName((RefName) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CallAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a CallAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCallAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIntChoiceProcessR(net.sourceforge.czt.circus.ast.IntChoiceProcessR zedObject)
  {
    getLogger().entering(getClassName(), "visitIntChoiceProcessR", zedObject);

    IntChoiceProcessR jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIntChoiceProcessR();
      createElement_ = true;
      if (zedObject.getProcessDef() != null) {
        Term term = zedObject.getProcessDef();
        jaxbObject.setProcessDef((ProcessDef) term.accept(this));
      }
      {
        List list = zedObject.getVarDecl();
        List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntChoiceProcessR to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IntChoiceProcessR to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIntChoiceProcessR", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIntChoiceProcessRI(net.sourceforge.czt.circus.ast.IntChoiceProcessRI zedObject)
  {
    getLogger().entering(getClassName(), "visitIntChoiceProcessRI", zedObject);

    IntChoiceProcessRI jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIntChoiceProcessRI();
      createElement_ = true;
      if (zedObject.getProcessDef() != null) {
        Term term = zedObject.getProcessDef();
        jaxbObject.setProcessDef((ProcessDef) term.accept(this));
      }
      {
        List list = zedObject.getVarDecl();
        List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntChoiceProcessRI to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IntChoiceProcessRI to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIntChoiceProcessRI", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCommunication(net.sourceforge.czt.circus.ast.Communication zedObject)
  {
    getLogger().entering(getClassName(), "visitCommunication", zedObject);

    Communication jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCommunicationElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCommunication();
      }
      createElement_ = false;
      if (zedObject.getChanName() != null) {
        Term term = zedObject.getChanName();
        jaxbObject.setChanName((RefName) term.accept(this));
      }
      {
        List list = zedObject.getChanFields();
        List newlist = jaxbObject.getChanFields();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = false;
      if (zedObject.getCommType() != null) {
        jaxbObject.setCommType(zedObject.getCommType().toString());
      }
      createElement_ = false;
      if (zedObject.getMultiSych() != null) {
        jaxbObject.setMultiSych(zedObject.getMultiSych());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Communication to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a Communication to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCommunication", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitOutputField(net.sourceforge.czt.circus.ast.OutputField zedObject)
  {
    getLogger().entering(getClassName(), "visitOutputField", zedObject);

    OutputField jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createOutputFieldElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createOutputField();
      }
      createElement_ = true;
      if (zedObject.getExpression() != null) {
        Term term = zedObject.getExpression();
        jaxbObject.setExpression((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OutputField to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a OutputField to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitOutputField", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitActionPara(net.sourceforge.czt.circus.ast.ActionPara zedObject)
  {
    getLogger().entering(getClassName(), "visitActionPara", zedObject);

    ActionPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createActionParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createActionPara();
      }
      createElement_ = true;
      if (zedObject.getDeclName() != null) {
        Term term = zedObject.getDeclName();
        jaxbObject.setDeclName((DeclName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getActionDesc() != null) {
        Term term = zedObject.getActionDesc();
        jaxbObject.setActionDesc((ActionDesc) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActionPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitActionPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitHideProcess(net.sourceforge.czt.circus.ast.HideProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitHideProcess", zedObject);

    HideProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createHideProcessElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createHideProcess();
      }
      createElement_ = true;
      if (zedObject.getProcessDef() != null) {
        Term term = zedObject.getProcessDef();
        jaxbObject.setProcessDef((ProcessDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getChannelSet() != null) {
        Term term = zedObject.getChannelSet();
        jaxbObject.setChannelSet((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a HideProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a HideProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitHideProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitActionAnn(net.sourceforge.czt.circus.ast.ActionAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitActionAnn", zedObject);

    ActionAnn jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createActionAnnElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createActionAnn();
      }
      createElement_ = true;
      if (zedObject.getActionSignature() != null) {
        Term term = zedObject.getActionSignature();
        jaxbObject.setActionSignature((ActionSignature) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActionAnn to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitActionAnn", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParallelProcess(net.sourceforge.czt.circus.ast.ParallelProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelProcess", zedObject);

    ParallelProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParallelProcessElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createParallelProcess();
      }
      createElement_ = true;
      if (zedObject.getLeftProc() != null) {
        Term term = zedObject.getLeftProc();
        jaxbObject.setLeftProc((ProcessDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightProc() != null) {
        Term term = zedObject.getRightProc();
        jaxbObject.setRightProc((ProcessDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getChannelSet() != null) {
        Term term = zedObject.getChannelSet();
        jaxbObject.setChannelSet((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ParallelProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitParallelProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParallelProcessR(net.sourceforge.czt.circus.ast.ParallelProcessR zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelProcessR", zedObject);

    ParallelProcessR jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParallelProcessRElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createParallelProcessR();
      }
      createElement_ = true;
      if (zedObject.getProcessDef() != null) {
        Term term = zedObject.getProcessDef();
        jaxbObject.setProcessDef((ProcessDef) term.accept(this));
      }
      {
        List list = zedObject.getVarDecl();
        List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getChannelSet() != null) {
        Term term = zedObject.getChannelSet();
        jaxbObject.setChannelSet((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelProcessR to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ParallelProcessR to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitParallelProcessR", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitActionType(net.sourceforge.czt.circus.ast.ActionType zedObject)
  {
    getLogger().entering(getClassName(), "visitActionType", zedObject);

    ActionType jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createActionTypeElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createActionType();
      }
      createElement_ = true;
      if (zedObject.getActionSignature() != null) {
        Term term = zedObject.getActionSignature();
        jaxbObject.setActionSignature((ActionSignature) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActionType to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitActionType", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParallelActionR(net.sourceforge.czt.circus.ast.ParallelActionR zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelActionR", zedObject);

    ParallelActionR jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParallelActionRElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createParallelActionR();
      }
      createElement_ = true;
      if (zedObject.getAction() != null) {
        Term term = zedObject.getAction();
        jaxbObject.setAction((Action) term.accept(this));
      }
      {
        List list = zedObject.getVarDecl();
        List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getLeftNameSet() != null) {
        Term term = zedObject.getLeftNameSet();
        jaxbObject.setLeftNameSet((NameSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightNameSet() != null) {
        Term term = zedObject.getRightNameSet();
        jaxbObject.setRightNameSet((NameSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getChannelSet() != null) {
        Term term = zedObject.getChannelSet();
        jaxbObject.setChannelSet((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelActionR to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ParallelActionR to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitParallelActionR", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIntChoiceAction(net.sourceforge.czt.circus.ast.IntChoiceAction zedObject)
  {
    getLogger().entering(getClassName(), "visitIntChoiceAction", zedObject);

    IntChoiceAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIntChoiceAction();
      createElement_ = true;
      if (zedObject.getLeftAction() != null) {
        Term term = zedObject.getLeftAction();
        jaxbObject.setLeftAction((Action) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightAction() != null) {
        Term term = zedObject.getRightAction();
        jaxbObject.setRightAction((Action) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntChoiceAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IntChoiceAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIntChoiceAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitProcessAnn(net.sourceforge.czt.circus.ast.ProcessAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitProcessAnn", zedObject);

    ProcessAnn jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createProcessAnnElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createProcessAnn();
      }
      createElement_ = true;
      if (zedObject.getProcessSignature() != null) {
        Term term = zedObject.getProcessSignature();
        jaxbObject.setProcessSignature((ProcessSignature) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProcessAnn to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitProcessAnn", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParamActionDesc(net.sourceforge.czt.circus.ast.ParamActionDesc zedObject)
  {
    getLogger().entering(getClassName(), "visitParamActionDesc", zedObject);

    ParamActionDesc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParamActionDescElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createParamActionDesc();
      }
      {
        List list = zedObject.getVarDecl();
        List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getAction() != null) {
        Term term = zedObject.getAction();
        jaxbObject.setAction((Action) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParamActionDesc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ParamActionDesc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitParamActionDesc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRenameProcess(net.sourceforge.czt.circus.ast.RenameProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitRenameProcess", zedObject);

    RenameProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRenameProcessElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createRenameProcess();
      }
      createElement_ = true;
      if (zedObject.getProcessDef() != null) {
        Term term = zedObject.getProcessDef();
        jaxbObject.setProcessDef((ProcessDef) term.accept(this));
      }
      {
        List list = zedObject.getOldNames();
        List newlist = jaxbObject.getOldNames();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getNewNames();
        List newlist = jaxbObject.getNewNames();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RenameProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a RenameProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitRenameProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitChannelPara(net.sourceforge.czt.circus.ast.ChannelPara zedObject)
  {
    getLogger().entering(getClassName(), "visitChannelPara", zedObject);

    ChannelPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createChannelParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createChannelPara();
      }
      {
        List list = zedObject.getDecl();
        List newlist = jaxbObject.getDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ChannelPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitChannelPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCallProcess(net.sourceforge.czt.circus.ast.CallProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitCallProcess", zedObject);

    CallProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCallProcessElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCallProcess();
      }
      createElement_ = true;
      if (zedObject.getRefName() != null) {
        Term term = zedObject.getRefName();
        jaxbObject.setRefName((RefName) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CallProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a CallProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCallProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitFormalParamAction(net.sourceforge.czt.circus.ast.FormalParamAction zedObject)
  {
    getLogger().entering(getClassName(), "visitFormalParamAction", zedObject);

    FormalParamAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createFormalParamAction();
      createElement_ = true;
      if (zedObject.getAction() != null) {
        Term term = zedObject.getAction();
        jaxbObject.setAction((Action) term.accept(this));
      }
      {
        List list = zedObject.getVarDecl();
        List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a FormalParamAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a FormalParamAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitFormalParamAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSetNameSet(net.sourceforge.czt.circus.ast.SetNameSet zedObject)
  {
    getLogger().entering(getClassName(), "visitSetNameSet", zedObject);

    SetNameSet jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSetNameSetElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createSetNameSet();
      }
      {
        List list = zedObject.getRefName();
        List newlist = jaxbObject.getRefName();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SetNameSet to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SetNameSet to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSetNameSet", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNameSetPara(net.sourceforge.czt.circus.ast.NameSetPara zedObject)
  {
    getLogger().entering(getClassName(), "visitNameSetPara", zedObject);

    NameSetPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNameSetParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createNameSetPara();
      }
      createElement_ = true;
      if (zedObject.getDeclName() != null) {
        Term term = zedObject.getDeclName();
        jaxbObject.setDeclName((DeclName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getNameSet() != null) {
        Term term = zedObject.getNameSet();
        jaxbObject.setNameSet((NameSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NameSetPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitNameSetPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInterleaveProcess(net.sourceforge.czt.circus.ast.InterleaveProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitInterleaveProcess", zedObject);

    InterleaveProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInterleaveProcess();
      createElement_ = true;
      if (zedObject.getLeftProc() != null) {
        Term term = zedObject.getLeftProc();
        jaxbObject.setLeftProc((ProcessDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightProc() != null) {
        Term term = zedObject.getRightProc();
        jaxbObject.setRightProc((ProcessDef) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InterleaveProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a InterleaveProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitInterleaveProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitUnionNameSet(net.sourceforge.czt.circus.ast.UnionNameSet zedObject)
  {
    getLogger().entering(getClassName(), "visitUnionNameSet", zedObject);

    UnionNameSet jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createUnionNameSet();
      createElement_ = true;
      if (zedObject.getLeftOperand() != null) {
        Term term = zedObject.getLeftOperand();
        jaxbObject.setLeftOperand((NameSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightOperand() != null) {
        Term term = zedObject.getRightOperand();
        jaxbObject.setRightOperand((NameSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a UnionNameSet to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a UnionNameSet to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitUnionNameSet", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSeqProcess(net.sourceforge.czt.circus.ast.SeqProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqProcess", zedObject);

    SeqProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSeqProcess();
      createElement_ = true;
      if (zedObject.getLeftProc() != null) {
        Term term = zedObject.getLeftProc();
        jaxbObject.setLeftProc((ProcessDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightProc() != null) {
        Term term = zedObject.getRightProc();
        jaxbObject.setRightProc((ProcessDef) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SeqProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSeqProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitBasicProcess(net.sourceforge.czt.circus.ast.BasicProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitBasicProcess", zedObject);

    BasicProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createBasicProcessElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createBasicProcess();
      }
      createElement_ = false;
      if (zedObject.getStateSchemaRefName() != null) {
        Term term = zedObject.getStateSchemaRefName();
        jaxbObject.setStateSchemaRefName((RefName) term.accept(this));
      }
      {
        List list = zedObject.getDeclZParagraphs();
        List newlist = jaxbObject.getDeclZParagraphs();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getDeclActions();
        List newlist = jaxbObject.getDeclActions();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getDeclNameSets();
        List newlist = jaxbObject.getDeclNameSets();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getMainAction() != null) {
        Term term = zedObject.getMainAction();
        jaxbObject.setMainAction((Action) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a BasicProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a BasicProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitBasicProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIntersectChannelSet(net.sourceforge.czt.circus.ast.IntersectChannelSet zedObject)
  {
    getLogger().entering(getClassName(), "visitIntersectChannelSet", zedObject);

    IntersectChannelSet jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIntersectChannelSet();
      createElement_ = true;
      if (zedObject.getLeftOperand() != null) {
        Term term = zedObject.getLeftOperand();
        jaxbObject.setLeftOperand((ChannelSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightOperand() != null) {
        Term term = zedObject.getRightOperand();
        jaxbObject.setRightOperand((ChannelSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntersectChannelSet to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IntersectChannelSet to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIntersectChannelSet", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitActualParamProcess(net.sourceforge.czt.circus.ast.ActualParamProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitActualParamProcess", zedObject);

    ActualParamProcess jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createActualParamProcess();
      createElement_ = true;
      if (zedObject.getProcessDef() != null) {
        Term term = zedObject.getProcessDef();
        jaxbObject.setProcessDef((ProcessDef) term.accept(this));
      }
      {
        List list = zedObject.getExpr();
        List newlist = jaxbObject.getExpr();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActualParamProcess to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ActualParamProcess to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitActualParamProcess", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitVarDeclCommand(net.sourceforge.czt.circus.ast.VarDeclCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitVarDeclCommand", zedObject);

    VarDeclCommand jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createVarDeclCommandElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createVarDeclCommand();
      }
      {
        List list = zedObject.getDeclarations();
        List newlist = jaxbObject.getDeclarations();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getAction() != null) {
        Term term = zedObject.getAction();
        jaxbObject.setAction((Action) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a VarDeclCommand to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a VarDeclCommand to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitVarDeclCommand", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInputField(net.sourceforge.czt.circus.ast.InputField zedObject)
  {
    getLogger().entering(getClassName(), "visitInputField", zedObject);

    InputField jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInputFieldElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createInputField();
      }
      createElement_ = false;
      if (zedObject.getVariable() != null) {
        Term term = zedObject.getVariable();
        jaxbObject.setVariable((RefName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRestriction() != null) {
        Term term = zedObject.getRestriction();
        jaxbObject.setRestriction((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InputField to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a InputField to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitInputField", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInterleaveProcessR(net.sourceforge.czt.circus.ast.InterleaveProcessR zedObject)
  {
    getLogger().entering(getClassName(), "visitInterleaveProcessR", zedObject);

    InterleaveProcessR jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInterleaveProcessR();
      createElement_ = true;
      if (zedObject.getProcessDef() != null) {
        Term term = zedObject.getProcessDef();
        jaxbObject.setProcessDef((ProcessDef) term.accept(this));
      }
      {
        List list = zedObject.getVarDecl();
        List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InterleaveProcessR to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a InterleaveProcessR to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitInterleaveProcessR", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitExtChoiceProcessR(net.sourceforge.czt.circus.ast.ExtChoiceProcessR zedObject)
  {
    getLogger().entering(getClassName(), "visitExtChoiceProcessR", zedObject);

    ExtChoiceProcessR jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createExtChoiceProcessR();
      createElement_ = true;
      if (zedObject.getProcessDef() != null) {
        Term term = zedObject.getProcessDef();
        jaxbObject.setProcessDef((ProcessDef) term.accept(this));
      }
      {
        List list = zedObject.getVarDecl();
        List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExtChoiceProcessR to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ExtChoiceProcessR to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitExtChoiceProcessR", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIntersectionNameSet(net.sourceforge.czt.circus.ast.IntersectionNameSet zedObject)
  {
    getLogger().entering(getClassName(), "visitIntersectionNameSet", zedObject);

    IntersectionNameSet jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIntersectionNameSet();
      createElement_ = true;
      if (zedObject.getLeftOperand() != null) {
        Term term = zedObject.getLeftOperand();
        jaxbObject.setLeftOperand((NameSet) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightOperand() != null) {
        Term term = zedObject.getRightOperand();
        jaxbObject.setRightOperand((NameSet) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntersectionNameSet to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IntersectionNameSet to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIntersectionNameSet", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitActionSignature(net.sourceforge.czt.circus.ast.ActionSignature zedObject)
  {
    getLogger().entering(getClassName(), "visitActionSignature", zedObject);

    ActionSignature jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createActionSignatureElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createActionSignature();
      }
      createElement_ = false;
      if (zedObject.getActionName() != null) {
        Term term = zedObject.getActionName();
        jaxbObject.setActionName((DeclName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getLocalVarsSignature() != null) {
        Term term = zedObject.getLocalVarsSignature();
        jaxbObject.setLocalVarsSignature((Signature) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActionSignature to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitActionSignature", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParamProcessDesc(net.sourceforge.czt.circus.ast.ParamProcessDesc zedObject)
  {
    getLogger().entering(getClassName(), "visitParamProcessDesc", zedObject);

    ParamProcessDesc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParamProcessDescElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createParamProcessDesc();
      }
      {
        List list = zedObject.getVarDecl();
        List newlist = jaxbObject.getVarDecl();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getProcessDef() != null) {
        Term term = zedObject.getProcessDef();
        jaxbObject.setProcessDef((ProcessDef) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParamProcessDesc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ParamProcessDesc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitParamProcessDesc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }
}
