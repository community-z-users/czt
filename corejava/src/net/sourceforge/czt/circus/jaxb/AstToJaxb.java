
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToJaxb.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.jaxb;

import java.util.*;
import java.util.logging.Logger;

import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.base.ast.Term;

import net.sourceforge.czt.z.jaxb.gen.*;
import net.sourceforge.czt.circus.jaxb.gen.*;
import org.w3._2001.xmlschema.*;

/**
 * The marshaller responsible for serializing XML data.
 *
 * @author Gnast version 0.1
 */
public class AstToJaxb
  extends net.sourceforge.czt.z.jaxb.AstToJaxb
  implements net.sourceforge.czt.circus.visitor.CircusVisitor,
             net.sourceforge.czt.base.visitor.TermVisitor
{

  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  private net.sourceforge.czt.circus.jaxb.gen.ObjectFactory
    objectFactory_ = new net.sourceforge.czt.circus.jaxb.gen.ObjectFactory();
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    annsObjectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();
  private org.w3._2001.xmlschema.ObjectFactory
    anyTypeObjectFactory_ = new org.w3._2001.xmlschema.ObjectFactory();

  /**
   * A map that maps id's to the corresponding Object.
   */
  private Map hash_ = new HashMap();

  private String getClassName()
  {
    return "net.sourceforge.czt.circus.jaxb.AstToJaxb";
  }

  private Logger getLogger()
  {
    return Logger.getLogger(getClassName());
  }

  private net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType visitAnnotations(List list)
    throws javax.xml.bind.JAXBException
  {
      net.sourceforge.czt.z.jaxb.gen.TermA.AnnsType anns =
        annsObjectFactory_.createTermAAnnsType();
    List newlist = anns.getany();
    for (Iterator iter = list.iterator(); iter.hasNext();) {
      Object obj = iter.next();
      if (obj instanceof Term) {
        Term term = (Term) obj;
        try {
          createElement_ = true;
          Object visitedTerm = term.accept(this);
          newlist.add(visitedTerm);
        }
        catch (Exception e) {
          String message = "Annotation " + term + " cannot be handled; " +
            "drop it.";
          getLogger().warning(message);
        }
      }
    }
    return anns;
  }


  public Object visitTerm(Term zedObject)
  {
    String message = "Unexpected element " + zedObject.getClass().getName();
    // getLogger().warning(message);
    // return null;
    throw(new UnsupportedOperationException(message));
  }


  public Object visitCSExprSet(net.sourceforge.czt.circus.ast.CSExprSet zedObject)
  {
    getLogger().entering(getClassName(), "visitCSExprSet", zedObject);

    CSExprSet jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCSExprSetElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCSExprSet();
      }
      {
        List list = zedObject.getExpr();
        List newlist = jaxbObject.getExpr();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getRefName();
        List newlist = jaxbObject.getRefName();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CSExprSet to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCSExprSet", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIdxRepParallelCompProc(net.sourceforge.czt.circus.ast.IdxRepParallelCompProc zedObject)
  {
    getLogger().entering(getClassName(), "visitIdxRepParallelCompProc", zedObject);

    IdxRepParallelCompProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIdxRepParallelCompProcElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createIdxRepParallelCompProc();
      }
      createElement_ = true;
      if (zedObject.getProcDef() != null) {
        Term term = zedObject.getProcDef();
        jaxbObject.setProcDef((ProcDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getCSExpr() != null) {
        Term term = zedObject.getCSExpr();
        jaxbObject.setCSExpr((CSExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IdxRepParallelCompProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IdxRepParallelCompProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIdxRepParallelCompProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRepExtChAction(net.sourceforge.czt.circus.ast.RepExtChAction zedObject)
  {
    getLogger().entering(getClassName(), "visitRepExtChAction", zedObject);

    RepExtChAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRepExtChAction();
      createElement_ = true;
      if (zedObject.getActionDef() != null) {
        Term term = zedObject.getActionDef();
        jaxbObject.setActionDef((ActionDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RepExtChAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a RepExtChAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitRepExtChAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitGuardedAction(net.sourceforge.czt.circus.ast.GuardedAction zedObject)
  {
    getLogger().entering(getClassName(), "visitGuardedAction", zedObject);

    GuardedAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createGuardedActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createGuardedAction();
      }
      createElement_ = true;
      if (zedObject.getActionDef() != null) {
        Term term = zedObject.getActionDef();
        jaxbObject.setActionDef((ActionDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getPred() != null) {
        Term term = zedObject.getPred();
        jaxbObject.setPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a GuardedAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a GuardedAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitGuardedAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitExtChoiceProc(net.sourceforge.czt.circus.ast.ExtChoiceProc zedObject)
  {
    getLogger().entering(getClassName(), "visitExtChoiceProc", zedObject);

    ExtChoiceProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createExtChoiceProc();
      createElement_ = true;
      if (zedObject.getLeftProc() != null) {
        Term term = zedObject.getLeftProc();
        jaxbObject.setLeftProc((ProcDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightProc() != null) {
        Term term = zedObject.getRightProc();
        jaxbObject.setRightProc((ProcDef) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExtChoiceProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ExtChoiceProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitExtChoiceProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParallelCompAction(net.sourceforge.czt.circus.ast.ParallelCompAction zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelCompAction", zedObject);

    ParallelCompAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParallelCompActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createParallelCompAction();
      }
      createElement_ = true;
      if (zedObject.getLeftAction() != null) {
        Term term = zedObject.getLeftAction();
        jaxbObject.setLeftAction((ActionDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightAction() != null) {
        Term term = zedObject.getRightAction();
        jaxbObject.setRightAction((ActionDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getLeftNS() != null) {
        Term term = zedObject.getLeftNS();
        jaxbObject.setLeftNS((NSExpr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightNS() != null) {
        Term term = zedObject.getRightNS();
        jaxbObject.setRightNS((NSExpr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getCSExpr() != null) {
        Term term = zedObject.getCSExpr();
        jaxbObject.setCSExpr((CSExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelCompAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ParallelCompAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitParallelCompAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCallProc(net.sourceforge.czt.circus.ast.CallProc zedObject)
  {
    getLogger().entering(getClassName(), "visitCallProc", zedObject);

    CallProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCallProcElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCallProc();
      }
      createElement_ = true;
      if (zedObject.getRefName() != null) {
        Term term = zedObject.getRefName();
        jaxbObject.setRefName((RefName) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CallProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a CallProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCallProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCommMixed(net.sourceforge.czt.circus.ast.CommMixed zedObject)
  {
    getLogger().entering(getClassName(), "visitCommMixed", zedObject);

    CommMixed jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCommMixedElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCommMixed();
      }
      {
        List list = zedObject.getCommIn();
        List newlist = jaxbObject.getCommIn();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getCommOut();
        List newlist = jaxbObject.getCommOut();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CommMixed to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a CommMixed to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCommMixed", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNSExprUnion(net.sourceforge.czt.circus.ast.NSExprUnion zedObject)
  {
    getLogger().entering(getClassName(), "visitNSExprUnion", zedObject);

    NSExprUnion jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNSExprUnion();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NSExprUnion to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitNSExprUnion", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitMuAction(net.sourceforge.czt.circus.ast.MuAction zedObject)
  {
    getLogger().entering(getClassName(), "visitMuAction", zedObject);

    MuAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createMuActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createMuAction();
      }
      createElement_ = true;
      if (zedObject.getActionDef() != null) {
        Term term = zedObject.getActionDef();
        jaxbObject.setActionDef((ActionDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getDeclName() != null) {
        Term term = zedObject.getDeclName();
        jaxbObject.setDeclName((DeclName) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a MuAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a MuAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitMuAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitChannelDecl(net.sourceforge.czt.circus.ast.ChannelDecl zedObject)
  {
    getLogger().entering(getClassName(), "visitChannelDecl", zedObject);

    ChannelDecl jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createChannelDeclElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createChannelDecl();
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ChannelDecl to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ChannelDecl to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitChannelDecl", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitHideAction(net.sourceforge.czt.circus.ast.HideAction zedObject)
  {
    getLogger().entering(getClassName(), "visitHideAction", zedObject);

    HideAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createHideActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createHideAction();
      }
      createElement_ = true;
      if (zedObject.getActionDef() != null) {
        Term term = zedObject.getActionDef();
        jaxbObject.setActionDef((ActionDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getCSExpr() != null) {
        Term term = zedObject.getCSExpr();
        jaxbObject.setCSExpr((CSExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a HideAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a HideAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitHideAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNSDecl(net.sourceforge.czt.circus.ast.NSDecl zedObject)
  {
    getLogger().entering(getClassName(), "visitNSDecl", zedObject);

    NSDecl jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNSDeclElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createNSDecl();
      }
      createElement_ = true;
      if (zedObject.getDeclName() != null) {
        Term term = zedObject.getDeclName();
        jaxbObject.setDeclName((DeclName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getNSExpr() != null) {
        Term term = zedObject.getNSExpr();
        jaxbObject.setNSExpr((NSExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NSDecl to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a NSDecl to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitNSDecl", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIfGuardedCmd(net.sourceforge.czt.circus.ast.IfGuardedCmd zedObject)
  {
    getLogger().entering(getClassName(), "visitIfGuardedCmd", zedObject);

    IfGuardedCmd jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIfGuardedCmdElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createIfGuardedCmd();
      }
      {
        List list = zedObject.getGuardedActions();
        List newlist = jaxbObject.getGuardedActions();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IfGuardedCmd to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IfGuardedCmd to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIfGuardedCmd", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCommOut(net.sourceforge.czt.circus.ast.CommOut zedObject)
  {
    getLogger().entering(getClassName(), "visitCommOut", zedObject);

    CommOut jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCommOutElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCommOut();
      }
      createElement_ = true;
      if (zedObject.getExpr() != null) {
        Term term = zedObject.getExpr();
        jaxbObject.setExpr((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CommOut to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a CommOut to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCommOut", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNSExprInter(net.sourceforge.czt.circus.ast.NSExprInter zedObject)
  {
    getLogger().entering(getClassName(), "visitNSExprInter", zedObject);

    NSExprInter jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNSExprInter();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NSExprInter to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitNSExprInter", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitChaosAction(net.sourceforge.czt.circus.ast.ChaosAction zedObject)
  {
    getLogger().entering(getClassName(), "visitChaosAction", zedObject);

    ChaosAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createChaosAction();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ChaosAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ChaosAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitChaosAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitAssignmentCmd(net.sourceforge.czt.circus.ast.AssignmentCmd zedObject)
  {
    getLogger().entering(getClassName(), "visitAssignmentCmd", zedObject);

    AssignmentCmd jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createAssignmentCmdElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createAssignmentCmd();
      }
      {
        List list = zedObject.getAssignmentPair();
        List newlist = jaxbObject.getAssignmentPair();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AssignmentCmd to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a AssignmentCmd to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitAssignmentCmd", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIdxRepSeqCompProc(net.sourceforge.czt.circus.ast.IdxRepSeqCompProc zedObject)
  {
    getLogger().entering(getClassName(), "visitIdxRepSeqCompProc", zedObject);

    IdxRepSeqCompProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIdxRepSeqCompProc();
      createElement_ = true;
      if (zedObject.getProcDef() != null) {
        Term term = zedObject.getProcDef();
        jaxbObject.setProcDef((ProcDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IdxRepSeqCompProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IdxRepSeqCompProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIdxRepSeqCompProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCSExprInter(net.sourceforge.czt.circus.ast.CSExprInter zedObject)
  {
    getLogger().entering(getClassName(), "visitCSExprInter", zedObject);

    CSExprInter jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCSExprInter();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CSExprInter to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCSExprInter", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitFormalParamProc(net.sourceforge.czt.circus.ast.FormalParamProc zedObject)
  {
    getLogger().entering(getClassName(), "visitFormalParamProc", zedObject);

    FormalParamProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createFormalParamProc();
      createElement_ = true;
      if (zedObject.getProcDef() != null) {
        Term term = zedObject.getProcDef();
        jaxbObject.setProcDef((ProcDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a FormalParamProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a FormalParamProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitFormalParamProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSkipAction(net.sourceforge.czt.circus.ast.SkipAction zedObject)
  {
    getLogger().entering(getClassName(), "visitSkipAction", zedObject);

    SkipAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSkipAction();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SkipAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SkipAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSkipAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRepInterleaveProc(net.sourceforge.czt.circus.ast.RepInterleaveProc zedObject)
  {
    getLogger().entering(getClassName(), "visitRepInterleaveProc", zedObject);

    RepInterleaveProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRepInterleaveProc();
      createElement_ = true;
      if (zedObject.getProcDef() != null) {
        Term term = zedObject.getProcDef();
        jaxbObject.setProcDef((ProcDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RepInterleaveProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a RepInterleaveProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitRepInterleaveProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRepSeqCompProc(net.sourceforge.czt.circus.ast.RepSeqCompProc zedObject)
  {
    getLogger().entering(getClassName(), "visitRepSeqCompProc", zedObject);

    RepSeqCompProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRepSeqCompProc();
      createElement_ = true;
      if (zedObject.getProcDef() != null) {
        Term term = zedObject.getProcDef();
        jaxbObject.setProcDef((ProcDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RepSeqCompProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a RepSeqCompProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitRepSeqCompProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRepExtChProc(net.sourceforge.czt.circus.ast.RepExtChProc zedObject)
  {
    getLogger().entering(getClassName(), "visitRepExtChProc", zedObject);

    RepExtChProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRepExtChProc();
      createElement_ = true;
      if (zedObject.getProcDef() != null) {
        Term term = zedObject.getProcDef();
        jaxbObject.setProcDef((ProcDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RepExtChProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a RepExtChProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitRepExtChProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSpecStmtCmd(net.sourceforge.czt.circus.ast.SpecStmtCmd zedObject)
  {
    getLogger().entering(getClassName(), "visitSpecStmtCmd", zedObject);

    SpecStmtCmd jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSpecStmtCmdElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createSpecStmtCmd();
      }
      {
        List list = zedObject.getFrame();
        List newlist = jaxbObject.getFrame();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = false;
      if (zedObject.getPre() != null) {
        Term term = zedObject.getPre();
        jaxbObject.setPre((Pred) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getPost() != null) {
        Term term = zedObject.getPost();
        jaxbObject.setPost((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SpecStmtCmd to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SpecStmtCmd to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSpecStmtCmd", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCallAction(net.sourceforge.czt.circus.ast.CallAction zedObject)
  {
    getLogger().entering(getClassName(), "visitCallAction", zedObject);

    CallAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCallActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCallAction();
      }
      createElement_ = true;
      if (zedObject.getRefName() != null) {
        Term term = zedObject.getRefName();
        jaxbObject.setRefName((RefName) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CallAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a CallAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCallAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIdxRepInterleaveProc(net.sourceforge.czt.circus.ast.IdxRepInterleaveProc zedObject)
  {
    getLogger().entering(getClassName(), "visitIdxRepInterleaveProc", zedObject);

    IdxRepInterleaveProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIdxRepInterleaveProc();
      createElement_ = true;
      if (zedObject.getProcDef() != null) {
        Term term = zedObject.getProcDef();
        jaxbObject.setProcDef((ProcDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IdxRepInterleaveProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IdxRepInterleaveProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIdxRepInterleaveProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitProcZPara(net.sourceforge.czt.circus.ast.ProcZPara zedObject)
  {
    getLogger().entering(getClassName(), "visitProcZPara", zedObject);

    ProcZPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createProcZParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createProcZPara();
      }
      createElement_ = true;
      if (zedObject.getPara() != null) {
        Term term = zedObject.getPara();
        jaxbObject.setPara((Para) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProcZPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ProcZPara to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitProcZPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitProcDesc(net.sourceforge.czt.circus.ast.ProcDesc zedObject)
  {
    getLogger().entering(getClassName(), "visitProcDesc", zedObject);

    ProcDesc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createProcDescElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createProcDesc();
      }
      createElement_ = false;
      if (zedObject.getStateSchemaAction() != null) {
        Term term = zedObject.getStateSchemaAction();
        jaxbObject.setStateSchemaAction((SchemaAction) term.accept(this));
      }
      {
        List list = zedObject.getProcPara();
        List newlist = jaxbObject.getProcPara();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getActionDef();
        List newlist = jaxbObject.getActionDef();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProcDesc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ProcDesc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitProcDesc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitProcDecl(net.sourceforge.czt.circus.ast.ProcDecl zedObject)
  {
    getLogger().entering(getClassName(), "visitProcDecl", zedObject);

    ProcDecl jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createProcDeclElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createProcDecl();
      }
      createElement_ = true;
      if (zedObject.getDeclName() != null) {
        Term term = zedObject.getDeclName();
        jaxbObject.setDeclName((DeclName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getProcDef() != null) {
        Term term = zedObject.getProcDef();
        jaxbObject.setProcDef((ProcDef) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProcDecl to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ProcDecl to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitProcDecl", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRepIntChProc(net.sourceforge.czt.circus.ast.RepIntChProc zedObject)
  {
    getLogger().entering(getClassName(), "visitRepIntChProc", zedObject);

    RepIntChProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRepIntChProc();
      createElement_ = true;
      if (zedObject.getProcDef() != null) {
        Term term = zedObject.getProcDef();
        jaxbObject.setProcDef((ProcDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RepIntChProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a RepIntChProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitRepIntChProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCircusSect(net.sourceforge.czt.circus.ast.CircusSect zedObject)
  {
    getLogger().entering(getClassName(), "visitCircusSect", zedObject);

    CircusSect jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCircusSectElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCircusSect();
      }
      createElement_ = false;
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
      {
        List list = zedObject.getParent();
        List newlist = jaxbObject.getParent();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getCircusPara();
        List newlist = jaxbObject.getCircusPara();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CircusSect to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCircusSect", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCSExprDiff(net.sourceforge.czt.circus.ast.CSExprDiff zedObject)
  {
    getLogger().entering(getClassName(), "visitCSExprDiff", zedObject);

    CSExprDiff jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCSExprDiff();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CSExprDiff to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCSExprDiff", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInterleaveProc(net.sourceforge.czt.circus.ast.InterleaveProc zedObject)
  {
    getLogger().entering(getClassName(), "visitInterleaveProc", zedObject);

    InterleaveProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInterleaveProc();
      createElement_ = true;
      if (zedObject.getLeftProc() != null) {
        Term term = zedObject.getLeftProc();
        jaxbObject.setLeftProc((ProcDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightProc() != null) {
        Term term = zedObject.getRightProc();
        jaxbObject.setRightProc((ProcDef) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InterleaveProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a InterleaveProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitInterleaveProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitParallelCompProc(net.sourceforge.czt.circus.ast.ParallelCompProc zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelCompProc", zedObject);

    ParallelCompProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createParallelCompProcElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createParallelCompProc();
      }
      createElement_ = true;
      if (zedObject.getLeftProc() != null) {
        Term term = zedObject.getLeftProc();
        jaxbObject.setLeftProc((ProcDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightProc() != null) {
        Term term = zedObject.getRightProc();
        jaxbObject.setRightProc((ProcDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getCSExpr() != null) {
        Term term = zedObject.getCSExpr();
        jaxbObject.setCSExpr((CSExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelCompProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ParallelCompProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitParallelCompProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSeqCompAction(net.sourceforge.czt.circus.ast.SeqCompAction zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqCompAction", zedObject);

    SeqCompAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSeqCompAction();
      createElement_ = true;
      if (zedObject.getLeftAction() != null) {
        Term term = zedObject.getLeftAction();
        jaxbObject.setLeftAction((ActionDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightAction() != null) {
        Term term = zedObject.getRightAction();
        jaxbObject.setRightAction((ActionDef) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqCompAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SeqCompAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSeqCompAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNSExprSet(net.sourceforge.czt.circus.ast.NSExprSet zedObject)
  {
    getLogger().entering(getClassName(), "visitNSExprSet", zedObject);

    NSExprSet jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNSExprSetElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createNSExprSet();
      }
      {
        List list = zedObject.getExpr();
        List newlist = jaxbObject.getExpr();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getRefName();
        List newlist = jaxbObject.getRefName();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NSExprSet to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitNSExprSet", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRepIntChAction(net.sourceforge.czt.circus.ast.RepIntChAction zedObject)
  {
    getLogger().entering(getClassName(), "visitRepIntChAction", zedObject);

    RepIntChAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRepIntChAction();
      createElement_ = true;
      if (zedObject.getActionDef() != null) {
        Term term = zedObject.getActionDef();
        jaxbObject.setActionDef((ActionDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RepIntChAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a RepIntChAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitRepIntChAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSchemaAction(net.sourceforge.czt.circus.ast.SchemaAction zedObject)
  {
    getLogger().entering(getClassName(), "visitSchemaAction", zedObject);

    SchemaAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSchemaActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createSchemaAction();
      }
      createElement_ = true;
      if (zedObject.getSchExpr() != null) {
        Term term = zedObject.getSchExpr();
        jaxbObject.setSchExpr((SchExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SchemaAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SchemaAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSchemaAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitActualParamProc(net.sourceforge.czt.circus.ast.ActualParamProc zedObject)
  {
    getLogger().entering(getClassName(), "visitActualParamProc", zedObject);

    ActualParamProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createActualParamProc();
      createElement_ = true;
      if (zedObject.getProcDef() != null) {
        Term term = zedObject.getProcDef();
        jaxbObject.setProcDef((ProcDef) term.accept(this));
      }
      {
        List list = zedObject.getExpr();
        List newlist = jaxbObject.getExpr();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActualParamProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ActualParamProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitActualParamProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIntChoiceAction(net.sourceforge.czt.circus.ast.IntChoiceAction zedObject)
  {
    getLogger().entering(getClassName(), "visitIntChoiceAction", zedObject);

    IntChoiceAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIntChoiceAction();
      createElement_ = true;
      if (zedObject.getLeftAction() != null) {
        Term term = zedObject.getLeftAction();
        jaxbObject.setLeftAction((ActionDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightAction() != null) {
        Term term = zedObject.getRightAction();
        jaxbObject.setRightAction((ActionDef) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntChoiceAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IntChoiceAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIntChoiceAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRepParallelCompProc(net.sourceforge.czt.circus.ast.RepParallelCompProc zedObject)
  {
    getLogger().entering(getClassName(), "visitRepParallelCompProc", zedObject);

    RepParallelCompProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRepParallelCompProcElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createRepParallelCompProc();
      }
      createElement_ = true;
      if (zedObject.getProcDef() != null) {
        Term term = zedObject.getProcDef();
        jaxbObject.setProcDef((ProcDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getCSExpr() != null) {
        Term term = zedObject.getCSExpr();
        jaxbObject.setCSExpr((CSExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RepParallelCompProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a RepParallelCompProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitRepParallelCompProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitInterleaveAction(net.sourceforge.czt.circus.ast.InterleaveAction zedObject)
  {
    getLogger().entering(getClassName(), "visitInterleaveAction", zedObject);

    InterleaveAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createInterleaveAction();
      createElement_ = true;
      if (zedObject.getLeftAction() != null) {
        Term term = zedObject.getLeftAction();
        jaxbObject.setLeftAction((ActionDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightAction() != null) {
        Term term = zedObject.getRightAction();
        jaxbObject.setRightAction((ActionDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getLeftNS() != null) {
        Term term = zedObject.getLeftNS();
        jaxbObject.setLeftNS((NSExpr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightNS() != null) {
        Term term = zedObject.getRightNS();
        jaxbObject.setRightNS((NSExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InterleaveAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a InterleaveAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitInterleaveAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCircusZPara(net.sourceforge.czt.circus.ast.CircusZPara zedObject)
  {
    getLogger().entering(getClassName(), "visitCircusZPara", zedObject);

    CircusZPara jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCircusZParaElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCircusZPara();
      }
      createElement_ = true;
      if (zedObject.getPara() != null) {
        Term term = zedObject.getPara();
        jaxbObject.setPara((Para) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CircusZPara to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a CircusZPara to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCircusZPara", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCSExprRef(net.sourceforge.czt.circus.ast.CSExprRef zedObject)
  {
    getLogger().entering(getClassName(), "visitCSExprRef", zedObject);

    CSExprRef jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCSExprRefElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCSExprRef();
      }
      {
        List list = zedObject.getExpr();
        List newlist = jaxbObject.getExpr();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getRefName() != null) {
        Term term = zedObject.getRefName();
        jaxbObject.setRefName((RefName) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CSExprRef to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCSExprRef", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIdxRepIntChProc(net.sourceforge.czt.circus.ast.IdxRepIntChProc zedObject)
  {
    getLogger().entering(getClassName(), "visitIdxRepIntChProc", zedObject);

    IdxRepIntChProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIdxRepIntChProc();
      createElement_ = true;
      if (zedObject.getProcDef() != null) {
        Term term = zedObject.getProcDef();
        jaxbObject.setProcDef((ProcDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IdxRepIntChProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IdxRepIntChProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIdxRepIntChProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRepInterleaveAction(net.sourceforge.czt.circus.ast.RepInterleaveAction zedObject)
  {
    getLogger().entering(getClassName(), "visitRepInterleaveAction", zedObject);

    RepInterleaveAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRepInterleaveAction();
      createElement_ = true;
      if (zedObject.getActionDef() != null) {
        Term term = zedObject.getActionDef();
        jaxbObject.setActionDef((ActionDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getLeftNS() != null) {
        Term term = zedObject.getLeftNS();
        jaxbObject.setLeftNS((NSExpr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightNS() != null) {
        Term term = zedObject.getRightNS();
        jaxbObject.setRightNS((NSExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RepInterleaveAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a RepInterleaveAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitRepInterleaveAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCSExprUnion(net.sourceforge.czt.circus.ast.CSExprUnion zedObject)
  {
    getLogger().entering(getClassName(), "visitCSExprUnion", zedObject);

    CSExprUnion jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCSExprUnion();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CSExprUnion to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCSExprUnion", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitFormalParamAction(net.sourceforge.czt.circus.ast.FormalParamAction zedObject)
  {
    getLogger().entering(getClassName(), "visitFormalParamAction", zedObject);

    FormalParamAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createFormalParamAction();
      createElement_ = true;
      if (zedObject.getActionDef() != null) {
        Term term = zedObject.getActionDef();
        jaxbObject.setActionDef((ActionDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a FormalParamAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a FormalParamAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitFormalParamAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRepSeqCompAction(net.sourceforge.czt.circus.ast.RepSeqCompAction zedObject)
  {
    getLogger().entering(getClassName(), "visitRepSeqCompAction", zedObject);

    RepSeqCompAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRepSeqCompAction();
      createElement_ = true;
      if (zedObject.getActionDef() != null) {
        Term term = zedObject.getActionDef();
        jaxbObject.setActionDef((ActionDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RepSeqCompAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a RepSeqCompAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitRepSeqCompAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNSExprRef(net.sourceforge.czt.circus.ast.NSExprRef zedObject)
  {
    getLogger().entering(getClassName(), "visitNSExprRef", zedObject);

    NSExprRef jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNSExprRefElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createNSExprRef();
      }
      {
        List list = zedObject.getExpr();
        List newlist = jaxbObject.getExpr();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = true;
      if (zedObject.getRefName() != null) {
        Term term = zedObject.getRefName();
        jaxbObject.setRefName((RefName) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NSExprRef to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitNSExprRef", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIntChoiceProc(net.sourceforge.czt.circus.ast.IntChoiceProc zedObject)
  {
    getLogger().entering(getClassName(), "visitIntChoiceProc", zedObject);

    IntChoiceProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIntChoiceProc();
      createElement_ = true;
      if (zedObject.getLeftProc() != null) {
        Term term = zedObject.getLeftProc();
        jaxbObject.setLeftProc((ProcDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightProc() != null) {
        Term term = zedObject.getRightProc();
        jaxbObject.setRightProc((ProcDef) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntChoiceProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IntChoiceProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIntChoiceProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRepParallelCompAction(net.sourceforge.czt.circus.ast.RepParallelCompAction zedObject)
  {
    getLogger().entering(getClassName(), "visitRepParallelCompAction", zedObject);

    RepParallelCompAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRepParallelCompActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createRepParallelCompAction();
      }
      createElement_ = true;
      if (zedObject.getActionDef() != null) {
        Term term = zedObject.getActionDef();
        jaxbObject.setActionDef((ActionDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getLeftNS() != null) {
        Term term = zedObject.getLeftNS();
        jaxbObject.setLeftNS((NSExpr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightNS() != null) {
        Term term = zedObject.getRightNS();
        jaxbObject.setRightNS((NSExpr) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getCSExpr() != null) {
        Term term = zedObject.getCSExpr();
        jaxbObject.setCSExpr((CSExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RepParallelCompAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a RepParallelCompAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitRepParallelCompAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitStopAction(net.sourceforge.czt.circus.ast.StopAction zedObject)
  {
    getLogger().entering(getClassName(), "visitStopAction", zedObject);

    StopAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createStopAction();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a StopAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a StopAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitStopAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitExtChoiceAction(net.sourceforge.czt.circus.ast.ExtChoiceAction zedObject)
  {
    getLogger().entering(getClassName(), "visitExtChoiceAction", zedObject);

    ExtChoiceAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createExtChoiceAction();
      createElement_ = true;
      if (zedObject.getLeftAction() != null) {
        Term term = zedObject.getLeftAction();
        jaxbObject.setLeftAction((ActionDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightAction() != null) {
        Term term = zedObject.getRightAction();
        jaxbObject.setRightAction((ActionDef) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExtChoiceAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ExtChoiceAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitExtChoiceAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitFormalGenProc(net.sourceforge.czt.circus.ast.FormalGenProc zedObject)
  {
    getLogger().entering(getClassName(), "visitFormalGenProc", zedObject);

    FormalGenProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createFormalGenProcElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createFormalGenProc();
      }
      createElement_ = true;
      if (zedObject.getProcDef() != null) {
        Term term = zedObject.getProcDef();
        jaxbObject.setProcDef((ProcDef) term.accept(this));
      }
      {
        List list = zedObject.getFormalGenTypes();
        List newlist = jaxbObject.getFormalGenTypes();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a FormalGenProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a FormalGenProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitFormalGenProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitActualGenProc(net.sourceforge.czt.circus.ast.ActualGenProc zedObject)
  {
    getLogger().entering(getClassName(), "visitActualGenProc", zedObject);

    ActualGenProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createActualGenProc();
      createElement_ = true;
      if (zedObject.getProcDef() != null) {
        Term term = zedObject.getProcDef();
        jaxbObject.setProcDef((ProcDef) term.accept(this));
      }
      {
        List list = zedObject.getExpr();
        List newlist = jaxbObject.getExpr();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActualGenProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ActualGenProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitActualGenProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitHideProc(net.sourceforge.czt.circus.ast.HideProc zedObject)
  {
    getLogger().entering(getClassName(), "visitHideProc", zedObject);

    HideProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createHideProcElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createHideProc();
      }
      createElement_ = true;
      if (zedObject.getProcDef() != null) {
        Term term = zedObject.getProcDef();
        jaxbObject.setProcDef((ProcDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getCSExpr() != null) {
        Term term = zedObject.getCSExpr();
        jaxbObject.setCSExpr((CSExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a HideProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a HideProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitHideProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitSeqCompProc(net.sourceforge.czt.circus.ast.SeqCompProc zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqCompProc", zedObject);

    SeqCompProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createSeqCompProc();
      createElement_ = true;
      if (zedObject.getLeftProc() != null) {
        Term term = zedObject.getLeftProc();
        jaxbObject.setLeftProc((ProcDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getRightProc() != null) {
        Term term = zedObject.getRightProc();
        jaxbObject.setRightProc((ProcDef) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqCompProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a SeqCompProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitSeqCompProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitVarDeclCmd(net.sourceforge.czt.circus.ast.VarDeclCmd zedObject)
  {
    getLogger().entering(getClassName(), "visitVarDeclCmd", zedObject);

    VarDeclCmd jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createVarDeclCmdElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createVarDeclCmd();
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getActionDef() != null) {
        Term term = zedObject.getActionDef();
        jaxbObject.setActionDef((ActionDef) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a VarDeclCmd to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a VarDeclCmd to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitVarDeclCmd", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIdxRepExtChProc(net.sourceforge.czt.circus.ast.IdxRepExtChProc zedObject)
  {
    getLogger().entering(getClassName(), "visitIdxRepExtChProc", zedObject);

    IdxRepExtChProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIdxRepExtChProc();
      createElement_ = true;
      if (zedObject.getProcDef() != null) {
        Term term = zedObject.getProcDef();
        jaxbObject.setProcDef((ProcDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IdxRepExtChProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IdxRepExtChProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIdxRepExtChProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitPrefixingAction(net.sourceforge.czt.circus.ast.PrefixingAction zedObject)
  {
    getLogger().entering(getClassName(), "visitPrefixingAction", zedObject);

    PrefixingAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createPrefixingActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createPrefixingAction();
      }
      createElement_ = true;
      if (zedObject.getActionDef() != null) {
        Term term = zedObject.getActionDef();
        jaxbObject.setActionDef((ActionDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getComm() != null) {
        Term term = zedObject.getComm();
        jaxbObject.setComm((Comm) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PrefixingAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a PrefixingAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitPrefixingAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIntantiationProc(net.sourceforge.czt.circus.ast.IntantiationProc zedObject)
  {
    getLogger().entering(getClassName(), "visitIntantiationProc", zedObject);

    IntantiationProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIntantiationProc();
      createElement_ = true;
      if (zedObject.getProcDef() != null) {
        Term term = zedObject.getProcDef();
        jaxbObject.setProcDef((ProcDef) term.accept(this));
      }
      {
        List list = zedObject.getExpr();
        List newlist = jaxbObject.getExpr();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntantiationProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IntantiationProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIntantiationProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitComm(net.sourceforge.czt.circus.ast.Comm zedObject)
  {
    getLogger().entering(getClassName(), "visitComm", zedObject);

    Comm jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCommElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createComm();
      }
      createElement_ = true;
      if (zedObject.getRefName() != null) {
        Term term = zedObject.getRefName();
        jaxbObject.setRefName((RefName) term.accept(this));
      }
      {
        List list = zedObject.getCommParam();
        List newlist = jaxbObject.getCommParam();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      createElement_ = false;
      if (zedObject.getCommType() != null) {
        jaxbObject.setCommType(zedObject.getCommType().toString());
      }
      createElement_ = false;
      if (zedObject.getMultiSych() != null) {
        jaxbObject.setMultiSych(zedObject.getMultiSych());
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Comm to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a Comm to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitComm", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCSDecl(net.sourceforge.czt.circus.ast.CSDecl zedObject)
  {
    getLogger().entering(getClassName(), "visitCSDecl", zedObject);

    CSDecl jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCSDeclElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCSDecl();
      }
      createElement_ = true;
      if (zedObject.getDeclName() != null) {
        Term term = zedObject.getDeclName();
        jaxbObject.setDeclName((DeclName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getCSExpr() != null) {
        Term term = zedObject.getCSExpr();
        jaxbObject.setCSExpr((CSExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CSDecl to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a CSDecl to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCSDecl", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitAssignmentPair(net.sourceforge.czt.circus.ast.AssignmentPair zedObject)
  {
    getLogger().entering(getClassName(), "visitAssignmentPair", zedObject);

    AssignmentPair jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createAssignmentPairElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createAssignmentPair();
      }
      createElement_ = false;
      if (zedObject.getLHS() != null) {
        Term term = zedObject.getLHS();
        jaxbObject.setLHS((RefName) term.accept(this));
      }
      createElement_ = false;
      if (zedObject.getRHS() != null) {
        Term term = zedObject.getRHS();
        jaxbObject.setRHS((Expr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AssignmentPair to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitAssignmentPair", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitNSExprDiff(net.sourceforge.czt.circus.ast.NSExprDiff zedObject)
  {
    getLogger().entering(getClassName(), "visitNSExprDiff", zedObject);

    NSExprDiff jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createNSExprDiff();
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NSExprDiff to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitNSExprDiff", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitRenameProc(net.sourceforge.czt.circus.ast.RenameProc zedObject)
  {
    getLogger().entering(getClassName(), "visitRenameProc", zedObject);

    RenameProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createRenameProcElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createRenameProc();
      }
      createElement_ = true;
      if (zedObject.getProcDef() != null) {
        Term term = zedObject.getProcDef();
        jaxbObject.setProcDef((ProcDef) term.accept(this));
      }
      {
        List list = zedObject.getOldNames();
        List newlist = jaxbObject.getOldNames();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
      {
        List list = zedObject.getNewNames();
        List newlist = jaxbObject.getNewNames();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = false;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RenameProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a RenameProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitRenameProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitActionDecl(net.sourceforge.czt.circus.ast.ActionDecl zedObject)
  {
    getLogger().entering(getClassName(), "visitActionDecl", zedObject);

    ActionDecl jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createActionDeclElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createActionDecl();
      }
      createElement_ = true;
      if (zedObject.getDeclName() != null) {
        Term term = zedObject.getDeclName();
        jaxbObject.setDeclName((DeclName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getActionDef() != null) {
        Term term = zedObject.getActionDef();
        jaxbObject.setActionDef((ActionDef) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActionDecl to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ActionDecl to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitActionDecl", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitActualParamAction(net.sourceforge.czt.circus.ast.ActualParamAction zedObject)
  {
    getLogger().entering(getClassName(), "visitActualParamAction", zedObject);

    ActualParamAction jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createActualParamActionElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createActualParamAction();
      }
      createElement_ = true;
      if (zedObject.getActionDef() != null) {
        Term term = zedObject.getActionDef();
        jaxbObject.setActionDef((ActionDef) term.accept(this));
      }
      {
        List list = zedObject.getExpr();
        List newlist = jaxbObject.getExpr();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
          Object o = iter.next();
          if (o instanceof Term) {
            createElement_ = true;
            o = ((Term) o).accept(this);
          }
          newlist.add(o);
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActualParamAction to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ActualParamAction to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitActualParamAction", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitCommIn(net.sourceforge.czt.circus.ast.CommIn zedObject)
  {
    getLogger().entering(getClassName(), "visitCommIn", zedObject);

    CommIn jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createCommInElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createCommIn();
      }
      createElement_ = true;
      if (zedObject.getRefName() != null) {
        Term term = zedObject.getRefName();
        jaxbObject.setRefName((RefName) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getPred() != null) {
        Term term = zedObject.getPred();
        jaxbObject.setPred((Pred) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CommIn to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a CommIn to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitCommIn", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitIndexedProc(net.sourceforge.czt.circus.ast.IndexedProc zedObject)
  {
    getLogger().entering(getClassName(), "visitIndexedProc", zedObject);

    IndexedProc jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createIndexedProc();
      createElement_ = true;
      if (zedObject.getProcDef() != null) {
        Term term = zedObject.getProcDef();
        jaxbObject.setProcDef((ProcDef) term.accept(this));
      }
      createElement_ = true;
      if (zedObject.getVarDecl() != null) {
        Term term = zedObject.getVarDecl();
        jaxbObject.setVarDecl((VarDecl) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IndexedProc to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a IndexedProc to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitIndexedProc", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }

  public Object visitChannelDeclSExpr(net.sourceforge.czt.circus.ast.ChannelDeclSExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitChannelDeclSExpr", zedObject);

    ChannelDeclSExpr jaxbObject = null;
    try {
      jaxbObject = objectFactory_.createChannelDeclSExprElement();
      if (!createElement_) {
        jaxbObject = objectFactory_.createChannelDeclSExpr();
      }
      createElement_ = true;
      if (zedObject.getSchExpr() != null) {
        Term term = zedObject.getSchExpr();
        jaxbObject.setSchExpr((SchExpr) term.accept(this));
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ChannelDeclSExpr to the corresponding "
        + "Jaxb class";
      throw new CztException(message, exception);
    }
    try {
      if (zedObject.getAnns() != null) {
        List list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
    }
    catch (Exception exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform annotations of a ChannelDeclSExpr to the corresponding "
        + "Jaxb class";
      getLogger().warning(message);
      // throw new CztException(message, exception);
    }

    getLogger().exiting(getClassName(), "visitChannelDeclSExpr", jaxbObject);
    createElement_ = true;
    return jaxbObject;
  }
}
