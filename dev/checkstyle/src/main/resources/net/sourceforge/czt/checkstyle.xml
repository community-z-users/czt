<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.1//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_1.dtd">

<!-- Checkstyle configuration file -->

<module name="Checker">
    <!-- ************************************************************    -->
    <!-- Checks that a package.html file exists for each package.        -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#PackageHtml    -->
    <!-- ************************************************************    -->
    <module name="PackageHtml">
      <property name="severity" value="warning"/>
    </module>

    <!-- ************************************************************    -->
    <!-- Checks whether files end with a new line.                       -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile-->
    <!-- ************************************************************    -->
    <module name="NewlineAtEndOfFile"/>

    <module name="TreeWalker">
        <!-- ************************************************** -->
        <!-- Checks for Javadoc comments.                       -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html   -->
        <!-- ************************************************** -->

        <!-- Checks Javadoc comments for class and interface
             definitions. -->
        <module name="JavadocType">
          <property name="severity" value="warning"/>
        </module>

        <!-- Validates Javadoc comments to help ensure they are well
             formed. -->
        <module name="JavadocStyle">
          <property name="severity" value="warning"/>
        </module>

        <!-- ************************************************** -->
        <!-- Checks for Naming Conventions.                     -->
        <!-- See http://checkstyle.sf.net/config_naming.html    -->
        <!-- ************************************************** -->

        <!-- Names representing packages should be in all lower case
             (rule 2) -->
        <module name="PackageName">
          <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
        </module>

        <!-- Names representing types must be nouns and written in
             mixed case starting with upper case. (rule 3) -->
        <module name="TypeName"/>

        <!-- Variable names must be in mixed case starting with lower case.
             (rule 4) -->
        <!-- local, non-final variables -->
        <module name="LocalVariableName"/>
        <!-- local, final variables -->
        <module name="LocalFinalVariableName"/>
        <!-- parameters -->
        <module name="ParameterName"/>

        <!-- Names representing constants (final variables) must be
             all uppercase using underscore to separate words. (rule 5)-->
        <!-- static, final fields -->
        <module name="ConstantName"/>

        <!-- Private class variables should have _ suffix. (rule 8)
             Extended to: all method member variables must have _ suffix
             -->
        <!-- non-static fields -->
        <module name="MemberName">
          <property name="format" value="^[a-z][a-zA-Z0-9]*_$"/>
        </module>
        <!-- static, non-final fields -->
        <module name="StaticVariableName">
          <property name="format" value="^[a-z][a-zA-Z0-9]*_$"/>
        </module>

        <!-- Names representing methods must be verbs and written
             in mixed case starting with lower case. (rule 6) -->
        <module name="MethodName"/>

        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports">
          <property name="severity" value="info"/>
        </module>


        <!-- ************************************************** -->
        <!-- Checks for Size Violations.                        -->
        <!-- See http://checkstyle.sf.net/config_sizes.html     -->
        <!-- ************************************************** -->

        <module name="FileLength">
          <property name="severity" value="info"/>
        </module>

        <!-- File content must be kept within 80 columns. (rule 32) -->
        <module name="LineLength"/>

        <module name="MethodLength">
          <property name="severity" value="info"/>
        </module>

        <module name="ParameterNumber">
          <property name="severity" value="info"/>
        </module>


        <!-- ************************************************** -->
        <!-- Checks for whitespace                              -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html-->
        <!-- ************************************************** -->

        <!-- Special characters like TAB and page break must be avoided.
             (rule 33) -->
        <module name="TabCharacter"/>

        <!-- Commas should be followed by a white space.
             Semicolons in for statements should be followed by
             a space character.
             (rule 69) -->
        <module name="WhitespaceAfter">
          <property name="tokens" value="SEMI, TYPECAST"/>
        </module>

        <!-- Conventional operators should be surrounded
             by a space character.
             (rule 69) -->
        <module name="WhitespaceAround">
          <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND"/>
        </module>


        <!-- ************************************************** -->
        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <!-- ************************************************** -->
        <module name="ModifierOrder"/>

        <module name="RedundantModifier">
          <property name="severity" value="warning"/>
        </module>


        <!-- ************************************************** -->
        <!-- Checks for blocks. You know, those {}'s            -->
        <!-- See http://checkstyle.sf.net/config_blocks.html    -->
        <!-- ************************************************** -->

        <!-- class or interface declarations (rule 59),
             method declarations (rule 60) -->
        <module name="LeftCurly">
          <property name="option" value="nl"/>
          <property name="tokens" value="CLASS_DEF, CTOR_DEF, INTERFACE_DEF, METHOD_DEF"/>
        </module>

        <!-- (rules 61 to 68) -->
        <module name="RightCurly">
          <property name="option" value="alone"/>
          <property name="tokens" value="LITERAL_CATCH, LITERAL_ELSE, LITERAL_TRY"/>
        </module>


        <!-- ************************************************** -->
        <!-- Checks for common coding problems                  -->
        <!-- See http://checkstyle.sf.net/config_coding.html    -->
        <!-- ************************************************** -->

        <module name="DeclarationOrder">
          <property name="severity" value="info"/>
        </module>

        <module name="DoubleCheckedLocking">
          <property name="severity" value="info"/>
        </module>

        <!--  Detects empty statements (standalone ;). -->
        <module name="EmptyStatement">
          <property name="severity" value="info"/>
        </module>

        <!--  Checks that classes that override equals()
             also override hashCode(). -->
        <module name="EqualsHashCode">
          <property name="severity" value="info"/>
        </module>

        <!-- Checks that a local variable or a parameter does not shadow
             a field that is defined in the same class. -->
        <module name="HiddenField">
          <property name="severity" value="info"/>
        </module>

        <!-- Checks for assignments in subexpressions,
             such as in String s = Integer.toString(i = 2);. -->
        <module name="InnerAssignment">
          <property name="severity" value="info"/>
        </module>

        <!-- The use of magic numbers in the code should be avoided.
             Numbers other than 0 and 1 should be considered declared
             as named constants instead. (rule 54) -->
        <module name="MagicNumber"/>

        <!-- Checks that switch statement has "default" clause. -->
        <module name="MissingSwitchDefault">
          <property name="severity" value="info"/>
        </module>

        <module name="ParameterAssignment">
          <property name="severity" value="info"/>
        </module>

        <module name="RedundantThrows">
          <property name="severity" value="info"/>
        </module>

        <!-- Complex conditional expressions must be avoided.
             Introduce temporary boolean variables instead. (rule 50) -->
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>


        <!-- ************************************************** -->
        <!-- Checks for class design                            -->
        <!-- See http://checkstyle.sf.net/config_design.html    -->
        <!-- ************************************************** -->

        <!-- Checks that a class which has only private constructors
             is declared as final. -->
        <module name="FinalClass">
          <property name="severity" value="info"/>
        </module>

        <!--  Make sure that utility classes (classes that contain
             only static methods) do not have a public constructor. -->
        <module name="HideUtilityClassConstructor">
          <property name="severity" value="info"/>
        </module>

        <!-- Class variables should never be declared public.
             (rule 42) -->
        <module name="VisibilityModifier">
          <property name="publicMemberPattern" value="^$"/>
          <property name="packageAllowed" value="true"/>
          <property name="protectedAllowed" value="true"/>
        </module>


        <!-- ************************************************** -->
        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <!-- ************************************************** -->

        <module name="GenericIllegalRegexp">
          <property name="severity" value="info"/>
          <property name="format" value="\s+$"/>
          <property name="message" value="Line has trailing spaces."/>
        </module>

        <!-- Basic indentation should be 2. (rule 57) -->
        <module name="Indentation">
          <property name="basicOffset" value="2"/>
          <property name="caseIndent" value="2"/>
        </module>

        <!-- A check for TODO: comments -->
        <module name="TodoComment">
          <property name="severity" value="info"/>
        </module>

        <!--  Checks for uncommented main() methods (debugging leftovers). -->
        <module name="UncommentedMain">
          <property name="severity" value="info"/>
        </module>
      </module>
</module>

